// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#include "dota_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fshared_5fenums_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACombatLogEntry_dota_5fshared_5fenums_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_econ_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgEconPlayerStrangeCountAdjustment_econ_5fgcmessages_2eproto;
namespace proto {
namespace dota {
class CMsgPoorNetworkConditions_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPoorNetworkConditions_Player> _instance;
} _CMsgPoorNetworkConditions_Player_default_instance_;
class CMsgPoorNetworkConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPoorNetworkConditions> _instance;
} _CMsgPoorNetworkConditions_default_instance_;
class CMsgGameserverCrashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameserverCrash> _instance;
} _CMsgGameserverCrash_default_instance_;
class CMsgConnectedPlayers_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectedPlayers_Player> _instance;
} _CMsgConnectedPlayers_Player_default_instance_;
class CMsgConnectedPlayersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectedPlayers> _instance;
} _CMsgConnectedPlayers_default_instance_;
class CMsgGameServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerInfo> _instance;
} _CMsgGameServerInfo_default_instance_;
class CMsgLeaverDetectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaverDetected> _instance;
} _CMsgLeaverDetected_default_instance_;
class CMsgLeaverDetectedResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaverDetectedResponse> _instance;
} _CMsgLeaverDetectedResponse_default_instance_;
class CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyFinalPlayerStats> _instance;
} _CMsgDOTAFantasyFinalPlayerStats_default_instance_;
class CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLivePlayerStats> _instance;
} _CMsgDOTAFantasyLivePlayerStats_default_instance_;
class CMsgDOTAFantasyMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMatch> _instance;
} _CMsgDOTAFantasyMatch_default_instance_;
class CMsgDOTAUpdateClippyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAUpdateClippy> _instance;
} _CMsgDOTAUpdateClippy_default_instance_;
class CMsgServerToGCRealtimeStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRealtimeStats> _instance;
} _CMsgServerToGCRealtimeStats_default_instance_;
class CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerRealtimeStatsStartStop> _instance;
} _CMsgGCToServerRealtimeStatsStartStop_default_instance_;
class CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerUpdateSteamBroadcasting> _instance;
} _CMsgGCToServerUpdateSteamBroadcasting_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData> _instance;
} _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CTeam_CPlayer> _instance;
} _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
class CMsgGameMatchSignOut_CTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CTeam> _instance;
} _CMsgGameMatchSignOut_CTeam_default_instance_;
class CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CAdditionalSignoutMsg> _instance;
} _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_;
class CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CSocialFeedMatchEvent> _instance;
} _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_;
class CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CCustomGameData> _instance;
} _CMsgGameMatchSignOut_CCustomGameData_default_instance_;
class CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_EventGameLeaderboardEntry> _instance;
} _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_;
class CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_WardPlacement> _instance;
} _CMsgGameMatchSignOut_WardPlacement_default_instance_;
class CMsgGameMatchSignOutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut> _instance;
} _CMsgGameMatchSignOut_default_instance_;
class CMsgSignOutDraftInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutDraftInfo> _instance;
} _CMsgSignOutDraftInfo_default_instance_;
class CMsgSignOutBotInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutBotInfo> _instance;
} _CMsgSignOutBotInfo_default_instance_;
class CMsgSignOutPlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutPlayerStats> _instance;
} _CMsgSignOutPlayerStats_default_instance_;
class CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunicationSummary_PlayerCommunication> _instance;
} _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_;
class CMsgSignOutCommunicationSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunicationSummary> _instance;
} _CMsgSignOutCommunicationSummary_default_instance_;
class CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignoutResponse_PlayerMetadata> _instance;
} _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_;
class CMsgGameMatchSignoutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignoutResponse> _instance;
} _CMsgGameMatchSignoutResponse_default_instance_;
class CMsgTimedRewardContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTimedRewardContainer> _instance;
} _CMsgTimedRewardContainer_default_instance_;
class CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOutPermissionRequest> _instance;
} _CMsgGameMatchSignOutPermissionRequest_default_instance_;
class CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOutPermissionResponse> _instance;
} _CMsgGameMatchSignOutPermissionResponse_default_instance_;
class CMsgGameMatchSignOutEventGameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOutEventGameData> _instance;
} _CMsgGameMatchSignOutEventGameData_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility> _instance;
} _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate_Team_Player> _instance;
} _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
class CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate_Team> _instance;
} _CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
class CMsgDOTALiveScoreboardUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate> _instance;
} _CMsgDOTALiveScoreboardUpdate_default_instance_;
class CMsgDOTARequestPlayerResourcesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestPlayerResources> _instance;
} _CMsgDOTARequestPlayerResources_default_instance_;
class CMsgDOTARequestPlayerResourcesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestPlayerResourcesResponse> _instance;
} _CMsgDOTARequestPlayerResourcesResponse_default_instance_;
class CMsgDOTARequestBatchPlayerResourcesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestBatchPlayerResources> _instance;
} _CMsgDOTARequestBatchPlayerResources_default_instance_;
class CMsgDOTARequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestBatchPlayerResourcesResponse_Result> _instance;
} _CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_;
class CMsgDOTARequestBatchPlayerResourcesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestBatchPlayerResourcesResponse> _instance;
} _CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_;
class CMsgDOTAPlayerFailedToConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPlayerFailedToConnect> _instance;
} _CMsgDOTAPlayerFailedToConnect_default_instance_;
class CMsgGCToRelayConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToRelayConnect> _instance;
} _CMsgGCToRelayConnect_default_instance_;
class CMsgGCGCToLANServerRelayConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGCToLANServerRelayConnect> _instance;
} _CMsgGCGCToLANServerRelayConnect_default_instance_;
class CMsgGCToRelayConnectResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToRelayConnectResponse> _instance;
} _CMsgGCToRelayConnectResponse_default_instance_;
class CMsgGCBanStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBanStatusRequest> _instance;
} _CMsgGCBanStatusRequest_default_instance_;
class CMsgGCBanStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBanStatusResponse> _instance;
} _CMsgGCBanStatusResponse_default_instance_;
class CMsgTournamentItemEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTournamentItemEvent> _instance;
} _CMsgTournamentItemEvent_default_instance_;
class CMsgTournamentItemEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTournamentItemEventResponse> _instance;
} _CMsgTournamentItemEventResponse_default_instance_;
class CMsgTeamFanfareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTeamFanfare> _instance;
} _CMsgTeamFanfare_default_instance_;
class CMsgResponseTeamFanfareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgResponseTeamFanfare> _instance;
} _CMsgResponseTeamFanfare_default_instance_;
class CMsgGameServerUploadSaveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerUploadSaveGame> _instance;
} _CMsgGameServerUploadSaveGame_default_instance_;
class CMsgGameServerSaveGameResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerSaveGameResult> _instance;
} _CMsgGameServerSaveGameResult_default_instance_;
class CMsgGameServerGetLoadGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerGetLoadGame> _instance;
} _CMsgGameServerGetLoadGame_default_instance_;
class CMsgGameServerGetLoadGameResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerGetLoadGameResult> _instance;
} _CMsgGameServerGetLoadGameResult_default_instance_;
class CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGenerateDiretidePrizeList> _instance;
} _CMsgDOTAGenerateDiretidePrizeList_default_instance_;
class CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGenerateDiretidePrizeListResponse> _instance;
} _CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_;
class CMsgDOTARewardDiretidePrizesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARewardDiretidePrizes> _instance;
} _CMsgDOTARewardDiretidePrizes_default_instance_;
class CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTADiretidePrizesRewardedResponse> _instance;
} _CMsgDOTADiretidePrizesRewardedResponse_default_instance_;
class CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAwardEventPoints_AwardPoints> _instance;
} _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_;
class CMsgDOTAAwardEventPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAwardEventPoints> _instance;
} _CMsgDOTAAwardEventPoints_default_instance_;
class CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDropsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops> _instance;
} _CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_;
class CMsgServerToGCSignoutAwardAdditionalDropsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCSignoutAwardAdditionalDrops> _instance;
} _CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_;
class CMsgDOTAFrostivusTimeElapsed_UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFrostivusTimeElapsed_User> _instance;
} _CMsgDOTAFrostivusTimeElapsed_User_default_instance_;
class CMsgDOTAFrostivusTimeElapsedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFrostivusTimeElapsed> _instance;
} _CMsgDOTAFrostivusTimeElapsed_default_instance_;
class CMsgGCToServerPingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPingRequest> _instance;
} _CMsgGCToServerPingRequest_default_instance_;
class CMsgGCToServerPingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPingResponse> _instance;
} _CMsgGCToServerPingResponse_default_instance_;
class CMsgGCToServerConsoleCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerConsoleCommand> _instance;
} _CMsgGCToServerConsoleCommand_default_instance_;
class CMsgServerGetEventPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGetEventPoints> _instance;
} _CMsgServerGetEventPoints_default_instance_;
class CMsgServerGetEventPointsResponse_PointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGetEventPointsResponse_Points> _instance;
} _CMsgServerGetEventPointsResponse_Points_default_instance_;
class CMsgServerGetEventPointsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGetEventPointsResponse> _instance;
} _CMsgServerGetEventPointsResponse_default_instance_;
class CMsgServerGrantSurveyPermission_SurveyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGrantSurveyPermission_Survey> _instance;
} _CMsgServerGrantSurveyPermission_Survey_default_instance_;
class CMsgServerGrantSurveyPermissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGrantSurveyPermission> _instance;
} _CMsgServerGrantSurveyPermission_default_instance_;
class CMsgServerGrantSurveyPermissionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGrantSurveyPermissionResponse> _instance;
} _CMsgServerGrantSurveyPermissionResponse_default_instance_;
class CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchConnectionStats_Player> _instance;
} _CMsgServerToGCMatchConnectionStats_Player_default_instance_;
class CMsgServerToGCMatchConnectionStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchConnectionStats> _instance;
} _CMsgServerToGCMatchConnectionStats_default_instance_;
class CMsgServerGCUpdateSpectatorCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGCUpdateSpectatorCount> _instance;
} _CMsgServerGCUpdateSpectatorCount_default_instance_;
class CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSerializedCombatLog_Dictionary_DictString> _instance;
} _CSerializedCombatLog_Dictionary_DictString_default_instance_;
class CSerializedCombatLog_DictionaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSerializedCombatLog_Dictionary> _instance;
} _CSerializedCombatLog_Dictionary_default_instance_;
class CSerializedCombatLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSerializedCombatLog> _instance;
} _CSerializedCombatLog_default_instance_;
class CMsgServerToGCGetAdditionalEquipsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetAdditionalEquips> _instance;
} _CMsgServerToGCGetAdditionalEquips_default_instance_;
class CMsgServerToGCGetAdditionalEquipsResponse_CUserEquipsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips> _instance;
} _CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_;
class CMsgServerToGCGetAdditionalEquipsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetAdditionalEquipsResponse> _instance;
} _CMsgServerToGCGetAdditionalEquipsResponse_default_instance_;
class CMsgServerToGCGetProfileCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetProfileCard> _instance;
} _CMsgServerToGCGetProfileCard_default_instance_;
class CMsgServerToGCGetProfileCardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetProfileCardResponse> _instance;
} _CMsgServerToGCGetProfileCardResponse_default_instance_;
class CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCVictoryPredictions_Record> _instance;
} _CMsgServerToGCVictoryPredictions_Record_default_instance_;
class CMsgServerToGCVictoryPredictionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCVictoryPredictions> _instance;
} _CMsgServerToGCVictoryPredictions_default_instance_;
class CMsgSuspiciousActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSuspiciousActivity> _instance;
} _CMsgSuspiciousActivity_default_instance_;
class CMsgServerToGCRequestStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRequestStatus> _instance;
} _CMsgServerToGCRequestStatus_default_instance_;
class CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRequestStatus_Response> _instance;
} _CMsgServerToGCRequestStatus_Response_default_instance_;
class CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutAssassinMiniGameInfo> _instance;
} _CMsgSignOutAssassinMiniGameInfo_default_instance_;
class CMsgServerToGCGetIngameEventDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetIngameEventData> _instance;
} _CMsgServerToGCGetIngameEventData_default_instance_;
class CMsgGCToServerIngameEventDataOraclePADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerIngameEventDataOraclePA> _instance;
} _CMsgGCToServerIngameEventDataOraclePA_default_instance_;
class CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCKillSummaries_KillSummary> _instance;
} _CMsgServerToGCKillSummaries_KillSummary_default_instance_;
class CMsgServerToGCKillSummariesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCKillSummaries> _instance;
} _CMsgServerToGCKillSummaries_default_instance_;
class CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPredictionResult_Prediction> _instance;
} _CMsgGCToServerPredictionResult_Prediction_default_instance_;
class CMsgGCToServerPredictionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPredictionResult> _instance;
} _CMsgGCToServerPredictionResult_default_instance_;
class CMsgServerToGCLockCharmTradingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCLockCharmTrading> _instance;
} _CMsgServerToGCLockCharmTrading_default_instance_;
class CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutUpdatePlayerChallenge_Challenge> _instance;
} _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_;
class CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutUpdatePlayerChallenge> _instance;
} _CMsgSignOutUpdatePlayerChallenge_default_instance_;
class CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRerollPlayerChallenge> _instance;
} _CMsgServerToGCRerollPlayerChallenge_default_instance_;
class CMsgServerToGCHoldEventPoints_HoldRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCHoldEventPoints_HoldRequest> _instance;
} _CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_;
class CMsgServerToGCHoldEventPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCHoldEventPoints> _instance;
} _CMsgServerToGCHoldEventPoints_default_instance_;
class CMsgSignOutReleaseEventPointHoldsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutReleaseEventPointHolds> _instance;
} _CMsgSignOutReleaseEventPointHolds_default_instance_;
class CMsgSignOutWagerStats_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutWagerStats_Player> _instance;
} _CMsgSignOutWagerStats_Player_default_instance_;
class CMsgSignOutWagerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutWagerStats> _instance;
} _CMsgSignOutWagerStats_default_instance_;
class CMsgSpendWager_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpendWager_Player> _instance;
} _CMsgSpendWager_Player_default_instance_;
class CMsgSpendWagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpendWager> _instance;
} _CMsgSpendWager_default_instance_;
class CMsgSignOutXPCoins_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutXPCoins_Player> _instance;
} _CMsgSignOutXPCoins_Player_default_instance_;
class CMsgSignOutXPCoinsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutXPCoins> _instance;
} _CMsgSignOutXPCoins_default_instance_;
class CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunityGoalProgress_EventGoalIncrement> _instance;
} _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_;
class CMsgSignOutCommunityGoalProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunityGoalProgress> _instance;
} _CMsgSignOutCommunityGoalProgress_default_instance_;
class CMsgServerToGCPostMatchTipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCPostMatchTip> _instance;
} _CMsgServerToGCPostMatchTip_default_instance_;
class CMsgServerToGCPostMatchTipResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCPostMatchTipResponse> _instance;
} _CMsgServerToGCPostMatchTipResponse_default_instance_;
class CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCloseCompendiumInGamePredictionVoting> _instance;
} _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_;
class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse> _instance;
} _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult> _instance;
} _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCompendiumInGamePredictionResults> _instance;
} _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResultsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCompendiumInGamePredictionResultsResponse> _instance;
} _CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_;
class CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCCompendiumInGamePredictionResults> _instance;
} _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase> _instance;
} _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player> _instance;
} _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchPlayerItemPurchaseHistory> _instance;
} _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_;
class CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchStateHistory_PlayerState> _instance;
} _CMsgServerToGCMatchStateHistory_PlayerState_default_instance_;
class CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchStateHistory_TeamState> _instance;
} _CMsgServerToGCMatchStateHistory_TeamState_default_instance_;
class CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchStateHistory_MatchState> _instance;
} _CMsgServerToGCMatchStateHistory_MatchState_default_instance_;
class CMsgServerToGCMatchStateHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchStateHistory> _instance;
} _CMsgServerToGCMatchStateHistory_default_instance_;
class CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCavernCrawlIsHeroActive> _instance;
} _CMsgServerToGCCavernCrawlIsHeroActive_default_instance_;
class CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCavernCrawlIsHeroActiveResponse> _instance;
} _CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_;
class CMsgGCtoServerTensorflowInstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCtoServerTensorflowInstance> _instance;
} _CMsgGCtoServerTensorflowInstance_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPoorNetworkConditions_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgPoorNetworkConditions_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPoorNetworkConditions_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPoorNetworkConditions_default_instance_;
    new (ptr) ::proto::dota::CMsgPoorNetworkConditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPoorNetworkConditions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgGameserverCrash_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameserverCrash_default_instance_;
    new (ptr) ::proto::dota::CMsgGameserverCrash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameserverCrash::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameserverCrash_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameserverCrash_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgConnectedPlayers_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgConnectedPlayers_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgConnectedPlayers_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgConnectedPlayers_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgConnectedPlayers_default_instance_;
    new (ptr) ::proto::dota::CMsgConnectedPlayers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgConnectedPlayers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgConnectedPlayers_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgConnectedPlayers_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgGameServerInfo_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameServerInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgGameServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameServerInfo_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameServerInfo_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgLeaverDetected_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLeaverDetected_default_instance_;
    new (ptr) ::proto::dota::CMsgLeaverDetected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLeaverDetected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgLeaverDetected_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgLeaverDetected_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgLeaverState_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgLeaverDetectedResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLeaverDetectedResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgLeaverDetectedResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLeaverDetectedResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLeaverDetectedResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLeaverDetectedResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyFinalPlayerStats_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyFinalPlayerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyFinalPlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyFinalPlayerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyFinalPlayerStats_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyFinalPlayerStats_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLivePlayerStats_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLivePlayerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLivePlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLivePlayerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyLivePlayerStats_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyLivePlayerStats_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyMatch_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyMatch_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyMatch_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyMatch_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAUpdateClippy_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAUpdateClippy_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAUpdateClippy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAUpdateClippy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAUpdateClippy_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAUpdateClippy_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCRealtimeStats_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCRealtimeStats_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCRealtimeStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCRealtimeStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCRealtimeStats_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCRealtimeStats_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTARealtimeGameStatsTerse_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgGCToServerRealtimeStatsStartStop_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerRealtimeStatsStartStop_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerRealtimeStatsStartStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerRealtimeStatsStartStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerRealtimeStatsStartStop_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerRealtimeStatsStartStop_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToServerUpdateSteamBroadcasting_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerUpdateSteamBroadcasting_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerUpdateSteamBroadcasting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerUpdateSteamBroadcasting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerUpdateSteamBroadcasting_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerUpdateSteamBroadcasting_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMatchPlayerAbilityUpgrade_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMatchAdditionalUnitInventory_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMatchPlayerPermanentBuff_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMatchPlayerTimedStats_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_CTeam_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_CTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_CTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_CCustomGameData_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_CCustomGameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_CCustomGameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_WardPlacement_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut_WardPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut_WardPlacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOut_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOut_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOut();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOut::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<10> scc_info_CMsgGameMatchSignOut_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsCMsgGameMatchSignOut_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTAFantasyPlayerStats_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgEconPlayerStrangeCountAdjustment_econ_5fgcmessages_2eproto.base,
      &scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgSignOutDraftInfo_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutDraftInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutDraftInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutDraftInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSignOutDraftInfo_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSignOutDraftInfo_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMatchHeroSelectEvent_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgSignOutBotInfo_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutBotInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutBotInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutBotInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutBotInfo_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutBotInfo_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutPlayerStats_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutPlayerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutPlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutPlayerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutPlayerStats_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutPlayerStats_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutCommunicationSummary_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutCommunicationSummary_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutCommunicationSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutCommunicationSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSignOutCommunicationSummary_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSignOutCommunicationSummary_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignoutResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignoutResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignoutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignoutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgGameMatchSignoutResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgGameMatchSignoutResponse_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CDOTALobbyMember_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgTimedRewardContainer_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgTimedRewardContainer_default_instance_;
    new (ptr) ::proto::dota::CMsgTimedRewardContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgTimedRewardContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgTimedRewardContainer_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgTimedRewardContainer_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgGameMatchSignOutPermissionRequest_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOutPermissionRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOutPermissionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOutPermissionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOutPermissionRequest_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOutPermissionRequest_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOutPermissionResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOutPermissionResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOutPermissionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOutPermissionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOutPermissionResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOutPermissionResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameMatchSignOutEventGameData_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameMatchSignOutEventGameData_default_instance_;
    new (ptr) ::proto::dota::CMsgGameMatchSignOutEventGameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameMatchSignOutEventGameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameMatchSignOutEventGameData_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameMatchSignOutEventGameData_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgDOTALiveScoreboardUpdate_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALiveScoreboardUpdate_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALiveScoreboardUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALiveScoreboardUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALiveScoreboardUpdate_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALiveScoreboardUpdate_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgDOTARequestPlayerResources_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestPlayerResources_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestPlayerResources();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestPlayerResources::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestPlayerResources_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARequestPlayerResources_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTARequestPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestPlayerResourcesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestPlayerResourcesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestPlayerResourcesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARequestPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTARequestBatchPlayerResources_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestBatchPlayerResources_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestBatchPlayerResources();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestBatchPlayerResources::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestBatchPlayerResources_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARequestBatchPlayerResources_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTARequestBatchPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARequestBatchPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgDOTAPlayerFailedToConnect_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPlayerFailedToConnect_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPlayerFailedToConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPlayerFailedToConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPlayerFailedToConnect_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPlayerFailedToConnect_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToRelayConnect_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToRelayConnect_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToRelayConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToRelayConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToRelayConnect_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToRelayConnect_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCGCToLANServerRelayConnect_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCGCToLANServerRelayConnect_default_instance_;
    new (ptr) ::proto::dota::CMsgGCGCToLANServerRelayConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCGCToLANServerRelayConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCGCToLANServerRelayConnect_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCGCToLANServerRelayConnect_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToRelayConnectResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToRelayConnectResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToRelayConnectResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToRelayConnectResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToRelayConnectResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToRelayConnectResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCBanStatusRequest_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCBanStatusRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGCBanStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCBanStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCBanStatusRequest_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCBanStatusRequest_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCBanStatusResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCBanStatusResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCBanStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCBanStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCBanStatusResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCBanStatusResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgTournamentItemEvent_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgTournamentItemEvent_default_instance_;
    new (ptr) ::proto::dota::CMsgTournamentItemEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgTournamentItemEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgTournamentItemEvent_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgTournamentItemEvent_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CProtoItemHeroStatue_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgTournamentItemEventResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgTournamentItemEventResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgTournamentItemEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgTournamentItemEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgTournamentItemEventResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgTournamentItemEventResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgTeamFanfare_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgTeamFanfare_default_instance_;
    new (ptr) ::proto::dota::CMsgTeamFanfare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgTeamFanfare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgTeamFanfare_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgTeamFanfare_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgResponseTeamFanfare_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgResponseTeamFanfare_default_instance_;
    new (ptr) ::proto::dota::CMsgResponseTeamFanfare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgResponseTeamFanfare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgResponseTeamFanfare_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgResponseTeamFanfare_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameServerUploadSaveGame_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameServerUploadSaveGame_default_instance_;
    new (ptr) ::proto::dota::CMsgGameServerUploadSaveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameServerUploadSaveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameServerUploadSaveGame_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameServerUploadSaveGame_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameServerSaveGameResult_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameServerSaveGameResult_default_instance_;
    new (ptr) ::proto::dota::CMsgGameServerSaveGameResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameServerSaveGameResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameServerSaveGameResult_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameServerSaveGameResult_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameServerGetLoadGame_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameServerGetLoadGame_default_instance_;
    new (ptr) ::proto::dota::CMsgGameServerGetLoadGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameServerGetLoadGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameServerGetLoadGame_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameServerGetLoadGame_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGameServerGetLoadGameResult_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGameServerGetLoadGameResult_default_instance_;
    new (ptr) ::proto::dota::CMsgGameServerGetLoadGameResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGameServerGetLoadGameResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameServerGetLoadGameResult_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameServerGetLoadGameResult_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAGenerateDiretidePrizeList_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAGenerateDiretidePrizeList_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAGenerateDiretidePrizeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAGenerateDiretidePrizeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAGenerateDiretidePrizeList_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAGenerateDiretidePrizeList_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAGenerateDiretidePrizeListResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAGenerateDiretidePrizeListResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAGenerateDiretidePrizeListResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTARewardDiretidePrizes_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARewardDiretidePrizes_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARewardDiretidePrizes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARewardDiretidePrizes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARewardDiretidePrizes_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARewardDiretidePrizes_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTADiretidePrizesRewardedResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTADiretidePrizesRewardedResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTADiretidePrizesRewardedResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTADiretidePrizesRewardedResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTADiretidePrizesRewardedResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTADiretidePrizesRewardedResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAAwardEventPoints_AwardPoints_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAAwardEventPoints_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAAwardEventPoints_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAAwardEventPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAAwardEventPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAAwardEventPoints_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAAwardEventPoints_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCSignoutAwardAdditionalDrops_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCSignoutAwardAdditionalDrops_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFrostivusTimeElapsed_User_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgDOTAFrostivusTimeElapsed_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFrostivusTimeElapsed_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFrostivusTimeElapsed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFrostivusTimeElapsed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFrostivusTimeElapsed_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFrostivusTimeElapsed_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgGCToServerPingRequest_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerPingRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerPingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerPingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerPingRequest_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerPingRequest_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToServerPingResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerPingResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerPingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerPingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerPingResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerPingResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToServerConsoleCommand_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerConsoleCommand_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerConsoleCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerConsoleCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerConsoleCommand_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerConsoleCommand_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerGetEventPoints_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGetEventPoints_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGetEventPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGetEventPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGetEventPoints_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerGetEventPoints_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGetEventPointsResponse_Points_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGetEventPointsResponse_Points();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGetEventPointsResponse_Points::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerGetEventPointsResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGetEventPointsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGetEventPointsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGetEventPointsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerGetEventPointsResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerGetEventPointsResponse_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGrantSurveyPermission_Survey_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGrantSurveyPermission_Survey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGrantSurveyPermission_Survey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerGrantSurveyPermission_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGrantSurveyPermission_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGrantSurveyPermission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGrantSurveyPermission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerGrantSurveyPermission_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerGrantSurveyPermission_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerGrantSurveyPermissionResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGrantSurveyPermissionResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGrantSurveyPermissionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGrantSurveyPermissionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGrantSurveyPermissionResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerGrantSurveyPermissionResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchConnectionStats_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchConnectionStats_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchConnectionStats_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCMatchConnectionStats_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchConnectionStats_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchConnectionStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchConnectionStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchConnectionStats_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCMatchConnectionStats_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerGCUpdateSpectatorCount_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerGCUpdateSpectatorCount_default_instance_;
    new (ptr) ::proto::dota::CMsgServerGCUpdateSpectatorCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerGCUpdateSpectatorCount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerGCUpdateSpectatorCount_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerGCUpdateSpectatorCount_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSerializedCombatLog_Dictionary_DictString_default_instance_;
    new (ptr) ::proto::dota::CSerializedCombatLog_Dictionary_DictString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSerializedCombatLog_Dictionary_DictString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSerializedCombatLog_Dictionary_default_instance_;
    new (ptr) ::proto::dota::CSerializedCombatLog_Dictionary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSerializedCombatLog_Dictionary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCSerializedCombatLog_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSerializedCombatLog_default_instance_;
    new (ptr) ::proto::dota::CSerializedCombatLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSerializedCombatLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CSerializedCombatLog_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCSerializedCombatLog_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto.base,
      &scc_info_CMsgDOTACombatLogEntry_dota_5fshared_5fenums_2eproto.base,}};

static void InitDefaultsCMsgServerToGCGetAdditionalEquips_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCGetAdditionalEquips_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCGetAdditionalEquips();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCGetAdditionalEquips::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCGetAdditionalEquips_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCGetAdditionalEquips_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CAdditionalEquipSlot_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgServerToGCGetAdditionalEquipsResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCGetAdditionalEquipsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCGetAdditionalEquipsResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCGetAdditionalEquipsResponse_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCGetProfileCard_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCGetProfileCard_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCGetProfileCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCGetProfileCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCGetProfileCard_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCGetProfileCard_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCGetProfileCardResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCGetProfileCardResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCGetProfileCardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCGetProfileCardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCGetProfileCardResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCGetProfileCardResponse_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgDOTAProfileCard_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCVictoryPredictions_Record_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCVictoryPredictions_Record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCVictoryPredictions_Record::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCVictoryPredictions_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCVictoryPredictions_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCVictoryPredictions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCVictoryPredictions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCVictoryPredictions_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCVictoryPredictions_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgSuspiciousActivity_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSuspiciousActivity_default_instance_;
    new (ptr) ::proto::dota::CMsgSuspiciousActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSuspiciousActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSuspiciousActivity_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSuspiciousActivity_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCRequestStatus_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCRequestStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCRequestStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCRequestStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCRequestStatus_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCRequestStatus_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCRequestStatus_Response_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCRequestStatus_Response_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCRequestStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCRequestStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCRequestStatus_Response_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCRequestStatus_Response_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutAssassinMiniGameInfo_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutAssassinMiniGameInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutAssassinMiniGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutAssassinMiniGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutAssassinMiniGameInfo_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutAssassinMiniGameInfo_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCGetIngameEventData_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCGetIngameEventData_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCGetIngameEventData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCGetIngameEventData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCGetIngameEventData_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCGetIngameEventData_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToServerIngameEventDataOraclePA_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerIngameEventDataOraclePA_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerIngameEventDataOraclePA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerIngameEventDataOraclePA::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerIngameEventDataOraclePA_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerIngameEventDataOraclePA_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCKillSummaries_KillSummary_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCKillSummaries_KillSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCKillSummaries_KillSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCKillSummaries_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCKillSummaries_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCKillSummaries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCKillSummaries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCKillSummaries_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCKillSummaries_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerPredictionResult_Prediction_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerPredictionResult_Prediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerPredictionResult_Prediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToServerPredictionResult_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToServerPredictionResult_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToServerPredictionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToServerPredictionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToServerPredictionResult_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToServerPredictionResult_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCLockCharmTrading_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCLockCharmTrading_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCLockCharmTrading();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCLockCharmTrading::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCLockCharmTrading_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCLockCharmTrading_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutUpdatePlayerChallenge_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutUpdatePlayerChallenge_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutUpdatePlayerChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutUpdatePlayerChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSignOutUpdatePlayerChallenge_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSignOutUpdatePlayerChallenge_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCRerollPlayerChallenge_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCRerollPlayerChallenge_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCRerollPlayerChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCRerollPlayerChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCRerollPlayerChallenge_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCRerollPlayerChallenge_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgClientToGCRerollPlayerChallenge_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCHoldEventPoints_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCHoldEventPoints_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCHoldEventPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCHoldEventPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCHoldEventPoints_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCHoldEventPoints_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgSignOutReleaseEventPointHolds_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutReleaseEventPointHolds_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutReleaseEventPointHolds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutReleaseEventPointHolds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutReleaseEventPointHolds_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutReleaseEventPointHolds_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutWagerStats_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutWagerStats_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutWagerStats_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutWagerStats_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutWagerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutWagerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutWagerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSignOutWagerStats_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSignOutWagerStats_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpendWager_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgSpendWager_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpendWager_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSpendWager_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpendWager_default_instance_;
    new (ptr) ::proto::dota::CMsgSpendWager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpendWager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSpendWager_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSpendWager_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutXPCoins_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutXPCoins_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutXPCoins_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutXPCoins_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutXPCoins_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutXPCoins();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutXPCoins::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSignOutXPCoins_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSignOutXPCoins_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgSignOutCommunityGoalProgress_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSignOutCommunityGoalProgress_default_instance_;
    new (ptr) ::proto::dota::CMsgSignOutCommunityGoalProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSignOutCommunityGoalProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSignOutCommunityGoalProgress_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSignOutCommunityGoalProgress_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCPostMatchTip_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCPostMatchTip_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCPostMatchTip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCPostMatchTip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCPostMatchTip_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCPostMatchTip_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCPostMatchTipResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCPostMatchTipResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCPostMatchTipResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCPostMatchTipResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCPostMatchTipResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCPostMatchTipResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCCloseCompendiumInGamePredictionVoting_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCloseCompendiumInGamePredictionVoting_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCCloseCompendiumInGamePredictionVoting_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCCompendiumInGamePredictionResultsResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCompendiumInGamePredictionResultsResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCCompendiumInGamePredictionResultsResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCMatchPlayerItemPurchaseHistory_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCMatchPlayerItemPurchaseHistory_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchStateHistory_PlayerState_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchStateHistory_TeamState_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchStateHistory_MatchState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchStateHistory_MatchState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCMatchStateHistory_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCMatchStateHistory_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCMatchStateHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCMatchStateHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerToGCMatchStateHistory_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerToGCMatchStateHistory_dota_5fgcmessages_5fserver_2eproto}, {
      &scc_info_CMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto.base,}};

static void InitDefaultsCMsgServerToGCCavernCrawlIsHeroActive_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCavernCrawlIsHeroActive_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCavernCrawlIsHeroActive_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCCavernCrawlIsHeroActive_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgServerToGCCavernCrawlIsHeroActiveResponse_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgServerToGCCavernCrawlIsHeroActiveResponse_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgServerToGCCavernCrawlIsHeroActiveResponse_dota_5fgcmessages_5fserver_2eproto}, {}};

static void InitDefaultsCMsgGCtoServerTensorflowInstance_dota_5fgcmessages_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCtoServerTensorflowInstance_default_instance_;
    new (ptr) ::proto::dota::CMsgGCtoServerTensorflowInstance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCtoServerTensorflowInstance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCtoServerTensorflowInstance_dota_5fgcmessages_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCtoServerTensorflowInstance_dota_5fgcmessages_5fserver_2eproto}, {}};

void InitDefaults_dota_5fgcmessages_5fserver_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameserverCrash_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgConnectedPlayers_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameServerInfo_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLeaverDetected_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLeaverDetectedResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyFinalPlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLivePlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyMatch_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAUpdateClippy_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCRealtimeStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerRealtimeStatsStartStop_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerUpdateSteamBroadcasting_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOut_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutDraftInfo_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutBotInfo_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutPlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutCommunicationSummary_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignoutResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgTimedRewardContainer_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOutPermissionRequest_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOutPermissionResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameMatchSignOutEventGameData_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALiveScoreboardUpdate_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestPlayerResources_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestBatchPlayerResources_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPlayerFailedToConnect_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToRelayConnect_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCGCToLANServerRelayConnect_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToRelayConnectResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCBanStatusRequest_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCBanStatusResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgTournamentItemEvent_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgTournamentItemEventResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgTeamFanfare_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgResponseTeamFanfare_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameServerUploadSaveGame_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameServerSaveGameResult_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameServerGetLoadGame_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameServerGetLoadGameResult_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAGenerateDiretidePrizeList_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAGenerateDiretidePrizeListResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARewardDiretidePrizes_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTADiretidePrizesRewardedResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAAwardEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFrostivusTimeElapsed_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerPingRequest_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerPingResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerConsoleCommand_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGetEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGetEventPointsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGrantSurveyPermission_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGrantSurveyPermissionResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchConnectionStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerGCUpdateSpectatorCount_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSerializedCombatLog_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCGetAdditionalEquips_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCGetAdditionalEquipsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCGetProfileCard_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCGetProfileCardResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCVictoryPredictions_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSuspiciousActivity_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCRequestStatus_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCRequestStatus_Response_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutAssassinMiniGameInfo_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCGetIngameEventData_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerIngameEventDataOraclePA_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCKillSummaries_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToServerPredictionResult_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCLockCharmTrading_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutUpdatePlayerChallenge_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCRerollPlayerChallenge_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCHoldEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutReleaseEventPointHolds_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutWagerStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpendWager_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutXPCoins_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSignOutCommunityGoalProgress_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCPostMatchTip_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCPostMatchTipResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCloseCompendiumInGamePredictionVoting_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCompendiumInGamePredictionResultsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCMatchStateHistory_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCavernCrawlIsHeroActive_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerToGCCavernCrawlIsHeroActiveResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCtoServerTensorflowInstance_dota_5fgcmessages_5fserver_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fserver_2eproto[133];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[12];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fserver_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions_Player, disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions_Player, num_bad_intervals_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions_Player, peak_loss_pct_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions, detection_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPoorNetworkConditions, players_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, game_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, sentinel_save_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, server_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, pid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameserverCrash, engine_),
  0,
  1,
  2,
  3,
  9,
  11,
  4,
  5,
  6,
  7,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers_Player, leaver_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers_Player, disconnect_reason_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, connected_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, disconnected_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, game_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, legacy_mass_disconnect_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, poor_network_conditions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, send_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, radiant_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, dire_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, radiant_lead_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectedPlayers, building_state_),
  ~0u,
  ~0u,
  1,
  2,
  3,
  0,
  4,
  5,
  7,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_private_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, assigned_server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, legacy_server_steamdatagram_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_steamdatagram_address_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_hibernation_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_loadavg_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_tv_broadcast_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_relay_connected_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, relay_slots_max_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, relays_connected_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, relay_clients_connected_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, relayed_game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, parent_relay_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, tv_secret_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, server_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, allow_custom_games_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, build_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, tf_server_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerInfo, srcds_instance_),
  2,
  3,
  4,
  5,
  22,
  21,
  1,
  0,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  15,
  17,
  18,
  19,
  20,
  23,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, leaver_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, server_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetected, poor_network_conditions_),
  2,
  3,
  0,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetectedResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetectedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaverDetectedResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyFinalPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyFinalPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyFinalPlayerStats, stats_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLivePlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLivePlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLivePlayerStats, stats_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, team_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMatch, team_2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAUpdateClippy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAUpdateClippy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAUpdateClippy, good_team_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAUpdateClippy, bad_team_hero_ids_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRealtimeStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRealtimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRealtimeStats, delayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerRealtimeStatsStartStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerRealtimeStatsStartStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerRealtimeStatsStartStop, delayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerUpdateSteamBroadcasting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerUpdateSteamBroadcasting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerUpdateSteamBroadcasting, active_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, dota_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, winner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, xp_per_minute_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, gold_spent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_hero_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_tower_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_hero_healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, time_last_seen_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, support_ability_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, party_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, scaled_assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, claimed_farm_gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, support_gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, claimed_denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, claimed_misses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, misses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, additional_units_inventory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, permanent_buffs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, match_player_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, talent_ability_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_pick_order_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_randomed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_bonus_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_dota_plus_suggestion_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, lane_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, timed_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, is_using_plus_guide_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_received_pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_received_post_reduction_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer, gold_lost_to_death_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  19,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  30,
  31,
  32,
  ~0u,
  ~0u,
  ~0u,
  0,
  29,
  ~0u,
  33,
  35,
  36,
  37,
  34,
  ~0u,
  38,
  39,
  40,
  41,
  42,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CTeam, players_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg, contents_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent, replay_time_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CCustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_CCustomGameData, publish_timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, name_suffix_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_4_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, placed_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, building_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, creep_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, roshan_alive_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, position_x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut_WardPlacement, position_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, good_guys_win_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, num_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, tower_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, barracks_status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, server_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, first_blood_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, game_balance_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, event_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, picks_bans_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, fantasy_stats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, player_strange_count_adjustments_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, automatic_surrender_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, server_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, legacy_mass_disconnect_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, poor_network_conditions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, additional_msgs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, social_feed_events_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, average_networth_delta_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, networth_delta_min10_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, networth_delta_min20_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, maximum_losing_networth_lead_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, average_experience_delta_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, experience_delta_min10_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, experience_delta_min20_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bonus_gold_winner_min10_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bonus_gold_winner_min20_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bonus_gold_winner_total_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bonus_gold_loser_min10_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bonus_gold_loser_min20_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bonus_gold_loser_total_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, match_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, team_scores_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, pre_game_duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, event_game_leaderboard_entries_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, ward_placements_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bounty_rune_gold_winners_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, bounty_rune_gold_losers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, range_creep_upgrade_gold_winners_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOut, range_creep_upgrade_gold_losers_),
  3,
  4,
  10,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  7,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  11,
  13,
  12,
  1,
  ~0u,
  ~0u,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  2,
  27,
  ~0u,
  28,
  ~0u,
  ~0u,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutDraftInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutDraftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutDraftInfo, radiant_captain_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutDraftInfo, dire_captain_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutDraftInfo, picks_bans_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutBotInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutBotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutBotInfo, allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutBotInfo, bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutBotInfo, created_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutBotInfo, bot_difficulty_dire_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, rampages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, first_blood_claimed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, first_blood_given_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, aegises_snatched_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, cheeses_eaten_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, creeps_stacked_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, fight_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, farm_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, support_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, push_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, gpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, xppm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, damage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, heals_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutPlayerStats, wards_destroyed_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, pings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, max_pings_per_interval_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, teammate_pings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, max_teammate_pings_per_interval_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, team_chat_messages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, all_chat_messages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, chat_wheel_messages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, pauses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, unpauses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, lines_drawn_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, voice_chat_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, chat_mutes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication, voice_mutes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunicationSummary, players_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, win_streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata, games_played_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, replay_salt_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, xp_reward_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, leagueid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, metadata_private_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, match_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignoutResponse, players_metadata_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTimedRewardContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTimedRewardContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTimedRewardContainer, timed_reward_details_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionRequest, server_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionRequest, local_attempt_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionRequest, total_attempt_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionRequest, seconds_waited_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionResponse, permission_granted_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionResponse, abandon_signout_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutPermissionResponse, retry_delay_seconds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, game_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, map_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, event_game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameMatchSignOutEventGameData, start_time_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, hero_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_cooldown_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, item0_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, item1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, item2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, item3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, item4_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, item5_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, respawn_timer_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, position_x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, position_y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player, abilities_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, tower_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, barracks_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, hero_picks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team, hero_bans_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, hltv_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, team_good_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, team_bad_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, roshan_respawn_timer_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALiveScoreboardUpdate, match_id_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResources, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResources, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResources, player_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, prevent_text_chat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, prevent_voice_chat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestPlayerResourcesResponse, low_priority_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResources, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResources, account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResources, rank_types_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_text_chat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_voice_chat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_calibrated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result, low_priority_),
  0,
  2,
  3,
  1,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse, results_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerFailedToConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerFailedToConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerFailedToConnect, failed_loaders_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerFailedToConnect, abandoned_loaders_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, source_tv_public_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, source_tv_private_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, source_tv_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, parent_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, tv_unique_secret_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnect, source_tv_steamid_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGCToLANServerRelayConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGCToLANServerRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCGCToLANServerRelayConnect, relay_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnectResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToRelayConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusRequest, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusResponse, low_priority_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusResponse, text_chat_banned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCBanStatusResponse, voice_chat_banned_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, victim_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, tv_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, dota_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, replay_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, loot_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, event_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, multi_kill_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, winner_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, loser_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEvent, hero_statues_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEventResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEventResponse, event_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTournamentItemEventResponse, viewers_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTeamFanfare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgTeamFanfare, match_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResponseTeamFanfare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResponseTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResponseTeamFanfare, fanfare_goodguys_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResponseTeamFanfare, fanfare_badguys_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerUploadSaveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerUploadSaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerUploadSaveGame, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerUploadSaveGame, save_game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerUploadSaveGame, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerUploadSaveGame, player_steam_ids_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerSaveGameResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerSaveGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerSaveGameResult, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerGetLoadGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerGetLoadGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerGetLoadGame, save_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerGetLoadGameResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerGetLoadGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGameServerGetLoadGameResult, save_game_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeList, prize_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeList, highest_roshan_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse, item_defs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse, steam_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse, prize_list_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARewardDiretidePrizes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARewardDiretidePrizes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARewardDiretidePrizes, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARewardDiretidePrizes, prize_list_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADiretidePrizesRewardedResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADiretidePrizesRewardedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADiretidePrizesRewardedResponse, prize_list_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, premium_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, trade_ban_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints, eligible_for_periodic_adjustment_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, award_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAAwardEventPoints, audit_action_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, loot_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, player_account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, no_trade_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, randomize_reward_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops, drops_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops, match_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed_User, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed_User, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed_User, time_elapsed_s_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed, seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed, users_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFrostivusTimeElapsed, match_id_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingRequest, request_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingResponse, request_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPingResponse, cluster_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerConsoleCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerConsoleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerConsoleCommand, console_command_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPoints, account_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse_Points, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse_Points, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse_Points, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse_Points, points_total_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse_Points, owned_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGetEventPointsResponse, points_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, question_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, expire_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, survey_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, extra_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission_Survey, extra_data_32_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermission, surveys_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermissionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGrantSurveyPermissionResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, avg_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, packet_loss_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, ping_deviation_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats_Player, full_resends_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, region_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchConnectionStats, cluster_id_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGCUpdateSpectatorCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGCUpdateSpectatorCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerGCUpdateSpectatorCount, spectator_count_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary_DictString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary_DictString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary_DictString, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary_DictString, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog_Dictionary, strings_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog, dictionary_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSerializedCombatLog, entries_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquips, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquips, account_ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, equips_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse, equips_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetProfileCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetProfileCard, account_ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetProfileCardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetProfileCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetProfileCardResponse, cards_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions_Record, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions_Record, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions_Record, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions_Record, item_ids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCVictoryPredictions, records_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, activity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, intdata1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, intdata2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSuspiciousActivity, time_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRequestStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRequestStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRequestStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRequestStatus_Response, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, winning_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, losing_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, arcana_owners_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, assassin_won_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, contract_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, contract_complete_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutAssassinMiniGameInfo, pa_is_radiant_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetIngameEventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetIngameEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCGetIngameEventData, event_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerIngameEventDataOraclePA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerIngameEventDataOraclePA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerIngameEventDataOraclePA, target_hero_ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries_KillSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries_KillSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries_KillSummary, killer_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries_KillSummary, victim_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries_KillSummary, kill_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries, ingameevent_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCKillSummaries, summaries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, item_def_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, num_correct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, num_fails_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult_Prediction, granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult, correct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToServerPredictionResult, predictions_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCLockCharmTrading, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCLockCharmTrading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCLockCharmTrading, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCLockCharmTrading, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, progress_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge, challenge_rank_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, rerolled_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutUpdatePlayerChallenge, hero_id_),
  0,
  ~0u,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRerollPlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRerollPlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCRerollPlayerChallenge, reroll_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest, points_held_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest, premium_held_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints, holds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints, hold_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCHoldEventPoints, hold_until_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutReleaseEventPointHolds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutReleaseEventPointHolds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutReleaseEventPointHolds, account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutReleaseEventPointHolds, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutReleaseEventPointHolds, hold_key_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats_Player, winnings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats_Player, max_wager_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats_Player, wager_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutWagerStats, event_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager_Player, wager_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager_Player, wager_token_item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpendWager, server_steam_id_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, xp_gained_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, coins_spent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, wager_token_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins_Player, rank_wager_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutXPCoins, timestamp_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, event_goal_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, increment_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSignOutCommunityGoalProgress, event_increments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, tipper_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, recipient_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTip, tip_amount_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTipResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTipResponse, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTipResponse, tipper_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTipResponse, recipient_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCPostMatchTipResponse, result_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting, hltv_delay_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_is_mask_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults, results_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults, league_node_id_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults, results_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, item_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, gold_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, inventory_items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, talents_skilled_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, item_purchases_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory, mmr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory, players_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, respawn_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, has_buyback_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, has_aegis_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, has_rapier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState, distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, player_states_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, tower_health_pct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, barracks_health_pct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, ancient_health_pct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, glyph_cooldown_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, creep_distance_safe_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, creep_distance_mid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState, creep_distance_off_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_MatchState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_MatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_MatchState, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_MatchState, radiant_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory_MatchState, dire_state_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory, radiant_won_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory, mmr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCMatchStateHistory, match_states_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse, potential_winnings_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCtoServerTensorflowInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCtoServerTensorflowInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCtoServerTensorflowInstance, server_instance_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::dota::CMsgPoorNetworkConditions_Player)},
  { 13, 20, sizeof(::proto::dota::CMsgPoorNetworkConditions)},
  { 22, 39, sizeof(::proto::dota::CMsgGameserverCrash)},
  { 51, 60, sizeof(::proto::dota::CMsgConnectedPlayers_Player)},
  { 64, 80, sizeof(::proto::dota::CMsgConnectedPlayers)},
  { 91, 123, sizeof(::proto::dota::CMsgGameServerInfo)},
  { 150, 161, sizeof(::proto::dota::CMsgLeaverDetected)},
  { 167, 173, sizeof(::proto::dota::CMsgLeaverDetectedResponse)},
  { 174, 180, sizeof(::proto::dota::CMsgDOTAFantasyFinalPlayerStats)},
  { 181, 187, sizeof(::proto::dota::CMsgDOTAFantasyLivePlayerStats)},
  { 188, 200, sizeof(::proto::dota::CMsgDOTAFantasyMatch)},
  { 207, 214, sizeof(::proto::dota::CMsgDOTAUpdateClippy)},
  { 216, 222, sizeof(::proto::dota::CMsgServerToGCRealtimeStats)},
  { 223, 229, sizeof(::proto::dota::CMsgGCToServerRealtimeStatsStartStop)},
  { 230, 236, sizeof(::proto::dota::CMsgGCToServerUpdateSteamBroadcasting)},
  { 237, 244, sizeof(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData)},
  { 246, 300, sizeof(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer)},
  { 349, 355, sizeof(::proto::dota::CMsgGameMatchSignOut_CTeam)},
  { 356, 363, sizeof(::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg)},
  { 365, 375, sizeof(::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent)},
  { 380, 386, sizeof(::proto::dota::CMsgGameMatchSignOut_CCustomGameData)},
  { 387, 399, sizeof(::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry)},
  { 406, 419, sizeof(::proto::dota::CMsgGameMatchSignOut_WardPlacement)},
  { 427, 477, sizeof(::proto::dota::CMsgGameMatchSignOut)},
  { 522, 530, sizeof(::proto::dota::CMsgSignOutDraftInfo)},
  { 533, 542, sizeof(::proto::dota::CMsgSignOutBotInfo)},
  { 546, 580, sizeof(::proto::dota::CMsgSignOutPlayerStats)},
  { 609, 628, sizeof(::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication)},
  { 642, 648, sizeof(::proto::dota::CMsgSignOutCommunicationSummary)},
  { 649, 667, sizeof(::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata)},
  { 680, 693, sizeof(::proto::dota::CMsgGameMatchSignoutResponse)},
  { 701, 707, sizeof(::proto::dota::CMsgTimedRewardContainer)},
  { 708, 717, sizeof(::proto::dota::CMsgGameMatchSignOutPermissionRequest)},
  { 721, 729, sizeof(::proto::dota::CMsgGameMatchSignOutPermissionResponse)},
  { 732, 742, sizeof(::proto::dota::CMsgGameMatchSignOutEventGameData)},
  { 747, 754, sizeof(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility)},
  { 756, 788, sizeof(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player)},
  { 815, 826, sizeof(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team)},
  { 832, 846, sizeof(::proto::dota::CMsgDOTALiveScoreboardUpdate)},
  { 855, 862, sizeof(::proto::dota::CMsgDOTARequestPlayerResources)},
  { 864, 875, sizeof(::proto::dota::CMsgDOTARequestPlayerResourcesResponse)},
  { 881, 888, sizeof(::proto::dota::CMsgDOTARequestBatchPlayerResources)},
  { 890, 901, sizeof(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result)},
  { 907, 913, sizeof(::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse)},
  { 914, 921, sizeof(::proto::dota::CMsgDOTAPlayerFailedToConnect)},
  { 923, 935, sizeof(::proto::dota::CMsgGCToRelayConnect)},
  { 942, 948, sizeof(::proto::dota::CMsgGCGCToLANServerRelayConnect)},
  { 949, 954, sizeof(::proto::dota::CMsgGCToRelayConnectResponse)},
  { 954, 960, sizeof(::proto::dota::CMsgGCBanStatusRequest)},
  { 961, 970, sizeof(::proto::dota::CMsgGCBanStatusResponse)},
  { 974, 991, sizeof(::proto::dota::CMsgTournamentItemEvent)},
  { 1003, 1010, sizeof(::proto::dota::CMsgTournamentItemEventResponse)},
  { 1012, 1018, sizeof(::proto::dota::CMsgTeamFanfare)},
  { 1019, 1026, sizeof(::proto::dota::CMsgResponseTeamFanfare)},
  { 1028, 1037, sizeof(::proto::dota::CMsgGameServerUploadSaveGame)},
  { 1041, 1047, sizeof(::proto::dota::CMsgGameServerSaveGameResult)},
  { 1048, 1054, sizeof(::proto::dota::CMsgGameServerGetLoadGame)},
  { 1055, 1061, sizeof(::proto::dota::CMsgGameServerGetLoadGameResult)},
  { 1062, 1069, sizeof(::proto::dota::CMsgDOTAGenerateDiretidePrizeList)},
  { 1071, 1079, sizeof(::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse)},
  { 1082, 1089, sizeof(::proto::dota::CMsgDOTARewardDiretidePrizes)},
  { 1091, 1097, sizeof(::proto::dota::CMsgDOTADiretidePrizesRewardedResponse)},
  { 1098, 1108, sizeof(::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints)},
  { 1113, 1123, sizeof(::proto::dota::CMsgDOTAAwardEventPoints)},
  { 1128, 1137, sizeof(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops)},
  { 1141, 1148, sizeof(::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops)},
  { 1150, 1157, sizeof(::proto::dota::CMsgDOTAFrostivusTimeElapsed_User)},
  { 1159, 1167, sizeof(::proto::dota::CMsgDOTAFrostivusTimeElapsed)},
  { 1170, 1177, sizeof(::proto::dota::CMsgGCToServerPingRequest)},
  { 1179, 1187, sizeof(::proto::dota::CMsgGCToServerPingResponse)},
  { 1190, 1196, sizeof(::proto::dota::CMsgGCToServerConsoleCommand)},
  { 1197, 1204, sizeof(::proto::dota::CMsgServerGetEventPoints)},
  { 1206, 1214, sizeof(::proto::dota::CMsgServerGetEventPointsResponse_Points)},
  { 1217, 1224, sizeof(::proto::dota::CMsgServerGetEventPointsResponse)},
  { 1226, 1237, sizeof(::proto::dota::CMsgServerGrantSurveyPermission_Survey)},
  { 1243, 1249, sizeof(::proto::dota::CMsgServerGrantSurveyPermission)},
  { 1250, 1256, sizeof(::proto::dota::CMsgServerGrantSurveyPermissionResponse)},
  { 1257, 1268, sizeof(::proto::dota::CMsgServerToGCMatchConnectionStats_Player)},
  { 1274, 1284, sizeof(::proto::dota::CMsgServerToGCMatchConnectionStats)},
  { 1289, 1295, sizeof(::proto::dota::CMsgServerGCUpdateSpectatorCount)},
  { 1296, 1303, sizeof(::proto::dota::CSerializedCombatLog_Dictionary_DictString)},
  { 1305, 1311, sizeof(::proto::dota::CSerializedCombatLog_Dictionary)},
  { 1312, 1320, sizeof(::proto::dota::CSerializedCombatLog)},
  { 1323, 1329, sizeof(::proto::dota::CMsgServerToGCGetAdditionalEquips)},
  { 1330, 1337, sizeof(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips)},
  { 1339, 1345, sizeof(::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse)},
  { 1346, 1352, sizeof(::proto::dota::CMsgServerToGCGetProfileCard)},
  { 1353, 1359, sizeof(::proto::dota::CMsgServerToGCGetProfileCardResponse)},
  { 1360, 1368, sizeof(::proto::dota::CMsgServerToGCVictoryPredictions_Record)},
  { 1371, 1377, sizeof(::proto::dota::CMsgServerToGCVictoryPredictions)},
  { 1378, 1388, sizeof(::proto::dota::CMsgSuspiciousActivity)},
  { 1393, 1398, sizeof(::proto::dota::CMsgServerToGCRequestStatus)},
  { 1398, 1404, sizeof(::proto::dota::CMsgServerToGCRequestStatus_Response)},
  { 1405, 1418, sizeof(::proto::dota::CMsgSignOutAssassinMiniGameInfo)},
  { 1426, 1432, sizeof(::proto::dota::CMsgServerToGCGetIngameEventData)},
  { 1433, 1439, sizeof(::proto::dota::CMsgGCToServerIngameEventDataOraclePA)},
  { 1440, 1448, sizeof(::proto::dota::CMsgServerToGCKillSummaries_KillSummary)},
  { 1451, 1458, sizeof(::proto::dota::CMsgServerToGCKillSummaries)},
  { 1460, 1470, sizeof(::proto::dota::CMsgGCToServerPredictionResult_Prediction)},
  { 1475, 1484, sizeof(::proto::dota::CMsgGCToServerPredictionResult)},
  { 1488, 1495, sizeof(::proto::dota::CMsgServerToGCLockCharmTrading)},
  { 1497, 1507, sizeof(::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge)},
  { 1512, 1522, sizeof(::proto::dota::CMsgSignOutUpdatePlayerChallenge)},
  { 1527, 1534, sizeof(::proto::dota::CMsgServerToGCRerollPlayerChallenge)},
  { 1536, 1544, sizeof(::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest)},
  { 1547, 1556, sizeof(::proto::dota::CMsgServerToGCHoldEventPoints)},
  { 1560, 1568, sizeof(::proto::dota::CMsgSignOutReleaseEventPointHolds)},
  { 1571, 1580, sizeof(::proto::dota::CMsgSignOutWagerStats_Player)},
  { 1584, 1591, sizeof(::proto::dota::CMsgSignOutWagerStats)},
  { 1593, 1601, sizeof(::proto::dota::CMsgSpendWager_Player)},
  { 1604, 1614, sizeof(::proto::dota::CMsgSpendWager)},
  { 1619, 1629, sizeof(::proto::dota::CMsgSignOutXPCoins_Player)},
  { 1634, 1643, sizeof(::proto::dota::CMsgSignOutXPCoins)},
  { 1647, 1654, sizeof(::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement)},
  { 1656, 1663, sizeof(::proto::dota::CMsgSignOutCommunityGoalProgress)},
  { 1665, 1675, sizeof(::proto::dota::CMsgServerToGCPostMatchTip)},
  { 1680, 1689, sizeof(::proto::dota::CMsgServerToGCPostMatchTipResponse)},
  { 1693, 1700, sizeof(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting)},
  { 1702, 1708, sizeof(::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)},
  { 1709, 1717, sizeof(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult)},
  { 1720, 1729, sizeof(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults)},
  { 1733, 1739, sizeof(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse)},
  { 1740, 1746, sizeof(::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults)},
  { 1747, 1758, sizeof(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase)},
  { 1764, 1775, sizeof(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player)},
  { 1781, 1789, sizeof(::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory)},
  { 1792, 1806, sizeof(::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState)},
  { 1815, 1830, sizeof(::proto::dota::CMsgServerToGCMatchStateHistory_TeamState)},
  { 1840, 1848, sizeof(::proto::dota::CMsgServerToGCMatchStateHistory_MatchState)},
  { 1851, 1860, sizeof(::proto::dota::CMsgServerToGCMatchStateHistory)},
  { 1864, 1872, sizeof(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive)},
  { 1875, 1882, sizeof(::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse)},
  { 1884, 1890, sizeof(::proto::dota::CMsgGCtoServerTensorflowInstance)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPoorNetworkConditions_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPoorNetworkConditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameserverCrash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgConnectedPlayers_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgConnectedPlayers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLeaverDetected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLeaverDetectedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyFinalPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLivePlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAUpdateClippy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCRealtimeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerRealtimeStatsStartStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerUpdateSteamBroadcasting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_CTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_CCustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_WardPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutDraftInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutBotInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutCommunicationSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgTimedRewardContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOutPermissionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOutPermissionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameMatchSignOutEventGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALiveScoreboardUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestPlayerResources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestPlayerResourcesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestBatchPlayerResources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPlayerFailedToConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToRelayConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCGCToLANServerRelayConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToRelayConnectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCBanStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCBanStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgTournamentItemEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgTournamentItemEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgTeamFanfare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgResponseTeamFanfare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameServerUploadSaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameServerSaveGameResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameServerGetLoadGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGameServerGetLoadGameResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAGenerateDiretidePrizeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARewardDiretidePrizes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTADiretidePrizesRewardedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAAwardEventPoints_AwardPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAAwardEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFrostivusTimeElapsed_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFrostivusTimeElapsed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerPingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerPingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerConsoleCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGetEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGetEventPointsResponse_Points_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGetEventPointsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGrantSurveyPermission_Survey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGrantSurveyPermission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGrantSurveyPermissionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchConnectionStats_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchConnectionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerGCUpdateSpectatorCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSerializedCombatLog_Dictionary_DictString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSerializedCombatLog_Dictionary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSerializedCombatLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCGetAdditionalEquips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCGetAdditionalEquipsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCGetProfileCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCGetProfileCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCVictoryPredictions_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCVictoryPredictions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSuspiciousActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCRequestStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCRequestStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutAssassinMiniGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCGetIngameEventData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerIngameEventDataOraclePA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCKillSummaries_KillSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCKillSummaries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerPredictionResult_Prediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToServerPredictionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCLockCharmTrading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutUpdatePlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCRerollPlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCHoldEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutReleaseEventPointHolds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutWagerStats_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutWagerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpendWager_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpendWager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutXPCoins_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutXPCoins_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSignOutCommunityGoalProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCPostMatchTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCPostMatchTipResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchStateHistory_PlayerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchStateHistory_TeamState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCMatchStateHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCavernCrawlIsHeroActive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCtoServerTensorflowInstance_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fserver_2eproto, "dota_gcmessages_server.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fserver_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fserver_2eproto, 133, file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fserver_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fserver_2eproto[] =
  "\n\034dota_gcmessages_server.proto\022\nproto.do"
  "ta\032\023steammessages.proto\032\027dota_shared_enu"
  "ms.proto\032\034dota_gcmessages_common.proto\032\025"
  "econ_gcmessages.proto\032\030network_connectio"
  "n.proto\032-dota_gcmessages_common_match_ma"
  "nagement.proto\"\352\002\n\031CMsgPoorNetworkCondit"
  "ions\022]\n\016detection_type\030\001 \001(\0162&.proto.dot"
  "a.EPoorNetworkConditionsType:\035k_EPoorNet"
  "workConditions_None\022=\n\007players\030\002 \003(\0132,.p"
  "roto.dota.CMsgPoorNetworkConditions.Play"
  "er\032\256\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022^\n\021dis"
  "connect_reason\030\002 \001(\0162\'.proto.dota.ENetwo"
  "rkDisconnectionReason:\032NETWORK_DISCONNEC"
  "T_INVALID\022\031\n\021num_bad_intervals\030\003 \001(\r\022\025\n\r"
  "peak_loss_pct\030\004 \001(\r\"\321\002\n\023CMsgGameserverCr"
  "ash\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 \001(\006\022"
  "I\n\ngame_state\030\003 \001(\0162\032.proto.dota.DOTA_Ga"
  "meState:\031DOTA_GAMERULES_STATE_INIT\022\032\n\022se"
  "ntinel_save_time\030\004 \001(\007\022\026\n\016custom_game_id"
  "\030\013 \001(\006\022\025\n\rtournament_id\030\014 \001(\r\022\027\n\017server_"
  "steam_id\030\005 \001(\006\022\035\n\025server_public_ip_addr\030"
  "\006 \001(\007\022\023\n\013server_port\030\007 \001(\r\022\026\n\016server_clu"
  "ster\030\010 \001(\r\022\013\n\003pid\030\t \001(\r\022\016\n\006engine\030\n \001(\r\""
  "\343\007\n\024CMsgConnectedPlayers\022B\n\021connected_pl"
  "ayers\030\001 \003(\0132\'.proto.dota.CMsgConnectedPl"
  "ayers.Player\022E\n\024disconnected_players\030\007 \003"
  "(\0132\'.proto.dota.CMsgConnectedPlayers.Pla"
  "yer\022I\n\ngame_state\030\002 \001(\0162\032.proto.dota.DOT"
  "A_GameState:\031DOTA_GAMERULES_STATE_INIT\022\034"
  "\n\024first_blood_happened\030\006 \001(\010\022\036\n\026legacy_m"
  "ass_disconnect\030\t \001(\010\022F\n\027poor_network_con"
  "ditions\030\n \001(\0132%.proto.dota.CMsgPoorNetwo"
  "rkConditions\022I\n\013send_reason\030\010 \001(\0162+.prot"
  "o.dota.CMsgConnectedPlayers.SendReason:\007"
  "INVALID\022\025\n\rradiant_kills\030\013 \001(\r\022\022\n\ndire_k"
  "ills\030\014 \001(\r\022\024\n\014radiant_lead\030\016 \001(\005\022\026\n\016buil"
  "ding_state\030\017 \001(\r\032\276\001\n\006Player\022\020\n\010steam_id\030"
  "\001 \001(\006\022\017\n\007hero_id\030\002 \001(\r\0221\n\014leaver_state\030\003"
  " \001(\0132\033.proto.dota.CMsgLeaverState\022^\n\021dis"
  "connect_reason\030\004 \001(\0162\'.proto.dota.ENetwo"
  "rkDisconnectionReason:\032NETWORK_DISCONNEC"
  "T_INVALID\"\211\002\n\nSendReason\022\013\n\007INVALID\020\000\022\r\n"
  "\tHEARTBEAT\020\001\022\016\n\nGAME_STATE\020\002\022\017\n\013FIRST_BL"
  "OOD\020\003\022\024\n\020PLAYER_CONNECTED\020\004\022\017\n\013PLAYER_HE"
  "RO\020\005\022$\n PLAYER_DISCONNECTED_CONSEQUENCES"
  "\020\006\022&\n\"PLAYER_DISCONNECTED_NOCONSEQUENCES"
  "\020\007\022\025\n\021GAMESTATE_TIMEOUT\020\n\022\023\n\017MASS_DISCON"
  "NECT\020\013\022\t\n\005KILLS\020\r\022\022\n\016BUILDING_STATE\020\016\"\347\007"
  "\n\022CMsgGameServerInfo\022\035\n\025server_public_ip"
  "_addr\030\001 \001(\007\022\036\n\026server_private_ip_addr\030\002 "
  "\001(\007\022\023\n\013server_port\030\003 \001(\r\022\026\n\016server_tv_po"
  "rt\030\004 \001(\r\022\037\n\027assigned_server_tv_port\030\026 \001("
  "\r\022(\n legacy_server_steamdatagram_port\030\025 "
  "\001(\r\022$\n\034server_steamdatagram_address\030\033 \001("
  "\014\022\022\n\nserver_key\030\005 \001(\t\022\032\n\022server_hibernat"
  "ion\030\006 \001(\010\022K\n\013server_type\030\007 \001(\0162).proto.d"
  "ota.CMsgGameServerInfo.ServerType:\013UNSPE"
  "CIFIED\022\025\n\rserver_region\030\010 \001(\r\022\026\n\016server_"
  "loadavg\030\t \001(\002\022 \n\030server_tv_broadcast_tim"
  "e\030\n \001(\002\022\030\n\020server_game_time\030\013 \001(\002\022\'\n\037ser"
  "ver_relay_connected_steam_id\030\014 \001(\006\022\027\n\017re"
  "lay_slots_max\030\r \001(\r\022\030\n\020relays_connected\030"
  "\016 \001(\005\022\037\n\027relay_clients_connected\030\017 \001(\005\022$"
  "\n\034relayed_game_server_steam_id\030\020 \001(\006\022\032\n\022"
  "parent_relay_count\030\021 \001(\r\022\026\n\016tv_secret_co"
  "de\030\022 \001(\006\022\026\n\016server_version\030\023 \001(\r\022\026\n\016serv"
  "er_cluster\030\024 \001(\r\022L\n\022allow_custom_games\030\027"
  " \001(\0162*.proto.dota.CMsgGameServerInfo.Cus"
  "tomGames:\004BOTH\022\025\n\rbuild_version\030\030 \001(\r\022\027\n"
  "\017tf_server_count\030\031 \001(\r\022\026\n\016srcds_instance"
  "\030\032 \001(\r\"B\n\nServerType\022\017\n\013UNSPECIFIED\020\000\022\010\n"
  "\004GAME\020\001\022\t\n\005PROXY\020\002\022\016\n\nTENSORFLOW\020\003\"+\n\013Cu"
  "stomGames\022\010\n\004BOTH\020\000\022\010\n\004NONE\020\001\022\010\n\004ONLY\020\002\""
  "\342\002\n\022CMsgLeaverDetected\022\020\n\010steam_id\030\001 \001(\006"
  "\022G\n\rleaver_status\030\002 \001(\0162\036.proto.dota.DOT"
  "ALeaverStatus_t:\020DOTA_LEAVER_NONE\0221\n\014lea"
  "ver_state\030\004 \001(\0132\033.proto.dota.CMsgLeaverS"
  "tate\022\026\n\016server_cluster\030\005 \001(\r\022^\n\021disconne"
  "ct_reason\030\006 \001(\0162\'.proto.dota.ENetworkDis"
  "connectionReason:\032NETWORK_DISCONNECT_INV"
  "ALID\022F\n\027poor_network_conditions\030\007 \001(\0132%."
  "proto.dota.CMsgPoorNetworkConditions\",\n\032"
  "CMsgLeaverDetectedResponse\022\016\n\006result\030\001 \001"
  "(\r\"X\n\037CMsgDOTAFantasyFinalPlayerStats\0225\n"
  "\005stats\030\002 \003(\0132&.proto.dota.CMsgDOTAFantas"
  "yPlayerStats\"W\n\036CMsgDOTAFantasyLivePlaye"
  "rStats\0225\n\005stats\030\002 \003(\0132&.proto.dota.CMsgD"
  "OTAFantasyPlayerStats\"\227\001\n\024CMsgDOTAFantas"
  "yMatch\022\020\n\010match_id\030\001 \001(\004\022\021\n\tleague_id\030\002 "
  "\001(\r\022\021\n\tseries_id\030\003 \001(\r\022\022\n\nstart_time\030\004 \001"
  "(\r\022\023\n\013series_type\030\005 \001(\r\022\016\n\006team_1\030\006 \001(\r\022"
  "\016\n\006team_2\030\007 \001(\r\"M\n\024CMsgDOTAUpdateClippy\022"
  "\032\n\022good_team_hero_ids\030\001 \003(\r\022\031\n\021bad_team_"
  "hero_ids\030\002 \003(\r\"Z\n\033CMsgServerToGCRealtime"
  "Stats\022;\n\007delayed\030\001 \001(\0132*.proto.dota.CMsg"
  "DOTARealtimeGameStatsTerse\"7\n$CMsgGCToSe"
  "rverRealtimeStatsStartStop\022\017\n\007delayed\030\001 "
  "\001(\010\"7\n%CMsgGCToServerUpdateSteamBroadcas"
  "ting\022\016\n\006active\030\001 \001(\010\"\226\036\n\024CMsgGameMatchSi"
  "gnOut\022\026\n\010match_id\030\001 \001(\004B\004\200\246\035\001\022\020\n\010duratio"
  "n\030\002 \001(\r\022\025\n\rgood_guys_win\030\003 \001(\010\022\014\n\004date\030\004"
  " \001(\007\022\023\n\013num_players\030\005 \003(\r\0225\n\005teams\030\006 \003(\013"
  "2&.proto.dota.CMsgGameMatchSignOut.CTeam"
  "\022\024\n\014tower_status\030\010 \003(\r\022\027\n\017barracks_statu"
  "s\030\t \003(\r\022\017\n\007cluster\030\n \001(\r\022\023\n\013server_addr\030"
  "\013 \001(\t\022\030\n\020first_blood_time\030\014 \001(\r\022\024\n\014game_"
  "balance\030\r \001(\002\022\023\n\013event_score\030\016 \001(\r\0225\n\npi"
  "cks_bans\030\017 \003(\0132!.proto.dota.CMatchHeroSe"
  "lectEvent\022=\n\rfantasy_stats\030) \003(\0132&.proto"
  ".dota.CMsgDOTAFantasyPlayerStats\022Z\n play"
  "er_strange_count_adjustments\030\021 \003(\01320.pro"
  "to.dota.CMsgEconPlayerStrangeCountAdjust"
  "ment\022\033\n\023automatic_surrender\030\022 \001(\010\022\026\n\016ser"
  "ver_version\030\023 \001(\r\022\036\n\026legacy_mass_disconn"
  "ect\030\025 \001(\010\022F\n\027poor_network_conditions\030# \001"
  "(\0132%.proto.dota.CMsgPoorNetworkCondition"
  "s\022O\n\017additional_msgs\030\024 \003(\01326.proto.dota."
  "CMsgGameMatchSignOut.CAdditionalSignoutM"
  "sg\022R\n\022social_feed_events\030$ \003(\01326.proto.d"
  "ota.CMsgGameMatchSignOut.CSocialFeedMatc"
  "hEvent\022\036\n\026average_networth_delta\030\026 \001(\021\022\034"
  "\n\024networth_delta_min10\030\027 \001(\021\022\034\n\024networth"
  "_delta_min20\030\030 \001(\021\022$\n\034maximum_losing_net"
  "worth_lead\030\031 \001(\021\022 \n\030average_experience_d"
  "elta\030\032 \001(\021\022\036\n\026experience_delta_min10\030\033 \001"
  "(\021\022\036\n\026experience_delta_min20\030\034 \001(\021\022\037\n\027bo"
  "nus_gold_winner_min10\030\035 \001(\021\022\037\n\027bonus_gol"
  "d_winner_min20\030\036 \001(\021\022\037\n\027bonus_gold_winne"
  "r_total\030\037 \001(\r\022\036\n\026bonus_gold_loser_min10\030"
  "  \001(\021\022\036\n\026bonus_gold_loser_min20\030! \001(\021\022\036\n"
  "\026bonus_gold_loser_total\030\" \001(\r\022J\n\020custom_"
  "game_data\030% \001(\01320.proto.dota.CMsgGameMat"
  "chSignOut.CCustomGameData\022\023\n\013match_flags"
  "\030& \001(\r\022\023\n\013team_scores\030\' \003(\r\022\031\n\021pre_game_"
  "duration\030( \001(\r\022b\n\036event_game_leaderboard"
  "_entries\030* \003(\0132:.proto.dota.CMsgGameMatc"
  "hSignOut.EventGameLeaderboardEntry\022G\n\017wa"
  "rd_placements\030+ \003(\0132..proto.dota.CMsgGam"
  "eMatchSignOut.WardPlacement\022 \n\030bounty_ru"
  "ne_gold_winners\030, \001(\r\022\037\n\027bounty_rune_gol"
  "d_losers\030- \001(\r\022(\n range_creep_upgrade_go"
  "ld_winners\030. \001(\r\022\'\n\037range_creep_upgrade_"
  "gold_losers\030/ \001(\r\032\362\013\n\005CTeam\022\?\n\007players\030\001"
  " \003(\0132..proto.dota.CMsgGameMatchSignOut.C"
  "Team.CPlayer\032\247\013\n\007CPlayer\022\020\n\010steam_id\030\001 \001"
  "(\006\022\017\n\007hero_id\030\003 \001(\r\022\r\n\005items\030\004 \003(\r\022\014\n\004go"
  "ld\030\005 \001(\r\022\r\n\005kills\030\006 \001(\r\022\016\n\006deaths\030\007 \001(\r\022"
  "\017\n\007assists\030\010 \001(\r\022\025\n\rleaver_status\030\t \001(\r\022"
  "\021\n\tlast_hits\030\n \001(\r\022\016\n\006denies\030\013 \001(\r\022\024\n\014go"
  "ld_per_min\030\014 \001(\r\022\025\n\rxp_per_minute\030\r \001(\r\022"
  "\022\n\ngold_spent\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022\032\n\022sc"
  "aled_hero_damage\030\020 \001(\r\022\033\n\023scaled_tower_d"
  "amage\030\021 \001(\r\022\033\n\023scaled_hero_healing\030\022 \001(\r"
  "\022\026\n\016time_last_seen\030\023 \001(\r\022\035\n\025support_abil"
  "ity_value\030\024 \001(\r\022\020\n\010party_id\030\025 \001(\004\022\024\n\014sca"
  "led_kills\030\030 \001(\002\022\025\n\rscaled_deaths\030\031 \001(\002\022\026"
  "\n\016scaled_assists\030\032 \001(\002\022\031\n\021claimed_farm_g"
  "old\030\033 \001(\r\022\024\n\014support_gold\030\034 \001(\r\022\026\n\016claim"
  "ed_denies\030\035 \001(\r\022\026\n\016claimed_misses\030\036 \001(\r\022"
  "\016\n\006misses\030\037 \001(\r\022\021\n\tnet_worth\030\" \001(\r\022\023\n\013he"
  "ro_damage\030% \001(\r\022\024\n\014tower_damage\030& \001(\r\022\024\n"
  "\014hero_healing\030\' \001(\r\022@\n\020ability_upgrades\030"
  "  \003(\0132&.proto.dota.CMatchPlayerAbilityUp"
  "grade\022M\n\032additional_units_inventory\030! \003("
  "\0132).proto.dota.CMatchAdditionalUnitInven"
  "tory\022>\n\017permanent_buffs\030( \003(\0132%.proto.do"
  "ta.CMatchPlayerPermanentBuff\022X\n\020custom_g"
  "ame_data\030# \001(\0132>.proto.dota.CMsgGameMatc"
  "hSignOut.CTeam.CPlayer.CCustomGameData\022\032"
  "\n\022match_player_flags\030$ \001(\r\022\032\n\022talent_abi"
  "lity_ids\030) \003(\r\022\027\n\017hero_pick_order\030* \001(\r\022"
  "\031\n\021hero_was_randomed\030+ \001(\010\022\026\n\016hero_was_b"
  "onus\030, \001(\010\022%\n\035hero_was_dota_plus_suggest"
  "ion\0302 \001(\010\022\014\n\004lane\030- \001(\r\0227\n\013timed_stats\030."
  " \003(\0132\".proto.dota.CMatchPlayerTimedStats"
  "\022\033\n\023is_using_plus_guide\030/ \001(\010\022*\n\"hero_da"
  "mage_received_pre_reduction\0300 \001(\r\022+\n#her"
  "o_damage_received_post_reduction\0301 \001(\r\022\024"
  "\n\014seconds_dead\0303 \001(\r\022\032\n\022gold_lost_to_dea"
  "th\0304 \001(\r\0324\n\017CCustomGameData\022\021\n\tdota_team"
  "\030\001 \001(\r\022\016\n\006winner\030\002 \001(\010\0325\n\025CAdditionalSig"
  "noutMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001(\014\032z\n"
  "\025CSocialFeedMatchEvent\022\022\n\naccount_id\030\001 \001"
  "(\r\022\021\n\ttimestamp\030\002 \001(\r\022\022\n\nevent_type\030\003 \001("
  "\r\022\021\n\tgame_time\030\004 \001(\005\022\023\n\013replay_time\030\005 \001("
  "\r\032,\n\017CCustomGameData\022\031\n\021publish_timestam"
  "p\030\001 \001(\r\032\255\001\n\031EventGameLeaderboardEntry\022\023\n"
  "\013name_suffix\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\022\024\n\014ext"
  "ra_data_1\030\003 \001(\r\022\024\n\014extra_data_2\030\004 \001(\r\022\024\n"
  "\014extra_data_3\030\005 \001(\r\022\024\n\014extra_data_4\030\006 \001("
  "\r\022\024\n\014extra_data_5\030\007 \001(\r\032\263\001\n\rWardPlacemen"
  "t\022\021\n\tplayer_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\023\n"
  "\013placed_time\030\003 \001(\r\022\026\n\016building_state\030\004 \001"
  "(\r\022\023\n\013creep_state\030\005 \001(\r\022\024\n\014roshan_alive\030"
  "\006 \001(\010\022\022\n\nposition_x\030\007 \001(\r\022\022\n\nposition_y\030"
  "\010 \001(\r\"\222\001\n\024CMsgSignOutDraftInfo\022\"\n\032radian"
  "t_captain_account_id\030\001 \001(\r\022\037\n\027dire_capta"
  "in_account_id\030\002 \001(\r\0225\n\npicks_bans\030\003 \003(\0132"
  "!.proto.dota.CMatchHeroSelectEvent\"\354\001\n\022C"
  "MsgSignOutBotInfo\022\024\n\014allow_cheats\030\001 \001(\010\022"
  "U\n\026bot_difficulty_radiant\030\002 \001(\0162\035.proto."
  "dota.DOTABotDifficulty:\026BOT_DIFFICULTY_P"
  "ASSIVE\022\025\n\rcreated_lobby\030\003 \001(\010\022R\n\023bot_dif"
  "ficulty_dire\030\005 \001(\0162\035.proto.dota.DOTABotD"
  "ifficulty:\026BOT_DIFFICULTY_PASSIVE\"\346\004\n\026CM"
  "sgSignOutPlayerStats\022\022\n\naccount_id\030\001 \001(\005"
  "\022\020\n\010match_id\030\002 \001(\004\022\014\n\004rank\030\003 \001(\r\022\017\n\007hero"
  "_id\030\004 \001(\r\022\020\n\010rampages\030\005 \001(\r\022\024\n\014triple_ki"
  "lls\030\006 \001(\r\022\033\n\023first_blood_claimed\030\007 \001(\r\022\031"
  "\n\021first_blood_given\030\010 \001(\r\022\027\n\017couriers_ki"
  "lled\030\t \001(\r\022\030\n\020aegises_snatched\030\n \001(\r\022\025\n\r"
  "cheeses_eaten\030\013 \001(\r\022\026\n\016creeps_stacked\030\014 "
  "\001(\r\022\023\n\013fight_score\030\r \001(\002\022\022\n\nfarm_score\030\016"
  " \001(\002\022\025\n\rsupport_score\030\017 \001(\002\022\022\n\npush_scor"
  "e\030\020 \001(\002\022\r\n\005kills\030\021 \001(\r\022\016\n\006deaths\030\022 \001(\r\022\017"
  "\n\007assists\030\023 \001(\r\022\021\n\tlast_hits\030\024 \001(\r\022\016\n\006de"
  "nies\030\025 \001(\r\022\013\n\003gpm\030\026 \001(\002\022\014\n\004xppm\030\027 \001(\002\022\021\n"
  "\tnet_worth\030\030 \001(\002\022\016\n\006damage\030\031 \001(\002\022\r\n\005heal"
  "s\030\032 \001(\002\022\031\n\021rapiers_purchased\030\033 \001(\r\022\035\n\025ob"
  "server_wards_placed\030\034 \001(\r\022\027\n\017wards_destr"
  "oyed\030\035 \001(\r\"\337\003\n\037CMsgSignOutCommunicationS"
  "ummary\022P\n\007players\030\001 \003(\0132\?.proto.dota.CMs"
  "gSignOutCommunicationSummary.PlayerCommu"
  "nication\032\351\002\n\023PlayerCommunication\022\022\n\nacco"
  "unt_id\030\001 \001(\r\022\r\n\005pings\030\002 \001(\r\022\036\n\026max_pings"
  "_per_interval\030\003 \001(\r\022\026\n\016teammate_pings\030\004 "
  "\001(\r\022\'\n\037max_teammate_pings_per_interval\030\005"
  " \001(\r\022\032\n\022team_chat_messages\030\006 \001(\r\022\031\n\021all_"
  "chat_messages\030\007 \001(\r\022\033\n\023chat_wheel_messag"
  "es\030\010 \001(\r\022\016\n\006pauses\030\t \001(\r\022\020\n\010unpauses\030\n \001"
  "(\r\022\023\n\013lines_drawn\030\013 \001(\r\022\032\n\022voice_chat_se"
  "conds\030\014 \001(\r\022\022\n\nchat_mutes\030\r \001(\r\022\023\n\013voice"
  "_mutes\030\016 \001(\r\"\256\005\n\034CMsgGameMatchSignoutRes"
  "ponse\022\020\n\010match_id\030\001 \001(\004\022\023\n\013replay_salt\030\002"
  " \001(\007\022B\n\024timed_reward_details\030\003 \003(\0132$.pro"
  "to.dota.CLobbyTimedRewardDetails\0227\n\021xp_r"
  "eward_details\030\004 \003(\0132\034.proto.dota.CDOTALo"
  "bbyMember\022\020\n\010leagueid\030\005 \001(\r\022\034\n\024metadata_"
  "private_key\030\007 \001(\007\0220\n\rmatch_details\030\010 \001(\013"
  "2\031.proto.dota.CMsgDOTAMatch\022Q\n\020players_m"
  "etadata\030\t \003(\01327.proto.dota.CMsgGameMatch"
  "SignoutResponse.PlayerMetadata\032\264\002\n\016Playe"
  "rMetadata\022\017\n\007hero_id\030\001 \001(\r\022\025\n\ravg_kills_"
  "x16\030\002 \001(\r\022\026\n\016avg_deaths_x16\030\003 \001(\r\022\027\n\017avg"
  "_assists_x16\030\004 \001(\r\022\023\n\013avg_gpm_x16\030\005 \001(\r\022"
  "\023\n\013avg_xpm_x16\030\006 \001(\r\022\026\n\016best_kills_x16\030\007"
  " \001(\r\022\030\n\020best_assists_x16\030\010 \001(\r\022\024\n\014best_g"
  "pm_x16\030\t \001(\r\022\024\n\014best_xpm_x16\030\n \001(\r\022\022\n\nwi"
  "n_streak\030\013 \001(\r\022\027\n\017best_win_streak\030\014 \001(\r\022"
  "\024\n\014games_played\030\r \001(\r\"^\n\030CMsgTimedReward"
  "Container\022B\n\024timed_reward_details\030\001 \003(\0132"
  "$.proto.dota.CLobbyTimedRewardDetails\"\205\001"
  "\n%CMsgGameMatchSignOutPermissionRequest\022"
  "\026\n\016server_version\030\001 \001(\r\022\025\n\rlocal_attempt"
  "\030\002 \001(\r\022\025\n\rtotal_attempt\030\003 \001(\r\022\026\n\016seconds"
  "_waited\030\004 \001(\r\"\213\001\n&CMsgGameMatchSignOutPe"
  "rmissionResponse\022!\n\022permission_granted\030\001"
  " \001(\010:\005false\022\036\n\017abandon_signout\030\002 \001(\010:\005fa"
  "lse\022\036\n\023retry_delay_seconds\030\003 \001(\r:\0010\"\252\001\n!"
  "CMsgGameMatchSignOutEventGameData\0223\n\010eve"
  "nt_id\030\001 \001(\0162\022.proto.dota.EEvent:\rEVENT_I"
  "D_NONE\022\021\n\tgame_name\030\002 \001(\t\022\020\n\010map_name\030\003 "
  "\001(\t\022\027\n\017event_game_data\030\004 \001(\014\022\022\n\nstart_ti"
  "me\030\005 \001(\r\"\353\n\n\034CMsgDOTALiveScoreboardUpdat"
  "e\022\025\n\rtournament_id\030\001 \001(\r\022\032\n\022tournament_g"
  "ame_id\030\002 \001(\r\022\020\n\010duration\030\003 \001(\002\022\022\n\nhltv_d"
  "elay\030\004 \001(\005\022@\n\tteam_good\030\005 \001(\0132-.proto.do"
  "ta.CMsgDOTALiveScoreboardUpdate.Team\022\?\n\010"
  "team_bad\030\006 \001(\0132-.proto.dota.CMsgDOTALive"
  "ScoreboardUpdate.Team\022\034\n\024roshan_respawn_"
  "timer\030\007 \001(\r\022\021\n\tleague_id\030\010 \001(\r\022\020\n\010match_"
  "id\030\t \001(\004\032\253\010\n\004Team\022E\n\007players\030\001 \003(\01324.pro"
  "to.dota.CMsgDOTALiveScoreboardUpdate.Tea"
  "m.Player\022\r\n\005score\030\002 \001(\r\022\023\n\013tower_state\030\003"
  " \001(\r\022\026\n\016barracks_state\030\004 \001(\r\022\022\n\nhero_pic"
  "ks\030\005 \003(\r\022\021\n\thero_bans\030\006 \003(\r\032\370\006\n\006Player\022\023"
  "\n\013player_slot\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t"
  "\022\021\n\thero_name\030\003 \001(\t\022\017\n\007hero_id\030\004 \001(\r\022\r\n\005"
  "kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001(\r\022\017\n\007assists\030\007"
  " \001(\r\022\021\n\tlast_hits\030\010 \001(\r\022\016\n\006denies\030\t \001(\r\022"
  "\014\n\004gold\030\n \001(\r\022\r\n\005level\030\013 \001(\r\022\024\n\014gold_per"
  "_min\030\014 \001(\002\022\022\n\nxp_per_min\030\r \001(\002\022~\n\016ultima"
  "te_state\030\016 \001(\0162F.proto.dota.CMsgDOTALive"
  "ScoreboardUpdate.Team.Player.DOTAUltimat"
  "eState:\036k_EDOTAUltimateStateNotLearned\022\031"
  "\n\021ultimate_cooldown\030\017 \001(\002\022\r\n\005item0\030\020 \001(\r"
  "\022\r\n\005item1\030\021 \001(\r\022\r\n\005item2\030\022 \001(\r\022\r\n\005item3\030"
  "\023 \001(\r\022\r\n\005item4\030\024 \001(\r\022\r\n\005item5\030\025 \001(\r\022\025\n\rr"
  "espawn_timer\030\026 \001(\r\022\022\n\naccount_id\030\027 \001(\r\022\022"
  "\n\nposition_x\030\030 \001(\002\022\022\n\nposition_y\030\031 \001(\002\022\021"
  "\n\tnet_worth\030\032 \001(\r\022S\n\tabilities\030\033 \003(\0132@.p"
  "roto.dota.CMsgDOTALiveScoreboardUpdate.T"
  "eam.Player.HeroAbility\0328\n\013HeroAbility\022\022\n"
  "\nability_id\030\001 \001(\r\022\025\n\rability_level\030\002 \001(\r"
  "\"\233\001\n\021DOTAUltimateState\022\"\n\036k_EDOTAUltimat"
  "eStateNotLearned\020\000\022 \n\034k_EDOTAUltimateSta"
  "teCooldown\020\001\022!\n\035k_EDOTAUltimateStateNeed"
  "sMana\020\002\022\035\n\031k_EDOTAUltimateStateReady\020\003\"E"
  "\n\036CMsgDOTARequestPlayerResources\022\020\n\010stea"
  "m_id\030\001 \001(\006\022\021\n\tplayer_id\030\002 \001(\r\"\250\001\n&CMsgDO"
  "TARequestPlayerResourcesResponse\022\020\n\010stea"
  "m_id\030\001 \001(\006\022\014\n\004rank\030\002 \001(\r\022\021\n\tplayer_id\030\003 "
  "\001(\r\022\031\n\021prevent_text_chat\030\004 \001(\010\022\032\n\022preven"
  "t_voice_chat\030\005 \001(\010\022\024\n\014low_priority\030\006 \001(\010"
  "\"V\n#CMsgDOTARequestBatchPlayerResources\022"
  "\027\n\013account_ids\030\001 \003(\rB\002\020\001\022\026\n\nrank_types\030\004"
  " \003(\rB\002\020\001\"\221\002\n+CMsgDOTARequestBatchPlayerR"
  "esourcesResponse\022O\n\007results\030\006 \003(\0132>.prot"
  "o.dota.CMsgDOTARequestBatchPlayerResourc"
  "esResponse.Result\032\220\001\n\006Result\022\022\n\naccount_"
  "id\030\001 \001(\r\022\031\n\021prevent_text_chat\030\002 \001(\010\022\032\n\022p"
  "revent_voice_chat\030\003 \001(\010\022\014\n\004rank\030\004 \001(\r\022\027\n"
  "\017rank_calibrated\030\005 \001(\010\022\024\n\014low_priority\030\006"
  " \001(\010\"R\n\035CMsgDOTAPlayerFailedToConnect\022\026\n"
  "\016failed_loaders\030\001 \003(\006\022\031\n\021abandoned_loade"
  "rs\030\002 \003(\006\"\333\001\n\024CMsgGCToRelayConnect\022\035\n\025sou"
  "rce_tv_public_addr\030\001 \001(\r\022\036\n\026source_tv_pr"
  "ivate_addr\030\002 \001(\r\022\026\n\016source_tv_port\030\003 \001(\r"
  "\022\034\n\024game_server_steam_id\030\004 \001(\004\022\024\n\014parent"
  "_count\030\005 \001(\r\022\035\n\025tv_unique_secret_code\030\006 "
  "\001(\006\022\031\n\021source_tv_steamid\030\007 \001(\006\"8\n\037CMsgGC"
  "GCToLANServerRelayConnect\022\025\n\rrelay_steam"
  "id\030\001 \001(\006\"\036\n\034CMsgGCToRelayConnectResponse"
  "\",\n\026CMsgGCBanStatusRequest\022\022\n\naccount_id"
  "\030\001 \001(\r\"t\n\027CMsgGCBanStatusResponse\022\016\n\006res"
  "ult\030\001 \001(\r\022\024\n\014low_priority\030\002 \001(\010\022\030\n\020text_"
  "chat_banned\030\003 \001(\010\022\031\n\021voice_chat_banned\030\004"
  " \001(\010\"\364\002\n\027CMsgTournamentItemEvent\022\031\n\021kill"
  "er_account_id\030\001 \001(\007\022\031\n\021victim_account_id"
  "\030\002 \001(\007\022E\n\nevent_type\030\003 \001(\0162!.proto.dota."
  "DOTA_TournamentEvents:\016TE_FIRST_BLOOD\022\020\n"
  "\010tv_delay\030\004 \001(\005\022\021\n\tdota_time\030\005 \001(\005\022\023\n\013re"
  "play_time\030\006 \001(\002\022\021\n\tloot_list\030\007 \001(\t\022\022\n\nev"
  "ent_team\030\010 \001(\r\022\030\n\020multi_kill_count\030\t \001(\r"
  "\022\024\n\014winner_score\030\n \001(\r\022\023\n\013loser_score\030\013 "
  "\001(\r\0226\n\014hero_statues\030\014 \003(\0132 .proto.dota.C"
  "ProtoItemHeroStatue\"\201\001\n\037CMsgTournamentIt"
  "emEventResponse\022E\n\nevent_type\030\001 \001(\0162!.pr"
  "oto.dota.DOTA_TournamentEvents:\016TE_FIRST"
  "_BLOOD\022\027\n\017viewers_granted\030\006 \001(\r\"#\n\017CMsgT"
  "eamFanfare\022\020\n\010match_id\030\001 \001(\004\"L\n\027CMsgResp"
  "onseTeamFanfare\022\030\n\020fanfare_goodguys\030\001 \001("
  "\r\022\027\n\017fanfare_badguys\030\002 \001(\r\"u\n\034CMsgGameSe"
  "rverUploadSaveGame\022\021\n\tgame_time\030\001 \001(\r\022\026\n"
  "\016save_game_data\030\002 \001(\014\022\020\n\010lobby_id\030\003 \001(\004\022"
  "\030\n\020player_steam_ids\030\004 \003(\004\"\301\001\n\034CMsgGameSe"
  "rverSaveGameResult\022O\n\006result\030\001 \001(\0162/.pro"
  "to.dota.CMsgGameServerSaveGameResult.Res"
  "ult:\016SaveSuccessful\"P\n\006Result\022\022\n\016SaveSuc"
  "cessful\020\000\022\023\n\017SessionNotFound\020\001\022\021\n\rDataba"
  "seError\020\002\022\n\n\006TooBig\020\003\",\n\031CMsgGameServerG"
  "etLoadGame\022\017\n\007save_id\030\001 \001(\r\"9\n\037CMsgGameS"
  "erverGetLoadGameResult\022\026\n\016save_game_data"
  "\030\001 \001(\014\"U\n!CMsgDOTAGenerateDiretidePrizeL"
  "ist\022\022\n\nprize_list\030\001 \001(\r\022\034\n\024highest_rosha"
  "n_level\030\002 \001(\r\"e\n)CMsgDOTAGenerateDiretid"
  "ePrizeListResponse\022\021\n\titem_defs\030\001 \003(\r\022\021\n"
  "\tsteam_ids\030\002 \003(\006\022\022\n\nprize_list\030\003 \001(\r\"@\n\034"
  "CMsgDOTARewardDiretidePrizes\022\014\n\004team\030\001 \001"
  "(\r\022\022\n\nprize_list\030\002 \001(\r\"<\n&CMsgDOTADireti"
  "dePrizesRewardedResponse\022\022\n\nprize_list\030\001"
  " \001(\r\"\347\002\n\030CMsgDOTAAwardEventPoints\022F\n\014awa"
  "rd_points\030\001 \003(\01320.proto.dota.CMsgDOTAAwa"
  "rdEventPoints.AwardPoints\022\020\n\010match_id\030\002 "
  "\001(\004\0223\n\010event_id\030\004 \001(\0162\022.proto.dota.EEven"
  "t:\rEVENT_ID_NONE\022\021\n\ttimestamp\030\005 \001(\r\022\024\n\014a"
  "udit_action\030\006 \001(\r\032\222\001\n\013AwardPoints\022\022\n\nacc"
  "ount_id\030\001 \001(\r\022\016\n\006points\030\002 \001(\005\022\026\n\016premium"
  "_points\030\003 \001(\005\022\026\n\016trade_ban_time\030\005 \001(\r\022/\n"
  " eligible_for_periodic_adjustment\030\006 \001(\010:"
  "\005false\"\201\002\n)CMsgServerToGCSignoutAwardAdd"
  "itionalDrops\022T\n\005drops\030\001 \003(\0132E.proto.dota"
  ".CMsgServerToGCSignoutAwardAdditionalDro"
  "ps.AdditionalDrops\022\020\n\010match_id\030\002 \001(\004\032l\n\017"
  "AdditionalDrops\022\021\n\tloot_list\030\001 \001(\t\022\032\n\022pl"
  "ayer_account_ids\030\002 \003(\r\022\020\n\010no_trade\030\003 \001(\010"
  "\022\030\n\020randomize_reward\030\004 \001(\010\"\263\001\n\034CMsgDOTAF"
  "rostivusTimeElapsed\022\017\n\007seconds\030\001 \001(\r\022<\n\005"
  "users\030\002 \003(\0132-.proto.dota.CMsgDOTAFrostiv"
  "usTimeElapsed.User\022\020\n\010match_id\030\003 \001(\004\0322\n\004"
  "User\022\022\n\naccount_id\030\001 \001(\r\022\026\n\016time_elapsed"
  "_s\030\002 \001(\r\"E\n\031CMsgGCToServerPingRequest\022\022\n"
  "\nrequest_id\030\001 \001(\006\022\024\n\014request_time\030\002 \001(\004\""
  "W\n\032CMsgGCToServerPingResponse\022\022\n\nrequest"
  "_id\030\001 \001(\006\022\024\n\014request_time\030\002 \001(\004\022\017\n\007clust"
  "er\030\003 \001(\r\"7\n\034CMsgGCToServerConsoleCommand"
  "\022\027\n\017console_command\030\001 \001(\t\"c\n\030CMsgServerG"
  "etEventPoints\0223\n\010event_id\030\001 \001(\0162\022.proto."
  "dota.EEvent:\rEVENT_ID_NONE\022\022\n\naccount_id"
  "\030\002 \003(\r\"\337\001\n CMsgServerGetEventPointsRespo"
  "nse\0223\n\010event_id\030\001 \001(\0162\022.proto.dota.EEven"
  "t:\rEVENT_ID_NONE\022C\n\006points\030\002 \003(\01323.proto"
  ".dota.CMsgServerGetEventPointsResponse.P"
  "oints\032A\n\006Points\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014p"
  "oints_total\030\002 \001(\r\022\r\n\005owned\030\004 \001(\010\"\356\001\n\037CMs"
  "gServerGrantSurveyPermission\022C\n\007surveys\030"
  "\001 \003(\01322.proto.dota.CMsgServerGrantSurvey"
  "Permission.Survey\032\205\001\n\006Survey\022\022\n\naccount_"
  "id\030\001 \001(\r\022\023\n\013question_id\030\002 \001(\r\022\023\n\013expire_"
  "time\030\003 \001(\r\022\022\n\nsurvey_key\030\004 \001(\004\022\022\n\nextra_"
  "data\030\005 \001(\004\022\025\n\rextra_data_32\030\006 \001(\004\"9\n\'CMs"
  "gServerGrantSurveyPermissionResponse\022\016\n\006"
  "result\030\001 \001(\r\"\273\002\n\"CMsgServerToGCMatchConn"
  "ectionStats\022\020\n\010match_id\030\001 \001(\004\022\021\n\tregion_"
  "id\030\002 \001(\r\022\021\n\tleague_id\030\003 \001(\r\022F\n\007players\030\004"
  " \003(\01325.proto.dota.CMsgServerToGCMatchCon"
  "nectionStats.Player\022\022\n\ncluster_id\030\005 \001(\r\032"
  "\200\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\n\n\002ip\030\002 \001"
  "(\007\022\023\n\013avg_ping_ms\030\003 \001(\r\022\023\n\013packet_loss\030\005"
  " \001(\002\022\026\n\016ping_deviation\030\006 \001(\002\022\024\n\014full_res"
  "ends\030\007 \001(\r\";\n CMsgServerGCUpdateSpectato"
  "rCount\022\027\n\017spectator_count\030\001 \001(\r\"\235\002\n\024CSer"
  "ializedCombatLog\022\017\n\007version\030\001 \001(\r\022\?\n\ndic"
  "tionary\030\002 \001(\0132+.proto.dota.CSerializedCo"
  "mbatLog.Dictionary\0223\n\007entries\030\003 \003(\0132\".pr"
  "oto.dota.CMsgDOTACombatLogEntry\032~\n\nDicti"
  "onary\022G\n\007strings\030\001 \003(\01326.proto.dota.CSer"
  "ializedCombatLog.Dictionary.DictString\032\'"
  "\n\nDictString\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002(\t\""
  "8\n!CMsgServerToGCGetAdditionalEquips\022\023\n\013"
  "account_ids\030\001 \003(\r\"\323\001\n)CMsgServerToGCGetA"
  "dditionalEquipsResponse\022Q\n\006equips\030\001 \003(\0132"
  "A.proto.dota.CMsgServerToGCGetAdditional"
  "EquipsResponse.CUserEquips\032S\n\013CUserEquip"
  "s\022\022\n\naccount_id\030\001 \001(\r\0220\n\006equips\030\002 \003(\0132 ."
  "proto.dota.CAdditionalEquipSlot\"3\n\034CMsgS"
  "erverToGCGetProfileCard\022\023\n\013account_ids\030\001"
  " \003(\r\"V\n$CMsgServerToGCGetProfileCardResp"
  "onse\022.\n\005cards\030\001 \003(\0132\037.proto.dota.CMsgDOT"
  "AProfileCard\"\251\001\n CMsgServerToGCVictoryPr"
  "edictions\022D\n\007records\030\001 \003(\01323.proto.dota."
  "CMsgServerToGCVictoryPredictions.Record\032"
  "\?\n\006Record\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_id"
  "\030\002 \001(\004\022\020\n\010item_ids\030\005 \003(\004\"\276\001\n\026CMsgSuspici"
  "ousActivity\022\022\n\naccount_id\030\001 \001(\r\022^\n\010activ"
  "ity\030\002 \001(\0162\037.proto.dota.ESuspiciousActivi"
  "ty:+k_ESuspiciousActivity_VAC_MultipleIn"
  "stances\022\020\n\010intdata1\030\003 \001(\021\022\020\n\010intdata2\030\004 "
  "\001(\021\022\014\n\004time\030\005 \001(\r\"\035\n\033CMsgServerToGCReque"
  "stStatus\"8\n$CMsgServerToGCRequestStatus_"
  "Response\022\020\n\010response\030\001 \001(\r\"\352\001\n\037CMsgSignO"
  "utAssassinMiniGameInfo\022\027\n\017winning_player"
  "s\030\001 \003(\006\022\026\n\016losing_players\030\002 \003(\006\022\025\n\rarcan"
  "a_owners\030\003 \003(\006\022\024\n\014assassin_won\030\004 \001(\010\022\026\n\016"
  "target_hero_id\030\005 \001(\r\022\032\n\022contract_complet"
  "ed\030\006 \001(\010\022\036\n\026contract_complete_time\030\007 \001(\002"
  "\022\025\n\rpa_is_radiant\030\010 \001(\010\"T\n CMsgServerToG"
  "CGetIngameEventData\0220\n\005event\030\001 \001(\0162\022.pro"
  "to.dota.EEvent:\rEVENT_ID_NONE\"@\n%CMsgGCT"
  "oServerIngameEventDataOraclePA\022\027\n\017target"
  "_hero_ids\030\001 \003(\r\"\320\001\n\033CMsgServerToGCKillSu"
  "mmaries\022\026\n\016ingameevent_id\030\001 \001(\r\022F\n\tsumma"
  "ries\030\002 \003(\01323.proto.dota.CMsgServerToGCKi"
  "llSummaries.KillSummary\032Q\n\013KillSummary\022\026"
  "\n\016killer_hero_id\030\001 \001(\r\022\026\n\016victim_hero_id"
  "\030\002 \001(\r\022\022\n\nkill_count\030\003 \001(\r\"\254\003\n\036CMsgGCToS"
  "erverPredictionResult\022\022\n\naccount_id\030\001 \001("
  "\r\022\020\n\010match_id\030\002 \001(\004\022\017\n\007correct\030\003 \001(\010\022J\n\013"
  "predictions\030\004 \003(\01325.proto.dota.CMsgGCToS"
  "erverPredictionResult.Prediction\032\206\002\n\nPre"
  "diction\022\020\n\010item_def\030\001 \001(\r\022\023\n\013num_correct"
  "\030\002 \001(\r\022\021\n\tnum_fails\030\003 \001(\r\022d\n\006result\030\004 \001("
  "\0162=.proto.dota.CMsgGCToServerPredictionR"
  "esult.Prediction.EResult:\025k_eResult_Item"
  "Granted\022\031\n\021granted_item_defs\030\006 \003(\r\"=\n\007ER"
  "esult\022\031\n\025k_eResult_ItemGranted\020\001\022\027\n\023k_eR"
  "esult_Destroyed\020\002\"E\n\036CMsgServerToGCLockC"
  "harmTrading\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_"
  "id\030\002 \001(\004\"\201\003\n CMsgSignOutUpdatePlayerChal"
  "lenge\022\022\n\naccount_id\030\001 \001(\r\022I\n\tcompleted\030\002"
  " \003(\01326.proto.dota.CMsgSignOutUpdatePlaye"
  "rChallenge.Challenge\022H\n\010rerolled\030\003 \003(\01326"
  ".proto.dota.CMsgSignOutUpdatePlayerChall"
  "enge.Challenge\022\020\n\010match_id\030\004 \001(\004\022\017\n\007hero"
  "_id\030\005 \001(\r\032\220\001\n\tChallenge\0223\n\010event_id\030\001 \001("
  "\0162\022.proto.dota.EEvent:\rEVENT_ID_NONE\022\017\n\007"
  "slot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\022\020\n\010pr"
  "ogress\030\004 \001(\r\022\026\n\016challenge_rank\030\005 \001(\r\"~\n#"
  "CMsgServerToGCRerollPlayerChallenge\022\022\n\na"
  "ccount_id\030\001 \001(\r\022C\n\nreroll_msg\030\002 \001(\0132/.pr"
  "oto.dota.CMsgClientToGCRerollPlayerChall"
  "enge\"\216\002\n\035CMsgServerToGCHoldEventPoints\022D"
  "\n\005holds\030\001 \003(\01325.proto.dota.CMsgServerToG"
  "CHoldEventPoints.HoldRequest\0223\n\010event_id"
  "\030\002 \001(\0162\022.proto.dota.EEvent:\rEVENT_ID_NON"
  "E\022\020\n\010hold_key\030\003 \001(\004\022\022\n\nhold_until\030\004 \001(\r\032"
  "L\n\013HoldRequest\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013po"
  "ints_held\030\002 \001(\r\022\024\n\014premium_held\030\003 \001(\r\"\177\n"
  "!CMsgSignOutReleaseEventPointHolds\022\023\n\013ac"
  "count_ids\030\001 \003(\r\0223\n\010event_id\030\002 \001(\0162\022.prot"
  "o.dota.EEvent:\rEVENT_ID_NONE\022\020\n\010hold_key"
  "\030\003 \001(\004\"\331\001\n\025CMsgSignOutWagerStats\0229\n\007play"
  "ers\030\001 \003(\0132(.proto.dota.CMsgSignOutWagerS"
  "tats.Player\0223\n\010event_id\030\002 \001(\0162\022.proto.do"
  "ta.EEvent:\rEVENT_ID_NONE\032P\n\006Player\022\022\n\nac"
  "count_id\030\001 \001(\r\022\020\n\010winnings\030\002 \001(\r\022\021\n\tmax_"
  "wager\030\003 \001(\r\022\r\n\005wager\030\004 \001(\r\"\201\002\n\016CMsgSpend"
  "Wager\0222\n\007players\030\001 \003(\0132!.proto.dota.CMsg"
  "SpendWager.Player\0223\n\010event_id\030\002 \001(\0162\022.pr"
  "oto.dota.EEvent:\rEVENT_ID_NONE\022\021\n\ttimest"
  "amp\030\003 \001(\r\022\020\n\010match_id\030\004 \001(\004\022\027\n\017server_st"
  "eam_id\030\005 \001(\004\032H\n\006Player\022\022\n\naccount_id\030\001 \001"
  "(\r\022\r\n\005wager\030\002 \001(\r\022\033\n\023wager_token_item_id"
  "\030\003 \001(\004\"\235\002\n\022CMsgSignOutXPCoins\0226\n\007players"
  "\030\001 \003(\0132%.proto.dota.CMsgSignOutXPCoins.P"
  "layer\0223\n\010event_id\030\002 \001(\0162\022.proto.dota.EEv"
  "ent:\rEVENT_ID_NONE\022\020\n\010match_id\030\003 \001(\004\022\021\n\t"
  "timestamp\030\004 \001(\r\032u\n\006Player\022\022\n\naccount_id\030"
  "\001 \001(\r\022\021\n\txp_gained\030\002 \001(\r\022\023\n\013coins_spent\030"
  "\003 \001(\r\022\033\n\023wager_token_item_id\030\004 \001(\004\022\022\n\nra"
  "nk_wager\030\005 \001(\r\"\371\001\n CMsgSignOutCommunityG"
  "oalProgress\0223\n\010event_id\030\001 \001(\0162\022.proto.do"
  "ta.EEvent:\rEVENT_ID_NONE\022Y\n\020event_increm"
  "ents\030\002 \003(\0132\?.proto.dota.CMsgSignOutCommu"
  "nityGoalProgress.EventGoalIncrement\032E\n\022E"
  "ventGoalIncrement\022\025\n\revent_goal_id\030\001 \001(\r"
  "\022\030\n\020increment_amount\030\002 \001(\r\"\260\001\n\032CMsgServe"
  "rToGCPostMatchTip\0223\n\010event_id\030\001 \001(\0162\022.pr"
  "oto.dota.EEvent:\rEVENT_ID_NONE\022\020\n\010match_"
  "id\030\002 \001(\004\022\031\n\021tipper_account_id\030\003 \001(\r\022\034\n\024r"
  "ecipient_account_id\030\004 \001(\r\022\022\n\ntip_amount\030"
  "\005 \001(\r\"\343\001\n\"CMsgServerToGCPostMatchTipResp"
  "onse\022\020\n\010match_id\030\001 \001(\004\022\031\n\021tipper_account"
  "_id\030\002 \001(\r\022\034\n\024recipient_account_id\030\003 \001(\r\022"
  "N\n\006result\030\004 \001(\01625.proto.dota.CMsgServerT"
  "oGCPostMatchTipResponse.Result:\007SUCCESS\""
  "\"\n\006Result\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020\001\"[\n3C"
  "MsgServerToGCCloseCompendiumInGamePredic"
  "tionVoting\022\020\n\010match_id\030\001 \001(\004\022\022\n\nhltv_del"
  "ay\030\002 \001(\r\"M\n;CMsgServerToGCCloseCompendiu"
  "mInGamePredictionVotingResponse\022\016\n\006resul"
  "t\030\001 \001(\010\"\264\002\n/CMsgServerToGCCompendiumInGa"
  "mePredictionResults\022\020\n\010match_id\030\001 \001(\004\022]\n"
  "\007results\030\002 \003(\0132L.proto.dota.CMsgServerTo"
  "GCCompendiumInGamePredictionResults.Pred"
  "ictionResult\022\021\n\tleague_id\030\003 \001(\r\022\026\n\016leagu"
  "e_node_id\030\004 \001(\r\032e\n\020PredictionResult\022\025\n\rp"
  "rediction_id\030\001 \001(\r\022\030\n\020prediction_value\030\002"
  " \001(\r\022 \n\030prediction_value_is_mask\030\003 \001(\010\"I"
  "\n7CMsgServerToGCCompendiumInGamePredicti"
  "onResultsResponse\022\016\n\006result\030\001 \001(\010\"{\n+CMs"
  "gGCToGCCompendiumInGamePredictionResults"
  "\022L\n\007results\030\001 \001(\0132;.proto.dota.CMsgServe"
  "rToGCCompendiumInGamePredictionResults\"\371"
  "\003\n,CMsgServerToGCMatchPlayerItemPurchase"
  "History\022\020\n\010match_id\030\001 \001(\004\022\013\n\003mmr\030\002 \001(\r\022P"
  "\n\007players\030\003 \003(\0132\?.proto.dota.CMsgServerT"
  "oGCMatchPlayerItemPurchaseHistory.Player"
  "\032\202\001\n\014ItemPurchase\022\014\n\004item\030\001 \001(\r\022\014\n\004gold\030"
  "\002 \001(\r\022\021\n\tnet_worth\030\003 \001(\r\022\021\n\tgame_time\030\004 "
  "\001(\r\022\027\n\017inventory_items\030\005 \003(\r\022\027\n\017talents_"
  "skilled\030\007 \003(\010\032\322\001\n\006Player\022\023\n\013player_slot\030"
  "\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001"
  "(\r\022\027\n\017allied_hero_ids\030\004 \003(\r\022\026\n\016enemy_her"
  "o_ids\030\005 \003(\r\022]\n\016item_purchases\030\006 \003(\0132E.pr"
  "oto.dota.CMsgServerToGCMatchPlayerItemPu"
  "rchaseHistory.ItemPurchase\"\320\006\n\037CMsgServe"
  "rToGCMatchStateHistory\022\020\n\010match_id\030\001 \001(\004"
  "\022\023\n\013radiant_won\030\002 \001(\010\022\013\n\003mmr\030\003 \001(\r\022L\n\014ma"
  "tch_states\030\004 \003(\01326.proto.dota.CMsgServer"
  "ToGCMatchStateHistory.MatchState\032\264\001\n\013Pla"
  "yerState\022\017\n\007hero_id\030\001 \001(\r\022\021\n\tnet_worth\030\002"
  " \001(\r\022\r\n\005level\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\024\n\014r"
  "espawn_time\030\005 \001(\r\022\023\n\013has_buyback\030\006 \001(\010\022\021"
  "\n\thas_aegis\030\007 \001(\010\022\022\n\nhas_rapier\030\010 \001(\010\022\020\n"
  "\010distance\030\t \001(\r\032\270\002\n\tTeamState\022\014\n\004team\030\001 "
  "\001(\r\022N\n\rplayer_states\030\002 \003(\01327.proto.dota."
  "CMsgServerToGCMatchStateHistory.PlayerSt"
  "ate\022\030\n\020tower_health_pct\030\003 \003(\r\022\033\n\023barrack"
  "s_health_pct\030\004 \003(\r\022\032\n\022ancient_health_pct"
  "\030\005 \001(\r\022\026\n\016glyph_cooldown\030\006 \001(\r\022\r\n\005kills\030"
  "\007 \001(\r\022\033\n\023creep_distance_safe\030\010 \001(\r\022\032\n\022cr"
  "eep_distance_mid\030\t \001(\r\022\032\n\022creep_distance"
  "_off\030\n \001(\r\032\270\001\n\nMatchState\022\021\n\tgame_time\030\001"
  " \001(\r\022L\n\rradiant_state\030\002 \001(\01325.proto.dota"
  ".CMsgServerToGCMatchStateHistory.TeamSta"
  "te\022I\n\ndire_state\030\003 \001(\01325.proto.dota.CMsg"
  "ServerToGCMatchStateHistory.TeamState\"^\n"
  "%CMsgServerToGCCavernCrawlIsHeroActive\022\020"
  "\n\010event_id\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\017\n\007"
  "hero_id\030\003 \001(\r\"[\n-CMsgServerToGCCavernCra"
  "wlIsHeroActiveResponse\022\016\n\006result\030\001 \001(\010\022\032"
  "\n\022potential_winnings\030\002 \001(\r\";\n CMsgGCtoSe"
  "rverTensorflowInstance\022\027\n\017server_instanc"
  "e\030\001 \001(\r*\306\001\n\032EPoorNetworkConditionsType\022!"
  "\n\035k_EPoorNetworkConditions_None\020\000\022$\n k_E"
  "PoorNetworkConditions_Unknown\020\001\022+\n\'k_EPo"
  "orNetworkConditions_MassDisconnect\020\002\0222\n."
  "k_EPoorNetworkConditions_ExcessBadQosInt"
  "ervals\020\003*\355\002\n\021EAbilityAbuseType\022\034\n\030k_EAbi"
  "lityAbuseType_None\020\000\022#\n\037k_EAbilityAbuseT"
  "ype_Io_Relocate\020\001\022*\n&k_EAbilityAbuseType"
  "_Chen_Test_Of_Faith\020\002\022&\n\"k_EAbilityAbuse"
  "Type_Bane_Nightmare\020\003\022-\n)k_EAbilityAbuse"
  "Type_Bloodseeker_Bloodrage\020\004\0224\n0k_EAbili"
  "tyAbuseType_Outworld_Astral_Imprisonment"
  "\020\005\022/\n+k_EAbilityAbuseType_Shadow_Demon_D"
  "isruption\020\006\022+\n\'k_EAbilityAbuseType_Grims"
  "troke_InkSwell\020\007*\376\004\n\027EIntentionalFeeding"
  "Type\022\"\n\036k_EIntentionalFeedingType_None\020\000"
  "\022-\n)k_EIntentionalFeedingType_ExcessiveD"
  "eaths\020\001\0226\n2k_EIntentionalFeedingType_Mul"
  "tipleCourierPurchases\020\002\0223\n/k_EIntentiona"
  "lFeedingType_MultipleCourierDeaths\020\004\022)\n%"
  "k_EIntentionalFeedingType_LowActivity\020\010\022"
  "\'\n#k_EIntentionalFeedingType_LowDamage\020\020"
  "\022-\n)k_EIntentionalFeedingType_HighUnspen"
  "tGold\020 \0222\n.k_EIntentionalFeedingType_Sol"
  "dTooMuchItemValue\020@\0222\n-k_EIntentionalFee"
  "dingType_TooManyDroppedItems\020\200\001\0223\n.k_EIn"
  "tentionalFeedingType_ExcessiveTowerDamag"
  "e\020\200\002\022-\n(k_EIntentionalFeedingType_LastHi"
  "tsDenies\020\200\004\022#\n\036k_EIntentionalFeedingType"
  "_XPPM\020\200\010\022/\n*k_EIntentionalFeedingType_Su"
  "spiciousOrders\020\200\020*\243\001\n\023ESuspiciousActivit"
  "y\022/\n+k_ESuspiciousActivity_VAC_MultipleI"
  "nstances\020\001\022,\n(k_ESuspiciousActivity_Inte"
  "ntionalFeeding\020d\022-\n)k_ESuspiciousActivit"
  "y_SuspectedBotFarming\020e*\200\003\n\024ESuspiciousB"
  "uildType\022\037\n\033k_ESuspiciousBuildType_None\020"
  "\000\022&\n\"k_ESuspiciousBuildType_NoGoldSpent\020"
  "\001\022\"\n\036k_ESuspiciousBuildType_NoItems\020\002\022-\n"
  ")k_ESuspiciousBuildType_NoSignificantIte"
  "ms\020\003\022\'\n#k_ESuspiciousBuildType_TooManyBo"
  "ots\020\004\022\037\n\033k_ESuspiciousBuildType_Bot1\020e\022\037"
  "\n\033k_ESuspiciousBuildType_Bot2\020f\022\037\n\033k_ESu"
  "spiciousBuildType_Bot3\020g\022\037\n\033k_ESuspiciou"
  "sBuildType_Bot4\020h\022\037\n\033k_ESuspiciousBuildT"
  "ype_Bot5\020iB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fserver_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fserver_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fserver_2eproto,
  "dota_gcmessages_server.proto", &assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto, 25137,
};

void AddDescriptors_dota_5fgcmessages_5fserver_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[6] =
  {
    ::AddDescriptors_steammessages_2eproto,
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
    ::AddDescriptors_dota_5fgcmessages_5fcommon_2eproto,
    ::AddDescriptors_econ_5fgcmessages_2eproto,
    ::AddDescriptors_network_5fconnection_2eproto,
    ::AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto, deps, 6);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fserver_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fserver_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[0];
}
bool CMsgConnectedPlayers_SendReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::INVALID;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::HEARTBEAT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAME_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::FIRST_BLOOD;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_CONNECTED;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_HERO;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_CONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_NOCONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAMESTATE_TIMEOUT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::MASS_DISCONNECT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::KILLS;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::BUILDING_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MIN;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MAX;
const int CMsgConnectedPlayers::SendReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[1];
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::TENSORFLOW;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
const int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_CustomGames_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[2];
}
bool CMsgGameServerInfo_CustomGames_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::BOTH;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::NONE;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::ONLY;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MIN;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MAX;
const int CMsgGameServerInfo::CustomGames_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[3];
}
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNotLearned;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateCooldown;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNeedsMana;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateReady;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MIN;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MAX;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[4];
}
bool CMsgGameServerSaveGameResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SaveSuccessful;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SessionNotFound;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::DatabaseError;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::TooBig;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MIN;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MAX;
const int CMsgGameServerSaveGameResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[5];
}
bool CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_ItemGranted;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_Destroyed;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MIN;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MAX;
const int CMsgGCToServerPredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgServerToGCPostMatchTipResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[6];
}
bool CMsgServerToGCPostMatchTipResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::SUCCESS;
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::FAILURE;
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::Result_MIN;
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::Result_MAX;
const int CMsgServerToGCPostMatchTipResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EPoorNetworkConditionsType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[7];
}
bool EPoorNetworkConditionsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAbilityAbuseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[8];
}
bool EAbilityAbuseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EIntentionalFeedingType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[9];
}
bool EIntentionalFeedingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESuspiciousActivity_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[10];
}
bool ESuspiciousActivity_IsValid(int value) {
  switch (value) {
    case 1:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESuspiciousBuildType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[11];
}
bool ESuspiciousBuildType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgPoorNetworkConditions_Player::InitAsDefaultInstance() {
}
class CMsgPoorNetworkConditions_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgPoorNetworkConditions_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_disconnect_reason(CMsgPoorNetworkConditions_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_num_bad_intervals(CMsgPoorNetworkConditions_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_peak_loss_pct(CMsgPoorNetworkConditions_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPoorNetworkConditions_Player::kAccountIdFieldNumber;
const int CMsgPoorNetworkConditions_Player::kDisconnectReasonFieldNumber;
const int CMsgPoorNetworkConditions_Player::kNumBadIntervalsFieldNumber;
const int CMsgPoorNetworkConditions_Player::kPeakLossPctFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPoorNetworkConditions.Player)
}
CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(const CMsgPoorNetworkConditions_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_loss_pct_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(peak_loss_pct_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPoorNetworkConditions.Player)
}

void CMsgPoorNetworkConditions_Player::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peak_loss_pct_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(peak_loss_pct_));
}

CMsgPoorNetworkConditions_Player::~CMsgPoorNetworkConditions_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPoorNetworkConditions.Player)
  SharedDtor();
}

void CMsgPoorNetworkConditions_Player::SharedDtor() {
}

void CMsgPoorNetworkConditions_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPoorNetworkConditions_Player& CMsgPoorNetworkConditions_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPoorNetworkConditions_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgPoorNetworkConditions_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPoorNetworkConditions.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_loss_pct_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(peak_loss_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPoorNetworkConditions_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPoorNetworkConditions_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ENetworkDisconnectionReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_disconnect_reason(static_cast<::proto::dota::ENetworkDisconnectionReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_bad_intervals = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_bad_intervals(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 peak_loss_pct = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_peak_loss_pct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPoorNetworkConditions_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPoorNetworkConditions.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::proto::dota::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_bad_intervals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_bad_intervals(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_bad_intervals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 peak_loss_pct = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_peak_loss_pct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_loss_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPoorNetworkConditions.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPoorNetworkConditions.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPoorNetworkConditions_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPoorNetworkConditions.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->disconnect_reason(), output);
  }

  // optional uint32 num_bad_intervals = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_bad_intervals(), output);
  }

  // optional uint32 peak_loss_pct = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peak_loss_pct(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPoorNetworkConditions.Player)
}

::google::protobuf::uint8* CMsgPoorNetworkConditions_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPoorNetworkConditions.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->disconnect_reason(), target);
  }

  // optional uint32 num_bad_intervals = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_bad_intervals(), target);
  }

  // optional uint32 peak_loss_pct = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peak_loss_pct(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPoorNetworkConditions.Player)
  return target;
}

size_t CMsgPoorNetworkConditions_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPoorNetworkConditions.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

    // optional uint32 num_bad_intervals = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_bad_intervals());
    }

    // optional uint32 peak_loss_pct = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_loss_pct());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPoorNetworkConditions_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPoorNetworkConditions_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPoorNetworkConditions.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPoorNetworkConditions.Player)
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_bad_intervals_ = from.num_bad_intervals_;
    }
    if (cached_has_bits & 0x00000008u) {
      peak_loss_pct_ = from.peak_loss_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions_Player::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions_Player::Swap(CMsgPoorNetworkConditions_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPoorNetworkConditions_Player::InternalSwap(CMsgPoorNetworkConditions_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(disconnect_reason_, other->disconnect_reason_);
  swap(num_bad_intervals_, other->num_bad_intervals_);
  swap(peak_loss_pct_, other->peak_loss_pct_);
}

::google::protobuf::Metadata CMsgPoorNetworkConditions_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPoorNetworkConditions::InitAsDefaultInstance() {
}
class CMsgPoorNetworkConditions::HasBitSetters {
 public:
  static void set_has_detection_type(CMsgPoorNetworkConditions* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPoorNetworkConditions::kDetectionTypeFieldNumber;
const int CMsgPoorNetworkConditions::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPoorNetworkConditions::CMsgPoorNetworkConditions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPoorNetworkConditions)
}
CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(const CMsgPoorNetworkConditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detection_type_ = from.detection_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPoorNetworkConditions)
}

void CMsgPoorNetworkConditions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto.base);
  detection_type_ = 0;
}

CMsgPoorNetworkConditions::~CMsgPoorNetworkConditions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPoorNetworkConditions)
  SharedDtor();
}

void CMsgPoorNetworkConditions::SharedDtor() {
}

void CMsgPoorNetworkConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPoorNetworkConditions& CMsgPoorNetworkConditions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPoorNetworkConditions_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgPoorNetworkConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPoorNetworkConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  detection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPoorNetworkConditions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPoorNetworkConditions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EPoorNetworkConditionsType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_detection_type(static_cast<::proto::dota::EPoorNetworkConditionsType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPoorNetworkConditions_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPoorNetworkConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPoorNetworkConditions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EPoorNetworkConditionsType_IsValid(value)) {
            set_detection_type(static_cast< ::proto::dota::EPoorNetworkConditionsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPoorNetworkConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPoorNetworkConditions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPoorNetworkConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPoorNetworkConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->detection_type(), output);
  }

  // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPoorNetworkConditions)
}

::google::protobuf::uint8* CMsgPoorNetworkConditions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPoorNetworkConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->detection_type(), target);
  }

  // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPoorNetworkConditions)
  return target;
}

size_t CMsgPoorNetworkConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPoorNetworkConditions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->detection_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPoorNetworkConditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPoorNetworkConditions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPoorNetworkConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPoorNetworkConditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPoorNetworkConditions)
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions::MergeFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_detection_type()) {
    set_detection_type(from.detection_type());
  }
}

void CMsgPoorNetworkConditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions::CopyFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions::Swap(CMsgPoorNetworkConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPoorNetworkConditions::InternalSwap(CMsgPoorNetworkConditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(detection_type_, other->detection_type_);
}

::google::protobuf::Metadata CMsgPoorNetworkConditions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameserverCrash::InitAsDefaultInstance() {
}
class CMsgGameserverCrash::HasBitSetters {
 public:
  static void set_has_match_id(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lobby_id(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_state(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sentinel_save_time(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_custom_game_id(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_tournament_id(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_server_steam_id(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_server_public_ip_addr(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_server_port(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_server_cluster(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_pid(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_engine(CMsgGameserverCrash* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameserverCrash::kMatchIdFieldNumber;
const int CMsgGameserverCrash::kLobbyIdFieldNumber;
const int CMsgGameserverCrash::kGameStateFieldNumber;
const int CMsgGameserverCrash::kSentinelSaveTimeFieldNumber;
const int CMsgGameserverCrash::kCustomGameIdFieldNumber;
const int CMsgGameserverCrash::kTournamentIdFieldNumber;
const int CMsgGameserverCrash::kServerSteamIdFieldNumber;
const int CMsgGameserverCrash::kServerPublicIpAddrFieldNumber;
const int CMsgGameserverCrash::kServerPortFieldNumber;
const int CMsgGameserverCrash::kServerClusterFieldNumber;
const int CMsgGameserverCrash::kPidFieldNumber;
const int CMsgGameserverCrash::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameserverCrash::CMsgGameserverCrash()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameserverCrash)
}
CMsgGameserverCrash::CMsgGameserverCrash(const CMsgGameserverCrash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tournament_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameserverCrash)
}

void CMsgGameserverCrash::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tournament_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(tournament_id_));
}

CMsgGameserverCrash::~CMsgGameserverCrash() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameserverCrash)
  SharedDtor();
}

void CMsgGameserverCrash::SharedDtor() {
}

void CMsgGameserverCrash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameserverCrash& CMsgGameserverCrash::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameserverCrash_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameserverCrash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameserverCrash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_cluster_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(server_cluster_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_id_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(tournament_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameserverCrash::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameserverCrash*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_state(static_cast<::proto::dota::DOTA_GameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 sentinel_save_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_sentinel_save_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 server_steam_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 server_public_ip_addr = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_server_public_ip_addr(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 server_port = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_cluster = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_server_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 pid = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 engine = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_engine(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 custom_game_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 tournament_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameserverCrash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameserverCrash)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 sentinel_save_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_sentinel_save_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sentinel_save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_public_ip_addr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_server_public_ip_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_cluster = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_server_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_pid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 engine = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_engine(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameserverCrash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameserverCrash)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameserverCrash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameserverCrash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->game_state(), output);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->sentinel_save_time(), output);
  }

  // optional fixed64 server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->server_steam_id(), output);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->server_public_ip_addr(), output);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_port(), output);
  }

  // optional uint32 server_cluster = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_cluster(), output);
  }

  // optional uint32 pid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pid(), output);
  }

  // optional uint32 engine = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->engine(), output);
  }

  // optional fixed64 custom_game_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->custom_game_id(), output);
  }

  // optional uint32 tournament_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tournament_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameserverCrash)
}

::google::protobuf::uint8* CMsgGameserverCrash::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameserverCrash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->game_state(), target);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->sentinel_save_time(), target);
  }

  // optional fixed64 server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->server_steam_id(), target);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->server_public_ip_addr(), target);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_port(), target);
  }

  // optional uint32 server_cluster = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_cluster(), target);
  }

  // optional uint32 pid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pid(), target);
  }

  // optional uint32 engine = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->engine(), target);
  }

  // optional fixed64 custom_game_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->custom_game_id(), target);
  }

  // optional uint32 tournament_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tournament_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameserverCrash)
  return target;
}

size_t CMsgGameserverCrash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameserverCrash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional fixed32 sentinel_save_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_steam_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_public_ip_addr = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_cluster = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 pid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional fixed64 custom_game_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 engine = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engine());
    }

    // optional uint32 tournament_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameserverCrash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameserverCrash* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameserverCrash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameserverCrash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameserverCrash)
    MergeFrom(*source);
  }
}

void CMsgGameserverCrash::MergeFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      sentinel_save_time_ = from.sentinel_save_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_cluster_ = from.server_cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000200u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000800u) {
      tournament_id_ = from.tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameserverCrash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameserverCrash::CopyFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameserverCrash::IsInitialized() const {
  return true;
}

void CMsgGameserverCrash::Swap(CMsgGameserverCrash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameserverCrash::InternalSwap(CMsgGameserverCrash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(lobby_id_, other->lobby_id_);
  swap(game_state_, other->game_state_);
  swap(sentinel_save_time_, other->sentinel_save_time_);
  swap(server_steam_id_, other->server_steam_id_);
  swap(server_public_ip_addr_, other->server_public_ip_addr_);
  swap(server_port_, other->server_port_);
  swap(server_cluster_, other->server_cluster_);
  swap(pid_, other->pid_);
  swap(custom_game_id_, other->custom_game_id_);
  swap(engine_, other->engine_);
  swap(tournament_id_, other->tournament_id_);
}

::google::protobuf::Metadata CMsgGameserverCrash::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgConnectedPlayers_Player::InitAsDefaultInstance() {
  ::proto::dota::_CMsgConnectedPlayers_Player_default_instance_._instance.get_mutable()->leaver_state_ = const_cast< ::proto::dota::CMsgLeaverState*>(
      ::proto::dota::CMsgLeaverState::internal_default_instance());
}
class CMsgConnectedPlayers_Player::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgConnectedPlayers_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgConnectedPlayers_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgLeaverState& leaver_state(const CMsgConnectedPlayers_Player* msg);
  static void set_has_leaver_state(CMsgConnectedPlayers_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_disconnect_reason(CMsgConnectedPlayers_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::proto::dota::CMsgLeaverState&
CMsgConnectedPlayers_Player::HasBitSetters::leaver_state(const CMsgConnectedPlayers_Player* msg) {
  return *msg->leaver_state_;
}
void CMsgConnectedPlayers_Player::clear_leaver_state() {
  if (leaver_state_ != nullptr) leaver_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectedPlayers_Player::kSteamIdFieldNumber;
const int CMsgConnectedPlayers_Player::kHeroIdFieldNumber;
const int CMsgConnectedPlayers_Player::kLeaverStateFieldNumber;
const int CMsgConnectedPlayers_Player::kDisconnectReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConnectedPlayers.Player)
}
CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leaver_state()) {
    leaver_state_ = new ::proto::dota::CMsgLeaverState(*from.leaver_state_);
  } else {
    leaver_state_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConnectedPlayers.Player)
}

void CMsgConnectedPlayers_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&leaver_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnect_reason_) -
      reinterpret_cast<char*>(&leaver_state_)) + sizeof(disconnect_reason_));
}

CMsgConnectedPlayers_Player::~CMsgConnectedPlayers_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConnectedPlayers.Player)
  SharedDtor();
}

void CMsgConnectedPlayers_Player::SharedDtor() {
  if (this != internal_default_instance()) delete leaver_state_;
}

void CMsgConnectedPlayers_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgConnectedPlayers_Player& CMsgConnectedPlayers_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgConnectedPlayers_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgConnectedPlayers_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConnectedPlayers.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(leaver_state_ != nullptr);
    leaver_state_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnect_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgConnectedPlayers_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgConnectedPlayers_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgLeaverState leaver_state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLeaverState::_InternalParse;
        object = msg->mutable_leaver_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ENetworkDisconnectionReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_disconnect_reason(static_cast<::proto::dota::ENetworkDisconnectionReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgConnectedPlayers_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConnectedPlayers.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLeaverState leaver_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaver_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::proto::dota::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConnectedPlayers.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConnectedPlayers.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgConnectedPlayers_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConnectedPlayers.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leaver_state(this), output);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->disconnect_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConnectedPlayers.Player)
}

::google::protobuf::uint8* CMsgConnectedPlayers_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConnectedPlayers.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leaver_state(this), target);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->disconnect_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConnectedPlayers.Player)
  return target;
}

size_t CMsgConnectedPlayers_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConnectedPlayers.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgLeaverState leaver_state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaver_state_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConnectedPlayers_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectedPlayers_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgConnectedPlayers_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConnectedPlayers.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConnectedPlayers.Player)
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers_Player::MergeFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_leaver_state()->::proto::dota::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectedPlayers_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers_Player::CopyFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_Player::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers_Player::Swap(CMsgConnectedPlayers_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectedPlayers_Player::InternalSwap(CMsgConnectedPlayers_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(leaver_state_, other->leaver_state_);
  swap(steam_id_, other->steam_id_);
  swap(hero_id_, other->hero_id_);
  swap(disconnect_reason_, other->disconnect_reason_);
}

::google::protobuf::Metadata CMsgConnectedPlayers_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgConnectedPlayers::InitAsDefaultInstance() {
  ::proto::dota::_CMsgConnectedPlayers_default_instance_._instance.get_mutable()->poor_network_conditions_ = const_cast< ::proto::dota::CMsgPoorNetworkConditions*>(
      ::proto::dota::CMsgPoorNetworkConditions::internal_default_instance());
}
class CMsgConnectedPlayers::HasBitSetters {
 public:
  static void set_has_game_state(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_first_blood_happened(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_legacy_mass_disconnect(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgConnectedPlayers* msg);
  static void set_has_poor_network_conditions(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_send_reason(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_radiant_kills(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_dire_kills(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_radiant_lead(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_building_state(CMsgConnectedPlayers* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::proto::dota::CMsgPoorNetworkConditions&
CMsgConnectedPlayers::HasBitSetters::poor_network_conditions(const CMsgConnectedPlayers* msg) {
  return *msg->poor_network_conditions_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectedPlayers::kConnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kDisconnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kGameStateFieldNumber;
const int CMsgConnectedPlayers::kFirstBloodHappenedFieldNumber;
const int CMsgConnectedPlayers::kLegacyMassDisconnectFieldNumber;
const int CMsgConnectedPlayers::kPoorNetworkConditionsFieldNumber;
const int CMsgConnectedPlayers::kSendReasonFieldNumber;
const int CMsgConnectedPlayers::kRadiantKillsFieldNumber;
const int CMsgConnectedPlayers::kDireKillsFieldNumber;
const int CMsgConnectedPlayers::kRadiantLeadFieldNumber;
const int CMsgConnectedPlayers::kBuildingStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectedPlayers::CMsgConnectedPlayers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConnectedPlayers)
}
CMsgConnectedPlayers::CMsgConnectedPlayers(const CMsgConnectedPlayers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      connected_players_(from.connected_players_),
      disconnected_players_(from.disconnected_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_poor_network_conditions()) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = nullptr;
  }
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiant_lead_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(radiant_lead_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConnectedPlayers)
}

void CMsgConnectedPlayers::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgConnectedPlayers_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&poor_network_conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiant_lead_) -
      reinterpret_cast<char*>(&poor_network_conditions_)) + sizeof(radiant_lead_));
}

CMsgConnectedPlayers::~CMsgConnectedPlayers() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConnectedPlayers)
  SharedDtor();
}

void CMsgConnectedPlayers::SharedDtor() {
  if (this != internal_default_instance()) delete poor_network_conditions_;
}

void CMsgConnectedPlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgConnectedPlayers& CMsgConnectedPlayers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgConnectedPlayers_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgConnectedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConnectedPlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_players_.Clear();
  disconnected_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(poor_network_conditions_ != nullptr);
    poor_network_conditions_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&game_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_kills_) -
        reinterpret_cast<char*>(&game_state_)) + sizeof(dire_kills_));
  }
  radiant_lead_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgConnectedPlayers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgConnectedPlayers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgConnectedPlayers_Player::_InternalParse;
          object = msg->add_connected_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_state(static_cast<::proto::dota::DOTA_GameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool first_blood_happened = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_first_blood_happened(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgConnectedPlayers_Player::_InternalParse;
          object = msg->add_disconnected_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgConnectedPlayers_SendReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_send_reason(static_cast<::proto::dota::CMsgConnectedPlayers_SendReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool legacy_mass_disconnect = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_legacy_mass_disconnect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgPoorNetworkConditions::_InternalParse;
        object = msg->mutable_poor_network_conditions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 radiant_kills = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_radiant_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_kills = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_dire_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 radiant_lead = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_radiant_lead(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 building_state = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_building_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgConnectedPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConnectedPlayers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connected_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_blood_happened = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_first_blood_happened(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_disconnected_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgConnectedPlayers_SendReason_IsValid(value)) {
            set_send_reason(static_cast< ::proto::dota::CMsgConnectedPlayers_SendReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_mass_disconnect = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_legacy_mass_disconnect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_kills = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_radiant_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_dire_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radiant_lead = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_radiant_lead(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiant_lead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 building_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_building_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConnectedPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConnectedPlayers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgConnectedPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConnectedPlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connected_players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->connected_players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional bool first_blood_happened = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->first_blood_happened(), output);
  }

  // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disconnected_players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->disconnected_players(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->send_reason(), output);
  }

  // optional bool legacy_mass_disconnect = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->legacy_mass_disconnect(), output);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::poor_network_conditions(this), output);
  }

  // optional uint32 radiant_kills = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->radiant_kills(), output);
  }

  // optional uint32 dire_kills = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dire_kills(), output);
  }

  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->radiant_lead(), output);
  }

  // optional uint32 building_state = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->building_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConnectedPlayers)
}

::google::protobuf::uint8* CMsgConnectedPlayers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConnectedPlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connected_players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->connected_players(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional bool first_blood_happened = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->first_blood_happened(), target);
  }

  // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disconnected_players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->disconnected_players(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->send_reason(), target);
  }

  // optional bool legacy_mass_disconnect = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->legacy_mass_disconnect(), target);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::poor_network_conditions(this), target);
  }

  // optional uint32 radiant_kills = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->radiant_kills(), target);
  }

  // optional uint32 dire_kills = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dire_kills(), target);
  }

  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->radiant_lead(), target);
  }

  // optional uint32 building_state = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->building_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConnectedPlayers)
  return target;
}

size_t CMsgConnectedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConnectedPlayers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->connected_players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connected_players(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->disconnected_players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->disconnected_players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *poor_network_conditions_);
    }

    // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional bool first_blood_happened = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool legacy_mass_disconnect = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->send_reason());
    }

    // optional uint32 radiant_kills = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_kills());
    }

    // optional uint32 building_state = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_state());
    }

    // optional uint32 dire_kills = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_kills());
    }

  }
  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radiant_lead());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConnectedPlayers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectedPlayers* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgConnectedPlayers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConnectedPlayers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConnectedPlayers)
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers::MergeFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_players_.MergeFrom(from.connected_players_);
  disconnected_players_.MergeFrom(from.disconnected_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_poor_network_conditions()->::proto::dota::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_mass_disconnect_ = from.legacy_mass_disconnect_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_reason_ = from.send_reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      radiant_kills_ = from.radiant_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_kills_ = from.dire_kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_radiant_lead(from.radiant_lead());
  }
}

void CMsgConnectedPlayers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers::CopyFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers::Swap(CMsgConnectedPlayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectedPlayers::InternalSwap(CMsgConnectedPlayers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&connected_players_)->InternalSwap(CastToBase(&other->connected_players_));
  CastToBase(&disconnected_players_)->InternalSwap(CastToBase(&other->disconnected_players_));
  swap(poor_network_conditions_, other->poor_network_conditions_);
  swap(game_state_, other->game_state_);
  swap(first_blood_happened_, other->first_blood_happened_);
  swap(legacy_mass_disconnect_, other->legacy_mass_disconnect_);
  swap(send_reason_, other->send_reason_);
  swap(radiant_kills_, other->radiant_kills_);
  swap(building_state_, other->building_state_);
  swap(dire_kills_, other->dire_kills_);
  swap(radiant_lead_, other->radiant_lead_);
}

::google::protobuf::Metadata CMsgConnectedPlayers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerInfo::InitAsDefaultInstance() {
}
class CMsgGameServerInfo::HasBitSetters {
 public:
  static void set_has_server_public_ip_addr(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_server_private_ip_addr(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_server_port(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_server_tv_port(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_assigned_server_tv_port(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_legacy_server_steamdatagram_port(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_server_steamdatagram_address(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_server_key(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_hibernation(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_server_type(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_server_region(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_server_loadavg(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_server_tv_broadcast_time(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_server_game_time(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_server_relay_connected_steam_id(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_relay_slots_max(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_relays_connected(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_relay_clients_connected(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_relayed_game_server_steam_id(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_parent_relay_count(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_tv_secret_code(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_server_version(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_server_cluster(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_allow_custom_games(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_build_version(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_tf_server_count(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_srcds_instance(CMsgGameServerInfo* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerInfo::kServerPublicIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPrivateIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPortFieldNumber;
const int CMsgGameServerInfo::kServerTvPortFieldNumber;
const int CMsgGameServerInfo::kAssignedServerTvPortFieldNumber;
const int CMsgGameServerInfo::kLegacyServerSteamdatagramPortFieldNumber;
const int CMsgGameServerInfo::kServerSteamdatagramAddressFieldNumber;
const int CMsgGameServerInfo::kServerKeyFieldNumber;
const int CMsgGameServerInfo::kServerHibernationFieldNumber;
const int CMsgGameServerInfo::kServerTypeFieldNumber;
const int CMsgGameServerInfo::kServerRegionFieldNumber;
const int CMsgGameServerInfo::kServerLoadavgFieldNumber;
const int CMsgGameServerInfo::kServerTvBroadcastTimeFieldNumber;
const int CMsgGameServerInfo::kServerGameTimeFieldNumber;
const int CMsgGameServerInfo::kServerRelayConnectedSteamIdFieldNumber;
const int CMsgGameServerInfo::kRelaySlotsMaxFieldNumber;
const int CMsgGameServerInfo::kRelaysConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayClientsConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayedGameServerSteamIdFieldNumber;
const int CMsgGameServerInfo::kParentRelayCountFieldNumber;
const int CMsgGameServerInfo::kTvSecretCodeFieldNumber;
const int CMsgGameServerInfo::kServerVersionFieldNumber;
const int CMsgGameServerInfo::kServerClusterFieldNumber;
const int CMsgGameServerInfo::kAllowCustomGamesFieldNumber;
const int CMsgGameServerInfo::kBuildVersionFieldNumber;
const int CMsgGameServerInfo::kTfServerCountFieldNumber;
const int CMsgGameServerInfo::kSrcdsInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerInfo::CMsgGameServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerInfo)
}
CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_key()) {
    server_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_key_);
  }
  server_steamdatagram_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_steamdatagram_address()) {
    server_steamdatagram_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_steamdatagram_address_);
  }
  ::memcpy(&server_public_ip_addr_, &from.server_public_ip_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&srcds_instance_) -
    reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(srcds_instance_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerInfo)
}

void CMsgGameServerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameServerInfo_dota_5fgcmessages_5fserver_2eproto.base);
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_steamdatagram_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_public_ip_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srcds_instance_) -
      reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(srcds_instance_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerInfo)
  SharedDtor();
}

void CMsgGameServerInfo::SharedDtor() {
  server_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_steamdatagram_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameServerInfo& CMsgGameServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameServerInfo_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      server_steamdatagram_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&server_public_ip_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_type_) -
        reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(server_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relayed_game_server_steam_id_) -
        reinterpret_cast<char*>(&server_region_)) + sizeof(relayed_game_server_steam_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&relay_clients_connected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_custom_games_) -
        reinterpret_cast<char*>(&relay_clients_connected_)) + sizeof(allow_custom_games_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&build_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&srcds_instance_) -
        reinterpret_cast<char*>(&build_version_)) + sizeof(srcds_instance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameServerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameServerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_server_public_ip_addr(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 server_private_ip_addr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_server_private_ip_addr(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_tv_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_server_tv_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string server_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGameServerInfo.server_key");
        object = msg->mutable_server_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool server_hibernation = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_server_hibernation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGameServerInfo_ServerType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_server_type(static_cast<::proto::dota::CMsgGameServerInfo_ServerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_region = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float server_loadavg = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_server_loadavg(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float server_tv_broadcast_time = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_server_tv_broadcast_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float server_game_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_server_game_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_server_relay_connected_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 relay_slots_max = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_relay_slots_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 relays_connected = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_relays_connected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 relay_clients_connected = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_relay_clients_connected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_relayed_game_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 parent_relay_count = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_parent_relay_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 tv_secret_code = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_tv_secret_code(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 server_version = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_server_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_cluster = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_server_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 legacy_server_steamdatagram_port = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_legacy_server_steamdatagram_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assigned_server_tv_port = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_assigned_server_tv_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGameServerInfo_CustomGames_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(23, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_allow_custom_games(static_cast<::proto::dota::CMsgGameServerInfo_CustomGames>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 build_version = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_build_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tf_server_count = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_tf_server_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 srcds_instance = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_srcds_instance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes server_steamdatagram_address = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_server_steamdatagram_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_server_public_ip_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_private_ip_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_server_private_ip_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_private_ip_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_tv_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_server_tv_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_key().data(), static_cast<int>(this->server_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameServerInfo.server_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_hibernation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_server_hibernation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_hibernation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGameServerInfo_ServerType_IsValid(value)) {
            set_server_type(static_cast< ::proto::dota::CMsgGameServerInfo_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_loadavg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_server_loadavg(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_tv_broadcast_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_server_tv_broadcast_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_tv_broadcast_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_game_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_server_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {
          HasBitSetters::set_has_server_relay_connected_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_relay_connected_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 relay_slots_max = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_relay_slots_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_slots_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 relays_connected = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_relays_connected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relays_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 relay_clients_connected = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_relay_clients_connected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relay_clients_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_relayed_game_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relayed_game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_relay_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_parent_relay_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_relay_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 tv_secret_code = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {
          HasBitSetters::set_has_tv_secret_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_secret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_server_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_cluster = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_server_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 legacy_server_steamdatagram_port = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_legacy_server_steamdatagram_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_server_steamdatagram_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assigned_server_tv_port = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_assigned_server_tv_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assigned_server_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGameServerInfo_CustomGames_IsValid(value)) {
            set_allow_custom_games(static_cast< ::proto::dota::CMsgGameServerInfo_CustomGames >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 build_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_build_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tf_server_count = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_tf_server_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tf_server_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 srcds_instance = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_srcds_instance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcds_instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes server_steamdatagram_address = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_steamdatagram_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->server_public_ip_addr(), output);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_private_ip_addr(), output);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_tv_port(), output);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_key().data(), static_cast<int>(this->server_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameServerInfo.server_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server_key(), output);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_hibernation(), output);
  }

  // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_type(), output);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_region(), output);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->server_loadavg(), output);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->server_tv_broadcast_time(), output);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->server_game_time(), output);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->server_relay_connected_steam_id(), output);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->relay_slots_max(), output);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->relays_connected(), output);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relay_clients_connected(), output);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->relayed_game_server_steam_id(), output);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->parent_relay_count(), output);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(18, this->tv_secret_code(), output);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }

  // optional uint32 server_cluster = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->server_cluster(), output);
  }

  // optional uint32 legacy_server_steamdatagram_port = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->legacy_server_steamdatagram_port(), output);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->assigned_server_tv_port(), output);
  }

  // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->allow_custom_games(), output);
  }

  // optional uint32 build_version = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->build_version(), output);
  }

  // optional uint32 tf_server_count = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tf_server_count(), output);
  }

  // optional uint32 srcds_instance = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->srcds_instance(), output);
  }

  // optional bytes server_steamdatagram_address = 27;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->server_steamdatagram_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerInfo)
}

::google::protobuf::uint8* CMsgGameServerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->server_public_ip_addr(), target);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_private_ip_addr(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_tv_port(), target);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_key().data(), static_cast<int>(this->server_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameServerInfo.server_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_key(), target);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->server_hibernation(), target);
  }

  // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_type(), target);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_region(), target);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->server_loadavg(), target);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->server_tv_broadcast_time(), target);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->server_game_time(), target);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->server_relay_connected_steam_id(), target);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->relay_slots_max(), target);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->relays_connected(), target);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relay_clients_connected(), target);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->relayed_game_server_steam_id(), target);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->parent_relay_count(), target);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(18, this->tv_secret_code(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }

  // optional uint32 server_cluster = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->server_cluster(), target);
  }

  // optional uint32 legacy_server_steamdatagram_port = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->legacy_server_steamdatagram_port(), target);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->assigned_server_tv_port(), target);
  }

  // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->allow_custom_games(), target);
  }

  // optional uint32 build_version = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->build_version(), target);
  }

  // optional uint32 tf_server_count = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tf_server_count(), target);
  }

  // optional uint32 srcds_instance = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->srcds_instance(), target);
  }

  // optional bytes server_steamdatagram_address = 27;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->server_steamdatagram_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerInfo)
  return target;
}

size_t CMsgGameServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_key());
    }

    // optional bytes server_steamdatagram_address = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_steamdatagram_address());
    }

    // optional fixed32 server_public_ip_addr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_private_ip_addr = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_tv_port = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_tv_port());
    }

    // optional bool server_hibernation = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 server_region = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional float server_loadavg = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float server_tv_broadcast_time = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float server_game_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_relay_connected_steam_id = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_slots_max = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_slots_max());
    }

    // optional int32 relays_connected = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relays_connected());
    }

    // optional fixed64 relayed_game_server_steam_id = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 relay_clients_connected = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relay_clients_connected());
    }

    // optional uint32 parent_relay_count = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_relay_count());
    }

    // optional fixed64 tv_secret_code = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional uint32 server_version = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 server_cluster = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

    // optional uint32 legacy_server_steamdatagram_port = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_server_steamdatagram_port());
    }

    // optional uint32 assigned_server_tv_port = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assigned_server_tv_port());
    }

    // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->allow_custom_games());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint32 build_version = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build_version());
    }

    // optional uint32 tf_server_count = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tf_server_count());
    }

    // optional uint32 srcds_instance = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcds_instance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerInfo)
    MergeFrom(*source);
  }
}

void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      server_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      server_steamdatagram_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_steamdatagram_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_private_ip_addr_ = from.server_private_ip_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_tv_port_ = from.server_tv_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_hibernation_ = from.server_hibernation_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_type_ = from.server_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_loadavg_ = from.server_loadavg_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_tv_broadcast_time_ = from.server_tv_broadcast_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      server_game_time_ = from.server_game_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      server_relay_connected_steam_id_ = from.server_relay_connected_steam_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      relay_slots_max_ = from.relay_slots_max_;
    }
    if (cached_has_bits & 0x00004000u) {
      relays_connected_ = from.relays_connected_;
    }
    if (cached_has_bits & 0x00008000u) {
      relayed_game_server_steam_id_ = from.relayed_game_server_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      relay_clients_connected_ = from.relay_clients_connected_;
    }
    if (cached_has_bits & 0x00020000u) {
      parent_relay_count_ = from.parent_relay_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      tv_secret_code_ = from.tv_secret_code_;
    }
    if (cached_has_bits & 0x00080000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00100000u) {
      server_cluster_ = from.server_cluster_;
    }
    if (cached_has_bits & 0x00200000u) {
      legacy_server_steamdatagram_port_ = from.legacy_server_steamdatagram_port_;
    }
    if (cached_has_bits & 0x00400000u) {
      assigned_server_tv_port_ = from.assigned_server_tv_port_;
    }
    if (cached_has_bits & 0x00800000u) {
      allow_custom_games_ = from.allow_custom_games_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      build_version_ = from.build_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      tf_server_count_ = from.tf_server_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      srcds_instance_ = from.srcds_instance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  return true;
}

void CMsgGameServerInfo::Swap(CMsgGameServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerInfo::InternalSwap(CMsgGameServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_key_.Swap(&other->server_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_steamdatagram_address_.Swap(&other->server_steamdatagram_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_public_ip_addr_, other->server_public_ip_addr_);
  swap(server_private_ip_addr_, other->server_private_ip_addr_);
  swap(server_port_, other->server_port_);
  swap(server_tv_port_, other->server_tv_port_);
  swap(server_hibernation_, other->server_hibernation_);
  swap(server_type_, other->server_type_);
  swap(server_region_, other->server_region_);
  swap(server_loadavg_, other->server_loadavg_);
  swap(server_tv_broadcast_time_, other->server_tv_broadcast_time_);
  swap(server_game_time_, other->server_game_time_);
  swap(server_relay_connected_steam_id_, other->server_relay_connected_steam_id_);
  swap(relay_slots_max_, other->relay_slots_max_);
  swap(relays_connected_, other->relays_connected_);
  swap(relayed_game_server_steam_id_, other->relayed_game_server_steam_id_);
  swap(relay_clients_connected_, other->relay_clients_connected_);
  swap(parent_relay_count_, other->parent_relay_count_);
  swap(tv_secret_code_, other->tv_secret_code_);
  swap(server_version_, other->server_version_);
  swap(server_cluster_, other->server_cluster_);
  swap(legacy_server_steamdatagram_port_, other->legacy_server_steamdatagram_port_);
  swap(assigned_server_tv_port_, other->assigned_server_tv_port_);
  swap(allow_custom_games_, other->allow_custom_games_);
  swap(build_version_, other->build_version_);
  swap(tf_server_count_, other->tf_server_count_);
  swap(srcds_instance_, other->srcds_instance_);
}

::google::protobuf::Metadata CMsgGameServerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLeaverDetected::InitAsDefaultInstance() {
  ::proto::dota::_CMsgLeaverDetected_default_instance_._instance.get_mutable()->leaver_state_ = const_cast< ::proto::dota::CMsgLeaverState*>(
      ::proto::dota::CMsgLeaverState::internal_default_instance());
  ::proto::dota::_CMsgLeaverDetected_default_instance_._instance.get_mutable()->poor_network_conditions_ = const_cast< ::proto::dota::CMsgPoorNetworkConditions*>(
      ::proto::dota::CMsgPoorNetworkConditions::internal_default_instance());
}
class CMsgLeaverDetected::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgLeaverDetected* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_leaver_status(CMsgLeaverDetected* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgLeaverState& leaver_state(const CMsgLeaverDetected* msg);
  static void set_has_leaver_state(CMsgLeaverDetected* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_cluster(CMsgLeaverDetected* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_disconnect_reason(CMsgLeaverDetected* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgLeaverDetected* msg);
  static void set_has_poor_network_conditions(CMsgLeaverDetected* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgLeaverState&
CMsgLeaverDetected::HasBitSetters::leaver_state(const CMsgLeaverDetected* msg) {
  return *msg->leaver_state_;
}
const ::proto::dota::CMsgPoorNetworkConditions&
CMsgLeaverDetected::HasBitSetters::poor_network_conditions(const CMsgLeaverDetected* msg) {
  return *msg->poor_network_conditions_;
}
void CMsgLeaverDetected::clear_leaver_state() {
  if (leaver_state_ != nullptr) leaver_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaverDetected::kSteamIdFieldNumber;
const int CMsgLeaverDetected::kLeaverStatusFieldNumber;
const int CMsgLeaverDetected::kLeaverStateFieldNumber;
const int CMsgLeaverDetected::kServerClusterFieldNumber;
const int CMsgLeaverDetected::kDisconnectReasonFieldNumber;
const int CMsgLeaverDetected::kPoorNetworkConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaverDetected::CMsgLeaverDetected()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaverDetected)
}
CMsgLeaverDetected::CMsgLeaverDetected(const CMsgLeaverDetected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leaver_state()) {
    leaver_state_ = new ::proto::dota::CMsgLeaverState(*from.leaver_state_);
  } else {
    leaver_state_ = nullptr;
  }
  if (from.has_poor_network_conditions()) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaverDetected)
}

void CMsgLeaverDetected::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLeaverDetected_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&leaver_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnect_reason_) -
      reinterpret_cast<char*>(&leaver_state_)) + sizeof(disconnect_reason_));
}

CMsgLeaverDetected::~CMsgLeaverDetected() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaverDetected)
  SharedDtor();
}

void CMsgLeaverDetected::SharedDtor() {
  if (this != internal_default_instance()) delete leaver_state_;
  if (this != internal_default_instance()) delete poor_network_conditions_;
}

void CMsgLeaverDetected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLeaverDetected& CMsgLeaverDetected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLeaverDetected_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgLeaverDetected::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaverDetected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(leaver_state_ != nullptr);
      leaver_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poor_network_conditions_ != nullptr);
      poor_network_conditions_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnect_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(disconnect_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLeaverDetected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLeaverDetected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTALeaverStatus_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_leaver_status(static_cast<::proto::dota::DOTALeaverStatus_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgLeaverState leaver_state = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgLeaverState::_InternalParse;
        object = msg->mutable_leaver_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 server_cluster = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_server_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ENetworkDisconnectionReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_disconnect_reason(static_cast<::proto::dota::ENetworkDisconnectionReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgPoorNetworkConditions::_InternalParse;
        object = msg->mutable_poor_network_conditions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLeaverDetected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaverDetected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::proto::dota::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLeaverState leaver_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaver_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_cluster = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_server_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::proto::dota::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaverDetected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaverDetected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLeaverDetected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaverDetected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leaver_status(), output);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::leaver_state(this), output);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_cluster(), output);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->disconnect_reason(), output);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::poor_network_conditions(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaverDetected)
}

::google::protobuf::uint8* CMsgLeaverDetected::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaverDetected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leaver_status(), target);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::leaver_state(this), target);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_cluster(), target);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->disconnect_reason(), target);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::poor_network_conditions(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaverDetected)
  return target;
}

size_t CMsgLeaverDetected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaverDetected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .proto.dota.CMsgLeaverState leaver_state = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaver_state_);
    }

    // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *poor_network_conditions_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional uint32 server_cluster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

    // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaverDetected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverDetected* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLeaverDetected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaverDetected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaverDetected)
    MergeFrom(*source);
  }
}

void CMsgLeaverDetected::MergeFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_leaver_state()->::proto::dota::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_poor_network_conditions()->::proto::dota::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_cluster_ = from.server_cluster_;
    }
    if (cached_has_bits & 0x00000020u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLeaverDetected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetected::CopyFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetected::IsInitialized() const {
  return true;
}

void CMsgLeaverDetected::Swap(CMsgLeaverDetected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverDetected::InternalSwap(CMsgLeaverDetected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(leaver_state_, other->leaver_state_);
  swap(poor_network_conditions_, other->poor_network_conditions_);
  swap(steam_id_, other->steam_id_);
  swap(leaver_status_, other->leaver_status_);
  swap(server_cluster_, other->server_cluster_);
  swap(disconnect_reason_, other->disconnect_reason_);
}

::google::protobuf::Metadata CMsgLeaverDetected::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLeaverDetectedResponse::InitAsDefaultInstance() {
}
class CMsgLeaverDetectedResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgLeaverDetectedResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaverDetectedResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaverDetectedResponse)
}
CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaverDetectedResponse)
}

void CMsgLeaverDetectedResponse::SharedCtor() {
  result_ = 0u;
}

CMsgLeaverDetectedResponse::~CMsgLeaverDetectedResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaverDetectedResponse)
  SharedDtor();
}

void CMsgLeaverDetectedResponse::SharedDtor() {
}

void CMsgLeaverDetectedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLeaverDetectedResponse& CMsgLeaverDetectedResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLeaverDetectedResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgLeaverDetectedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaverDetectedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLeaverDetectedResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLeaverDetectedResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLeaverDetectedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaverDetectedResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaverDetectedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaverDetectedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLeaverDetectedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaverDetectedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaverDetectedResponse)
}

::google::protobuf::uint8* CMsgLeaverDetectedResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaverDetectedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaverDetectedResponse)
  return target;
}

size_t CMsgLeaverDetectedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaverDetectedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaverDetectedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverDetectedResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLeaverDetectedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaverDetectedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaverDetectedResponse)
    MergeFrom(*source);
  }
}

void CMsgLeaverDetectedResponse::MergeFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgLeaverDetectedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetectedResponse::CopyFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetectedResponse::IsInitialized() const {
  return true;
}

void CMsgLeaverDetectedResponse::Swap(CMsgLeaverDetectedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverDetectedResponse::InternalSwap(CMsgLeaverDetectedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgLeaverDetectedResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyFinalPlayerStats::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyFinalPlayerStats::HasBitSetters {
 public:
};

void CMsgDOTAFantasyFinalPlayerStats::clear_stats() {
  stats_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyFinalPlayerStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
}
CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(const CMsgDOTAFantasyFinalPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
}

void CMsgDOTAFantasyFinalPlayerStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyFinalPlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgDOTAFantasyFinalPlayerStats::~CMsgDOTAFantasyFinalPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyFinalPlayerStats::SharedDtor() {
}

void CMsgDOTAFantasyFinalPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyFinalPlayerStats& CMsgDOTAFantasyFinalPlayerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyFinalPlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyFinalPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyFinalPlayerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyFinalPlayerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerStats::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyFinalPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyFinalPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyFinalPlayerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyFinalPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyFinalPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyFinalPlayerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyFinalPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyFinalPlayerStats::MergeFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyFinalPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyFinalPlayerStats::Swap(CMsgDOTAFantasyFinalPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyFinalPlayerStats::InternalSwap(CMsgDOTAFantasyFinalPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
}

::google::protobuf::Metadata CMsgDOTAFantasyFinalPlayerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLivePlayerStats::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLivePlayerStats::HasBitSetters {
 public:
};

void CMsgDOTAFantasyLivePlayerStats::clear_stats() {
  stats_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLivePlayerStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLivePlayerStats)
}
CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(const CMsgDOTAFantasyLivePlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLivePlayerStats)
}

void CMsgDOTAFantasyLivePlayerStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLivePlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgDOTAFantasyLivePlayerStats::~CMsgDOTAFantasyLivePlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyLivePlayerStats::SharedDtor() {
}

void CMsgDOTAFantasyLivePlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLivePlayerStats& CMsgDOTAFantasyLivePlayerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLivePlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLivePlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLivePlayerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLivePlayerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerStats::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLivePlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLivePlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLivePlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyLivePlayerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  return target;
}

size_t CMsgDOTAFantasyLivePlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLivePlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLivePlayerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLivePlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLivePlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLivePlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLivePlayerStats::MergeFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLivePlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLivePlayerStats::Swap(CMsgDOTAFantasyLivePlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLivePlayerStats::InternalSwap(CMsgDOTAFantasyLivePlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
}

::google::protobuf::Metadata CMsgDOTAFantasyLivePlayerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyMatch::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyMatch::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_series_id(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start_time(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_series_type(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_1(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_2(CMsgDOTAFantasyMatch* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMatch::kMatchIdFieldNumber;
const int CMsgDOTAFantasyMatch::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyMatch::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyMatch::kStartTimeFieldNumber;
const int CMsgDOTAFantasyMatch::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyMatch::kTeam1FieldNumber;
const int CMsgDOTAFantasyMatch::kTeam2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMatch)
}
CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch(const CMsgDOTAFantasyMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_2_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(team_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMatch)
}

void CMsgDOTAFantasyMatch::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_2_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(team_2_));
}

CMsgDOTAFantasyMatch::~CMsgDOTAFantasyMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMatch)
  SharedDtor();
}

void CMsgDOTAFantasyMatch::SharedDtor() {
}

void CMsgDOTAFantasyMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyMatch& CMsgDOTAFantasyMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyMatch_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_2_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(team_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyMatch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyMatch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_1 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_2 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_team_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 series_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series_id(), output);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // optional uint32 series_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->series_type(), output);
  }

  // optional uint32 team_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_1(), output);
  }

  // optional uint32 team_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMatch)
}

::google::protobuf::uint8* CMsgDOTAFantasyMatch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 series_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series_id(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // optional uint32 series_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->series_type(), target);
  }

  // optional uint32 team_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_1(), target);
  }

  // optional uint32 team_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMatch)
  return target;
}

size_t CMsgDOTAFantasyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 series_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 series_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 team_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1());
    }

    // optional uint32 team_2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMatch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMatch::MergeFrom(const CMsgDOTAFantasyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_1_ = from.team_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_2_ = from.team_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMatch::CopyFrom(const CMsgDOTAFantasyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMatch::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMatch::Swap(CMsgDOTAFantasyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMatch::InternalSwap(CMsgDOTAFantasyMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(league_id_, other->league_id_);
  swap(series_id_, other->series_id_);
  swap(start_time_, other->start_time_);
  swap(series_type_, other->series_type_);
  swap(team_1_, other->team_1_);
  swap(team_2_, other->team_2_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMatch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAUpdateClippy::InitAsDefaultInstance() {
}
class CMsgDOTAUpdateClippy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAUpdateClippy::kGoodTeamHeroIdsFieldNumber;
const int CMsgDOTAUpdateClippy::kBadTeamHeroIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAUpdateClippy)
}
CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy(const CMsgDOTAUpdateClippy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      good_team_hero_ids_(from.good_team_hero_ids_),
      bad_team_hero_ids_(from.bad_team_hero_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAUpdateClippy)
}

void CMsgDOTAUpdateClippy::SharedCtor() {
}

CMsgDOTAUpdateClippy::~CMsgDOTAUpdateClippy() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAUpdateClippy)
  SharedDtor();
}

void CMsgDOTAUpdateClippy::SharedDtor() {
}

void CMsgDOTAUpdateClippy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAUpdateClippy& CMsgDOTAUpdateClippy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAUpdateClippy_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAUpdateClippy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAUpdateClippy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  good_team_hero_ids_.Clear();
  bad_team_hero_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAUpdateClippy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAUpdateClippy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 good_team_hero_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_good_team_hero_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_good_team_hero_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 bad_team_hero_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_bad_team_hero_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_bad_team_hero_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAUpdateClippy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAUpdateClippy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 good_team_hero_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_good_team_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_good_team_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bad_team_hero_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_bad_team_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bad_team_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAUpdateClippy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAUpdateClippy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAUpdateClippy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAUpdateClippy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  for (int i = 0, n = this->good_team_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->good_team_hero_ids(i), output);
  }

  // repeated uint32 bad_team_hero_ids = 2;
  for (int i = 0, n = this->bad_team_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bad_team_hero_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAUpdateClippy)
}

::google::protobuf::uint8* CMsgDOTAUpdateClippy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAUpdateClippy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->good_team_hero_ids_, target);

  // repeated uint32 bad_team_hero_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->bad_team_hero_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAUpdateClippy)
  return target;
}

size_t CMsgDOTAUpdateClippy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAUpdateClippy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->good_team_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->good_team_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 bad_team_hero_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bad_team_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bad_team_hero_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAUpdateClippy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAUpdateClippy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAUpdateClippy* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAUpdateClippy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAUpdateClippy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAUpdateClippy)
    MergeFrom(*source);
  }
}

void CMsgDOTAUpdateClippy::MergeFrom(const CMsgDOTAUpdateClippy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAUpdateClippy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  good_team_hero_ids_.MergeFrom(from.good_team_hero_ids_);
  bad_team_hero_ids_.MergeFrom(from.bad_team_hero_ids_);
}

void CMsgDOTAUpdateClippy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAUpdateClippy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAUpdateClippy::CopyFrom(const CMsgDOTAUpdateClippy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAUpdateClippy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAUpdateClippy::IsInitialized() const {
  return true;
}

void CMsgDOTAUpdateClippy::Swap(CMsgDOTAUpdateClippy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAUpdateClippy::InternalSwap(CMsgDOTAUpdateClippy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  good_team_hero_ids_.InternalSwap(&other->good_team_hero_ids_);
  bad_team_hero_ids_.InternalSwap(&other->bad_team_hero_ids_);
}

::google::protobuf::Metadata CMsgDOTAUpdateClippy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCRealtimeStats::InitAsDefaultInstance() {
  ::proto::dota::_CMsgServerToGCRealtimeStats_default_instance_._instance.get_mutable()->delayed_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStatsTerse*>(
      ::proto::dota::CMsgDOTARealtimeGameStatsTerse::internal_default_instance());
}
class CMsgServerToGCRealtimeStats::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTARealtimeGameStatsTerse& delayed(const CMsgServerToGCRealtimeStats* msg);
  static void set_has_delayed(CMsgServerToGCRealtimeStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTARealtimeGameStatsTerse&
CMsgServerToGCRealtimeStats::HasBitSetters::delayed(const CMsgServerToGCRealtimeStats* msg) {
  return *msg->delayed_;
}
void CMsgServerToGCRealtimeStats::clear_delayed() {
  if (delayed_ != nullptr) delayed_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCRealtimeStats::kDelayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRealtimeStats)
}
CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(const CMsgServerToGCRealtimeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_delayed()) {
    delayed_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse(*from.delayed_);
  } else {
    delayed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRealtimeStats)
}

void CMsgServerToGCRealtimeStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCRealtimeStats_dota_5fgcmessages_5fserver_2eproto.base);
  delayed_ = nullptr;
}

CMsgServerToGCRealtimeStats::~CMsgServerToGCRealtimeStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRealtimeStats)
  SharedDtor();
}

void CMsgServerToGCRealtimeStats::SharedDtor() {
  if (this != internal_default_instance()) delete delayed_;
}

void CMsgServerToGCRealtimeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCRealtimeStats& CMsgServerToGCRealtimeStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCRealtimeStats_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCRealtimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRealtimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(delayed_ != nullptr);
    delayed_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCRealtimeStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCRealtimeStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTARealtimeGameStatsTerse::_InternalParse;
        object = msg->mutable_delayed();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCRealtimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRealtimeStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delayed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRealtimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRealtimeStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCRealtimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRealtimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::delayed(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRealtimeStats)
}

::google::protobuf::uint8* CMsgServerToGCRealtimeStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRealtimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::delayed(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRealtimeStats)
  return target;
}

size_t CMsgServerToGCRealtimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRealtimeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delayed_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRealtimeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRealtimeStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCRealtimeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRealtimeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRealtimeStats)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRealtimeStats::MergeFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delayed()) {
    mutable_delayed()->::proto::dota::CMsgDOTARealtimeGameStatsTerse::MergeFrom(from.delayed());
  }
}

void CMsgServerToGCRealtimeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRealtimeStats::CopyFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRealtimeStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCRealtimeStats::Swap(CMsgServerToGCRealtimeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRealtimeStats::InternalSwap(CMsgServerToGCRealtimeStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delayed_, other->delayed_);
}

::google::protobuf::Metadata CMsgServerToGCRealtimeStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerRealtimeStatsStartStop::InitAsDefaultInstance() {
}
class CMsgGCToServerRealtimeStatsStartStop::HasBitSetters {
 public:
  static void set_has_delayed(CMsgGCToServerRealtimeStatsStartStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerRealtimeStatsStartStop::kDelayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
}
CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(const CMsgGCToServerRealtimeStatsStartStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delayed_ = from.delayed_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
}

void CMsgGCToServerRealtimeStatsStartStop::SharedCtor() {
  delayed_ = false;
}

CMsgGCToServerRealtimeStatsStartStop::~CMsgGCToServerRealtimeStatsStartStop() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  SharedDtor();
}

void CMsgGCToServerRealtimeStatsStartStop::SharedDtor() {
}

void CMsgGCToServerRealtimeStatsStartStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerRealtimeStatsStartStop& CMsgGCToServerRealtimeStatsStartStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerRealtimeStatsStartStop_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerRealtimeStatsStartStop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerRealtimeStatsStartStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerRealtimeStatsStartStop*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool delayed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_delayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerRealtimeStatsStartStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool delayed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_delayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerRealtimeStatsStartStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->delayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
}

::google::protobuf::uint8* CMsgGCToServerRealtimeStatsStartStop::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->delayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  return target;
}

size_t CMsgGCToServerRealtimeStatsStartStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool delayed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerRealtimeStatsStartStop* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerRealtimeStatsStartStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
    MergeFrom(*source);
  }
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delayed()) {
    set_delayed(from.delayed());
  }
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRealtimeStatsStartStop::IsInitialized() const {
  return true;
}

void CMsgGCToServerRealtimeStatsStartStop::Swap(CMsgGCToServerRealtimeStatsStartStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerRealtimeStatsStartStop::InternalSwap(CMsgGCToServerRealtimeStatsStartStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delayed_, other->delayed_);
}

::google::protobuf::Metadata CMsgGCToServerRealtimeStatsStartStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerUpdateSteamBroadcasting::InitAsDefaultInstance() {
}
class CMsgGCToServerUpdateSteamBroadcasting::HasBitSetters {
 public:
  static void set_has_active(CMsgGCToServerUpdateSteamBroadcasting* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerUpdateSteamBroadcasting::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
}
CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(const CMsgGCToServerUpdateSteamBroadcasting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
}

void CMsgGCToServerUpdateSteamBroadcasting::SharedCtor() {
  active_ = false;
}

CMsgGCToServerUpdateSteamBroadcasting::~CMsgGCToServerUpdateSteamBroadcasting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  SharedDtor();
}

void CMsgGCToServerUpdateSteamBroadcasting::SharedDtor() {
}

void CMsgGCToServerUpdateSteamBroadcasting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerUpdateSteamBroadcasting& CMsgGCToServerUpdateSteamBroadcasting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerUpdateSteamBroadcasting_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerUpdateSteamBroadcasting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerUpdateSteamBroadcasting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerUpdateSteamBroadcasting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool active = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerUpdateSteamBroadcasting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool active = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerUpdateSteamBroadcasting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool active = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
}

::google::protobuf::uint8* CMsgGCToServerUpdateSteamBroadcasting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool active = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  return target;
}

size_t CMsgGCToServerUpdateSteamBroadcasting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool active = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerUpdateSteamBroadcasting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerUpdateSteamBroadcasting* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerUpdateSteamBroadcasting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
    MergeFrom(*source);
  }
}

void CMsgGCToServerUpdateSteamBroadcasting::MergeFrom(const CMsgGCToServerUpdateSteamBroadcasting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_active()) {
    set_active(from.active());
  }
}

void CMsgGCToServerUpdateSteamBroadcasting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerUpdateSteamBroadcasting::CopyFrom(const CMsgGCToServerUpdateSteamBroadcasting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerUpdateSteamBroadcasting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerUpdateSteamBroadcasting::IsInitialized() const {
  return true;
}

void CMsgGCToServerUpdateSteamBroadcasting::Swap(CMsgGCToServerUpdateSteamBroadcasting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerUpdateSteamBroadcasting::InternalSwap(CMsgGCToServerUpdateSteamBroadcasting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(active_, other->active_);
}

::google::protobuf::Metadata CMsgGCToServerUpdateSteamBroadcasting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::HasBitSetters {
 public:
  static void set_has_dota_team(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winner(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::kDotaTeamFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::kWinnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}
CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedCtor() {
  ::memset(&dota_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_) -
      reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedDtor() {
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winner_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dota_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool winner = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winner(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dota_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool winner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->winner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->winner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool winner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Swap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dota_team_, other->dota_team_);
  swap(winner_, other->winner_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_CTeam_CPlayer::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_._instance.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(
      ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::internal_default_instance());
}
class CMsgGameMatchSignOut_CTeam_CPlayer::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gold(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_kills(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_deaths(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_assists(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_leaver_status(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_last_hits(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_denies(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_gold_per_min(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_xp_per_minute(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_gold_spent(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_level(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_scaled_hero_damage(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_scaled_tower_damage(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_scaled_hero_healing(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_time_last_seen(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_support_ability_value(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_party_id(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_scaled_kills(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_scaled_deaths(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_scaled_assists(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_claimed_farm_gold(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_support_gold(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_claimed_denies(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_claimed_misses(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_misses(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_net_worth(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_hero_damage(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_tower_damage(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_hero_healing(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& custom_game_data(const CMsgGameMatchSignOut_CTeam_CPlayer* msg);
  static void set_has_custom_game_data(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_match_player_flags(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_hero_pick_order(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_hero_was_randomed(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_hero_was_bonus(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_hero_was_dota_plus_suggestion(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_lane(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_is_using_plus_guide(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_hero_damage_received_pre_reduction(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_hero_damage_received_post_reduction(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_seconds_dead(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_gold_lost_to_death(CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
};

const ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&
CMsgGameMatchSignOut_CTeam_CPlayer::HasBitSetters::custom_game_data(const CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
  return *msg->custom_game_data_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_permanent_buffs() {
  permanent_buffs_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_timed_stats() {
  timed_stats_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSteamIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kItemsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLeaverStatusFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLastHitsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldPerMinFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kXpPerMinuteFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldSpentFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLevelFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledHeroDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledTowerDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledHeroHealingFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTimeLastSeenFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportAbilityValueFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kPartyIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedFarmGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kNetWorthFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTowerDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroHealingFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAbilityUpgradesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAdditionalUnitsInventoryFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kPermanentBuffsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kCustomGameDataFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kMatchPlayerFlagsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTalentAbilityIdsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroPickOrderFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroWasRandomedFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroWasBonusFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroWasDotaPlusSuggestionFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLaneFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTimedStatsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kIsUsingPlusGuideFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroDamageReceivedPreReductionFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroDamageReceivedPostReductionFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSecondsDeadFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldLostToDeathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
}
CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_),
      ability_upgrades_(from.ability_upgrades_),
      additional_units_inventory_(from.additional_units_inventory_),
      permanent_buffs_(from.permanent_buffs_),
      talent_ability_ids_(from.talent_ability_ids_),
      timed_stats_(from.timed_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_lost_to_death_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(gold_lost_to_death_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&custom_game_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_lost_to_death_) -
      reinterpret_cast<char*>(&custom_game_data_)) + sizeof(gold_lost_to_death_));
}

CMsgGameMatchSignOut_CTeam_CPlayer::~CMsgGameMatchSignOut_CTeam_CPlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedDtor() {
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam_CPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_CTeam_CPlayer_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_CTeam_CPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  talent_ability_ids_.Clear();
  timed_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(custom_game_data_ != nullptr);
    custom_game_data_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaver_status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(leaver_status_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&last_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaled_tower_damage_) -
        reinterpret_cast<char*>(&last_hits_)) + sizeof(scaled_tower_damage_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&scaled_hero_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&claimed_farm_gold_) -
        reinterpret_cast<char*>(&scaled_hero_healing_)) + sizeof(claimed_farm_gold_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&support_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tower_damage_) -
        reinterpret_cast<char*>(&support_gold_)) + sizeof(tower_damage_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_damage_received_pre_reduction_) -
        reinterpret_cast<char*>(&hero_healing_)) + sizeof(hero_damage_received_pre_reduction_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&hero_damage_received_post_reduction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_lost_to_death_) -
        reinterpret_cast<char*>(&hero_damage_received_post_reduction_)) + sizeof(gold_lost_to_death_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_CTeam_CPlayer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_CTeam_CPlayer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 items = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_items(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_items();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 gold = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leaver_status = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_leaver_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_hits = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_per_min = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_gold_per_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xp_per_minute = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_xp_per_minute(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_spent = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_gold_spent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scaled_hero_damage = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_scaled_hero_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scaled_tower_damage = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_scaled_tower_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scaled_hero_healing = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_scaled_hero_healing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_last_seen = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_time_last_seen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 support_ability_value = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_support_ability_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 party_id = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_party_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float scaled_kills = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_scaled_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float scaled_deaths = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_scaled_deaths(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float scaled_assists = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 213) goto handle_unusual;
        msg->set_scaled_assists(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 claimed_farm_gold = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_claimed_farm_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 support_gold = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_support_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 claimed_denies = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_claimed_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 claimed_misses = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_claimed_misses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 misses = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_misses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchPlayerAbilityUpgrade::_InternalParse;
          object = msg->add_ability_upgrades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 642 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchAdditionalUnitInventory::_InternalParse;
          object = msg->add_additional_units_inventory();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 650 && (ptr += 2));
        break;
      }
      // optional uint32 net_worth = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_InternalParse;
        object = msg->mutable_custom_game_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 match_player_flags = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_match_player_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_hero_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tower_damage = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_tower_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_healing = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_hero_healing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchPlayerPermanentBuff::_InternalParse;
          object = msg->add_permanent_buffs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 706 && (ptr += 2));
        break;
      }
      // repeated uint32 talent_ability_ids = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_talent_ability_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 712 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_talent_ability_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 hero_pick_order = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_hero_pick_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hero_was_randomed = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_hero_was_randomed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hero_was_bonus = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_hero_was_bonus(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lane = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_lane(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchPlayerTimedStats timed_stats = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchPlayerTimedStats::_InternalParse;
          object = msg->add_timed_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 754 && (ptr += 2));
        break;
      }
      // optional bool is_using_plus_guide = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_is_using_plus_guide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage_received_pre_reduction = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_hero_damage_received_pre_reduction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_damage_received_post_reduction = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_hero_damage_received_post_reduction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hero_was_dota_plus_suggestion = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_hero_was_dota_plus_suggestion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_dead = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_seconds_dead(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold_lost_to_death = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_gold_lost_to_death(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_CTeam_CPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_leaver_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_per_min = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_gold_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_per_minute = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_xp_per_minute(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_spent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_gold_spent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_damage = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_scaled_hero_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_tower_damage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_scaled_tower_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_healing = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_scaled_hero_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_seen = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_time_last_seen(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_ability_value = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_support_ability_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_party_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_kills = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (197 & 0xFF)) {
          HasBitSetters::set_has_scaled_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_deaths = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (205 & 0xFF)) {
          HasBitSetters::set_has_scaled_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_assists = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (213 & 0xFF)) {
          HasBitSetters::set_has_scaled_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_farm_gold = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_claimed_farm_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_gold = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_support_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_denies = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_claimed_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_misses = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_claimed_misses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 misses = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_misses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ability_upgrades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (266 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_units_inventory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (282 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_player_flags = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_match_player_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_player_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          HasBitSetters::set_has_hero_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_tower_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_healing = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          HasBitSetters::set_has_hero_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (322 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_permanent_buffs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 talent_ability_ids = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 328u, input, this->mutable_talent_ability_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent_ability_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_pick_order = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_hero_pick_order(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_pick_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_randomed = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_hero_was_randomed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_randomed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_bonus = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_hero_was_bonus(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_lane(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerTimedStats timed_stats = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (370 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timed_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_using_plus_guide = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_is_using_plus_guide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_using_plus_guide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage_received_pre_reduction = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_hero_damage_received_pre_reduction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_received_pre_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage_received_post_reduction = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_hero_damage_received_post_reduction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_received_post_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_dota_plus_suggestion = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_hero_was_dota_plus_suggestion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_dota_plus_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_dead = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_seconds_dead(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_lost_to_death = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_gold_lost_to_death(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_lost_to_death_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_CTeam_CPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 items = 4;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->items(i), output);
  }

  // optional uint32 gold = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gold(), output);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kills(), output);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deaths(), output);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->assists(), output);
  }

  // optional uint32 leaver_status = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leaver_status(), output);
  }

  // optional uint32 last_hits = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_hits(), output);
  }

  // optional uint32 denies = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->denies(), output);
  }

  // optional uint32 gold_per_min = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_minute = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->xp_per_minute(), output);
  }

  // optional uint32 gold_spent = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gold_spent(), output);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // optional uint32 scaled_hero_damage = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->scaled_hero_damage(), output);
  }

  // optional uint32 scaled_tower_damage = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->scaled_tower_damage(), output);
  }

  // optional uint32 scaled_hero_healing = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->scaled_hero_healing(), output);
  }

  // optional uint32 time_last_seen = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_last_seen(), output);
  }

  // optional uint32 support_ability_value = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support_ability_value(), output);
  }

  // optional uint64 party_id = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->party_id(), output);
  }

  // optional float scaled_kills = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->scaled_kills(), output);
  }

  // optional float scaled_deaths = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scaled_deaths(), output);
  }

  // optional float scaled_assists = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->scaled_assists(), output);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->claimed_farm_gold(), output);
  }

  // optional uint32 support_gold = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->support_gold(), output);
  }

  // optional uint32 claimed_denies = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->claimed_denies(), output);
  }

  // optional uint32 claimed_misses = 30;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->claimed_misses(), output);
  }

  // optional uint32 misses = 31;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->misses(), output);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ability_upgrades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32,
      this->ability_upgrades(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_units_inventory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33,
      this->additional_units_inventory(static_cast<int>(i)),
      output);
  }

  // optional uint32 net_worth = 34;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->net_worth(), output);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, HasBitSetters::custom_game_data(this), output);
  }

  // optional uint32 match_player_flags = 36;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->match_player_flags(), output);
  }

  // optional uint32 hero_damage = 37;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 38;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->tower_damage(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 hero_healing = 39;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->hero_healing(), output);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permanent_buffs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40,
      this->permanent_buffs(static_cast<int>(i)),
      output);
  }

  // repeated uint32 talent_ability_ids = 41;
  for (int i = 0, n = this->talent_ability_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      41, this->talent_ability_ids(i), output);
  }

  // optional uint32 hero_pick_order = 42;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->hero_pick_order(), output);
  }

  // optional bool hero_was_randomed = 43;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->hero_was_randomed(), output);
  }

  // optional bool hero_was_bonus = 44;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->hero_was_bonus(), output);
  }

  // optional uint32 lane = 45;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->lane(), output);
  }

  // repeated .proto.dota.CMatchPlayerTimedStats timed_stats = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46,
      this->timed_stats(static_cast<int>(i)),
      output);
  }

  // optional bool is_using_plus_guide = 47;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->is_using_plus_guide(), output);
  }

  // optional uint32 hero_damage_received_pre_reduction = 48;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->hero_damage_received_pre_reduction(), output);
  }

  // optional uint32 hero_damage_received_post_reduction = 49;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->hero_damage_received_post_reduction(), output);
  }

  // optional bool hero_was_dota_plus_suggestion = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->hero_was_dota_plus_suggestion(), output);
  }

  // optional uint32 seconds_dead = 51;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->seconds_dead(), output);
  }

  // optional uint32 gold_lost_to_death = 52;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->gold_lost_to_death(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 items = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->items_, target);

  // optional uint32 gold = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gold(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->assists(), target);
  }

  // optional uint32 leaver_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leaver_status(), target);
  }

  // optional uint32 last_hits = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_hits(), target);
  }

  // optional uint32 denies = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->denies(), target);
  }

  // optional uint32 gold_per_min = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_minute = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->xp_per_minute(), target);
  }

  // optional uint32 gold_spent = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gold_spent(), target);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }

  // optional uint32 scaled_hero_damage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->scaled_hero_healing(), target);
  }

  // optional uint32 time_last_seen = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_last_seen(), target);
  }

  // optional uint32 support_ability_value = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support_ability_value(), target);
  }

  // optional uint64 party_id = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->party_id(), target);
  }

  // optional float scaled_kills = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->scaled_kills(), target);
  }

  // optional float scaled_deaths = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->scaled_deaths(), target);
  }

  // optional float scaled_assists = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->support_gold(), target);
  }

  // optional uint32 claimed_denies = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 30;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->claimed_misses(), target);
  }

  // optional uint32 misses = 31;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->misses(), target);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ability_upgrades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->ability_upgrades(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_units_inventory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->additional_units_inventory(static_cast<int>(i)), target);
  }

  // optional uint32 net_worth = 34;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->net_worth(), target);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, HasBitSetters::custom_game_data(this), target);
  }

  // optional uint32 match_player_flags = 36;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->match_player_flags(), target);
  }

  // optional uint32 hero_damage = 37;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 38;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->tower_damage(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 hero_healing = 39;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->hero_healing(), target);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permanent_buffs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->permanent_buffs(static_cast<int>(i)), target);
  }

  // repeated uint32 talent_ability_ids = 41;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(41, this->talent_ability_ids_, target);

  // optional uint32 hero_pick_order = 42;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->hero_pick_order(), target);
  }

  // optional bool hero_was_randomed = 43;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->hero_was_randomed(), target);
  }

  // optional bool hero_was_bonus = 44;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->hero_was_bonus(), target);
  }

  // optional uint32 lane = 45;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->lane(), target);
  }

  // repeated .proto.dota.CMatchPlayerTimedStats timed_stats = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, this->timed_stats(static_cast<int>(i)), target);
  }

  // optional bool is_using_plus_guide = 47;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->is_using_plus_guide(), target);
  }

  // optional uint32 hero_damage_received_pre_reduction = 48;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->hero_damage_received_pre_reduction(), target);
  }

  // optional uint32 hero_damage_received_post_reduction = 49;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->hero_damage_received_post_reduction(), target);
  }

  // optional bool hero_was_dota_plus_suggestion = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->hero_was_dota_plus_suggestion(), target);
  }

  // optional uint32 seconds_dead = 51;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->seconds_dead(), target);
  }

  // optional uint32 gold_lost_to_death = 52;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->gold_lost_to_death(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 items = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->ability_upgrades_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ability_upgrades(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_units_inventory_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_units_inventory(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->permanent_buffs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->permanent_buffs(static_cast<int>(i)));
    }
  }

  // repeated uint32 talent_ability_ids = 41;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->talent_ability_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->talent_ability_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchPlayerTimedStats timed_stats = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->timed_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timed_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 gold = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 leaver_status = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 last_hits = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold_per_min = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_minute = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_minute());
    }

    // optional uint32 gold_spent = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }

    // optional uint32 level = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 scaled_hero_damage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_tower_damage());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 scaled_hero_healing = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_healing());
    }

    // optional uint32 time_last_seen = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }

    // optional uint64 party_id = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 support_ability_value = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }

    // optional float scaled_kills = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float scaled_assists = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 27;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 support_gold = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 claimed_denies = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }

    // optional uint32 claimed_misses = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }

    // optional uint32 misses = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }

    // optional uint32 net_worth = 34;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 match_player_flags = 36;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_player_flags());
    }

    // optional uint32 hero_damage = 37;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 38;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_healing = 39;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 hero_pick_order = 42;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_pick_order());
    }

    // optional uint32 lane = 45;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional bool hero_was_randomed = 43;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_bonus = 44;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_dota_plus_suggestion = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool is_using_plus_guide = 47;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_damage_received_pre_reduction = 48;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage_received_pre_reduction());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 hero_damage_received_post_reduction = 49;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage_received_post_reduction());
    }

    // optional uint32 seconds_dead = 51;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_dead());
    }

    // optional uint32 gold_lost_to_death = 52;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_lost_to_death());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam_CPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  talent_ability_ids_.MergeFrom(from.talent_ability_ids_);
  timed_stats_.MergeFrom(from.timed_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_custom_game_data()->::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      leaver_status_ = from.leaver_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000200u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000400u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00000800u) {
      xp_per_minute_ = from.xp_per_minute_;
    }
    if (cached_has_bits & 0x00001000u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x00002000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_hero_damage_ = from.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00008000u) {
      scaled_tower_damage_ = from.scaled_tower_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      scaled_hero_healing_ = from.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00020000u) {
      time_last_seen_ = from.time_last_seen_;
    }
    if (cached_has_bits & 0x00040000u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      support_ability_value_ = from.support_ability_value_;
    }
    if (cached_has_bits & 0x00100000u) {
      scaled_kills_ = from.scaled_kills_;
    }
    if (cached_has_bits & 0x00200000u) {
      scaled_deaths_ = from.scaled_deaths_;
    }
    if (cached_has_bits & 0x00400000u) {
      scaled_assists_ = from.scaled_assists_;
    }
    if (cached_has_bits & 0x00800000u) {
      claimed_farm_gold_ = from.claimed_farm_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x02000000u) {
      claimed_denies_ = from.claimed_denies_;
    }
    if (cached_has_bits & 0x04000000u) {
      claimed_misses_ = from.claimed_misses_;
    }
    if (cached_has_bits & 0x08000000u) {
      misses_ = from.misses_;
    }
    if (cached_has_bits & 0x10000000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x20000000u) {
      match_player_flags_ = from.match_player_flags_;
    }
    if (cached_has_bits & 0x40000000u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x80000000u) {
      tower_damage_ = from.tower_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_healing_ = from.hero_healing_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_pick_order_ = from.hero_pick_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_was_randomed_ = from.hero_was_randomed_;
    }
    if (cached_has_bits & 0x00000010u) {
      hero_was_bonus_ = from.hero_was_bonus_;
    }
    if (cached_has_bits & 0x00000020u) {
      hero_was_dota_plus_suggestion_ = from.hero_was_dota_plus_suggestion_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_using_plus_guide_ = from.is_using_plus_guide_;
    }
    if (cached_has_bits & 0x00000080u) {
      hero_damage_received_pre_reduction_ = from.hero_damage_received_pre_reduction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      hero_damage_received_post_reduction_ = from.hero_damage_received_post_reduction_;
    }
    if (cached_has_bits & 0x00000200u) {
      seconds_dead_ = from.seconds_dead_;
    }
    if (cached_has_bits & 0x00000400u) {
      gold_lost_to_death_ = from.gold_lost_to_death_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CTeam_CPlayer::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  items_.InternalSwap(&other->items_);
  CastToBase(&ability_upgrades_)->InternalSwap(CastToBase(&other->ability_upgrades_));
  CastToBase(&additional_units_inventory_)->InternalSwap(CastToBase(&other->additional_units_inventory_));
  CastToBase(&permanent_buffs_)->InternalSwap(CastToBase(&other->permanent_buffs_));
  talent_ability_ids_.InternalSwap(&other->talent_ability_ids_);
  CastToBase(&timed_stats_)->InternalSwap(CastToBase(&other->timed_stats_));
  swap(custom_game_data_, other->custom_game_data_);
  swap(steam_id_, other->steam_id_);
  swap(hero_id_, other->hero_id_);
  swap(gold_, other->gold_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(leaver_status_, other->leaver_status_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
  swap(gold_per_min_, other->gold_per_min_);
  swap(xp_per_minute_, other->xp_per_minute_);
  swap(gold_spent_, other->gold_spent_);
  swap(level_, other->level_);
  swap(scaled_hero_damage_, other->scaled_hero_damage_);
  swap(scaled_tower_damage_, other->scaled_tower_damage_);
  swap(scaled_hero_healing_, other->scaled_hero_healing_);
  swap(time_last_seen_, other->time_last_seen_);
  swap(party_id_, other->party_id_);
  swap(support_ability_value_, other->support_ability_value_);
  swap(scaled_kills_, other->scaled_kills_);
  swap(scaled_deaths_, other->scaled_deaths_);
  swap(scaled_assists_, other->scaled_assists_);
  swap(claimed_farm_gold_, other->claimed_farm_gold_);
  swap(support_gold_, other->support_gold_);
  swap(claimed_denies_, other->claimed_denies_);
  swap(claimed_misses_, other->claimed_misses_);
  swap(misses_, other->misses_);
  swap(net_worth_, other->net_worth_);
  swap(match_player_flags_, other->match_player_flags_);
  swap(hero_damage_, other->hero_damage_);
  swap(tower_damage_, other->tower_damage_);
  swap(hero_healing_, other->hero_healing_);
  swap(hero_pick_order_, other->hero_pick_order_);
  swap(lane_, other->lane_);
  swap(hero_was_randomed_, other->hero_was_randomed_);
  swap(hero_was_bonus_, other->hero_was_bonus_);
  swap(hero_was_dota_plus_suggestion_, other->hero_was_dota_plus_suggestion_);
  swap(is_using_plus_guide_, other->is_using_plus_guide_);
  swap(hero_damage_received_pre_reduction_, other->hero_damage_received_pre_reduction_);
  swap(hero_damage_received_post_reduction_, other->hero_damage_received_post_reduction_);
  swap(seconds_dead_, other->seconds_dead_);
  swap(gold_lost_to_death_, other->gold_lost_to_death_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_CTeam::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_CTeam::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CTeam::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CTeam)
}
CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CTeam)
}

void CMsgGameMatchSignOut_CTeam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgGameMatchSignOut_CTeam::~CMsgGameMatchSignOut_CTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CTeam)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam::SharedDtor() {
}

void CMsgGameMatchSignOut_CTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut_CTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_CTeam_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_CTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_CTeam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_CTeam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_CTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_CTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CTeam)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CTeam)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_CTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CTeam)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam::Swap(CMsgGameMatchSignOut_CTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CTeam::InternalSwap(CMsgGameMatchSignOut_CTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_CAdditionalSignoutMsg::HasBitSetters {
 public:
  static void set_has_id(CMsgGameMatchSignOut_CAdditionalSignoutMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_contents(CMsgGameMatchSignOut_CAdditionalSignoutMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kIdFieldNumber;
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}
CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contents()) {
    contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto.base);
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::~CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  SharedDtor();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedDtor() {
  contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_CAdditionalSignoutMsg_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contents_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_CAdditionalSignoutMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_CAdditionalSignoutMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes contents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_contents();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CAdditionalSignoutMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return target;
}

size_t CMsgGameMatchSignOut_CAdditionalSignoutMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CAdditionalSignoutMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_CAdditionalSignoutMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InternalSwap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contents_.Swap(&other->contents_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_CSocialFeedMatchEvent::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGameMatchSignOut_CSocialFeedMatchEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgGameMatchSignOut_CSocialFeedMatchEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_event_type(CMsgGameMatchSignOut_CSocialFeedMatchEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_time(CMsgGameMatchSignOut_CSocialFeedMatchEvent* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_replay_time(CMsgGameMatchSignOut_CSocialFeedMatchEvent* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kAccountIdFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kTimestampFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kEventTypeFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kGameTimeFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kReplayTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}
CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&replay_time_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(replay_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replay_time_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(replay_time_));
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent::~CMsgGameMatchSignOut_CSocialFeedMatchEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  SharedDtor();
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedDtor() {
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_CSocialFeedMatchEvent& CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_CSocialFeedMatchEvent_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replay_time_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(replay_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_CSocialFeedMatchEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_CSocialFeedMatchEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_event_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 replay_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_replay_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_event_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 replay_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_replay_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // optional uint32 replay_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->replay_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CSocialFeedMatchEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // optional uint32 replay_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->replay_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return target;
}

size_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 event_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional int32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 replay_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CSocialFeedMatchEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_CSocialFeedMatchEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      replay_time_ = from.replay_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Swap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::InternalSwap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(timestamp_, other->timestamp_);
  swap(event_type_, other->event_type_);
  swap(game_time_, other->game_time_);
  swap(replay_time_, other->replay_time_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CSocialFeedMatchEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_CCustomGameData::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_CCustomGameData::HasBitSetters {
 public:
  static void set_has_publish_timestamp(CMsgGameMatchSignOut_CCustomGameData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CCustomGameData::kPublishTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
}
CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(const CMsgGameMatchSignOut_CCustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publish_timestamp_ = from.publish_timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
}

void CMsgGameMatchSignOut_CCustomGameData::SharedCtor() {
  publish_timestamp_ = 0u;
}

CMsgGameMatchSignOut_CCustomGameData::~CMsgGameMatchSignOut_CCustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  SharedDtor();
}

void CMsgGameMatchSignOut_CCustomGameData::SharedDtor() {
}

void CMsgGameMatchSignOut_CCustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_CCustomGameData& CMsgGameMatchSignOut_CCustomGameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_CCustomGameData_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_CCustomGameData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_CCustomGameData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 publish_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_publish_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_CCustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 publish_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_publish_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_CCustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publish_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->publish_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CCustomGameData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publish_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->publish_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 publish_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->publish_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CCustomGameData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_CCustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_publish_timestamp()) {
    set_publish_timestamp(from.publish_timestamp());
  }
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CCustomGameData::Swap(CMsgGameMatchSignOut_CCustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CCustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publish_timestamp_, other->publish_timestamp_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CCustomGameData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_EventGameLeaderboardEntry::HasBitSetters {
 public:
  static void set_has_name_suffix(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_extra_data_1(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_extra_data_2(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_extra_data_3(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_extra_data_4(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_extra_data_5(CMsgGameMatchSignOut_EventGameLeaderboardEntry* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kNameSuffixFieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kScoreFieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData1FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData2FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData3FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData4FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}
CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name_suffix()) {
    name_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_suffix_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_data_5_) -
    reinterpret_cast<char*>(&score_)) + sizeof(extra_data_5_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto.base);
  name_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_data_5_) -
      reinterpret_cast<char*>(&score_)) + sizeof(extra_data_5_));
}

CMsgGameMatchSignOut_EventGameLeaderboardEntry::~CMsgGameMatchSignOut_EventGameLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  SharedDtor();
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedDtor() {
  name_suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_EventGameLeaderboardEntry& CMsgGameMatchSignOut_EventGameLeaderboardEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_EventGameLeaderboardEntry_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_EventGameLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_suffix_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extra_data_5_) -
        reinterpret_cast<char*>(&score_)) + sizeof(extra_data_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_EventGameLeaderboardEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_EventGameLeaderboardEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name_suffix = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
        object = msg->mutable_name_suffix();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 extra_data_1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_extra_data_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 extra_data_2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_extra_data_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 extra_data_3 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_extra_data_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 extra_data_4 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_extra_data_4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 extra_data_5 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_extra_data_5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name_suffix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_suffix().data(), static_cast<int>(this->name_suffix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_extra_data_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_extra_data_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_extra_data_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_extra_data_4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_extra_data_5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_suffix().data(), static_cast<int>(this->name_suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_suffix(), output);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional uint32 extra_data_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extra_data_1(), output);
  }

  // optional uint32 extra_data_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->extra_data_2(), output);
  }

  // optional uint32 extra_data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extra_data_3(), output);
  }

  // optional uint32 extra_data_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->extra_data_4(), output);
  }

  // optional uint32 extra_data_5 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->extra_data_5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_EventGameLeaderboardEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_suffix().data(), static_cast<int>(this->name_suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_suffix(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional uint32 extra_data_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->extra_data_1(), target);
  }

  // optional uint32 extra_data_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->extra_data_2(), target);
  }

  // optional uint32 extra_data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extra_data_3(), target);
  }

  // optional uint32 extra_data_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->extra_data_4(), target);
  }

  // optional uint32 extra_data_5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->extra_data_5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return target;
}

size_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name_suffix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_suffix());
    }

    // optional int32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint32 extra_data_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_1());
    }

    // optional uint32 extra_data_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_2());
    }

    // optional uint32 extra_data_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_3());
    }

    // optional uint32 extra_data_4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_4());
    }

    // optional uint32 extra_data_5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_EventGameLeaderboardEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_EventGameLeaderboardEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_suffix_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      extra_data_1_ = from.extra_data_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      extra_data_2_ = from.extra_data_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      extra_data_3_ = from.extra_data_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      extra_data_4_ = from.extra_data_4_;
    }
    if (cached_has_bits & 0x00000040u) {
      extra_data_5_ = from.extra_data_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::Swap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::InternalSwap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_suffix_.Swap(&other->name_suffix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
  swap(extra_data_1_, other->extra_data_1_);
  swap(extra_data_2_, other->extra_data_2_);
  swap(extra_data_3_, other->extra_data_3_);
  swap(extra_data_4_, other->extra_data_4_);
  swap(extra_data_5_, other->extra_data_5_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_EventGameLeaderboardEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut_WardPlacement::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOut_WardPlacement::HasBitSetters {
 public:
  static void set_has_player_id(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_id(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_placed_time(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_building_state(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_creep_state(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_roshan_alive(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_position_x(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_position_y(CMsgGameMatchSignOut_WardPlacement* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_WardPlacement::kPlayerIdFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kTeamIdFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kPlacedTimeFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kBuildingStateFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kCreepStateFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kRoshanAliveFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kPositionXFieldNumber;
const int CMsgGameMatchSignOut_WardPlacement::kPositionYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.WardPlacement)
}
CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(const CMsgGameMatchSignOut_WardPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_y_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(position_y_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.WardPlacement)
}

void CMsgGameMatchSignOut_WardPlacement::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(position_y_));
}

CMsgGameMatchSignOut_WardPlacement::~CMsgGameMatchSignOut_WardPlacement() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  SharedDtor();
}

void CMsgGameMatchSignOut_WardPlacement::SharedDtor() {
}

void CMsgGameMatchSignOut_WardPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut_WardPlacement& CMsgGameMatchSignOut_WardPlacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_WardPlacement_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut_WardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_y_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(position_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut_WardPlacement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut_WardPlacement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 placed_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_placed_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 building_state = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_building_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 creep_state = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_creep_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool roshan_alive = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_roshan_alive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 position_x = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_position_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 position_y = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_position_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut_WardPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 placed_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_placed_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 building_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_building_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creep_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_creep_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creep_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool roshan_alive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_roshan_alive(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roshan_alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_position_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_position_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut_WardPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional uint32 placed_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->placed_time(), output);
  }

  // optional uint32 building_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->building_state(), output);
  }

  // optional uint32 creep_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->creep_state(), output);
  }

  // optional bool roshan_alive = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->roshan_alive(), output);
  }

  // optional uint32 position_x = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->position_x(), output);
  }

  // optional uint32 position_y = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->position_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.WardPlacement)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_WardPlacement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional uint32 placed_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->placed_time(), target);
  }

  // optional uint32 building_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->building_state(), target);
  }

  // optional uint32 creep_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->creep_state(), target);
  }

  // optional bool roshan_alive = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->roshan_alive(), target);
  }

  // optional uint32 position_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->position_x(), target);
  }

  // optional uint32 position_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->position_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  return target;
}

size_t CMsgGameMatchSignOut_WardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 placed_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placed_time());
    }

    // optional uint32 building_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_state());
    }

    // optional uint32 creep_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creep_state());
    }

    // optional bool roshan_alive = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 position_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_x());
    }

    // optional uint32 position_y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut_WardPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_WardPlacement* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut_WardPlacement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.WardPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.WardPlacement)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_WardPlacement::MergeFrom(const CMsgGameMatchSignOut_WardPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      placed_time_ = from.placed_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      creep_state_ = from.creep_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      roshan_alive_ = from.roshan_alive_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      position_y_ = from.position_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_WardPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_WardPlacement::CopyFrom(const CMsgGameMatchSignOut_WardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.WardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_WardPlacement::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_WardPlacement::Swap(CMsgGameMatchSignOut_WardPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_WardPlacement::InternalSwap(CMsgGameMatchSignOut_WardPlacement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
  swap(team_id_, other->team_id_);
  swap(placed_time_, other->placed_time_);
  swap(building_state_, other->building_state_);
  swap(creep_state_, other->creep_state_);
  swap(roshan_alive_, other->roshan_alive_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_WardPlacement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOut::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGameMatchSignOut_default_instance_._instance.get_mutable()->poor_network_conditions_ = const_cast< ::proto::dota::CMsgPoorNetworkConditions*>(
      ::proto::dota::CMsgPoorNetworkConditions::internal_default_instance());
  ::proto::dota::_CMsgGameMatchSignOut_default_instance_._instance.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgGameMatchSignOut_CCustomGameData*>(
      ::proto::dota::CMsgGameMatchSignOut_CCustomGameData::internal_default_instance());
}
class CMsgGameMatchSignOut::HasBitSetters {
 public:
  static void set_has_match_id(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_duration(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_good_guys_win(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_date(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cluster(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_server_addr(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_first_blood_time(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_game_balance(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_event_score(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_automatic_surrender(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_server_version(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_legacy_mass_disconnect(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static const ::proto::dota::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgGameMatchSignOut* msg);
  static void set_has_poor_network_conditions(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_average_networth_delta(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_networth_delta_min10(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_networth_delta_min20(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_maximum_losing_networth_lead(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_average_experience_delta(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_experience_delta_min10(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_experience_delta_min20(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_bonus_gold_winner_min10(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_bonus_gold_winner_min20(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_bonus_gold_winner_total(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_bonus_gold_loser_min10(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_bonus_gold_loser_min20(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_bonus_gold_loser_total(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static const ::proto::dota::CMsgGameMatchSignOut_CCustomGameData& custom_game_data(const CMsgGameMatchSignOut* msg);
  static void set_has_custom_game_data(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_match_flags(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_pre_game_duration(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_bounty_rune_gold_winners(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_bounty_rune_gold_losers(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_range_creep_upgrade_gold_winners(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_range_creep_upgrade_gold_losers(CMsgGameMatchSignOut* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgPoorNetworkConditions&
CMsgGameMatchSignOut::HasBitSetters::poor_network_conditions(const CMsgGameMatchSignOut* msg) {
  return *msg->poor_network_conditions_;
}
const ::proto::dota::CMsgGameMatchSignOut_CCustomGameData&
CMsgGameMatchSignOut::HasBitSetters::custom_game_data(const CMsgGameMatchSignOut* msg) {
  return *msg->custom_game_data_;
}
void CMsgGameMatchSignOut::clear_picks_bans() {
  picks_bans_.Clear();
}
void CMsgGameMatchSignOut::clear_fantasy_stats() {
  fantasy_stats_.Clear();
}
void CMsgGameMatchSignOut::clear_player_strange_count_adjustments() {
  player_strange_count_adjustments_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut::kMatchIdFieldNumber;
const int CMsgGameMatchSignOut::kDurationFieldNumber;
const int CMsgGameMatchSignOut::kGoodGuysWinFieldNumber;
const int CMsgGameMatchSignOut::kDateFieldNumber;
const int CMsgGameMatchSignOut::kNumPlayersFieldNumber;
const int CMsgGameMatchSignOut::kTeamsFieldNumber;
const int CMsgGameMatchSignOut::kTowerStatusFieldNumber;
const int CMsgGameMatchSignOut::kBarracksStatusFieldNumber;
const int CMsgGameMatchSignOut::kClusterFieldNumber;
const int CMsgGameMatchSignOut::kServerAddrFieldNumber;
const int CMsgGameMatchSignOut::kFirstBloodTimeFieldNumber;
const int CMsgGameMatchSignOut::kGameBalanceFieldNumber;
const int CMsgGameMatchSignOut::kEventScoreFieldNumber;
const int CMsgGameMatchSignOut::kPicksBansFieldNumber;
const int CMsgGameMatchSignOut::kFantasyStatsFieldNumber;
const int CMsgGameMatchSignOut::kPlayerStrangeCountAdjustmentsFieldNumber;
const int CMsgGameMatchSignOut::kAutomaticSurrenderFieldNumber;
const int CMsgGameMatchSignOut::kServerVersionFieldNumber;
const int CMsgGameMatchSignOut::kLegacyMassDisconnectFieldNumber;
const int CMsgGameMatchSignOut::kPoorNetworkConditionsFieldNumber;
const int CMsgGameMatchSignOut::kAdditionalMsgsFieldNumber;
const int CMsgGameMatchSignOut::kSocialFeedEventsFieldNumber;
const int CMsgGameMatchSignOut::kAverageNetworthDeltaFieldNumber;
const int CMsgGameMatchSignOut::kNetworthDeltaMin10FieldNumber;
const int CMsgGameMatchSignOut::kNetworthDeltaMin20FieldNumber;
const int CMsgGameMatchSignOut::kMaximumLosingNetworthLeadFieldNumber;
const int CMsgGameMatchSignOut::kAverageExperienceDeltaFieldNumber;
const int CMsgGameMatchSignOut::kExperienceDeltaMin10FieldNumber;
const int CMsgGameMatchSignOut::kExperienceDeltaMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerMin10FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerTotalFieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserMin10FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserTotalFieldNumber;
const int CMsgGameMatchSignOut::kCustomGameDataFieldNumber;
const int CMsgGameMatchSignOut::kMatchFlagsFieldNumber;
const int CMsgGameMatchSignOut::kTeamScoresFieldNumber;
const int CMsgGameMatchSignOut::kPreGameDurationFieldNumber;
const int CMsgGameMatchSignOut::kEventGameLeaderboardEntriesFieldNumber;
const int CMsgGameMatchSignOut::kWardPlacementsFieldNumber;
const int CMsgGameMatchSignOut::kBountyRuneGoldWinnersFieldNumber;
const int CMsgGameMatchSignOut::kBountyRuneGoldLosersFieldNumber;
const int CMsgGameMatchSignOut::kRangeCreepUpgradeGoldWinnersFieldNumber;
const int CMsgGameMatchSignOut::kRangeCreepUpgradeGoldLosersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut::CMsgGameMatchSignOut()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut)
}
CMsgGameMatchSignOut::CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      num_players_(from.num_players_),
      teams_(from.teams_),
      tower_status_(from.tower_status_),
      barracks_status_(from.barracks_status_),
      picks_bans_(from.picks_bans_),
      player_strange_count_adjustments_(from.player_strange_count_adjustments_),
      additional_msgs_(from.additional_msgs_),
      social_feed_events_(from.social_feed_events_),
      team_scores_(from.team_scores_),
      fantasy_stats_(from.fantasy_stats_),
      event_game_leaderboard_entries_(from.event_game_leaderboard_entries_),
      ward_placements_(from.ward_placements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_addr()) {
    server_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_addr_);
  }
  if (from.has_poor_network_conditions()) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = nullptr;
  }
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgGameMatchSignOut_CCustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_creep_upgrade_gold_losers_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(range_creep_upgrade_gold_losers_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut)
}

void CMsgGameMatchSignOut::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignOut_dota_5fgcmessages_5fserver_2eproto.base);
  server_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&poor_network_conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_creep_upgrade_gold_losers_) -
      reinterpret_cast<char*>(&poor_network_conditions_)) + sizeof(range_creep_upgrade_gold_losers_));
}

CMsgGameMatchSignOut::~CMsgGameMatchSignOut() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut)
  SharedDtor();
}

void CMsgGameMatchSignOut::SharedDtor() {
  server_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete poor_network_conditions_;
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgGameMatchSignOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOut& CMsgGameMatchSignOut::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOut_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOut::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_players_.Clear();
  teams_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  player_strange_count_adjustments_.Clear();
  additional_msgs_.Clear();
  social_feed_events_.Clear();
  team_scores_.Clear();
  fantasy_stats_.Clear();
  event_game_leaderboard_entries_.Clear();
  ward_placements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poor_network_conditions_ != nullptr);
      poor_network_conditions_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(custom_game_data_ != nullptr);
      custom_game_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_blood_time_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(first_blood_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&networth_delta_min10_) -
        reinterpret_cast<char*>(&game_balance_)) + sizeof(networth_delta_min10_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&networth_delta_min20_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bonus_gold_winner_total_) -
        reinterpret_cast<char*>(&networth_delta_min20_)) + sizeof(bonus_gold_winner_total_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&bonus_gold_loser_min10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_creep_upgrade_gold_winners_) -
        reinterpret_cast<char*>(&bonus_gold_loser_min10_)) + sizeof(range_creep_upgrade_gold_winners_));
  }
  range_creep_upgrade_gold_losers_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOut::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOut*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool good_guys_win = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_good_guys_win(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 date = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_date(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated uint32 num_players = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_num_players(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_num_players();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignOut_CTeam::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated uint32 tower_status = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_tower_status(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_tower_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 barracks_status = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_barracks_status(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_barracks_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 cluster = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string server_addr = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGameMatchSignOut.server_addr");
        object = msg->mutable_server_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 first_blood_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_first_blood_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float game_balance = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_game_balance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 event_score = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_event_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchHeroSelectEvent::_InternalParse;
          object = msg->add_picks_bans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgEconPlayerStrangeCountAdjustment::_InternalParse;
          object = msg->add_player_strange_count_adjustments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 394 && (ptr += 2));
        break;
      }
      // optional bool automatic_surrender = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_automatic_surrender(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_version = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_server_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg::_InternalParse;
          object = msg->add_additional_msgs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // optional bool legacy_mass_disconnect = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_legacy_mass_disconnect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 average_networth_delta = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_average_networth_delta(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 networth_delta_min10 = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_networth_delta_min10(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 networth_delta_min20 = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_networth_delta_min20(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 maximum_losing_networth_lead = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_maximum_losing_networth_lead(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 average_experience_delta = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_average_experience_delta(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 experience_delta_min10 = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_experience_delta_min10(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 experience_delta_min20 = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_experience_delta_min20(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 bonus_gold_winner_min10 = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_bonus_gold_winner_min10(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 bonus_gold_winner_min20 = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_bonus_gold_winner_min20(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bonus_gold_winner_total = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_bonus_gold_winner_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 bonus_gold_loser_min10 = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_bonus_gold_loser_min10(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 bonus_gold_loser_min20 = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bonus_gold_loser_min20(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bonus_gold_loser_total = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bonus_gold_loser_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgPoorNetworkConditions::_InternalParse;
        object = msg->mutable_poor_network_conditions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent::_InternalParse;
          object = msg->add_social_feed_events();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 674 && (ptr += 2));
        break;
      }
      // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgGameMatchSignOut_CCustomGameData::_InternalParse;
        object = msg->mutable_custom_game_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 match_flags = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_match_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 team_scores = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_team_scores(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 696 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_team_scores();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 pre_game_duration = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_pre_game_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerStats::_InternalParse;
          object = msg->add_fantasy_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 714 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry::_InternalParse;
          object = msg->add_event_game_leaderboard_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 722 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignOut_WardPlacement::_InternalParse;
          object = msg->add_ward_placements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 730 && (ptr += 2));
        break;
      }
      // optional uint32 bounty_rune_gold_winners = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_bounty_rune_gold_winners(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bounty_rune_gold_losers = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_bounty_rune_gold_losers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 range_creep_upgrade_gold_winners = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_range_creep_upgrade_gold_winners(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 range_creep_upgrade_gold_losers = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_range_creep_upgrade_gold_losers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool good_guys_win = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_good_guys_win(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_guys_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_num_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tower_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_tower_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 barracks_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_barracks_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_addr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_addr().data(), static_cast<int>(this->server_addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOut.server_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_first_blood_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float game_balance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_game_balance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_event_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_strange_count_adjustments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool automatic_surrender = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_automatic_surrender(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_surrender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_server_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_mass_disconnect = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_legacy_mass_disconnect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 average_networth_delta = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_average_networth_delta(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &average_networth_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 networth_delta_min10 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_networth_delta_min10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &networth_delta_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 networth_delta_min20 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_networth_delta_min20(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &networth_delta_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 maximum_losing_networth_lead = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_maximum_losing_networth_lead(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maximum_losing_networth_lead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 average_experience_delta = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_average_experience_delta(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &average_experience_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 experience_delta_min10 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_experience_delta_min10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &experience_delta_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 experience_delta_min20 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_experience_delta_min20(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &experience_delta_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_winner_min10 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_bonus_gold_winner_min10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_winner_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_winner_min20 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_bonus_gold_winner_min20(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_winner_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_gold_winner_total = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_bonus_gold_winner_total(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_gold_winner_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_loser_min10 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_bonus_gold_loser_min10(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_loser_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_loser_min20 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_bonus_gold_loser_min20(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_loser_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_gold_loser_total = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_bonus_gold_loser_total(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_gold_loser_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (282 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (290 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_social_feed_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_flags = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_match_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_scores = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 312u, input, this->mutable_team_scores())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (314 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pre_game_duration = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_pre_game_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_game_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fantasy_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (338 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_game_leaderboard_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (346 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ward_placements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bounty_rune_gold_winners = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_bounty_rune_gold_winners(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounty_rune_gold_winners_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bounty_rune_gold_losers = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_bounty_rune_gold_losers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounty_rune_gold_losers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 range_creep_upgrade_gold_winners = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_range_creep_upgrade_gold_winners(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_creep_upgrade_gold_winners_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 range_creep_upgrade_gold_losers = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_range_creep_upgrade_gold_losers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_creep_upgrade_gold_losers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // optional bool good_guys_win = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->good_guys_win(), output);
  }

  // optional fixed32 date = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->date(), output);
  }

  // repeated uint32 num_players = 5;
  for (int i = 0, n = this->num_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->num_players(i), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->tower_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->barracks_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }

  // optional string server_addr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), static_cast<int>(this->server_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.server_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->server_addr(), output);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }

  // optional float game_balance = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->game_balance(), output);
  }

  // optional uint32 event_score = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->event_score(), output);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->picks_bans(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_strange_count_adjustments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->player_strange_count_adjustments(static_cast<int>(i)),
      output);
  }

  // optional bool automatic_surrender = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->automatic_surrender(), output);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_msgs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->additional_msgs(static_cast<int>(i)),
      output);
  }

  // optional bool legacy_mass_disconnect = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->legacy_mass_disconnect(), output);
  }

  // optional sint32 average_networth_delta = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->average_networth_delta(), output);
  }

  // optional sint32 networth_delta_min10 = 23;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->networth_delta_min10(), output);
  }

  // optional sint32 networth_delta_min20 = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->networth_delta_min20(), output);
  }

  // optional sint32 maximum_losing_networth_lead = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->maximum_losing_networth_lead(), output);
  }

  // optional sint32 average_experience_delta = 26;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->average_experience_delta(), output);
  }

  // optional sint32 experience_delta_min10 = 27;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(27, this->experience_delta_min10(), output);
  }

  // optional sint32 experience_delta_min20 = 28;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->experience_delta_min20(), output);
  }

  // optional sint32 bonus_gold_winner_min10 = 29;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->bonus_gold_winner_min10(), output);
  }

  // optional sint32 bonus_gold_winner_min20 = 30;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->bonus_gold_winner_min20(), output);
  }

  // optional uint32 bonus_gold_winner_total = 31;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->bonus_gold_winner_total(), output);
  }

  // optional sint32 bonus_gold_loser_min10 = 32;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->bonus_gold_loser_min10(), output);
  }

  // optional sint32 bonus_gold_loser_min20 = 33;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(33, this->bonus_gold_loser_min20(), output);
  }

  // optional uint32 bonus_gold_loser_total = 34;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->bonus_gold_loser_total(), output);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, HasBitSetters::poor_network_conditions(this), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->social_feed_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36,
      this->social_feed_events(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, HasBitSetters::custom_game_data(this), output);
  }

  // optional uint32 match_flags = 38;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->match_flags(), output);
  }

  // repeated uint32 team_scores = 39;
  for (int i = 0, n = this->team_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      39, this->team_scores(i), output);
  }

  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->pre_game_duration(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantasy_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41,
      this->fantasy_stats(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_game_leaderboard_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42,
      this->event_game_leaderboard_entries(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ward_placements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43,
      this->ward_placements(static_cast<int>(i)),
      output);
  }

  // optional uint32 bounty_rune_gold_winners = 44;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->bounty_rune_gold_winners(), output);
  }

  // optional uint32 bounty_rune_gold_losers = 45;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->bounty_rune_gold_losers(), output);
  }

  // optional uint32 range_creep_upgrade_gold_winners = 46;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->range_creep_upgrade_gold_winners(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 range_creep_upgrade_gold_losers = 47;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->range_creep_upgrade_gold_losers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut)
}

::google::protobuf::uint8* CMsgGameMatchSignOut::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // optional bool good_guys_win = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->good_guys_win(), target);
  }

  // optional fixed32 date = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->date(), target);
  }

  // repeated uint32 num_players = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->num_players_, target);

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->teams(static_cast<int>(i)), target);
  }

  // repeated uint32 tower_status = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->tower_status_, target);

  // repeated uint32 barracks_status = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->barracks_status_, target);

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }

  // optional string server_addr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), static_cast<int>(this->server_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.server_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->server_addr(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }

  // optional float game_balance = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->game_balance(), target);
  }

  // optional uint32 event_score = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->event_score(), target);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->picks_bans(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_strange_count_adjustments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->player_strange_count_adjustments(static_cast<int>(i)), target);
  }

  // optional bool automatic_surrender = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->automatic_surrender(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_msgs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->additional_msgs(static_cast<int>(i)), target);
  }

  // optional bool legacy_mass_disconnect = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->legacy_mass_disconnect(), target);
  }

  // optional sint32 average_networth_delta = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->average_networth_delta(), target);
  }

  // optional sint32 networth_delta_min10 = 23;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->networth_delta_min10(), target);
  }

  // optional sint32 networth_delta_min20 = 24;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->networth_delta_min20(), target);
  }

  // optional sint32 maximum_losing_networth_lead = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->maximum_losing_networth_lead(), target);
  }

  // optional sint32 average_experience_delta = 26;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->average_experience_delta(), target);
  }

  // optional sint32 experience_delta_min10 = 27;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(27, this->experience_delta_min10(), target);
  }

  // optional sint32 experience_delta_min20 = 28;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->experience_delta_min20(), target);
  }

  // optional sint32 bonus_gold_winner_min10 = 29;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->bonus_gold_winner_min10(), target);
  }

  // optional sint32 bonus_gold_winner_min20 = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->bonus_gold_winner_min20(), target);
  }

  // optional uint32 bonus_gold_winner_total = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->bonus_gold_winner_total(), target);
  }

  // optional sint32 bonus_gold_loser_min10 = 32;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->bonus_gold_loser_min10(), target);
  }

  // optional sint32 bonus_gold_loser_min20 = 33;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(33, this->bonus_gold_loser_min20(), target);
  }

  // optional uint32 bonus_gold_loser_total = 34;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->bonus_gold_loser_total(), target);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, HasBitSetters::poor_network_conditions(this), target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->social_feed_events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, this->social_feed_events(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, HasBitSetters::custom_game_data(this), target);
  }

  // optional uint32 match_flags = 38;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->match_flags(), target);
  }

  // repeated uint32 team_scores = 39;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(39, this->team_scores_, target);

  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->pre_game_duration(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantasy_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->fantasy_stats(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_game_leaderboard_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->event_game_leaderboard_entries(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ward_placements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->ward_placements(static_cast<int>(i)), target);
  }

  // optional uint32 bounty_rune_gold_winners = 44;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->bounty_rune_gold_winners(), target);
  }

  // optional uint32 bounty_rune_gold_losers = 45;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->bounty_rune_gold_losers(), target);
  }

  // optional uint32 range_creep_upgrade_gold_winners = 46;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->range_creep_upgrade_gold_winners(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 range_creep_upgrade_gold_losers = 47;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->range_creep_upgrade_gold_losers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut)
  return target;
}

size_t CMsgGameMatchSignOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 num_players = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_players_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->num_players_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tower_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->barracks_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->barracks_status_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks_bans(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->player_strange_count_adjustments_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_strange_count_adjustments(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_msgs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_msgs(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->social_feed_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->social_feed_events(static_cast<int>(i)));
    }
  }

  // repeated uint32 team_scores = 39;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_scores_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->team_scores_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->fantasy_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fantasy_stats(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->event_game_leaderboard_entries_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_game_leaderboard_entries(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->ward_placements_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ward_placements(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_addr = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }

    // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *poor_network_conditions_);
    }

    // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional fixed32 date = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 cluster = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

    // optional uint32 first_blood_time = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float game_balance = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 event_score = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_score());
    }

    // optional bool good_guys_win = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_surrender = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool legacy_mass_disconnect = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 server_version = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional sint32 average_networth_delta = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->average_networth_delta());
    }

    // optional sint32 networth_delta_min10 = 23;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->networth_delta_min10());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sint32 networth_delta_min20 = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->networth_delta_min20());
    }

    // optional sint32 maximum_losing_networth_lead = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maximum_losing_networth_lead());
    }

    // optional sint32 average_experience_delta = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->average_experience_delta());
    }

    // optional sint32 experience_delta_min10 = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->experience_delta_min10());
    }

    // optional sint32 experience_delta_min20 = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->experience_delta_min20());
    }

    // optional sint32 bonus_gold_winner_min10 = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_winner_min10());
    }

    // optional sint32 bonus_gold_winner_min20 = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_winner_min20());
    }

    // optional uint32 bonus_gold_winner_total = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_gold_winner_total());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional sint32 bonus_gold_loser_min10 = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_loser_min10());
    }

    // optional sint32 bonus_gold_loser_min20 = 33;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_loser_min20());
    }

    // optional uint32 bonus_gold_loser_total = 34;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_gold_loser_total());
    }

    // optional uint32 match_flags = 38;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_flags());
    }

    // optional uint32 pre_game_duration = 40;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_game_duration());
    }

    // optional uint32 bounty_rune_gold_winners = 44;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounty_rune_gold_winners());
    }

    // optional uint32 bounty_rune_gold_losers = 45;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounty_rune_gold_losers());
    }

    // optional uint32 range_creep_upgrade_gold_winners = 46;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_creep_upgrade_gold_winners());
    }

  }
  // optional uint32 range_creep_upgrade_gold_losers = 47;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_creep_upgrade_gold_losers());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut::MergeFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_players_.MergeFrom(from.num_players_);
  teams_.MergeFrom(from.teams_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  player_strange_count_adjustments_.MergeFrom(from.player_strange_count_adjustments_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  social_feed_events_.MergeFrom(from.social_feed_events_);
  team_scores_.MergeFrom(from.team_scores_);
  fantasy_stats_.MergeFrom(from.fantasy_stats_);
  event_game_leaderboard_entries_.MergeFrom(from.event_game_leaderboard_entries_);
  ward_placements_.MergeFrom(from.ward_placements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      server_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_poor_network_conditions()->::proto::dota::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_custom_game_data()->::proto::dota::CMsgGameMatchSignOut_CCustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000040u) {
      cluster_ = from.cluster_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_blood_time_ = from.first_blood_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_balance_ = from.game_balance_;
    }
    if (cached_has_bits & 0x00000200u) {
      event_score_ = from.event_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      good_guys_win_ = from.good_guys_win_;
    }
    if (cached_has_bits & 0x00000800u) {
      automatic_surrender_ = from.automatic_surrender_;
    }
    if (cached_has_bits & 0x00001000u) {
      legacy_mass_disconnect_ = from.legacy_mass_disconnect_;
    }
    if (cached_has_bits & 0x00002000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00004000u) {
      average_networth_delta_ = from.average_networth_delta_;
    }
    if (cached_has_bits & 0x00008000u) {
      networth_delta_min10_ = from.networth_delta_min10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      networth_delta_min20_ = from.networth_delta_min20_;
    }
    if (cached_has_bits & 0x00020000u) {
      maximum_losing_networth_lead_ = from.maximum_losing_networth_lead_;
    }
    if (cached_has_bits & 0x00040000u) {
      average_experience_delta_ = from.average_experience_delta_;
    }
    if (cached_has_bits & 0x00080000u) {
      experience_delta_min10_ = from.experience_delta_min10_;
    }
    if (cached_has_bits & 0x00100000u) {
      experience_delta_min20_ = from.experience_delta_min20_;
    }
    if (cached_has_bits & 0x00200000u) {
      bonus_gold_winner_min10_ = from.bonus_gold_winner_min10_;
    }
    if (cached_has_bits & 0x00400000u) {
      bonus_gold_winner_min20_ = from.bonus_gold_winner_min20_;
    }
    if (cached_has_bits & 0x00800000u) {
      bonus_gold_winner_total_ = from.bonus_gold_winner_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      bonus_gold_loser_min10_ = from.bonus_gold_loser_min10_;
    }
    if (cached_has_bits & 0x02000000u) {
      bonus_gold_loser_min20_ = from.bonus_gold_loser_min20_;
    }
    if (cached_has_bits & 0x04000000u) {
      bonus_gold_loser_total_ = from.bonus_gold_loser_total_;
    }
    if (cached_has_bits & 0x08000000u) {
      match_flags_ = from.match_flags_;
    }
    if (cached_has_bits & 0x10000000u) {
      pre_game_duration_ = from.pre_game_duration_;
    }
    if (cached_has_bits & 0x20000000u) {
      bounty_rune_gold_winners_ = from.bounty_rune_gold_winners_;
    }
    if (cached_has_bits & 0x40000000u) {
      bounty_rune_gold_losers_ = from.bounty_rune_gold_losers_;
    }
    if (cached_has_bits & 0x80000000u) {
      range_creep_upgrade_gold_winners_ = from.range_creep_upgrade_gold_winners_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.has_range_creep_upgrade_gold_losers()) {
    set_range_creep_upgrade_gold_losers(from.range_creep_upgrade_gold_losers());
  }
}

void CMsgGameMatchSignOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut::CopyFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut::Swap(CMsgGameMatchSignOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut::InternalSwap(CMsgGameMatchSignOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  num_players_.InternalSwap(&other->num_players_);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  tower_status_.InternalSwap(&other->tower_status_);
  barracks_status_.InternalSwap(&other->barracks_status_);
  CastToBase(&picks_bans_)->InternalSwap(CastToBase(&other->picks_bans_));
  CastToBase(&player_strange_count_adjustments_)->InternalSwap(CastToBase(&other->player_strange_count_adjustments_));
  CastToBase(&additional_msgs_)->InternalSwap(CastToBase(&other->additional_msgs_));
  CastToBase(&social_feed_events_)->InternalSwap(CastToBase(&other->social_feed_events_));
  team_scores_.InternalSwap(&other->team_scores_);
  CastToBase(&fantasy_stats_)->InternalSwap(CastToBase(&other->fantasy_stats_));
  CastToBase(&event_game_leaderboard_entries_)->InternalSwap(CastToBase(&other->event_game_leaderboard_entries_));
  CastToBase(&ward_placements_)->InternalSwap(CastToBase(&other->ward_placements_));
  server_addr_.Swap(&other->server_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(poor_network_conditions_, other->poor_network_conditions_);
  swap(custom_game_data_, other->custom_game_data_);
  swap(match_id_, other->match_id_);
  swap(duration_, other->duration_);
  swap(date_, other->date_);
  swap(cluster_, other->cluster_);
  swap(first_blood_time_, other->first_blood_time_);
  swap(game_balance_, other->game_balance_);
  swap(event_score_, other->event_score_);
  swap(good_guys_win_, other->good_guys_win_);
  swap(automatic_surrender_, other->automatic_surrender_);
  swap(legacy_mass_disconnect_, other->legacy_mass_disconnect_);
  swap(server_version_, other->server_version_);
  swap(average_networth_delta_, other->average_networth_delta_);
  swap(networth_delta_min10_, other->networth_delta_min10_);
  swap(networth_delta_min20_, other->networth_delta_min20_);
  swap(maximum_losing_networth_lead_, other->maximum_losing_networth_lead_);
  swap(average_experience_delta_, other->average_experience_delta_);
  swap(experience_delta_min10_, other->experience_delta_min10_);
  swap(experience_delta_min20_, other->experience_delta_min20_);
  swap(bonus_gold_winner_min10_, other->bonus_gold_winner_min10_);
  swap(bonus_gold_winner_min20_, other->bonus_gold_winner_min20_);
  swap(bonus_gold_winner_total_, other->bonus_gold_winner_total_);
  swap(bonus_gold_loser_min10_, other->bonus_gold_loser_min10_);
  swap(bonus_gold_loser_min20_, other->bonus_gold_loser_min20_);
  swap(bonus_gold_loser_total_, other->bonus_gold_loser_total_);
  swap(match_flags_, other->match_flags_);
  swap(pre_game_duration_, other->pre_game_duration_);
  swap(bounty_rune_gold_winners_, other->bounty_rune_gold_winners_);
  swap(bounty_rune_gold_losers_, other->bounty_rune_gold_losers_);
  swap(range_creep_upgrade_gold_winners_, other->range_creep_upgrade_gold_winners_);
  swap(range_creep_upgrade_gold_losers_, other->range_creep_upgrade_gold_losers_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutDraftInfo::InitAsDefaultInstance() {
}
class CMsgSignOutDraftInfo::HasBitSetters {
 public:
  static void set_has_radiant_captain_account_id(CMsgSignOutDraftInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dire_captain_account_id(CMsgSignOutDraftInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

void CMsgSignOutDraftInfo::clear_picks_bans() {
  picks_bans_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutDraftInfo::kRadiantCaptainAccountIdFieldNumber;
const int CMsgSignOutDraftInfo::kDireCaptainAccountIdFieldNumber;
const int CMsgSignOutDraftInfo::kPicksBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutDraftInfo::CMsgSignOutDraftInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutDraftInfo)
}
CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(const CMsgSignOutDraftInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      picks_bans_(from.picks_bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radiant_captain_account_id_, &from.radiant_captain_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_captain_account_id_) -
    reinterpret_cast<char*>(&radiant_captain_account_id_)) + sizeof(dire_captain_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutDraftInfo)
}

void CMsgSignOutDraftInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSignOutDraftInfo_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&radiant_captain_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dire_captain_account_id_) -
      reinterpret_cast<char*>(&radiant_captain_account_id_)) + sizeof(dire_captain_account_id_));
}

CMsgSignOutDraftInfo::~CMsgSignOutDraftInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutDraftInfo)
  SharedDtor();
}

void CMsgSignOutDraftInfo::SharedDtor() {
}

void CMsgSignOutDraftInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutDraftInfo& CMsgSignOutDraftInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutDraftInfo_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutDraftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutDraftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picks_bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&radiant_captain_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_captain_account_id_) -
        reinterpret_cast<char*>(&radiant_captain_account_id_)) + sizeof(dire_captain_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutDraftInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutDraftInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 radiant_captain_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_radiant_captain_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_captain_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dire_captain_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMatchHeroSelectEvent::_InternalParse;
          object = msg->add_picks_bans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutDraftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutDraftInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 radiant_captain_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_radiant_captain_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_captain_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_captain_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_dire_captain_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_captain_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutDraftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutDraftInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutDraftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutDraftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_captain_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->radiant_captain_account_id(), output);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dire_captain_account_id(), output);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->picks_bans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutDraftInfo)
}

::google::protobuf::uint8* CMsgSignOutDraftInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutDraftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_captain_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->radiant_captain_account_id(), target);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dire_captain_account_id(), target);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->picks_bans(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutDraftInfo)
  return target;
}

size_t CMsgSignOutDraftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutDraftInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks_bans(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 radiant_captain_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_captain_account_id());
    }

    // optional uint32 dire_captain_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_captain_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutDraftInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutDraftInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutDraftInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutDraftInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutDraftInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutDraftInfo::MergeFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picks_bans_.MergeFrom(from.picks_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_captain_account_id_ = from.radiant_captain_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      dire_captain_account_id_ = from.dire_captain_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutDraftInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutDraftInfo::CopyFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutDraftInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutDraftInfo::Swap(CMsgSignOutDraftInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutDraftInfo::InternalSwap(CMsgSignOutDraftInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&picks_bans_)->InternalSwap(CastToBase(&other->picks_bans_));
  swap(radiant_captain_account_id_, other->radiant_captain_account_id_);
  swap(dire_captain_account_id_, other->dire_captain_account_id_);
}

::google::protobuf::Metadata CMsgSignOutDraftInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutBotInfo::InitAsDefaultInstance() {
}
class CMsgSignOutBotInfo::HasBitSetters {
 public:
  static void set_has_allow_cheats(CMsgSignOutBotInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bot_difficulty_radiant(CMsgSignOutBotInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_created_lobby(CMsgSignOutBotInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bot_difficulty_dire(CMsgSignOutBotInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutBotInfo::kAllowCheatsFieldNumber;
const int CMsgSignOutBotInfo::kBotDifficultyRadiantFieldNumber;
const int CMsgSignOutBotInfo::kCreatedLobbyFieldNumber;
const int CMsgSignOutBotInfo::kBotDifficultyDireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutBotInfo::CMsgSignOutBotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutBotInfo)
}
CMsgSignOutBotInfo::CMsgSignOutBotInfo(const CMsgSignOutBotInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bot_difficulty_radiant_, &from.bot_difficulty_radiant_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&bot_difficulty_radiant_)) + sizeof(bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutBotInfo)
}

void CMsgSignOutBotInfo::SharedCtor() {
  ::memset(&bot_difficulty_radiant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_difficulty_dire_) -
      reinterpret_cast<char*>(&bot_difficulty_radiant_)) + sizeof(bot_difficulty_dire_));
}

CMsgSignOutBotInfo::~CMsgSignOutBotInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutBotInfo)
  SharedDtor();
}

void CMsgSignOutBotInfo::SharedDtor() {
}

void CMsgSignOutBotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutBotInfo& CMsgSignOutBotInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutBotInfo_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutBotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutBotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&bot_difficulty_radiant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_difficulty_dire_) -
        reinterpret_cast<char*>(&bot_difficulty_radiant_)) + sizeof(bot_difficulty_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutBotInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutBotInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool allow_cheats = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_allow_cheats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty_radiant(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool created_lobby = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_created_lobby(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty_dire(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutBotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutBotInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allow_cheats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_allow_cheats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool created_lobby = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_created_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutBotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutBotInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutBotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutBotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_cheats(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bot_difficulty_radiant(), output);
  }

  // optional bool created_lobby = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->created_lobby(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bot_difficulty_dire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutBotInfo)
}

::google::protobuf::uint8* CMsgSignOutBotInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutBotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow_cheats(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bot_difficulty_radiant(), target);
  }

  // optional bool created_lobby = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->created_lobby(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bot_difficulty_dire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutBotInfo)
  return target;
}

size_t CMsgSignOutBotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutBotInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool created_lobby = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutBotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutBotInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutBotInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutBotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutBotInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutBotInfo::MergeFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00000004u) {
      created_lobby_ = from.created_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutBotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBotInfo::CopyFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBotInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutBotInfo::Swap(CMsgSignOutBotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutBotInfo::InternalSwap(CMsgSignOutBotInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  swap(allow_cheats_, other->allow_cheats_);
  swap(created_lobby_, other->created_lobby_);
  swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
}

::google::protobuf::Metadata CMsgSignOutBotInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutPlayerStats::InitAsDefaultInstance() {
}
class CMsgSignOutPlayerStats::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rank(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hero_id(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rampages(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_triple_kills(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_first_blood_claimed(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_first_blood_given(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_couriers_killed(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_aegises_snatched(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_cheeses_eaten(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_creeps_stacked(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_fight_score(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_farm_score(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_support_score(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_push_score(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_kills(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_deaths(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_assists(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_last_hits(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_denies(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_gpm(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_xppm(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_net_worth(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_damage(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_heals(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_rapiers_purchased(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_observer_wards_placed(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_wards_destroyed(CMsgSignOutPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutPlayerStats::kAccountIdFieldNumber;
const int CMsgSignOutPlayerStats::kMatchIdFieldNumber;
const int CMsgSignOutPlayerStats::kRankFieldNumber;
const int CMsgSignOutPlayerStats::kHeroIdFieldNumber;
const int CMsgSignOutPlayerStats::kRampagesFieldNumber;
const int CMsgSignOutPlayerStats::kTripleKillsFieldNumber;
const int CMsgSignOutPlayerStats::kFirstBloodClaimedFieldNumber;
const int CMsgSignOutPlayerStats::kFirstBloodGivenFieldNumber;
const int CMsgSignOutPlayerStats::kCouriersKilledFieldNumber;
const int CMsgSignOutPlayerStats::kAegisesSnatchedFieldNumber;
const int CMsgSignOutPlayerStats::kCheesesEatenFieldNumber;
const int CMsgSignOutPlayerStats::kCreepsStackedFieldNumber;
const int CMsgSignOutPlayerStats::kFightScoreFieldNumber;
const int CMsgSignOutPlayerStats::kFarmScoreFieldNumber;
const int CMsgSignOutPlayerStats::kSupportScoreFieldNumber;
const int CMsgSignOutPlayerStats::kPushScoreFieldNumber;
const int CMsgSignOutPlayerStats::kKillsFieldNumber;
const int CMsgSignOutPlayerStats::kDeathsFieldNumber;
const int CMsgSignOutPlayerStats::kAssistsFieldNumber;
const int CMsgSignOutPlayerStats::kLastHitsFieldNumber;
const int CMsgSignOutPlayerStats::kDeniesFieldNumber;
const int CMsgSignOutPlayerStats::kGpmFieldNumber;
const int CMsgSignOutPlayerStats::kXppmFieldNumber;
const int CMsgSignOutPlayerStats::kNetWorthFieldNumber;
const int CMsgSignOutPlayerStats::kDamageFieldNumber;
const int CMsgSignOutPlayerStats::kHealsFieldNumber;
const int CMsgSignOutPlayerStats::kRapiersPurchasedFieldNumber;
const int CMsgSignOutPlayerStats::kObserverWardsPlacedFieldNumber;
const int CMsgSignOutPlayerStats::kWardsDestroyedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutPlayerStats::CMsgSignOutPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutPlayerStats)
}
CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(const CMsgSignOutPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wards_destroyed_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(wards_destroyed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutPlayerStats)
}

void CMsgSignOutPlayerStats::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wards_destroyed_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(wards_destroyed_));
}

CMsgSignOutPlayerStats::~CMsgSignOutPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutPlayerStats)
  SharedDtor();
}

void CMsgSignOutPlayerStats::SharedDtor() {
}

void CMsgSignOutPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutPlayerStats& CMsgSignOutPlayerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutPlayerStats_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_blood_given_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(first_blood_given_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&couriers_killed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&push_score_) -
        reinterpret_cast<char*>(&couriers_killed_)) + sizeof(push_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(net_worth_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wards_destroyed_) -
        reinterpret_cast<char*>(&damage_)) + sizeof(wards_destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutPlayerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutPlayerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rampages = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rampages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 triple_kills = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_triple_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 first_blood_claimed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_first_blood_claimed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 first_blood_given = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_first_blood_given(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 couriers_killed = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_couriers_killed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 aegises_snatched = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_aegises_snatched(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cheeses_eaten = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_cheeses_eaten(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 creeps_stacked = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_creeps_stacked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fight_score = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_fight_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float farm_score = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_farm_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float support_score = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_support_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float push_score = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_push_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 kills = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_hits = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float gpm = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_gpm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float xppm = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_xppm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float net_worth = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float damage = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_damage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float heals = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 213) goto handle_unusual;
        msg->set_heals(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 rapiers_purchased = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_rapiers_purchased(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 observer_wards_placed = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_observer_wards_placed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wards_destroyed = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_wards_destroyed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutPlayerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rampages = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_rampages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rampages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 triple_kills = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_triple_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triple_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_claimed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_first_blood_claimed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_claimed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_given = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_first_blood_given(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_given_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 couriers_killed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_couriers_killed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &couriers_killed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 aegises_snatched = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_aegises_snatched(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aegises_snatched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cheeses_eaten = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_cheeses_eaten(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheeses_eaten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creeps_stacked = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_creeps_stacked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creeps_stacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fight_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_fight_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fight_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float farm_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_farm_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farm_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float support_score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {
          HasBitSetters::set_has_support_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &support_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float push_score = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (133 & 0xFF)) {
          HasBitSetters::set_has_push_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &push_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (181 & 0xFF)) {
          HasBitSetters::set_has_gpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xppm = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {
          HasBitSetters::set_has_xppm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float net_worth = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (197 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float damage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (205 & 0xFF)) {
          HasBitSetters::set_has_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heals = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (213 & 0xFF)) {
          HasBitSetters::set_has_heals(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rapiers_purchased = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_rapiers_purchased(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rapiers_purchased_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 observer_wards_placed = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_observer_wards_placed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &observer_wards_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wards_destroyed = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_wards_destroyed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wards_destroyed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutPlayerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 rank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 rampages = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rampages(), output);
  }

  // optional uint32 triple_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->triple_kills(), output);
  }

  // optional uint32 first_blood_claimed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->first_blood_claimed(), output);
  }

  // optional uint32 first_blood_given = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->first_blood_given(), output);
  }

  // optional uint32 couriers_killed = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->couriers_killed(), output);
  }

  // optional uint32 aegises_snatched = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->aegises_snatched(), output);
  }

  // optional uint32 cheeses_eaten = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cheeses_eaten(), output);
  }

  // optional uint32 creeps_stacked = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->creeps_stacked(), output);
  }

  // optional float fight_score = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fight_score(), output);
  }

  // optional float farm_score = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->farm_score(), output);
  }

  // optional float support_score = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->support_score(), output);
  }

  // optional float push_score = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->push_score(), output);
  }

  // optional uint32 kills = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->kills(), output);
  }

  // optional uint32 deaths = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->deaths(), output);
  }

  // optional uint32 assists = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->assists(), output);
  }

  // optional uint32 last_hits = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->last_hits(), output);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->denies(), output);
  }

  // optional float gpm = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->gpm(), output);
  }

  // optional float xppm = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->xppm(), output);
  }

  // optional float net_worth = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->net_worth(), output);
  }

  // optional float damage = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->damage(), output);
  }

  // optional float heals = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->heals(), output);
  }

  // optional uint32 rapiers_purchased = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->rapiers_purchased(), output);
  }

  // optional uint32 observer_wards_placed = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->observer_wards_placed(), output);
  }

  // optional uint32 wards_destroyed = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->wards_destroyed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutPlayerStats)
}

::google::protobuf::uint8* CMsgSignOutPlayerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 rampages = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rampages(), target);
  }

  // optional uint32 triple_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->triple_kills(), target);
  }

  // optional uint32 first_blood_claimed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->first_blood_claimed(), target);
  }

  // optional uint32 first_blood_given = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->first_blood_given(), target);
  }

  // optional uint32 couriers_killed = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->couriers_killed(), target);
  }

  // optional uint32 aegises_snatched = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->aegises_snatched(), target);
  }

  // optional uint32 cheeses_eaten = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cheeses_eaten(), target);
  }

  // optional uint32 creeps_stacked = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->creeps_stacked(), target);
  }

  // optional float fight_score = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fight_score(), target);
  }

  // optional float farm_score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->farm_score(), target);
  }

  // optional float support_score = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->support_score(), target);
  }

  // optional float push_score = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->push_score(), target);
  }

  // optional uint32 kills = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->kills(), target);
  }

  // optional uint32 deaths = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->deaths(), target);
  }

  // optional uint32 assists = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->assists(), target);
  }

  // optional uint32 last_hits = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->last_hits(), target);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->denies(), target);
  }

  // optional float gpm = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->gpm(), target);
  }

  // optional float xppm = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->xppm(), target);
  }

  // optional float net_worth = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->net_worth(), target);
  }

  // optional float damage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->damage(), target);
  }

  // optional float heals = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->heals(), target);
  }

  // optional uint32 rapiers_purchased = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->rapiers_purchased(), target);
  }

  // optional uint32 observer_wards_placed = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->observer_wards_placed(), target);
  }

  // optional uint32 wards_destroyed = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->wards_destroyed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutPlayerStats)
  return target;
}

size_t CMsgSignOutPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // optional uint32 rank = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 rampages = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rampages());
    }

    // optional uint32 triple_kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triple_kills());
    }

    // optional uint32 first_blood_claimed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_claimed());
    }

    // optional uint32 first_blood_given = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_given());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 couriers_killed = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->couriers_killed());
    }

    // optional uint32 aegises_snatched = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aegises_snatched());
    }

    // optional uint32 cheeses_eaten = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheeses_eaten());
    }

    // optional uint32 creeps_stacked = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creeps_stacked());
    }

    // optional float fight_score = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float farm_score = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float support_score = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float push_score = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 kills = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional float gpm = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float xppm = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float net_worth = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional float damage = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float heals = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 rapiers_purchased = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rapiers_purchased());
    }

    // optional uint32 observer_wards_placed = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->observer_wards_placed());
    }

    // optional uint32 wards_destroyed = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wards_destroyed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutPlayerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutPlayerStats::MergeFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00000020u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      first_blood_claimed_ = from.first_blood_claimed_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_blood_given_ = from.first_blood_given_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x00000200u) {
      aegises_snatched_ = from.aegises_snatched_;
    }
    if (cached_has_bits & 0x00000400u) {
      cheeses_eaten_ = from.cheeses_eaten_;
    }
    if (cached_has_bits & 0x00000800u) {
      creeps_stacked_ = from.creeps_stacked_;
    }
    if (cached_has_bits & 0x00001000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00002000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      support_score_ = from.support_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      push_score_ = from.push_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00020000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00040000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00200000u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00400000u) {
      xppm_ = from.xppm_;
    }
    if (cached_has_bits & 0x00800000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      heals_ = from.heals_;
    }
    if (cached_has_bits & 0x04000000u) {
      rapiers_purchased_ = from.rapiers_purchased_;
    }
    if (cached_has_bits & 0x08000000u) {
      observer_wards_placed_ = from.observer_wards_placed_;
    }
    if (cached_has_bits & 0x10000000u) {
      wards_destroyed_ = from.wards_destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutPlayerStats::CopyFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutPlayerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutPlayerStats::Swap(CMsgSignOutPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutPlayerStats::InternalSwap(CMsgSignOutPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(account_id_, other->account_id_);
  swap(rank_, other->rank_);
  swap(hero_id_, other->hero_id_);
  swap(rampages_, other->rampages_);
  swap(triple_kills_, other->triple_kills_);
  swap(first_blood_claimed_, other->first_blood_claimed_);
  swap(first_blood_given_, other->first_blood_given_);
  swap(couriers_killed_, other->couriers_killed_);
  swap(aegises_snatched_, other->aegises_snatched_);
  swap(cheeses_eaten_, other->cheeses_eaten_);
  swap(creeps_stacked_, other->creeps_stacked_);
  swap(fight_score_, other->fight_score_);
  swap(farm_score_, other->farm_score_);
  swap(support_score_, other->support_score_);
  swap(push_score_, other->push_score_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
  swap(gpm_, other->gpm_);
  swap(xppm_, other->xppm_);
  swap(net_worth_, other->net_worth_);
  swap(damage_, other->damage_);
  swap(heals_, other->heals_);
  swap(rapiers_purchased_, other->rapiers_purchased_);
  swap(observer_wards_placed_, other->observer_wards_placed_);
  swap(wards_destroyed_, other->wards_destroyed_);
}

::google::protobuf::Metadata CMsgSignOutPlayerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutCommunicationSummary_PlayerCommunication::InitAsDefaultInstance() {
}
class CMsgSignOutCommunicationSummary_PlayerCommunication::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pings(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_pings_per_interval(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_teammate_pings(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_teammate_pings_per_interval(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_chat_messages(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_all_chat_messages(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_chat_wheel_messages(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_pauses(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_unpauses(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_lines_drawn(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_voice_chat_seconds(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_chat_mutes(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_voice_mutes(CMsgSignOutCommunicationSummary_PlayerCommunication* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kAccountIdFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kPingsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kMaxPingsPerIntervalFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kTeammatePingsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kMaxTeammatePingsPerIntervalFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kTeamChatMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kAllChatMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kChatWheelMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kPausesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kUnpausesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kLinesDrawnFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kVoiceChatSecondsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kChatMutesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kVoiceMutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
}
CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(const CMsgSignOutCommunicationSummary_PlayerCommunication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_mutes_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(voice_mutes_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_mutes_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(voice_mutes_));
}

CMsgSignOutCommunicationSummary_PlayerCommunication::~CMsgSignOutCommunicationSummary_PlayerCommunication() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  SharedDtor();
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedDtor() {
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutCommunicationSummary_PlayerCommunication& CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutCommunicationSummary_PlayerCommunication_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutCommunicationSummary_PlayerCommunication::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_wheel_messages_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(chat_wheel_messages_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&pauses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voice_mutes_) -
        reinterpret_cast<char*>(&pauses_)) + sizeof(voice_mutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutCommunicationSummary_PlayerCommunication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutCommunicationSummary_PlayerCommunication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 pings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_pings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_pings_per_interval = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max_pings_per_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 teammate_pings = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_teammate_pings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_teammate_pings_per_interval = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_teammate_pings_per_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_chat_messages = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_chat_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 all_chat_messages = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_all_chat_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 chat_wheel_messages = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_chat_wheel_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 pauses = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_pauses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 unpauses = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_unpauses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lines_drawn = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_lines_drawn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 voice_chat_seconds = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_voice_chat_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 chat_mutes = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_chat_mutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 voice_mutes = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_voice_mutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutCommunicationSummary_PlayerCommunication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_pings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_pings_per_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_max_pings_per_interval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_pings_per_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teammate_pings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_teammate_pings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_pings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_teammate_pings_per_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_max_teammate_pings_per_interval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_teammate_pings_per_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_chat_messages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_chat_messages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_chat_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 all_chat_messages = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_all_chat_messages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_chat_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_wheel_messages = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_chat_wheel_messages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_wheel_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pauses = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_pauses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pauses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unpauses = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_unpauses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unpauses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lines_drawn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_lines_drawn(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lines_drawn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 voice_chat_seconds = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_voice_chat_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_chat_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_mutes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_chat_mutes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_mutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 voice_mutes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_voice_mutes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_mutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutCommunicationSummary_PlayerCommunication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 pings = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pings(), output);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_pings_per_interval(), output);
  }

  // optional uint32 teammate_pings = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teammate_pings(), output);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_teammate_pings_per_interval(), output);
  }

  // optional uint32 team_chat_messages = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_chat_messages(), output);
  }

  // optional uint32 all_chat_messages = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->all_chat_messages(), output);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chat_wheel_messages(), output);
  }

  // optional uint32 pauses = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pauses(), output);
  }

  // optional uint32 unpauses = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unpauses(), output);
  }

  // optional uint32 lines_drawn = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lines_drawn(), output);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->voice_chat_seconds(), output);
  }

  // optional uint32 chat_mutes = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->chat_mutes(), output);
  }

  // optional uint32 voice_mutes = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->voice_mutes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
}

::google::protobuf::uint8* CMsgSignOutCommunicationSummary_PlayerCommunication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 pings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pings(), target);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_pings_per_interval(), target);
  }

  // optional uint32 teammate_pings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teammate_pings(), target);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_teammate_pings_per_interval(), target);
  }

  // optional uint32 team_chat_messages = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_chat_messages(), target);
  }

  // optional uint32 all_chat_messages = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->all_chat_messages(), target);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chat_wheel_messages(), target);
  }

  // optional uint32 pauses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pauses(), target);
  }

  // optional uint32 unpauses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->unpauses(), target);
  }

  // optional uint32 lines_drawn = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lines_drawn(), target);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->voice_chat_seconds(), target);
  }

  // optional uint32 chat_mutes = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->chat_mutes(), target);
  }

  // optional uint32 voice_mutes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->voice_mutes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  return target;
}

size_t CMsgSignOutCommunicationSummary_PlayerCommunication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 pings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pings());
    }

    // optional uint32 max_pings_per_interval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_pings_per_interval());
    }

    // optional uint32 teammate_pings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_pings());
    }

    // optional uint32 max_teammate_pings_per_interval = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_teammate_pings_per_interval());
    }

    // optional uint32 team_chat_messages = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_chat_messages());
    }

    // optional uint32 all_chat_messages = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_chat_messages());
    }

    // optional uint32 chat_wheel_messages = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_wheel_messages());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 pauses = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pauses());
    }

    // optional uint32 unpauses = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unpauses());
    }

    // optional uint32 lines_drawn = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lines_drawn());
    }

    // optional uint32 voice_chat_seconds = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voice_chat_seconds());
    }

    // optional uint32 chat_mutes = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_mutes());
    }

    // optional uint32 voice_mutes = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voice_mutes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary_PlayerCommunication* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutCommunicationSummary_PlayerCommunication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pings_ = from.pings_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_pings_per_interval_ = from.max_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      teammate_pings_ = from.teammate_pings_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_teammate_pings_per_interval_ = from.max_teammate_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_chat_messages_ = from.team_chat_messages_;
    }
    if (cached_has_bits & 0x00000040u) {
      all_chat_messages_ = from.all_chat_messages_;
    }
    if (cached_has_bits & 0x00000080u) {
      chat_wheel_messages_ = from.chat_wheel_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      pauses_ = from.pauses_;
    }
    if (cached_has_bits & 0x00000200u) {
      unpauses_ = from.unpauses_;
    }
    if (cached_has_bits & 0x00000400u) {
      lines_drawn_ = from.lines_drawn_;
    }
    if (cached_has_bits & 0x00000800u) {
      voice_chat_seconds_ = from.voice_chat_seconds_;
    }
    if (cached_has_bits & 0x00001000u) {
      chat_mutes_ = from.chat_mutes_;
    }
    if (cached_has_bits & 0x00002000u) {
      voice_mutes_ = from.voice_mutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Swap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(pings_, other->pings_);
  swap(max_pings_per_interval_, other->max_pings_per_interval_);
  swap(teammate_pings_, other->teammate_pings_);
  swap(max_teammate_pings_per_interval_, other->max_teammate_pings_per_interval_);
  swap(team_chat_messages_, other->team_chat_messages_);
  swap(all_chat_messages_, other->all_chat_messages_);
  swap(chat_wheel_messages_, other->chat_wheel_messages_);
  swap(pauses_, other->pauses_);
  swap(unpauses_, other->unpauses_);
  swap(lines_drawn_, other->lines_drawn_);
  swap(voice_chat_seconds_, other->voice_chat_seconds_);
  swap(chat_mutes_, other->chat_mutes_);
  swap(voice_mutes_, other->voice_mutes_);
}

::google::protobuf::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutCommunicationSummary::InitAsDefaultInstance() {
}
class CMsgSignOutCommunicationSummary::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunicationSummary::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunicationSummary)
}
CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(const CMsgSignOutCommunicationSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunicationSummary)
}

void CMsgSignOutCommunicationSummary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSignOutCommunicationSummary_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgSignOutCommunicationSummary::~CMsgSignOutCommunicationSummary() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunicationSummary)
  SharedDtor();
}

void CMsgSignOutCommunicationSummary::SharedDtor() {
}

void CMsgSignOutCommunicationSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutCommunicationSummary& CMsgSignOutCommunicationSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutCommunicationSummary_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutCommunicationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunicationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutCommunicationSummary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutCommunicationSummary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutCommunicationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunicationSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunicationSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunicationSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutCommunicationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunicationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunicationSummary)
}

::google::protobuf::uint8* CMsgSignOutCommunicationSummary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunicationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunicationSummary)
  return target;
}

size_t CMsgSignOutCommunicationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunicationSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunicationSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutCommunicationSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunicationSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunicationSummary)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary::MergeFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary::Swap(CMsgSignOutCommunicationSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunicationSummary::InternalSwap(CMsgSignOutCommunicationSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
}

::google::protobuf::Metadata CMsgSignOutCommunicationSummary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignoutResponse_PlayerMetadata::InitAsDefaultInstance() {
}
class CMsgGameMatchSignoutResponse_PlayerMetadata::HasBitSetters {
 public:
  static void set_has_hero_id(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_avg_kills_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_avg_deaths_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_avg_assists_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_avg_gpm_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_avg_xpm_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_best_kills_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_best_assists_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_best_gpm_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_best_xpm_x16(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_win_streak(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_best_win_streak(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_games_played(CMsgGameMatchSignoutResponse_PlayerMetadata* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kHeroIdFieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgKillsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgDeathsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgAssistsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgGpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgXpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestKillsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestAssistsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestGpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestXpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kWinStreakFieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestWinStreakFieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kGamesPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
}
CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(const CMsgGameMatchSignoutResponse_PlayerMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&games_played_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(games_played_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&games_played_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(games_played_));
}

CMsgGameMatchSignoutResponse_PlayerMetadata::~CMsgGameMatchSignoutResponse_PlayerMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  SharedDtor();
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedDtor() {
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignoutResponse_PlayerMetadata& CMsgGameMatchSignoutResponse_PlayerMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignoutResponse_PlayerMetadata_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignoutResponse_PlayerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_assists_x16_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(best_assists_x16_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&best_gpm_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&games_played_) -
        reinterpret_cast<char*>(&best_gpm_x16_)) + sizeof(games_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignoutResponse_PlayerMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignoutResponse_PlayerMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_kills_x16 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_avg_kills_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_deaths_x16 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_avg_deaths_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_assists_x16 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_avg_assists_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_gpm_x16 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_avg_gpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_xpm_x16 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_avg_xpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_kills_x16 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_best_kills_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_assists_x16 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_best_assists_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_gpm_x16 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_best_gpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_xpm_x16 = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_best_xpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 win_streak = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_win_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_win_streak = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_best_win_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 games_played = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_games_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignoutResponse_PlayerMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_kills_x16 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_avg_kills_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_deaths_x16 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_avg_deaths_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_deaths_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_assists_x16 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_avg_assists_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_gpm_x16 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_avg_gpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_xpm_x16 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_avg_xpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_kills_x16 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_best_kills_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_assists_x16 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_best_assists_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_gpm_x16 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_best_gpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_xpm_x16 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_best_xpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_streak = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_win_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_win_streak = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_best_win_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games_played = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_games_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignoutResponse_PlayerMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 avg_kills_x16 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avg_kills_x16(), output);
  }

  // optional uint32 avg_deaths_x16 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_deaths_x16(), output);
  }

  // optional uint32 avg_assists_x16 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avg_assists_x16(), output);
  }

  // optional uint32 avg_gpm_x16 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_gpm_x16(), output);
  }

  // optional uint32 avg_xpm_x16 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->avg_xpm_x16(), output);
  }

  // optional uint32 best_kills_x16 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->best_kills_x16(), output);
  }

  // optional uint32 best_assists_x16 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->best_assists_x16(), output);
  }

  // optional uint32 best_gpm_x16 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->best_gpm_x16(), output);
  }

  // optional uint32 best_xpm_x16 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->best_xpm_x16(), output);
  }

  // optional uint32 win_streak = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->win_streak(), output);
  }

  // optional uint32 best_win_streak = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->best_win_streak(), output);
  }

  // optional uint32 games_played = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->games_played(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse_PlayerMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 avg_kills_x16 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->win_streak(), target);
  }

  // optional uint32 best_win_streak = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->best_win_streak(), target);
  }

  // optional uint32 games_played = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->games_played(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  return target;
}

size_t CMsgGameMatchSignoutResponse_PlayerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 avg_kills_x16 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_kills_x16());
    }

    // optional uint32 best_assists_x16 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_assists_x16());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 best_gpm_x16 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_xpm_x16());
    }

    // optional uint32 win_streak = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_streak());
    }

    // optional uint32 best_win_streak = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_win_streak());
    }

    // optional uint32 games_played = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse_PlayerMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignoutResponse_PlayerMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      games_played_ = from.games_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse_PlayerMetadata::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::Swap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::InternalSwap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(avg_kills_x16_, other->avg_kills_x16_);
  swap(avg_deaths_x16_, other->avg_deaths_x16_);
  swap(avg_assists_x16_, other->avg_assists_x16_);
  swap(avg_gpm_x16_, other->avg_gpm_x16_);
  swap(avg_xpm_x16_, other->avg_xpm_x16_);
  swap(best_kills_x16_, other->best_kills_x16_);
  swap(best_assists_x16_, other->best_assists_x16_);
  swap(best_gpm_x16_, other->best_gpm_x16_);
  swap(best_xpm_x16_, other->best_xpm_x16_);
  swap(win_streak_, other->win_streak_);
  swap(best_win_streak_, other->best_win_streak_);
  swap(games_played_, other->games_played_);
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse_PlayerMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignoutResponse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGameMatchSignoutResponse_default_instance_._instance.get_mutable()->match_details_ = const_cast< ::proto::dota::CMsgDOTAMatch*>(
      ::proto::dota::CMsgDOTAMatch::internal_default_instance());
}
class CMsgGameMatchSignoutResponse::HasBitSetters {
 public:
  static void set_has_match_id(CMsgGameMatchSignoutResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_replay_salt(CMsgGameMatchSignoutResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_leagueid(CMsgGameMatchSignoutResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_metadata_private_key(CMsgGameMatchSignoutResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgDOTAMatch& match_details(const CMsgGameMatchSignoutResponse* msg);
  static void set_has_match_details(CMsgGameMatchSignoutResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTAMatch&
CMsgGameMatchSignoutResponse::HasBitSetters::match_details(const CMsgGameMatchSignoutResponse* msg) {
  return *msg->match_details_;
}
void CMsgGameMatchSignoutResponse::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
void CMsgGameMatchSignoutResponse::clear_xp_reward_details() {
  xp_reward_details_.Clear();
}
void CMsgGameMatchSignoutResponse::clear_match_details() {
  if (match_details_ != nullptr) match_details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignoutResponse::kMatchIdFieldNumber;
const int CMsgGameMatchSignoutResponse::kReplaySaltFieldNumber;
const int CMsgGameMatchSignoutResponse::kTimedRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kXpRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kLeagueidFieldNumber;
const int CMsgGameMatchSignoutResponse::kMetadataPrivateKeyFieldNumber;
const int CMsgGameMatchSignoutResponse::kMatchDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kPlayersMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignoutResponse)
}
CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      timed_reward_details_(from.timed_reward_details_),
      xp_reward_details_(from.xp_reward_details_),
      players_metadata_(from.players_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match_details()) {
    match_details_ = new ::proto::dota::CMsgDOTAMatch(*from.match_details_);
  } else {
    match_details_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_private_key_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(metadata_private_key_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignoutResponse)
}

void CMsgGameMatchSignoutResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignoutResponse_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_private_key_) -
      reinterpret_cast<char*>(&match_details_)) + sizeof(metadata_private_key_));
}

CMsgGameMatchSignoutResponse::~CMsgGameMatchSignoutResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignoutResponse)
  SharedDtor();
}

void CMsgGameMatchSignoutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete match_details_;
}

void CMsgGameMatchSignoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignoutResponse& CMsgGameMatchSignoutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignoutResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_reward_details_.Clear();
  xp_reward_details_.Clear();
  players_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(match_details_ != nullptr);
    match_details_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metadata_private_key_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(metadata_private_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignoutResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignoutResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 replay_salt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_replay_salt(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyTimedRewardDetails::_InternalParse;
          object = msg->add_timed_reward_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTALobbyMember::_InternalParse;
          object = msg->add_xp_reward_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional uint32 leagueid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_leagueid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 metadata_private_key = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_metadata_private_key(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional .proto.dota.CMsgDOTAMatch match_details = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAMatch::_InternalParse;
        object = msg->mutable_match_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata::_InternalParse;
          object = msg->add_players_metadata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignoutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 replay_salt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_replay_salt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xp_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_leagueid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 metadata_private_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_metadata_private_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &metadata_private_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch match_details = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignoutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed32 replay_salt = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->replay_salt(), output);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_reward_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->timed_reward_details(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_reward_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->xp_reward_details(static_cast<int>(i)),
      output);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }

  // optional fixed32 metadata_private_key = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->metadata_private_key(), output);
  }

  // optional .proto.dota.CMsgDOTAMatch match_details = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::match_details(this), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->players_metadata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignoutResponse)
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed32 replay_salt = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->replay_salt(), target);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_reward_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->timed_reward_details(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_reward_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->xp_reward_details(static_cast<int>(i)), target);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }

  // optional fixed32 metadata_private_key = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->metadata_private_key(), target);
  }

  // optional .proto.dota.CMsgDOTAMatch match_details = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::match_details(this), target);
  }

  // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->players_metadata(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignoutResponse)
  return target;
}

size_t CMsgGameMatchSignoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->timed_reward_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timed_reward_details(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->xp_reward_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xp_reward_details(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->players_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players_metadata(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.CMsgDOTAMatch match_details = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_details_);
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed32 replay_salt = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 leagueid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional fixed32 metadata_private_key = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignoutResponse)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse::MergeFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  xp_reward_details_.MergeFrom(from.xp_reward_details_);
  players_metadata_.MergeFrom(from.players_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match_details()->::proto::dota::CMsgDOTAMatch::MergeFrom(from.match_details());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00000008u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00000010u) {
      metadata_private_key_ = from.metadata_private_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse::CopyFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse::Swap(CMsgGameMatchSignoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignoutResponse::InternalSwap(CMsgGameMatchSignoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&timed_reward_details_)->InternalSwap(CastToBase(&other->timed_reward_details_));
  CastToBase(&xp_reward_details_)->InternalSwap(CastToBase(&other->xp_reward_details_));
  CastToBase(&players_metadata_)->InternalSwap(CastToBase(&other->players_metadata_));
  swap(match_details_, other->match_details_);
  swap(match_id_, other->match_id_);
  swap(replay_salt_, other->replay_salt_);
  swap(leagueid_, other->leagueid_);
  swap(metadata_private_key_, other->metadata_private_key_);
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgTimedRewardContainer::InitAsDefaultInstance() {
}
class CMsgTimedRewardContainer::HasBitSetters {
 public:
};

void CMsgTimedRewardContainer::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTimedRewardContainer::kTimedRewardDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTimedRewardContainer::CMsgTimedRewardContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTimedRewardContainer)
}
CMsgTimedRewardContainer::CMsgTimedRewardContainer(const CMsgTimedRewardContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      timed_reward_details_(from.timed_reward_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTimedRewardContainer)
}

void CMsgTimedRewardContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgTimedRewardContainer_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgTimedRewardContainer::~CMsgTimedRewardContainer() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTimedRewardContainer)
  SharedDtor();
}

void CMsgTimedRewardContainer::SharedDtor() {
}

void CMsgTimedRewardContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgTimedRewardContainer& CMsgTimedRewardContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgTimedRewardContainer_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgTimedRewardContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTimedRewardContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_reward_details_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgTimedRewardContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgTimedRewardContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyTimedRewardDetails::_InternalParse;
          object = msg->add_timed_reward_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgTimedRewardContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTimedRewardContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTimedRewardContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTimedRewardContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgTimedRewardContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTimedRewardContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_reward_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->timed_reward_details(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTimedRewardContainer)
}

::google::protobuf::uint8* CMsgTimedRewardContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTimedRewardContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timed_reward_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->timed_reward_details(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTimedRewardContainer)
  return target;
}

size_t CMsgTimedRewardContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTimedRewardContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->timed_reward_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timed_reward_details(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTimedRewardContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTimedRewardContainer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgTimedRewardContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTimedRewardContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTimedRewardContainer)
    MergeFrom(*source);
  }
}

void CMsgTimedRewardContainer::MergeFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_reward_details_.MergeFrom(from.timed_reward_details_);
}

void CMsgTimedRewardContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTimedRewardContainer::CopyFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTimedRewardContainer::IsInitialized() const {
  return true;
}

void CMsgTimedRewardContainer::Swap(CMsgTimedRewardContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTimedRewardContainer::InternalSwap(CMsgTimedRewardContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&timed_reward_details_)->InternalSwap(CastToBase(&other->timed_reward_details_));
}

::google::protobuf::Metadata CMsgTimedRewardContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOutPermissionRequest::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOutPermissionRequest::HasBitSetters {
 public:
  static void set_has_server_version(CMsgGameMatchSignOutPermissionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_local_attempt(CMsgGameMatchSignOutPermissionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_total_attempt(CMsgGameMatchSignOutPermissionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seconds_waited(CMsgGameMatchSignOutPermissionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOutPermissionRequest::kServerVersionFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kLocalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kTotalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kSecondsWaitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOutPermissionRequest)
}
CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_version_, &from.server_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_waited_) -
    reinterpret_cast<char*>(&server_version_)) + sizeof(seconds_waited_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOutPermissionRequest)
}

void CMsgGameMatchSignOutPermissionRequest::SharedCtor() {
  ::memset(&server_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_waited_) -
      reinterpret_cast<char*>(&server_version_)) + sizeof(seconds_waited_));
}

CMsgGameMatchSignOutPermissionRequest::~CMsgGameMatchSignOutPermissionRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionRequest::SharedDtor() {
}

void CMsgGameMatchSignOutPermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOutPermissionRequest& CMsgGameMatchSignOutPermissionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOutPermissionRequest_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOutPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&server_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_waited_) -
        reinterpret_cast<char*>(&server_version_)) + sizeof(seconds_waited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOutPermissionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOutPermissionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 local_attempt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_local_attempt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 total_attempt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_total_attempt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_waited = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_seconds_waited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOutPermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_attempt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_local_attempt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_attempt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_total_attempt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_waited = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_seconds_waited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_waited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOutPermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_version(), output);
  }

  // optional uint32 local_attempt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_attempt(), output);
  }

  // optional uint32 total_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_attempt(), output);
  }

  // optional uint32 seconds_waited = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_waited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOutPermissionRequest)
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_version(), target);
  }

  // optional uint32 local_attempt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_attempt(), target);
  }

  // optional uint32 total_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_attempt(), target);
  }

  // optional uint32 seconds_waited = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_waited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  return target;
}

size_t CMsgGameMatchSignOutPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 server_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 local_attempt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_attempt());
    }

    // optional uint32 total_attempt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_attempt());
    }

    // optional uint32 seconds_waited = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_waited());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOutPermissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOutPermissionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOutPermissionRequest)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      local_attempt_ = from.local_attempt_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_attempt_ = from.total_attempt_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_waited_ = from.seconds_waited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionRequest::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionRequest::Swap(CMsgGameMatchSignOutPermissionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOutPermissionRequest::InternalSwap(CMsgGameMatchSignOutPermissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_version_, other->server_version_);
  swap(local_attempt_, other->local_attempt_);
  swap(total_attempt_, other->total_attempt_);
  swap(seconds_waited_, other->seconds_waited_);
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOutPermissionResponse::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOutPermissionResponse::HasBitSetters {
 public:
  static void set_has_permission_granted(CMsgGameMatchSignOutPermissionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_abandon_signout(CMsgGameMatchSignOutPermissionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_retry_delay_seconds(CMsgGameMatchSignOutPermissionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOutPermissionResponse::kPermissionGrantedFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kAbandonSignoutFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kRetryDelaySecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOutPermissionResponse)
}
CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&permission_granted_, &from.permission_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_delay_seconds_) -
    reinterpret_cast<char*>(&permission_granted_)) + sizeof(retry_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOutPermissionResponse)
}

void CMsgGameMatchSignOutPermissionResponse::SharedCtor() {
  ::memset(&permission_granted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_delay_seconds_) -
      reinterpret_cast<char*>(&permission_granted_)) + sizeof(retry_delay_seconds_));
}

CMsgGameMatchSignOutPermissionResponse::~CMsgGameMatchSignOutPermissionResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionResponse::SharedDtor() {
}

void CMsgGameMatchSignOutPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOutPermissionResponse& CMsgGameMatchSignOutPermissionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOutPermissionResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOutPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&permission_granted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retry_delay_seconds_) -
        reinterpret_cast<char*>(&permission_granted_)) + sizeof(retry_delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOutPermissionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOutPermissionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool permission_granted = 1 [default = false];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_permission_granted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool abandon_signout = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_abandon_signout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_retry_delay_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOutPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool permission_granted = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_permission_granted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool abandon_signout = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_abandon_signout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_signout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_retry_delay_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOutPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool permission_granted = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->permission_granted(), output);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->abandon_signout(), output);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retry_delay_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOutPermissionResponse)
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool permission_granted = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->permission_granted(), target);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->abandon_signout(), target);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retry_delay_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  return target;
}

size_t CMsgGameMatchSignOutPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool permission_granted = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool abandon_signout = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 retry_delay_seconds = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry_delay_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOutPermissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOutPermissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOutPermissionResponse)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      permission_granted_ = from.permission_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      abandon_signout_ = from.abandon_signout_;
    }
    if (cached_has_bits & 0x00000004u) {
      retry_delay_seconds_ = from.retry_delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionResponse::Swap(CMsgGameMatchSignOutPermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOutPermissionResponse::InternalSwap(CMsgGameMatchSignOutPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(permission_granted_, other->permission_granted_);
  swap(abandon_signout_, other->abandon_signout_);
  swap(retry_delay_seconds_, other->retry_delay_seconds_);
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameMatchSignOutEventGameData::InitAsDefaultInstance() {
}
class CMsgGameMatchSignOutEventGameData::HasBitSetters {
 public:
  static void set_has_event_id(CMsgGameMatchSignOutEventGameData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_name(CMsgGameMatchSignOutEventGameData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_map_name(CMsgGameMatchSignOutEventGameData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_event_game_data(CMsgGameMatchSignOutEventGameData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start_time(CMsgGameMatchSignOutEventGameData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOutEventGameData::kEventIdFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kGameNameFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kMapNameFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kEventGameDataFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOutEventGameData)
}
CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(const CMsgGameMatchSignOutEventGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  event_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_game_data()) {
    event_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_data_);
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOutEventGameData)
}

void CMsgGameMatchSignOutEventGameData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameMatchSignOutEventGameData_dota_5fgcmessages_5fserver_2eproto.base);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(start_time_));
}

CMsgGameMatchSignOutEventGameData::~CMsgGameMatchSignOutEventGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOutEventGameData)
  SharedDtor();
}

void CMsgGameMatchSignOutEventGameData::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOutEventGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameMatchSignOutEventGameData& CMsgGameMatchSignOutEventGameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameMatchSignOutEventGameData_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameMatchSignOutEventGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      event_game_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameMatchSignOutEventGameData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameMatchSignOutEventGameData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
        object = msg->mutable_game_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string map_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
        object = msg->mutable_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes event_game_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_event_game_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 start_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameMatchSignOutEventGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes event_game_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOutEventGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOutEventGameData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameMatchSignOutEventGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map_name(), output);
  }

  // optional bytes event_game_data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->event_game_data(), output);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOutEventGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOutEventGameData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map_name(), target);
  }

  // optional bytes event_game_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->event_game_data(), target);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOutEventGameData)
  return target;
}

size_t CMsgGameMatchSignOutEventGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string map_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional bytes event_game_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_game_data());
    }

    // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameMatchSignOutEventGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutEventGameData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameMatchSignOutEventGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOutEventGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOutEventGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutEventGameData::MergeFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      event_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutEventGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutEventGameData::Swap(CMsgGameMatchSignOutEventGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOutEventGameData::InternalSwap(CMsgGameMatchSignOutEventGameData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_game_data_.Swap(&other->event_game_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_id_, other->event_id_);
  swap(start_time_, other->start_time_);
}

::google::protobuf::Metadata CMsgGameMatchSignOutEventGameData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InitAsDefaultInstance() {
}
class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::HasBitSetters {
 public:
  static void set_has_ability_id(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ability_level(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::kAbilityIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::kAbilityLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}
CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedCtor() {
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ability_level_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_level_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedDtor() {
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_level_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ability_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ability_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ability_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional uint32 ability_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional uint32 ability_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 ability_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_level_ = from.ability_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ability_id_, other->ability_id_);
  swap(ability_level_, other->ability_level_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALiveScoreboardUpdate_Team_Player::InitAsDefaultInstance() {
}
class CMsgDOTALiveScoreboardUpdate_Team_Player::HasBitSetters {
 public:
  static void set_has_player_slot(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_player_name(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hero_name(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_kills(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_deaths(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_assists(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_last_hits(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_denies(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_gold(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_level(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_gold_per_min(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_xp_per_min(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_ultimate_state(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_ultimate_cooldown(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_item0(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_item1(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_item2(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_item3(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_item4(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_item5(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_respawn_timer(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_account_id(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_position_x(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_position_y(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_net_worth(CMsgDOTALiveScoreboardUpdate_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerSlotFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kKillsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeathsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAssistsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLastHitsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeniesFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLevelFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kXpPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateCooldownFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem0FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem1FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem2FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem3FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem4FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem5FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kRespawnTimerFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAccountIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPositionXFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPositionYFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kNetWorthFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAbilitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
}
CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  ::memcpy(&player_slot_, &from.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&player_slot_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_worth_) -
      reinterpret_cast<char*>(&player_slot_)) + sizeof(net_worth_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player::~CMsgDOTALiveScoreboardUpdate_Team_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALiveScoreboardUpdate_Team_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALiveScoreboardUpdate_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hero_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_hits_) -
        reinterpret_cast<char*>(&player_slot_)) + sizeof(last_hits_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&denies_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item0_) -
        reinterpret_cast<char*>(&denies_)) + sizeof(item0_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&item1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_x_) -
        reinterpret_cast<char*>(&item1_)) + sizeof(position_x_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&position_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&position_y_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALiveScoreboardUpdate_Team_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALiveScoreboardUpdate_Team_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string hero_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
        object = msg->mutable_hero_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_hits = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 denies = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_denies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float gold_per_min = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_gold_per_min(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float xp_per_min = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_xp_per_min(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_ultimate_state(static_cast<::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float ultimate_cooldown = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_ultimate_cooldown(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 item0 = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_item0(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item1 = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_item1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item2 = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_item2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item3 = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_item3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item4 = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_item4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item5 = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_item5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 respawn_timer = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_respawn_timer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float position_x = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_position_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float position_y = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_position_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 net_worth = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_InternalParse;
          object = msg->add_abilities();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 474 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALiveScoreboardUpdate_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), static_cast<int>(this->hero_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gold_per_min = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_gold_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xp_per_min = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_xp_per_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value)) {
            set_ultimate_state(static_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ultimate_cooldown = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {
          HasBitSetters::set_has_ultimate_cooldown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultimate_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item0 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_item0(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item1 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_item1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item2 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_item2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item3 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_item3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item4 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_item4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item5 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_item5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 respawn_timer = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_respawn_timer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respawn_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float position_x = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (197 & 0xFF)) {
          HasBitSetters::set_has_position_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float position_y = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (205 & 0xFF)) {
          HasBitSetters::set_has_position_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALiveScoreboardUpdate_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_slot(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), static_cast<int>(this->hero_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero_name(), output);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }

  // optional uint32 last_hits = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_hits(), output);
  }

  // optional uint32 denies = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->denies(), output);
  }

  // optional uint32 gold = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  // optional float gold_per_min = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gold_per_min(), output);
  }

  // optional float xp_per_min = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->xp_per_min(), output);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ultimate_state(), output);
  }

  // optional float ultimate_cooldown = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ultimate_cooldown(), output);
  }

  // optional uint32 item0 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->item0(), output);
  }

  // optional uint32 item1 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->item1(), output);
  }

  // optional uint32 item2 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->item2(), output);
  }

  // optional uint32 item3 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->item3(), output);
  }

  // optional uint32 item4 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item4(), output);
  }

  // optional uint32 item5 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->item5(), output);
  }

  // optional uint32 respawn_timer = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->respawn_timer(), output);
  }

  // optional uint32 account_id = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->account_id(), output);
  }

  // optional float position_x = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->position_x(), output);
  }

  // optional float position_y = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->position_y(), output);
  }

  // optional uint32 net_worth = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->net_worth(), output);
  }

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27,
      this->abilities(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_slot(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), static_cast<int>(this->hero_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }

  // optional uint32 last_hits = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_hits(), target);
  }

  // optional uint32 denies = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->denies(), target);
  }

  // optional uint32 gold = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gold(), target);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }

  // optional float gold_per_min = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gold_per_min(), target);
  }

  // optional float xp_per_min = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->xp_per_min(), target);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ultimate_state(), target);
  }

  // optional float ultimate_cooldown = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ultimate_cooldown(), target);
  }

  // optional uint32 item0 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->item0(), target);
  }

  // optional uint32 item1 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->item1(), target);
  }

  // optional uint32 item2 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->item2(), target);
  }

  // optional uint32 item3 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->item3(), target);
  }

  // optional uint32 item4 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item4(), target);
  }

  // optional uint32 item5 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->item5(), target);
  }

  // optional uint32 respawn_timer = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->respawn_timer(), target);
  }

  // optional uint32 account_id = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->account_id(), target);
  }

  // optional float position_x = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->position_x(), target);
  }

  // optional float position_y = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->position_y(), target);
  }

  // optional uint32 net_worth = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->net_worth(), target);
  }

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->abilities(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string hero_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 kills = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 denies = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float gold_per_min = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float xp_per_min = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ultimate_state());
    }

    // optional float ultimate_cooldown = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 item0 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item0());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 item1 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item1());
    }

    // optional uint32 item2 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item2());
    }

    // optional uint32 item3 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item3());
    }

    // optional uint32 item4 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item4());
    }

    // optional uint32 item5 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item5());
    }

    // optional uint32 respawn_timer = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respawn_timer());
    }

    // optional uint32 account_id = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float position_x = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional float position_y = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 net_worth = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_hits_ = from.last_hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000200u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00001000u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x00002000u) {
      ultimate_state_ = from.ultimate_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      ultimate_cooldown_ = from.ultimate_cooldown_;
    }
    if (cached_has_bits & 0x00008000u) {
      item0_ = from.item0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      item1_ = from.item1_;
    }
    if (cached_has_bits & 0x00020000u) {
      item2_ = from.item2_;
    }
    if (cached_has_bits & 0x00040000u) {
      item3_ = from.item3_;
    }
    if (cached_has_bits & 0x00080000u) {
      item4_ = from.item4_;
    }
    if (cached_has_bits & 0x00100000u) {
      item5_ = from.item5_;
    }
    if (cached_has_bits & 0x00200000u) {
      respawn_timer_ = from.respawn_timer_;
    }
    if (cached_has_bits & 0x00400000u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      position_x_ = from.position_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x02000000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_name_.Swap(&other->hero_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_slot_, other->player_slot_);
  swap(hero_id_, other->hero_id_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
  swap(gold_, other->gold_);
  swap(level_, other->level_);
  swap(gold_per_min_, other->gold_per_min_);
  swap(xp_per_min_, other->xp_per_min_);
  swap(ultimate_state_, other->ultimate_state_);
  swap(ultimate_cooldown_, other->ultimate_cooldown_);
  swap(item0_, other->item0_);
  swap(item1_, other->item1_);
  swap(item2_, other->item2_);
  swap(item3_, other->item3_);
  swap(item4_, other->item4_);
  swap(item5_, other->item5_);
  swap(respawn_timer_, other->respawn_timer_);
  swap(account_id_, other->account_id_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  swap(net_worth_, other->net_worth_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALiveScoreboardUpdate_Team::InitAsDefaultInstance() {
}
class CMsgDOTALiveScoreboardUpdate_Team::HasBitSetters {
 public:
  static void set_has_score(CMsgDOTALiveScoreboardUpdate_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tower_state(CMsgDOTALiveScoreboardUpdate_Team* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_barracks_state(CMsgDOTALiveScoreboardUpdate_Team* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate_Team::kPlayersFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kScoreFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kTowerStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kBarracksStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kHeroPicksFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kHeroBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
}
CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      hero_picks_(from.hero_picks_),
      hero_bans_(from.hero_bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&barracks_state_) -
    reinterpret_cast<char*>(&score_)) + sizeof(barracks_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barracks_state_) -
      reinterpret_cast<char*>(&score_)) + sizeof(barracks_state_));
}

CMsgDOTALiveScoreboardUpdate_Team::~CMsgDOTALiveScoreboardUpdate_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedDtor() {
}

void CMsgDOTALiveScoreboardUpdate_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALiveScoreboardUpdate_Team_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALiveScoreboardUpdate_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  hero_picks_.Clear();
  hero_bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&barracks_state_) -
        reinterpret_cast<char*>(&score_)) + sizeof(barracks_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALiveScoreboardUpdate_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALiveScoreboardUpdate_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tower_state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tower_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 barracks_state = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_barracks_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 hero_picks = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_hero_picks(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_hero_picks();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 hero_bans = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_hero_bans(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_hero_bans();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALiveScoreboardUpdate_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tower_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 barracks_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_barracks_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barracks_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hero_picks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_hero_picks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_picks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hero_bans = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_hero_bans())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_bans())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALiveScoreboardUpdate_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 tower_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tower_state(), output);
  }

  // optional uint32 barracks_state = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->barracks_state(), output);
  }

  // repeated uint32 hero_picks = 5;
  for (int i = 0, n = this->hero_picks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hero_picks(i), output);
  }

  // repeated uint32 hero_bans = 6;
  for (int i = 0, n = this->hero_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->hero_bans(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 tower_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tower_state(), target);
  }

  // optional uint32 barracks_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->barracks_state(), target);
  }

  // repeated uint32 hero_picks = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->hero_picks_, target);

  // repeated uint32 hero_bans = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->hero_bans_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated uint32 hero_picks = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hero_picks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hero_picks_size());
    total_size += data_size;
  }

  // repeated uint32 hero_bans = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hero_bans_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hero_bans_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 tower_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_state());
    }

    // optional uint32 barracks_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barracks_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  hero_picks_.MergeFrom(from.hero_picks_);
  hero_bans_.MergeFrom(from.hero_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      tower_state_ = from.tower_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      barracks_state_ = from.barracks_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team::Swap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate_Team::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  hero_picks_.InternalSwap(&other->hero_picks_);
  hero_bans_.InternalSwap(&other->hero_bans_);
  swap(score_, other->score_);
  swap(tower_state_, other->tower_state_);
  swap(barracks_state_, other->barracks_state_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALiveScoreboardUpdate::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTALiveScoreboardUpdate_default_instance_._instance.get_mutable()->team_good_ = const_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team*>(
      ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::internal_default_instance());
  ::proto::dota::_CMsgDOTALiveScoreboardUpdate_default_instance_._instance.get_mutable()->team_bad_ = const_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team*>(
      ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::internal_default_instance());
}
class CMsgDOTALiveScoreboardUpdate::HasBitSetters {
 public:
  static void set_has_tournament_id(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_tournament_game_id(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_duration(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_hltv_delay(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team& team_good(const CMsgDOTALiveScoreboardUpdate* msg);
  static void set_has_team_good(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team& team_bad(const CMsgDOTALiveScoreboardUpdate* msg);
  static void set_has_team_bad(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roshan_respawn_timer(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_league_id(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_match_id(CMsgDOTALiveScoreboardUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team&
CMsgDOTALiveScoreboardUpdate::HasBitSetters::team_good(const CMsgDOTALiveScoreboardUpdate* msg) {
  return *msg->team_good_;
}
const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team&
CMsgDOTALiveScoreboardUpdate::HasBitSetters::team_bad(const CMsgDOTALiveScoreboardUpdate* msg) {
  return *msg->team_bad_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate::kTournamentIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTournamentGameIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kDurationFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kHltvDelayFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamGoodFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamBadFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kRoshanRespawnTimerFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kLeagueIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate)
}
CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_good()) {
    team_good_ = new ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team(*from.team_good_);
  } else {
    team_good_ = nullptr;
  }
  if (from.has_team_bad()) {
    team_bad_ = new ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team(*from.team_bad_);
  } else {
    team_bad_ = nullptr;
  }
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate)
}

void CMsgDOTALiveScoreboardUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALiveScoreboardUpdate_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&team_good_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&team_good_)) + sizeof(match_id_));
}

CMsgDOTALiveScoreboardUpdate::~CMsgDOTALiveScoreboardUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete team_good_;
  if (this != internal_default_instance()) delete team_bad_;
}

void CMsgDOTALiveScoreboardUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALiveScoreboardUpdate& CMsgDOTALiveScoreboardUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALiveScoreboardUpdate_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALiveScoreboardUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_good_ != nullptr);
      team_good_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_bad_ != nullptr);
      team_bad_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(league_id_));
  }
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALiveScoreboardUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALiveScoreboardUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_tournament_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float duration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 hltv_delay = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hltv_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::_InternalParse;
        object = msg->mutable_team_good();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::_InternalParse;
        object = msg->mutable_team_bad();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 roshan_respawn_timer = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_roshan_respawn_timer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALiveScoreboardUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_tournament_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hltv_delay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_hltv_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hltv_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_good()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_bad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roshan_respawn_timer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_roshan_respawn_timer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_respawn_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALiveScoreboardUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_game_id(), output);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // optional int32 hltv_delay = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hltv_delay(), output);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::team_good(this), output);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::team_bad(this), output);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->roshan_respawn_timer(), output);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_game_id(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  // optional int32 hltv_delay = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hltv_delay(), target);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::team_good(this), target);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::team_bad(this), target);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->roshan_respawn_timer(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_good_);
    }

    // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_bad_);
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 hltv_delay = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hltv_delay());
    }

    // optional uint32 roshan_respawn_timer = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_respawn_timer());
    }

    // optional uint32 league_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALiveScoreboardUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_good()->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_good());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_team_bad()->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_bad());
    }
    if (cached_has_bits & 0x00000004u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      hltv_delay_ = from.hltv_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      roshan_respawn_timer_ = from.roshan_respawn_timer_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_match_id(from.match_id());
  }
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate::Swap(CMsgDOTALiveScoreboardUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate::InternalSwap(CMsgDOTALiveScoreboardUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_good_, other->team_good_);
  swap(team_bad_, other->team_bad_);
  swap(tournament_id_, other->tournament_id_);
  swap(tournament_game_id_, other->tournament_game_id_);
  swap(duration_, other->duration_);
  swap(hltv_delay_, other->hltv_delay_);
  swap(roshan_respawn_timer_, other->roshan_respawn_timer_);
  swap(league_id_, other->league_id_);
  swap(match_id_, other->match_id_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestPlayerResources::InitAsDefaultInstance() {
}
class CMsgDOTARequestPlayerResources::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgDOTARequestPlayerResources* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_player_id(CMsgDOTARequestPlayerResources* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestPlayerResources::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResources::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestPlayerResources)
}
CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources(const CMsgDOTARequestPlayerResources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestPlayerResources)
}

void CMsgDOTARequestPlayerResources::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(player_id_));
}

CMsgDOTARequestPlayerResources::~CMsgDOTARequestPlayerResources() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestPlayerResources)
  SharedDtor();
}

void CMsgDOTARequestPlayerResources::SharedDtor() {
}

void CMsgDOTARequestPlayerResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestPlayerResources& CMsgDOTARequestPlayerResources::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestPlayerResources_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestPlayerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestPlayerResources::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestPlayerResources*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 player_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestPlayerResources)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestPlayerResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestPlayerResources)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestPlayerResources)
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResources::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestPlayerResources)
  return target;
}

size_t CMsgDOTARequestPlayerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestPlayerResources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResources* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestPlayerResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestPlayerResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestPlayerResources)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResources::MergeFrom(const CMsgDOTARequestPlayerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResources::CopyFrom(const CMsgDOTARequestPlayerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResources::IsInitialized() const {
  return true;
}

void CMsgDOTARequestPlayerResources::Swap(CMsgDOTARequestPlayerResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestPlayerResources::InternalSwap(CMsgDOTARequestPlayerResources* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(player_id_, other->player_id_);
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResources::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestPlayerResourcesResponse::InitAsDefaultInstance() {
}
class CMsgDOTARequestPlayerResourcesResponse::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgDOTARequestPlayerResourcesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rank(CMsgDOTARequestPlayerResourcesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_id(CMsgDOTARequestPlayerResourcesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_prevent_text_chat(CMsgDOTARequestPlayerResourcesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_prevent_voice_chat(CMsgDOTARequestPlayerResourcesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_low_priority(CMsgDOTARequestPlayerResourcesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestPlayerResourcesResponse::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kRankFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPlayerIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventTextChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
}
CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse(const CMsgDOTARequestPlayerResourcesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
}

void CMsgDOTARequestPlayerResourcesResponse::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(low_priority_));
}

CMsgDOTARequestPlayerResourcesResponse::~CMsgDOTARequestPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  SharedDtor();
}

void CMsgDOTARequestPlayerResourcesResponse::SharedDtor() {
}

void CMsgDOTARequestPlayerResourcesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestPlayerResourcesResponse& CMsgDOTARequestPlayerResourcesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestPlayerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestPlayerResourcesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestPlayerResourcesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 rank = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool prevent_text_chat = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_prevent_text_chat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool prevent_voice_chat = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_prevent_voice_chat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool low_priority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_low_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_text_chat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_prevent_text_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_voice_chat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_prevent_voice_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_low_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }

  // optional bool prevent_text_chat = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prevent_text_chat(), output);
  }

  // optional bool prevent_voice_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prevent_voice_chat(), output);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResourcesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_id(), target);
  }

  // optional bool prevent_text_chat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prevent_voice_chat(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  return target;
}

size_t CMsgDOTARequestPlayerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 rank = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bool prevent_text_chat = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResourcesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestPlayerResourcesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevent_text_chat_ = from.prevent_text_chat_;
    }
    if (cached_has_bits & 0x00000010u) {
      prevent_voice_chat_ = from.prevent_voice_chat_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResourcesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestPlayerResourcesResponse::Swap(CMsgDOTARequestPlayerResourcesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestPlayerResourcesResponse::InternalSwap(CMsgDOTARequestPlayerResourcesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(rank_, other->rank_);
  swap(player_id_, other->player_id_);
  swap(prevent_text_chat_, other->prevent_text_chat_);
  swap(prevent_voice_chat_, other->prevent_voice_chat_);
  swap(low_priority_, other->low_priority_);
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResourcesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestBatchPlayerResources::InitAsDefaultInstance() {
}
class CMsgDOTARequestBatchPlayerResources::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestBatchPlayerResources::kAccountIdsFieldNumber;
const int CMsgDOTARequestBatchPlayerResources::kRankTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestBatchPlayerResources)
}
CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources(const CMsgDOTARequestBatchPlayerResources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      rank_types_(from.rank_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestBatchPlayerResources)
}

void CMsgDOTARequestBatchPlayerResources::SharedCtor() {
}

CMsgDOTARequestBatchPlayerResources::~CMsgDOTARequestBatchPlayerResources() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestBatchPlayerResources)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResources::SharedDtor() {
}

void CMsgDOTARequestBatchPlayerResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestBatchPlayerResources& CMsgDOTARequestBatchPlayerResources::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestBatchPlayerResources_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestBatchPlayerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  rank_types_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestBatchPlayerResources::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestBatchPlayerResources*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_account_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated uint32 rank_types = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_rank_types();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_rank_types(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestBatchPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rank_types = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rank_types())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_rank_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestBatchPlayerResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestBatchPlayerResources)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestBatchPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_account_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->account_ids(i), output);
  }

  // repeated uint32 rank_types = 4 [packed = true];
  if (this->rank_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rank_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->rank_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rank_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestBatchPlayerResources)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResources::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _account_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->account_ids_, target);
  }

  // repeated uint32 rank_types = 4 [packed = true];
  if (this->rank_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _rank_types_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->rank_types_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestBatchPlayerResources)
  return target;
}

size_t CMsgDOTARequestBatchPlayerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _account_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rank_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _rank_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResources* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestBatchPlayerResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestBatchPlayerResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestBatchPlayerResources)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const CMsgDOTARequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  rank_types_.MergeFrom(from.rank_types_);
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const CMsgDOTARequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResources::IsInitialized() const {
  return true;
}

void CMsgDOTARequestBatchPlayerResources::Swap(CMsgDOTARequestBatchPlayerResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestBatchPlayerResources::InternalSwap(CMsgDOTARequestBatchPlayerResources* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  rank_types_.InternalSwap(&other->rank_types_);
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResources::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::InitAsDefaultInstance() {
}
class CMsgDOTARequestBatchPlayerResourcesResponse_Result::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTARequestBatchPlayerResourcesResponse_Result* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_prevent_text_chat(CMsgDOTARequestBatchPlayerResourcesResponse_Result* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_prevent_voice_chat(CMsgDOTARequestBatchPlayerResourcesResponse_Result* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rank(CMsgDOTARequestBatchPlayerResourcesResponse_Result* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_rank_calibrated(CMsgDOTARequestBatchPlayerResourcesResponse_Result* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_low_priority(CMsgDOTARequestBatchPlayerResourcesResponse_Result* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kAccountIdFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventTextChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankCalibratedFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}
CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(low_priority_));
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result::~CMsgDOTARequestBatchPlayerResourcesResponse_Result() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedDtor() {
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestBatchPlayerResourcesResponse_Result& CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_Result_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestBatchPlayerResourcesResponse_Result::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestBatchPlayerResourcesResponse_Result*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool prevent_text_chat = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_prevent_text_chat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool prevent_voice_chat = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_prevent_voice_chat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool rank_calibrated = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rank_calibrated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool low_priority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_low_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_text_chat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_prevent_text_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_voice_chat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_prevent_voice_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rank_calibrated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_rank_calibrated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_calibrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_low_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool prevent_text_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prevent_text_chat(), output);
  }

  // optional bool prevent_voice_chat = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prevent_voice_chat(), output);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // optional bool rank_calibrated = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rank_calibrated(), output);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse_Result::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool prevent_text_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prevent_voice_chat(), target);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  // optional bool rank_calibrated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rank_calibrated(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return target;
}

size_t CMsgDOTARequestBatchPlayerResourcesResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rank = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional bool prevent_text_chat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rank_calibrated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse_Result* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestBatchPlayerResourcesResponse_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      prevent_text_chat_ = from.prevent_text_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevent_voice_chat_ = from.prevent_voice_chat_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_calibrated_ = from.rank_calibrated_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::IsInitialized() const {
  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Swap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::InternalSwap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(rank_, other->rank_);
  swap(prevent_text_chat_, other->prevent_text_chat_);
  swap(prevent_voice_chat_, other->prevent_voice_chat_);
  swap(rank_calibrated_, other->rank_calibrated_);
  swap(low_priority_, other->low_priority_);
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse_Result::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestBatchPlayerResourcesResponse::InitAsDefaultInstance() {
}
class CMsgDOTARequestBatchPlayerResourcesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestBatchPlayerResourcesResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
}
CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse(const CMsgDOTARequestBatchPlayerResourcesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgDOTARequestBatchPlayerResourcesResponse::~CMsgDOTARequestBatchPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedDtor() {
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestBatchPlayerResourcesResponse& CMsgDOTARequestBatchPlayerResourcesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestBatchPlayerResourcesResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestBatchPlayerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestBatchPlayerResourcesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestBatchPlayerResourcesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result::_InternalParse;
          object = msg->add_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestBatchPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestBatchPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  return target;
}

size_t CMsgDOTARequestBatchPlayerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestBatchPlayerResourcesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Swap(CMsgDOTARequestBatchPlayerResourcesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestBatchPlayerResourcesResponse::InternalSwap(CMsgDOTARequestBatchPlayerResourcesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPlayerFailedToConnect::InitAsDefaultInstance() {
}
class CMsgDOTAPlayerFailedToConnect::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPlayerFailedToConnect::kFailedLoadersFieldNumber;
const int CMsgDOTAPlayerFailedToConnect::kAbandonedLoadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPlayerFailedToConnect)
}
CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      failed_loaders_(from.failed_loaders_),
      abandoned_loaders_(from.abandoned_loaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPlayerFailedToConnect)
}

void CMsgDOTAPlayerFailedToConnect::SharedCtor() {
}

CMsgDOTAPlayerFailedToConnect::~CMsgDOTAPlayerFailedToConnect() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPlayerFailedToConnect)
  SharedDtor();
}

void CMsgDOTAPlayerFailedToConnect::SharedDtor() {
}

void CMsgDOTAPlayerFailedToConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPlayerFailedToConnect& CMsgDOTAPlayerFailedToConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPlayerFailedToConnect_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPlayerFailedToConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failed_loaders_.Clear();
  abandoned_loaders_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPlayerFailedToConnect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPlayerFailedToConnect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 failed_loaders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_failed_loaders(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_failed_loaders();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 abandoned_loaders = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_abandoned_loaders(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_abandoned_loaders();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPlayerFailedToConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 failed_loaders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_failed_loaders())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_loaders())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 abandoned_loaders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_abandoned_loaders())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_abandoned_loaders())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPlayerFailedToConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPlayerFailedToConnect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPlayerFailedToConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  for (int i = 0, n = this->failed_loaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->failed_loaders(i), output);
  }

  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0, n = this->abandoned_loaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->abandoned_loaders(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPlayerFailedToConnect)
}

::google::protobuf::uint8* CMsgDOTAPlayerFailedToConnect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->failed_loaders_, target);

  // repeated fixed64 abandoned_loaders = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->abandoned_loaders_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPlayerFailedToConnect)
  return target;
}

size_t CMsgDOTAPlayerFailedToConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->failed_loaders_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->failed_loaders_size());
    total_size += data_size;
  }

  // repeated fixed64 abandoned_loaders = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->abandoned_loaders_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->abandoned_loaders_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerFailedToConnect* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPlayerFailedToConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPlayerFailedToConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPlayerFailedToConnect)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failed_loaders_.MergeFrom(from.failed_loaders_);
  abandoned_loaders_.MergeFrom(from.abandoned_loaders_);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerFailedToConnect::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerFailedToConnect::Swap(CMsgDOTAPlayerFailedToConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPlayerFailedToConnect::InternalSwap(CMsgDOTAPlayerFailedToConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  failed_loaders_.InternalSwap(&other->failed_loaders_);
  abandoned_loaders_.InternalSwap(&other->abandoned_loaders_);
}

::google::protobuf::Metadata CMsgDOTAPlayerFailedToConnect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToRelayConnect::InitAsDefaultInstance() {
}
class CMsgGCToRelayConnect::HasBitSetters {
 public:
  static void set_has_source_tv_public_addr(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_source_tv_private_addr(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_source_tv_port(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_server_steam_id(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_parent_count(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_tv_unique_secret_code(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_source_tv_steamid(CMsgGCToRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToRelayConnect::kSourceTvPublicAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPrivateAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPortFieldNumber;
const int CMsgGCToRelayConnect::kGameServerSteamIdFieldNumber;
const int CMsgGCToRelayConnect::kParentCountFieldNumber;
const int CMsgGCToRelayConnect::kTvUniqueSecretCodeFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToRelayConnect::CMsgGCToRelayConnect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToRelayConnect)
}
CMsgGCToRelayConnect::CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_tv_public_addr_, &from.source_tv_public_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_tv_steamid_) -
    reinterpret_cast<char*>(&source_tv_public_addr_)) + sizeof(source_tv_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToRelayConnect)
}

void CMsgGCToRelayConnect::SharedCtor() {
  ::memset(&source_tv_public_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_tv_steamid_) -
      reinterpret_cast<char*>(&source_tv_public_addr_)) + sizeof(source_tv_steamid_));
}

CMsgGCToRelayConnect::~CMsgGCToRelayConnect() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToRelayConnect)
  SharedDtor();
}

void CMsgGCToRelayConnect::SharedDtor() {
}

void CMsgGCToRelayConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToRelayConnect& CMsgGCToRelayConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToRelayConnect_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&source_tv_public_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_tv_steamid_) -
        reinterpret_cast<char*>(&source_tv_public_addr_)) + sizeof(source_tv_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToRelayConnect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToRelayConnect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 source_tv_public_addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_source_tv_public_addr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_tv_private_addr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_source_tv_private_addr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_tv_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_source_tv_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 game_server_steam_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_server_steam_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 parent_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_parent_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 tv_unique_secret_code = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_tv_unique_secret_code(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 source_tv_steamid = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_source_tv_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToRelayConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_tv_public_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_source_tv_public_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_private_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_source_tv_private_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_source_tv_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 game_server_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_parent_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 tv_unique_secret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_tv_unique_secret_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_unique_secret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 source_tv_steamid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_source_tv_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_tv_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToRelayConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToRelayConnect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_tv_public_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_tv_public_addr(), output);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_private_addr(), output);
  }

  // optional uint32 source_tv_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_port(), output);
  }

  // optional uint64 game_server_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_server_steam_id(), output);
  }

  // optional uint32 parent_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parent_count(), output);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->tv_unique_secret_code(), output);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->source_tv_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToRelayConnect)
}

::google::protobuf::uint8* CMsgGCToRelayConnect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_tv_public_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_port(), target);
  }

  // optional uint64 game_server_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_server_steam_id(), target);
  }

  // optional uint32 parent_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parent_count(), target);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->tv_unique_secret_code(), target);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->source_tv_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToRelayConnect)
  return target;
}

size_t CMsgGCToRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToRelayConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 source_tv_public_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }

    // optional uint64 game_server_steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_server_steam_id());
    }

    // optional uint32 source_tv_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }

    // optional uint32 parent_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_count());
    }

    // optional fixed64 tv_unique_secret_code = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 source_tv_steamid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToRelayConnect* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToRelayConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToRelayConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToRelayConnect)
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnect::MergeFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      source_tv_public_addr_ = from.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_tv_private_addr_ = from.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_tv_port_ = from.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_count_ = from.parent_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_unique_secret_code_ = from.tv_unique_secret_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_tv_steamid_ = from.source_tv_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnect::CopyFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnect::Swap(CMsgGCToRelayConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToRelayConnect::InternalSwap(CMsgGCToRelayConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_tv_public_addr_, other->source_tv_public_addr_);
  swap(source_tv_private_addr_, other->source_tv_private_addr_);
  swap(game_server_steam_id_, other->game_server_steam_id_);
  swap(source_tv_port_, other->source_tv_port_);
  swap(parent_count_, other->parent_count_);
  swap(tv_unique_secret_code_, other->tv_unique_secret_code_);
  swap(source_tv_steamid_, other->source_tv_steamid_);
}

::google::protobuf::Metadata CMsgGCToRelayConnect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCGCToLANServerRelayConnect::InitAsDefaultInstance() {
}
class CMsgGCGCToLANServerRelayConnect::HasBitSetters {
 public:
  static void set_has_relay_steamid(CMsgGCGCToLANServerRelayConnect* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGCToLANServerRelayConnect::kRelaySteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGCToLANServerRelayConnect)
}
CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(const CMsgGCGCToLANServerRelayConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relay_steamid_ = from.relay_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGCToLANServerRelayConnect)
}

void CMsgGCGCToLANServerRelayConnect::SharedCtor() {
  relay_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCGCToLANServerRelayConnect::~CMsgGCGCToLANServerRelayConnect() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGCToLANServerRelayConnect)
  SharedDtor();
}

void CMsgGCGCToLANServerRelayConnect::SharedDtor() {
}

void CMsgGCGCToLANServerRelayConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCGCToLANServerRelayConnect& CMsgGCGCToLANServerRelayConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCGCToLANServerRelayConnect_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCGCToLANServerRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCGCToLANServerRelayConnect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCGCToLANServerRelayConnect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 relay_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_relay_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCGCToLANServerRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 relay_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_relay_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relay_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGCToLANServerRelayConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGCToLANServerRelayConnect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCGCToLANServerRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 relay_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->relay_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGCToLANServerRelayConnect)
}

::google::protobuf::uint8* CMsgGCGCToLANServerRelayConnect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 relay_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->relay_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGCToLANServerRelayConnect)
  return target;
}

size_t CMsgGCGCToLANServerRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 relay_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGCToLANServerRelayConnect* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCGCToLANServerRelayConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGCToLANServerRelayConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGCToLANServerRelayConnect)
    MergeFrom(*source);
  }
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relay_steamid()) {
    set_relay_steamid(from.relay_steamid());
  }
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGCToLANServerRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCGCToLANServerRelayConnect::Swap(CMsgGCGCToLANServerRelayConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGCToLANServerRelayConnect::InternalSwap(CMsgGCGCToLANServerRelayConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relay_steamid_, other->relay_steamid_);
}

::google::protobuf::Metadata CMsgGCGCToLANServerRelayConnect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToRelayConnectResponse::InitAsDefaultInstance() {
}
class CMsgGCToRelayConnectResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToRelayConnectResponse)
}
CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToRelayConnectResponse)
}

void CMsgGCToRelayConnectResponse::SharedCtor() {
}

CMsgGCToRelayConnectResponse::~CMsgGCToRelayConnectResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToRelayConnectResponse)
  SharedDtor();
}

void CMsgGCToRelayConnectResponse::SharedDtor() {
}

void CMsgGCToRelayConnectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToRelayConnectResponse& CMsgGCToRelayConnectResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToRelayConnectResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToRelayConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToRelayConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToRelayConnectResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToRelayConnectResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToRelayConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToRelayConnectResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToRelayConnectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToRelayConnectResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToRelayConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToRelayConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToRelayConnectResponse)
}

::google::protobuf::uint8* CMsgGCToRelayConnectResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToRelayConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToRelayConnectResponse)
  return target;
}

size_t CMsgGCToRelayConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToRelayConnectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToRelayConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToRelayConnectResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToRelayConnectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToRelayConnectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToRelayConnectResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnectResponse::MergeFrom(const CMsgGCToRelayConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToRelayConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnectResponse::CopyFrom(const CMsgGCToRelayConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnectResponse::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnectResponse::Swap(CMsgGCToRelayConnectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToRelayConnectResponse::InternalSwap(CMsgGCToRelayConnectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCToRelayConnectResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCBanStatusRequest::InitAsDefaultInstance() {
}
class CMsgGCBanStatusRequest::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGCBanStatusRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBanStatusRequest::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBanStatusRequest)
}
CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBanStatusRequest)
}

void CMsgGCBanStatusRequest::SharedCtor() {
  account_id_ = 0u;
}

CMsgGCBanStatusRequest::~CMsgGCBanStatusRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBanStatusRequest)
  SharedDtor();
}

void CMsgGCBanStatusRequest::SharedDtor() {
}

void CMsgGCBanStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCBanStatusRequest& CMsgGCBanStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCBanStatusRequest_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCBanStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBanStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCBanStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCBanStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCBanStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBanStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBanStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBanStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCBanStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBanStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBanStatusRequest)
}

::google::protobuf::uint8* CMsgGCBanStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBanStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBanStatusRequest)
  return target;
}

size_t CMsgGCBanStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBanStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCBanStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBanStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCBanStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBanStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBanStatusRequest)
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusRequest::MergeFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGCBanStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusRequest::CopyFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusRequest::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusRequest::Swap(CMsgGCBanStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBanStatusRequest::InternalSwap(CMsgGCBanStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgGCBanStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCBanStatusResponse::InitAsDefaultInstance() {
}
class CMsgGCBanStatusResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgGCBanStatusResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_low_priority(CMsgGCBanStatusResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text_chat_banned(CMsgGCBanStatusResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_voice_chat_banned(CMsgGCBanStatusResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBanStatusResponse::kResultFieldNumber;
const int CMsgGCBanStatusResponse::kLowPriorityFieldNumber;
const int CMsgGCBanStatusResponse::kTextChatBannedFieldNumber;
const int CMsgGCBanStatusResponse::kVoiceChatBannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBanStatusResponse)
}
CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_chat_banned_) -
    reinterpret_cast<char*>(&result_)) + sizeof(voice_chat_banned_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBanStatusResponse)
}

void CMsgGCBanStatusResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_chat_banned_) -
      reinterpret_cast<char*>(&result_)) + sizeof(voice_chat_banned_));
}

CMsgGCBanStatusResponse::~CMsgGCBanStatusResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBanStatusResponse)
  SharedDtor();
}

void CMsgGCBanStatusResponse::SharedDtor() {
}

void CMsgGCBanStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCBanStatusResponse& CMsgGCBanStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCBanStatusResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCBanStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBanStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voice_chat_banned_) -
        reinterpret_cast<char*>(&result_)) + sizeof(voice_chat_banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCBanStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCBanStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool low_priority = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_low_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool text_chat_banned = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_text_chat_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool voice_chat_banned = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_voice_chat_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCBanStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBanStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_low_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool text_chat_banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_text_chat_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &text_chat_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_chat_banned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_voice_chat_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_chat_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBanStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBanStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCBanStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBanStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional bool low_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->low_priority(), output);
  }

  // optional bool text_chat_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->text_chat_banned(), output);
  }

  // optional bool voice_chat_banned = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->voice_chat_banned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBanStatusResponse)
}

::google::protobuf::uint8* CMsgGCBanStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBanStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional bool low_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->low_priority(), target);
  }

  // optional bool text_chat_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->text_chat_banned(), target);
  }

  // optional bool voice_chat_banned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->voice_chat_banned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBanStatusResponse)
  return target;
}

size_t CMsgGCBanStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBanStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bool low_priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool text_chat_banned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool voice_chat_banned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCBanStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBanStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCBanStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBanStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBanStatusResponse)
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusResponse::MergeFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_priority_ = from.low_priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      text_chat_banned_ = from.text_chat_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      voice_chat_banned_ = from.voice_chat_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCBanStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusResponse::CopyFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusResponse::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusResponse::Swap(CMsgGCBanStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBanStatusResponse::InternalSwap(CMsgGCBanStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(low_priority_, other->low_priority_);
  swap(text_chat_banned_, other->text_chat_banned_);
  swap(voice_chat_banned_, other->voice_chat_banned_);
}

::google::protobuf::Metadata CMsgGCBanStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgTournamentItemEvent::InitAsDefaultInstance() {
}
class CMsgTournamentItemEvent::HasBitSetters {
 public:
  static void set_has_killer_account_id(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_victim_account_id(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_event_type(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tv_delay(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_dota_time(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_replay_time(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_loot_list(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event_team(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_multi_kill_count(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_winner_score(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_loser_score(CMsgTournamentItemEvent* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

void CMsgTournamentItemEvent::clear_hero_statues() {
  hero_statues_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTournamentItemEvent::kKillerAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kVictimAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kEventTypeFieldNumber;
const int CMsgTournamentItemEvent::kTvDelayFieldNumber;
const int CMsgTournamentItemEvent::kDotaTimeFieldNumber;
const int CMsgTournamentItemEvent::kReplayTimeFieldNumber;
const int CMsgTournamentItemEvent::kLootListFieldNumber;
const int CMsgTournamentItemEvent::kEventTeamFieldNumber;
const int CMsgTournamentItemEvent::kMultiKillCountFieldNumber;
const int CMsgTournamentItemEvent::kWinnerScoreFieldNumber;
const int CMsgTournamentItemEvent::kLoserScoreFieldNumber;
const int CMsgTournamentItemEvent::kHeroStatuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTournamentItemEvent::CMsgTournamentItemEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTournamentItemEvent)
}
CMsgTournamentItemEvent::CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hero_statues_(from.hero_statues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loot_list()) {
    loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
  }
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&loser_score_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(loser_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTournamentItemEvent)
}

void CMsgTournamentItemEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgTournamentItemEvent_dota_5fgcmessages_5fserver_2eproto.base);
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&killer_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loser_score_) -
      reinterpret_cast<char*>(&killer_account_id_)) + sizeof(loser_score_));
}

CMsgTournamentItemEvent::~CMsgTournamentItemEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTournamentItemEvent)
  SharedDtor();
}

void CMsgTournamentItemEvent::SharedDtor() {
  loot_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTournamentItemEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgTournamentItemEvent& CMsgTournamentItemEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgTournamentItemEvent_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgTournamentItemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTournamentItemEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_statues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    loot_list_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_team_) -
        reinterpret_cast<char*>(&killer_account_id_)) + sizeof(event_team_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&multi_kill_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loser_score_) -
        reinterpret_cast<char*>(&multi_kill_count_)) + sizeof(loser_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgTournamentItemEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgTournamentItemEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 killer_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_killer_account_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 victim_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_victim_account_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_TournamentEvents_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_type(static_cast<::proto::dota::DOTA_TournamentEvents>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 tv_delay = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_tv_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dota_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dota_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float replay_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_replay_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string loot_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgTournamentItemEvent.loot_list");
        object = msg->mutable_loot_list();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 event_team = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_event_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 multi_kill_count = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_multi_kill_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winner_score = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_winner_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 loser_score = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_loser_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CProtoItemHeroStatue::_InternalParse;
          object = msg->add_hero_statues();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgTournamentItemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTournamentItemEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 killer_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_killer_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &killer_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 victim_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_victim_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &victim_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< ::proto::dota::DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tv_delay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_tv_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_dota_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float replay_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_replay_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replay_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loot_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loot_list().data(), static_cast<int>(this->loot_list().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgTournamentItemEvent.loot_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_team = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_event_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 multi_kill_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_multi_kill_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winner_score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_winner_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loser_score = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_loser_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loser_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hero_statues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTournamentItemEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTournamentItemEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgTournamentItemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTournamentItemEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->killer_account_id(), output);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->victim_account_id(), output);
  }

  // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event_type(), output);
  }

  // optional int32 tv_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tv_delay(), output);
  }

  // optional int32 dota_time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dota_time(), output);
  }

  // optional float replay_time = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->replay_time(), output);
  }

  // optional string loot_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), static_cast<int>(this->loot_list().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgTournamentItemEvent.loot_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->loot_list(), output);
  }

  // optional uint32 event_team = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->event_team(), output);
  }

  // optional uint32 multi_kill_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multi_kill_count(), output);
  }

  // optional uint32 winner_score = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->winner_score(), output);
  }

  // optional uint32 loser_score = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->loser_score(), output);
  }

  // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hero_statues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->hero_statues(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTournamentItemEvent)
}

::google::protobuf::uint8* CMsgTournamentItemEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTournamentItemEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->killer_account_id(), target);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->victim_account_id(), target);
  }

  // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event_type(), target);
  }

  // optional int32 tv_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tv_delay(), target);
  }

  // optional int32 dota_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dota_time(), target);
  }

  // optional float replay_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->replay_time(), target);
  }

  // optional string loot_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), static_cast<int>(this->loot_list().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgTournamentItemEvent.loot_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->loot_list(), target);
  }

  // optional uint32 event_team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->event_team(), target);
  }

  // optional uint32 multi_kill_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->multi_kill_count(), target);
  }

  // optional uint32 winner_score = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->winner_score(), target);
  }

  // optional uint32 loser_score = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->loser_score(), target);
  }

  // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hero_statues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->hero_statues(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTournamentItemEvent)
  return target;
}

size_t CMsgTournamentItemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTournamentItemEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->hero_statues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hero_statues(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string loot_list = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }

    // optional fixed32 killer_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 victim_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 tv_delay = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_delay());
    }

    // optional int32 dota_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_time());
    }

    // optional float replay_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 event_team = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_team());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 multi_kill_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi_kill_count());
    }

    // optional uint32 winner_score = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_score());
    }

    // optional uint32 loser_score = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loser_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTournamentItemEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTournamentItemEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgTournamentItemEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTournamentItemEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTournamentItemEvent)
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEvent::MergeFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_statues_.MergeFrom(from.hero_statues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      victim_account_id_ = from.victim_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_delay_ = from.tv_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      dota_time_ = from.dota_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      replay_time_ = from.replay_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_team_ = from.event_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      multi_kill_count_ = from.multi_kill_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      winner_score_ = from.winner_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      loser_score_ = from.loser_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTournamentItemEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEvent::CopyFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEvent::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEvent::Swap(CMsgTournamentItemEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTournamentItemEvent::InternalSwap(CMsgTournamentItemEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&hero_statues_)->InternalSwap(CastToBase(&other->hero_statues_));
  loot_list_.Swap(&other->loot_list_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(killer_account_id_, other->killer_account_id_);
  swap(victim_account_id_, other->victim_account_id_);
  swap(event_type_, other->event_type_);
  swap(tv_delay_, other->tv_delay_);
  swap(dota_time_, other->dota_time_);
  swap(replay_time_, other->replay_time_);
  swap(event_team_, other->event_team_);
  swap(multi_kill_count_, other->multi_kill_count_);
  swap(winner_score_, other->winner_score_);
  swap(loser_score_, other->loser_score_);
}

::google::protobuf::Metadata CMsgTournamentItemEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgTournamentItemEventResponse::InitAsDefaultInstance() {
}
class CMsgTournamentItemEventResponse::HasBitSetters {
 public:
  static void set_has_event_type(CMsgTournamentItemEventResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_viewers_granted(CMsgTournamentItemEventResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTournamentItemEventResponse::kEventTypeFieldNumber;
const int CMsgTournamentItemEventResponse::kViewersGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTournamentItemEventResponse)
}
CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewers_granted_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(viewers_granted_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTournamentItemEventResponse)
}

void CMsgTournamentItemEventResponse::SharedCtor() {
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewers_granted_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(viewers_granted_));
}

CMsgTournamentItemEventResponse::~CMsgTournamentItemEventResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTournamentItemEventResponse)
  SharedDtor();
}

void CMsgTournamentItemEventResponse::SharedDtor() {
}

void CMsgTournamentItemEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgTournamentItemEventResponse& CMsgTournamentItemEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgTournamentItemEventResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgTournamentItemEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTournamentItemEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewers_granted_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(viewers_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgTournamentItemEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgTournamentItemEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_TournamentEvents_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_type(static_cast<::proto::dota::DOTA_TournamentEvents>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 viewers_granted = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_viewers_granted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgTournamentItemEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTournamentItemEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< ::proto::dota::DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewers_granted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_viewers_granted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTournamentItemEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTournamentItemEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgTournamentItemEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTournamentItemEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional uint32 viewers_granted = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viewers_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTournamentItemEventResponse)
}

::google::protobuf::uint8* CMsgTournamentItemEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTournamentItemEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional uint32 viewers_granted = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viewers_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTournamentItemEventResponse)
  return target;
}

size_t CMsgTournamentItemEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTournamentItemEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 viewers_granted = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_granted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTournamentItemEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTournamentItemEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgTournamentItemEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTournamentItemEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTournamentItemEventResponse)
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEventResponse::MergeFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      viewers_granted_ = from.viewers_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTournamentItemEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEventResponse::CopyFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEventResponse::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEventResponse::Swap(CMsgTournamentItemEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTournamentItemEventResponse::InternalSwap(CMsgTournamentItemEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_type_, other->event_type_);
  swap(viewers_granted_, other->viewers_granted_);
}

::google::protobuf::Metadata CMsgTournamentItemEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgTeamFanfare::InitAsDefaultInstance() {
}
class CMsgTeamFanfare::HasBitSetters {
 public:
  static void set_has_match_id(CMsgTeamFanfare* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTeamFanfare::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTeamFanfare::CMsgTeamFanfare()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTeamFanfare)
}
CMsgTeamFanfare::CMsgTeamFanfare(const CMsgTeamFanfare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTeamFanfare)
}

void CMsgTeamFanfare::SharedCtor() {
  match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgTeamFanfare::~CMsgTeamFanfare() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTeamFanfare)
  SharedDtor();
}

void CMsgTeamFanfare::SharedDtor() {
}

void CMsgTeamFanfare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgTeamFanfare& CMsgTeamFanfare::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgTeamFanfare_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgTeamFanfare::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgTeamFanfare*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTeamFanfare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTeamFanfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTeamFanfare)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTeamFanfare)
}

::google::protobuf::uint8* CMsgTeamFanfare::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTeamFanfare)
  return target;
}

size_t CMsgTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTeamFanfare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 match_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTeamFanfare* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgTeamFanfare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTeamFanfare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTeamFanfare)
    MergeFrom(*source);
  }
}

void CMsgTeamFanfare::MergeFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match_id()) {
    set_match_id(from.match_id());
  }
}

void CMsgTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTeamFanfare::CopyFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgTeamFanfare::Swap(CMsgTeamFanfare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTeamFanfare::InternalSwap(CMsgTeamFanfare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
}

::google::protobuf::Metadata CMsgTeamFanfare::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgResponseTeamFanfare::InitAsDefaultInstance() {
}
class CMsgResponseTeamFanfare::HasBitSetters {
 public:
  static void set_has_fanfare_goodguys(CMsgResponseTeamFanfare* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fanfare_badguys(CMsgResponseTeamFanfare* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResponseTeamFanfare::kFanfareGoodguysFieldNumber;
const int CMsgResponseTeamFanfare::kFanfareBadguysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgResponseTeamFanfare)
}
CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fanfare_goodguys_, &from.fanfare_goodguys_,
    static_cast<size_t>(reinterpret_cast<char*>(&fanfare_badguys_) -
    reinterpret_cast<char*>(&fanfare_goodguys_)) + sizeof(fanfare_badguys_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgResponseTeamFanfare)
}

void CMsgResponseTeamFanfare::SharedCtor() {
  ::memset(&fanfare_goodguys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fanfare_badguys_) -
      reinterpret_cast<char*>(&fanfare_goodguys_)) + sizeof(fanfare_badguys_));
}

CMsgResponseTeamFanfare::~CMsgResponseTeamFanfare() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgResponseTeamFanfare)
  SharedDtor();
}

void CMsgResponseTeamFanfare::SharedDtor() {
}

void CMsgResponseTeamFanfare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgResponseTeamFanfare& CMsgResponseTeamFanfare::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgResponseTeamFanfare_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgResponseTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgResponseTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fanfare_goodguys_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fanfare_badguys_) -
        reinterpret_cast<char*>(&fanfare_goodguys_)) + sizeof(fanfare_badguys_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgResponseTeamFanfare::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgResponseTeamFanfare*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fanfare_goodguys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fanfare_goodguys(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fanfare_badguys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fanfare_badguys(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgResponseTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgResponseTeamFanfare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fanfare_goodguys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fanfare_goodguys(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_goodguys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fanfare_badguys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fanfare_badguys(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_badguys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgResponseTeamFanfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgResponseTeamFanfare)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgResponseTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgResponseTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fanfare_goodguys = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fanfare_goodguys(), output);
  }

  // optional uint32 fanfare_badguys = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fanfare_badguys(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgResponseTeamFanfare)
}

::google::protobuf::uint8* CMsgResponseTeamFanfare::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgResponseTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fanfare_goodguys = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fanfare_goodguys(), target);
  }

  // optional uint32 fanfare_badguys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fanfare_badguys(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgResponseTeamFanfare)
  return target;
}

size_t CMsgResponseTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgResponseTeamFanfare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fanfare_goodguys = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_goodguys());
    }

    // optional uint32 fanfare_badguys = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_badguys());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResponseTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResponseTeamFanfare* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgResponseTeamFanfare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgResponseTeamFanfare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgResponseTeamFanfare)
    MergeFrom(*source);
  }
}

void CMsgResponseTeamFanfare::MergeFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fanfare_goodguys_ = from.fanfare_goodguys_;
    }
    if (cached_has_bits & 0x00000002u) {
      fanfare_badguys_ = from.fanfare_badguys_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResponseTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResponseTeamFanfare::CopyFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResponseTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgResponseTeamFanfare::Swap(CMsgResponseTeamFanfare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResponseTeamFanfare::InternalSwap(CMsgResponseTeamFanfare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fanfare_goodguys_, other->fanfare_goodguys_);
  swap(fanfare_badguys_, other->fanfare_badguys_);
}

::google::protobuf::Metadata CMsgResponseTeamFanfare::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerUploadSaveGame::InitAsDefaultInstance() {
}
class CMsgGameServerUploadSaveGame::HasBitSetters {
 public:
  static void set_has_game_time(CMsgGameServerUploadSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_save_game_data(CMsgGameServerUploadSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lobby_id(CMsgGameServerUploadSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerUploadSaveGame::kGameTimeFieldNumber;
const int CMsgGameServerUploadSaveGame::kSaveGameDataFieldNumber;
const int CMsgGameServerUploadSaveGame::kLobbyIdFieldNumber;
const int CMsgGameServerUploadSaveGame::kPlayerSteamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerUploadSaveGame)
}
CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_steam_ids_(from.player_steam_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_game_data()) {
    save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerUploadSaveGame)
}

void CMsgGameServerUploadSaveGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameServerUploadSaveGame_dota_5fgcmessages_5fserver_2eproto.base);
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_time_));
}

CMsgGameServerUploadSaveGame::~CMsgGameServerUploadSaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerUploadSaveGame)
  SharedDtor();
}

void CMsgGameServerUploadSaveGame::SharedDtor() {
  save_game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerUploadSaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameServerUploadSaveGame& CMsgGameServerUploadSaveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameServerUploadSaveGame_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameServerUploadSaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerUploadSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    save_game_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_time_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameServerUploadSaveGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameServerUploadSaveGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes save_game_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_save_game_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 player_steam_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_player_steam_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_player_steam_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameServerUploadSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerUploadSaveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes save_game_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 player_steam_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_player_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerUploadSaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerUploadSaveGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameServerUploadSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerUploadSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional bytes save_game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->save_game_data(), output);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  // repeated uint64 player_steam_ids = 4;
  for (int i = 0, n = this->player_steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->player_steam_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerUploadSaveGame)
}

::google::protobuf::uint8* CMsgGameServerUploadSaveGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerUploadSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional bytes save_game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->save_game_data(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  // repeated uint64 player_steam_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->player_steam_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerUploadSaveGame)
  return target;
}

size_t CMsgGameServerUploadSaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerUploadSaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_steam_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->player_steam_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes save_game_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerUploadSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerUploadSaveGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameServerUploadSaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerUploadSaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerUploadSaveGame)
    MergeFrom(*source);
  }
}

void CMsgGameServerUploadSaveGame::MergeFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_steam_ids_.MergeFrom(from.player_steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerUploadSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerUploadSaveGame::CopyFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerUploadSaveGame::IsInitialized() const {
  return true;
}

void CMsgGameServerUploadSaveGame::Swap(CMsgGameServerUploadSaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerUploadSaveGame::InternalSwap(CMsgGameServerUploadSaveGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_steam_ids_.InternalSwap(&other->player_steam_ids_);
  save_game_data_.Swap(&other->save_game_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lobby_id_, other->lobby_id_);
  swap(game_time_, other->game_time_);
}

::google::protobuf::Metadata CMsgGameServerUploadSaveGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerSaveGameResult::InitAsDefaultInstance() {
}
class CMsgGameServerSaveGameResult::HasBitSetters {
 public:
  static void set_has_result(CMsgGameServerSaveGameResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerSaveGameResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerSaveGameResult)
}
CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerSaveGameResult)
}

void CMsgGameServerSaveGameResult::SharedCtor() {
  result_ = 0;
}

CMsgGameServerSaveGameResult::~CMsgGameServerSaveGameResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerSaveGameResult)
  SharedDtor();
}

void CMsgGameServerSaveGameResult::SharedDtor() {
}

void CMsgGameServerSaveGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameServerSaveGameResult& CMsgGameServerSaveGameResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameServerSaveGameResult_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameServerSaveGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerSaveGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameServerSaveGameResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameServerSaveGameResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGameServerSaveGameResult_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgGameServerSaveGameResult_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameServerSaveGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerSaveGameResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGameServerSaveGameResult_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGameServerSaveGameResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerSaveGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerSaveGameResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameServerSaveGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerSaveGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerSaveGameResult)
}

::google::protobuf::uint8* CMsgGameServerSaveGameResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerSaveGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerSaveGameResult)
  return target;
}

size_t CMsgGameServerSaveGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerSaveGameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerSaveGameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerSaveGameResult* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameServerSaveGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerSaveGameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerSaveGameResult)
    MergeFrom(*source);
  }
}

void CMsgGameServerSaveGameResult::MergeFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGameServerSaveGameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerSaveGameResult::CopyFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerSaveGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerSaveGameResult::Swap(CMsgGameServerSaveGameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerSaveGameResult::InternalSwap(CMsgGameServerSaveGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGameServerSaveGameResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerGetLoadGame::InitAsDefaultInstance() {
}
class CMsgGameServerGetLoadGame::HasBitSetters {
 public:
  static void set_has_save_id(CMsgGameServerGetLoadGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerGetLoadGame::kSaveIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerGetLoadGame)
}
CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_id_ = from.save_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerGetLoadGame)
}

void CMsgGameServerGetLoadGame::SharedCtor() {
  save_id_ = 0u;
}

CMsgGameServerGetLoadGame::~CMsgGameServerGetLoadGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerGetLoadGame)
  SharedDtor();
}

void CMsgGameServerGetLoadGame::SharedDtor() {
}

void CMsgGameServerGetLoadGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameServerGetLoadGame& CMsgGameServerGetLoadGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameServerGetLoadGame_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameServerGetLoadGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerGetLoadGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  save_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameServerGetLoadGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameServerGetLoadGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 save_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_save_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameServerGetLoadGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerGetLoadGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_save_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerGetLoadGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerGetLoadGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameServerGetLoadGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerGetLoadGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->save_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerGetLoadGame)
}

::google::protobuf::uint8* CMsgGameServerGetLoadGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerGetLoadGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->save_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerGetLoadGame)
  return target;
}

size_t CMsgGameServerGetLoadGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerGetLoadGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 save_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->save_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerGetLoadGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerGetLoadGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameServerGetLoadGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerGetLoadGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerGetLoadGame)
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGame::MergeFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_save_id()) {
    set_save_id(from.save_id());
  }
}

void CMsgGameServerGetLoadGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGame::CopyFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGame::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGame::Swap(CMsgGameServerGetLoadGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerGetLoadGame::InternalSwap(CMsgGameServerGetLoadGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(save_id_, other->save_id_);
}

::google::protobuf::Metadata CMsgGameServerGetLoadGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerGetLoadGameResult::InitAsDefaultInstance() {
}
class CMsgGameServerGetLoadGameResult::HasBitSetters {
 public:
  static void set_has_save_game_data(CMsgGameServerGetLoadGameResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerGetLoadGameResult::kSaveGameDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerGetLoadGameResult)
}
CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_game_data()) {
    save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerGetLoadGameResult)
}

void CMsgGameServerGetLoadGameResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGameServerGetLoadGameResult_dota_5fgcmessages_5fserver_2eproto.base);
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGameServerGetLoadGameResult::~CMsgGameServerGetLoadGameResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerGetLoadGameResult)
  SharedDtor();
}

void CMsgGameServerGetLoadGameResult::SharedDtor() {
  save_game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerGetLoadGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameServerGetLoadGameResult& CMsgGameServerGetLoadGameResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameServerGetLoadGameResult_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameServerGetLoadGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerGetLoadGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    save_game_data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameServerGetLoadGameResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameServerGetLoadGameResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes save_game_data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_save_game_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameServerGetLoadGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerGetLoadGameResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes save_game_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerGetLoadGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerGetLoadGameResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameServerGetLoadGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerGetLoadGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes save_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->save_game_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerGetLoadGameResult)
}

::google::protobuf::uint8* CMsgGameServerGetLoadGameResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerGetLoadGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes save_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->save_game_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerGetLoadGameResult)
  return target;
}

size_t CMsgGameServerGetLoadGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerGetLoadGameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes save_game_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->save_game_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerGetLoadGameResult* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameServerGetLoadGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerGetLoadGameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerGetLoadGameResult)
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_save_game_data()) {
    _has_bits_[0] |= 0x00000001u;
    save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
  }
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGameResult::Swap(CMsgGameServerGetLoadGameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerGetLoadGameResult::InternalSwap(CMsgGameServerGetLoadGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  save_game_data_.Swap(&other->save_game_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgGameServerGetLoadGameResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAGenerateDiretidePrizeList::InitAsDefaultInstance() {
}
class CMsgDOTAGenerateDiretidePrizeList::HasBitSetters {
 public:
  static void set_has_prize_list(CMsgDOTAGenerateDiretidePrizeList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_highest_roshan_level(CMsgDOTAGenerateDiretidePrizeList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGenerateDiretidePrizeList::kPrizeListFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeList::kHighestRoshanLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
}
CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prize_list_, &from.prize_list_,
    static_cast<size_t>(reinterpret_cast<char*>(&highest_roshan_level_) -
    reinterpret_cast<char*>(&prize_list_)) + sizeof(highest_roshan_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
}

void CMsgDOTAGenerateDiretidePrizeList::SharedCtor() {
  ::memset(&prize_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highest_roshan_level_) -
      reinterpret_cast<char*>(&prize_list_)) + sizeof(highest_roshan_level_));
}

CMsgDOTAGenerateDiretidePrizeList::~CMsgDOTAGenerateDiretidePrizeList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeList::SharedDtor() {
}

void CMsgDOTAGenerateDiretidePrizeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAGenerateDiretidePrizeList& CMsgDOTAGenerateDiretidePrizeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAGenerateDiretidePrizeList_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAGenerateDiretidePrizeList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&prize_list_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highest_roshan_level_) -
        reinterpret_cast<char*>(&prize_list_)) + sizeof(highest_roshan_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAGenerateDiretidePrizeList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAGenerateDiretidePrizeList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_prize_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 highest_roshan_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_highest_roshan_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAGenerateDiretidePrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_prize_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 highest_roshan_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_highest_roshan_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_roshan_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAGenerateDiretidePrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }

  // optional uint32 highest_roshan_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->highest_roshan_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }

  // optional uint32 highest_roshan_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->highest_roshan_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  return target;
}

size_t CMsgDOTAGenerateDiretidePrizeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 prize_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

    // optional uint32 highest_roshan_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_roshan_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAGenerateDiretidePrizeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prize_list_ = from.prize_list_;
    }
    if (cached_has_bits & 0x00000002u) {
      highest_roshan_level_ = from.highest_roshan_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeList::IsInitialized() const {
  return true;
}

void CMsgDOTAGenerateDiretidePrizeList::Swap(CMsgDOTAGenerateDiretidePrizeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGenerateDiretidePrizeList::InternalSwap(CMsgDOTAGenerateDiretidePrizeList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prize_list_, other->prize_list_);
  swap(highest_roshan_level_, other->highest_roshan_level_);
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAGenerateDiretidePrizeListResponse::InitAsDefaultInstance() {
}
class CMsgDOTAGenerateDiretidePrizeListResponse::HasBitSetters {
 public:
  static void set_has_prize_list(CMsgDOTAGenerateDiretidePrizeListResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGenerateDiretidePrizeListResponse::kItemDefsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kSteamIdsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
}
CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_defs_(from.item_defs_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedCtor() {
  prize_list_ = 0u;
}

CMsgDOTAGenerateDiretidePrizeListResponse::~CMsgDOTAGenerateDiretidePrizeListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedDtor() {
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAGenerateDiretidePrizeListResponse& CMsgDOTAGenerateDiretidePrizeListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAGenerateDiretidePrizeListResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAGenerateDiretidePrizeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_defs_.Clear();
  steam_ids_.Clear();
  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAGenerateDiretidePrizeListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAGenerateDiretidePrizeListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_item_defs(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_item_defs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 steam_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_steam_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steam_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 prize_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_prize_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAGenerateDiretidePrizeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steam_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_prize_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAGenerateDiretidePrizeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  for (int i = 0, n = this->item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_defs(i), output);
  }

  // repeated fixed64 steam_ids = 2;
  for (int i = 0, n = this->steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steam_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->item_defs_, target);

  // repeated fixed64 steam_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steam_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  return target;
}

size_t CMsgDOTAGenerateDiretidePrizeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_defs_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_ids_size());
    total_size += data_size;
  }

  // optional uint32 prize_list = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prize_list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAGenerateDiretidePrizeListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from.has_prize_list()) {
    set_prize_list(from.prize_list());
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Swap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGenerateDiretidePrizeListResponse::InternalSwap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_defs_.InternalSwap(&other->item_defs_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  swap(prize_list_, other->prize_list_);
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARewardDiretidePrizes::InitAsDefaultInstance() {
}
class CMsgDOTARewardDiretidePrizes::HasBitSetters {
 public:
  static void set_has_team(CMsgDOTARewardDiretidePrizes* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_prize_list(CMsgDOTARewardDiretidePrizes* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARewardDiretidePrizes::kTeamFieldNumber;
const int CMsgDOTARewardDiretidePrizes::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARewardDiretidePrizes)
}
CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&prize_list_) -
    reinterpret_cast<char*>(&team_)) + sizeof(prize_list_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARewardDiretidePrizes)
}

void CMsgDOTARewardDiretidePrizes::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prize_list_) -
      reinterpret_cast<char*>(&team_)) + sizeof(prize_list_));
}

CMsgDOTARewardDiretidePrizes::~CMsgDOTARewardDiretidePrizes() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARewardDiretidePrizes)
  SharedDtor();
}

void CMsgDOTARewardDiretidePrizes::SharedDtor() {
}

void CMsgDOTARewardDiretidePrizes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARewardDiretidePrizes& CMsgDOTARewardDiretidePrizes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARewardDiretidePrizes_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARewardDiretidePrizes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prize_list_) -
        reinterpret_cast<char*>(&team_)) + sizeof(prize_list_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARewardDiretidePrizes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARewardDiretidePrizes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prize_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_prize_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARewardDiretidePrizes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_prize_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARewardDiretidePrizes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARewardDiretidePrizes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARewardDiretidePrizes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional uint32 prize_list = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARewardDiretidePrizes)
}

::google::protobuf::uint8* CMsgDOTARewardDiretidePrizes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional uint32 prize_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARewardDiretidePrizes)
  return target;
}

size_t CMsgDOTARewardDiretidePrizes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 prize_list = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARewardDiretidePrizes* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARewardDiretidePrizes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARewardDiretidePrizes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARewardDiretidePrizes)
    MergeFrom(*source);
  }
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const CMsgDOTARewardDiretidePrizes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      prize_list_ = from.prize_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const CMsgDOTARewardDiretidePrizes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARewardDiretidePrizes::IsInitialized() const {
  return true;
}

void CMsgDOTARewardDiretidePrizes::Swap(CMsgDOTARewardDiretidePrizes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARewardDiretidePrizes::InternalSwap(CMsgDOTARewardDiretidePrizes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(prize_list_, other->prize_list_);
}

::google::protobuf::Metadata CMsgDOTARewardDiretidePrizes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTADiretidePrizesRewardedResponse::InitAsDefaultInstance() {
}
class CMsgDOTADiretidePrizesRewardedResponse::HasBitSetters {
 public:
  static void set_has_prize_list(CMsgDOTADiretidePrizesRewardedResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTADiretidePrizesRewardedResponse::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
}
CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedCtor() {
  prize_list_ = 0u;
}

CMsgDOTADiretidePrizesRewardedResponse::~CMsgDOTADiretidePrizesRewardedResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  SharedDtor();
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedDtor() {
}

void CMsgDOTADiretidePrizesRewardedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTADiretidePrizesRewardedResponse& CMsgDOTADiretidePrizesRewardedResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTADiretidePrizesRewardedResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTADiretidePrizesRewardedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTADiretidePrizesRewardedResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTADiretidePrizesRewardedResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_prize_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTADiretidePrizesRewardedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_prize_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTADiretidePrizesRewardedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
}

::google::protobuf::uint8* CMsgDOTADiretidePrizesRewardedResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  return target;
}

size_t CMsgDOTADiretidePrizesRewardedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 prize_list = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prize_list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADiretidePrizesRewardedResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTADiretidePrizesRewardedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prize_list()) {
    set_prize_list(from.prize_list());
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADiretidePrizesRewardedResponse::IsInitialized() const {
  return true;
}

void CMsgDOTADiretidePrizesRewardedResponse::Swap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTADiretidePrizesRewardedResponse::InternalSwap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prize_list_, other->prize_list_);
}

::google::protobuf::Metadata CMsgDOTADiretidePrizesRewardedResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAAwardEventPoints_AwardPoints::InitAsDefaultInstance() {
}
class CMsgDOTAAwardEventPoints_AwardPoints::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAAwardEventPoints_AwardPoints* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_points(CMsgDOTAAwardEventPoints_AwardPoints* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_premium_points(CMsgDOTAAwardEventPoints_AwardPoints* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_trade_ban_time(CMsgDOTAAwardEventPoints_AwardPoints* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_eligible_for_periodic_adjustment(CMsgDOTAAwardEventPoints_AwardPoints* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAwardEventPoints_AwardPoints::kAccountIdFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPremiumPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kTradeBanTimeFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kEligibleForPeriodicAdjustmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
}
CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eligible_for_periodic_adjustment_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(eligible_for_periodic_adjustment_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eligible_for_periodic_adjustment_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(eligible_for_periodic_adjustment_));
}

CMsgDOTAAwardEventPoints_AwardPoints::~CMsgDOTAAwardEventPoints_AwardPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  SharedDtor();
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedDtor() {
}

void CMsgDOTAAwardEventPoints_AwardPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints_AwardPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAAwardEventPoints_AwardPoints_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAAwardEventPoints_AwardPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eligible_for_periodic_adjustment_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(eligible_for_periodic_adjustment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAAwardEventPoints_AwardPoints::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAAwardEventPoints_AwardPoints*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 points = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 premium_points = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_premium_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 trade_ban_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_trade_ban_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool eligible_for_periodic_adjustment = 6 [default = false];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_eligible_for_periodic_adjustment(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAAwardEventPoints_AwardPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 premium_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_premium_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &premium_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trade_ban_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_trade_ban_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_ban_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eligible_for_periodic_adjustment = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_eligible_for_periodic_adjustment(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_periodic_adjustment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAAwardEventPoints_AwardPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 points = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // optional int32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->premium_points(), output);
  }

  // optional uint32 trade_ban_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trade_ban_time(), output);
  }

  // optional bool eligible_for_periodic_adjustment = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->eligible_for_periodic_adjustment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints_AwardPoints::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // optional int32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->premium_points(), target);
  }

  // optional uint32 trade_ban_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trade_ban_time(), target);
  }

  // optional bool eligible_for_periodic_adjustment = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->eligible_for_periodic_adjustment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints_AwardPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 premium_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->premium_points());
    }

    // optional uint32 trade_ban_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_ban_time());
    }

    // optional bool eligible_for_periodic_adjustment = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints_AwardPoints* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAAwardEventPoints_AwardPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_points_ = from.premium_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      trade_ban_time_ = from.trade_ban_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      eligible_for_periodic_adjustment_ = from.eligible_for_periodic_adjustment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints_AwardPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Swap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAwardEventPoints_AwardPoints::InternalSwap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(points_, other->points_);
  swap(premium_points_, other->premium_points_);
  swap(trade_ban_time_, other->trade_ban_time_);
  swap(eligible_for_periodic_adjustment_, other->eligible_for_periodic_adjustment_);
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints_AwardPoints::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAAwardEventPoints::InitAsDefaultInstance() {
}
class CMsgDOTAAwardEventPoints::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTAAwardEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event_id(CMsgDOTAAwardEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgDOTAAwardEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_audit_action(CMsgDOTAAwardEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAwardEventPoints::kAwardPointsFieldNumber;
const int CMsgDOTAAwardEventPoints::kMatchIdFieldNumber;
const int CMsgDOTAAwardEventPoints::kEventIdFieldNumber;
const int CMsgDOTAAwardEventPoints::kTimestampFieldNumber;
const int CMsgDOTAAwardEventPoints::kAuditActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAwardEventPoints)
}
CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      award_points_(from.award_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_action_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(audit_action_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAwardEventPoints)
}

void CMsgDOTAAwardEventPoints::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAAwardEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audit_action_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(audit_action_));
}

CMsgDOTAAwardEventPoints::~CMsgDOTAAwardEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAwardEventPoints)
  SharedDtor();
}

void CMsgDOTAAwardEventPoints::SharedDtor() {
}

void CMsgDOTAAwardEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAAwardEventPoints& CMsgDOTAAwardEventPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAAwardEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAAwardEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAwardEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  award_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_action_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(audit_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAAwardEventPoints::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAAwardEventPoints*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints::_InternalParse;
          object = msg->add_award_points();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 audit_action = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_audit_action(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAAwardEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAwardEventPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_award_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audit_action = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_audit_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audit_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAwardEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAwardEventPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAAwardEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAwardEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->award_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->award_points(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->event_id(), output);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->audit_action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAwardEventPoints)
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAwardEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->award_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->award_points(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->event_id(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->audit_action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAwardEventPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAwardEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->award_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->award_points(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 audit_action = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audit_action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAAwardEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAAwardEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAwardEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAwardEventPoints)
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints::MergeFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  award_points_.MergeFrom(from.award_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      audit_action_ = from.audit_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAwardEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints::CopyFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints::Swap(CMsgDOTAAwardEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAwardEventPoints::InternalSwap(CMsgDOTAAwardEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&award_points_)->InternalSwap(CastToBase(&other->award_points_));
  swap(match_id_, other->match_id_);
  swap(event_id_, other->event_id_);
  swap(timestamp_, other->timestamp_);
  swap(audit_action_, other->audit_action_);
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InitAsDefaultInstance() {
}
class CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::HasBitSetters {
 public:
  static void set_has_loot_list(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_no_trade(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_randomize_reward(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kLootListFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kPlayerAccountIdsFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kNoTradeFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kRandomizeRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}
CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_account_ids_(from.player_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loot_list()) {
    loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
  }
  ::memcpy(&no_trade_, &from.no_trade_,
    static_cast<size_t>(reinterpret_cast<char*>(&randomize_reward_) -
    reinterpret_cast<char*>(&no_trade_)) + sizeof(randomize_reward_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base);
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&no_trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomize_reward_) -
      reinterpret_cast<char*>(&no_trade_)) + sizeof(randomize_reward_));
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  SharedDtor();
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedDtor() {
  loot_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    loot_list_.ClearNonDefaultToEmptyNoArena();
  }
  ::memset(&no_trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomize_reward_) -
      reinterpret_cast<char*>(&no_trade_)) + sizeof(randomize_reward_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string loot_list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
        object = msg->mutable_loot_list();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_player_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_player_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool no_trade = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_no_trade(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool randomize_reward = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_randomize_reward(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loot_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loot_list().data(), static_cast<int>(this->loot_list().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_player_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_trade = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_no_trade(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_trade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool randomize_reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_randomize_reward(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loot_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), static_cast<int>(this->loot_list().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loot_list(), output);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0, n = this->player_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_account_ids(i), output);
  }

  // optional bool no_trade = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->no_trade(), output);
  }

  // optional bool randomize_reward = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->randomize_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

::google::protobuf::uint8* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loot_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), static_cast<int>(this->loot_list().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loot_list(), target);
  }

  // repeated uint32 player_account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->player_account_ids_, target);

  // optional bool no_trade = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->no_trade(), target);
  }

  // optional bool randomize_reward = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->randomize_reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return target;
}

size_t CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string loot_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }

    // optional bool no_trade = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool randomize_reward = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_ids_.MergeFrom(from.player_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      no_trade_ = from.no_trade_;
    }
    if (cached_has_bits & 0x00000004u) {
      randomize_reward_ = from.randomize_reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::IsInitialized() const {
  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Swap(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InternalSwap(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_account_ids_.InternalSwap(&other->player_account_ids_);
  loot_list_.Swap(&other->loot_list_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(no_trade_, other->no_trade_);
  swap(randomize_reward_, other->randomize_reward_);
}

::google::protobuf::Metadata CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCSignoutAwardAdditionalDrops::InitAsDefaultInstance() {
}
class CMsgServerToGCSignoutAwardAdditionalDrops::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCSignoutAwardAdditionalDrops* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCSignoutAwardAdditionalDrops::kDropsFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
}
CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      drops_(from.drops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base);
  match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgServerToGCSignoutAwardAdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  SharedDtor();
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedDtor() {
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCSignoutAwardAdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCSignoutAwardAdditionalDrops_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCSignoutAwardAdditionalDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drops_.Clear();
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCSignoutAwardAdditionalDrops::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCSignoutAwardAdditionalDrops*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::_InternalParse;
          object = msg->add_drops();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCSignoutAwardAdditionalDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCSignoutAwardAdditionalDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->drops(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
}

::google::protobuf::uint8* CMsgServerToGCSignoutAwardAdditionalDrops::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->drops(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  return target;
}

size_t CMsgServerToGCSignoutAwardAdditionalDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->drops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->drops(static_cast<int>(i)));
    }
  }

  // optional uint64 match_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCSignoutAwardAdditionalDrops>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drops_.MergeFrom(from.drops_);
  if (from.has_match_id()) {
    set_match_id(from.match_id());
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops::IsInitialized() const {
  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::Swap(CMsgServerToGCSignoutAwardAdditionalDrops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCSignoutAwardAdditionalDrops::InternalSwap(CMsgServerToGCSignoutAwardAdditionalDrops* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&drops_)->InternalSwap(CastToBase(&other->drops_));
  swap(match_id_, other->match_id_);
}

::google::protobuf::Metadata CMsgServerToGCSignoutAwardAdditionalDrops::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFrostivusTimeElapsed_User::InitAsDefaultInstance() {
}
class CMsgDOTAFrostivusTimeElapsed_User::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAFrostivusTimeElapsed_User* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_elapsed_s(CMsgDOTAFrostivusTimeElapsed_User* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFrostivusTimeElapsed_User::kAccountIdFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed_User::kTimeElapsedSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
}
CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(const CMsgDOTAFrostivusTimeElapsed_User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_elapsed_s_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_elapsed_s_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_elapsed_s_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(time_elapsed_s_));
}

CMsgDOTAFrostivusTimeElapsed_User::~CMsgDOTAFrostivusTimeElapsed_User() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedDtor() {
}

void CMsgDOTAFrostivusTimeElapsed_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFrostivusTimeElapsed_User& CMsgDOTAFrostivusTimeElapsed_User::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFrostivusTimeElapsed_User_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFrostivusTimeElapsed_User::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_elapsed_s_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_elapsed_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFrostivusTimeElapsed_User::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFrostivusTimeElapsed_User*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_elapsed_s = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_elapsed_s(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFrostivusTimeElapsed_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_elapsed_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_elapsed_s(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_elapsed_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFrostivusTimeElapsed_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_elapsed_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_elapsed_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed_User::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_elapsed_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_elapsed_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  return target;
}

size_t CMsgDOTAFrostivusTimeElapsed_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_elapsed_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_elapsed_s());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed_User* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFrostivusTimeElapsed_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_elapsed_s_ = from.time_elapsed_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed_User::IsInitialized() const {
  return true;
}

void CMsgDOTAFrostivusTimeElapsed_User::Swap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFrostivusTimeElapsed_User::InternalSwap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(time_elapsed_s_, other->time_elapsed_s_);
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed_User::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFrostivusTimeElapsed::InitAsDefaultInstance() {
}
class CMsgDOTAFrostivusTimeElapsed::HasBitSetters {
 public:
  static void set_has_seconds(CMsgDOTAFrostivusTimeElapsed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgDOTAFrostivusTimeElapsed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFrostivusTimeElapsed::kSecondsFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kUsersFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed)
}
CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(const CMsgDOTAFrostivusTimeElapsed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed)
}

void CMsgDOTAFrostivusTimeElapsed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFrostivusTimeElapsed_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(seconds_));
}

CMsgDOTAFrostivusTimeElapsed::~CMsgDOTAFrostivusTimeElapsed() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed::SharedDtor() {
}

void CMsgDOTAFrostivusTimeElapsed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFrostivusTimeElapsed& CMsgDOTAFrostivusTimeElapsed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFrostivusTimeElapsed_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFrostivusTimeElapsed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFrostivusTimeElapsed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFrostivusTimeElapsed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 seconds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User::_InternalParse;
          object = msg->add_users();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFrostivusTimeElapsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFrostivusTimeElapsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds(), output);
  }

  // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->users(static_cast<int>(i)),
      output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFrostivusTimeElapsed)
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds(), target);
  }

  // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->users(static_cast<int>(i)), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  return target;
}

size_t CMsgDOTAFrostivusTimeElapsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 seconds = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFrostivusTimeElapsed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFrostivusTimeElapsed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFrostivusTimeElapsed)
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed::IsInitialized() const {
  return true;
}

void CMsgDOTAFrostivusTimeElapsed::Swap(CMsgDOTAFrostivusTimeElapsed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFrostivusTimeElapsed::InternalSwap(CMsgDOTAFrostivusTimeElapsed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(match_id_, other->match_id_);
  swap(seconds_, other->seconds_);
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerPingRequest::InitAsDefaultInstance() {
}
class CMsgGCToServerPingRequest::HasBitSetters {
 public:
  static void set_has_request_id(CMsgGCToServerPingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_request_time(CMsgGCToServerPingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPingRequest::kRequestIdFieldNumber;
const int CMsgGCToServerPingRequest::kRequestTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPingRequest)
}
CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_time_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(request_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPingRequest)
}

void CMsgGCToServerPingRequest::SharedCtor() {
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(request_time_));
}

CMsgGCToServerPingRequest::~CMsgGCToServerPingRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPingRequest)
  SharedDtor();
}

void CMsgGCToServerPingRequest::SharedDtor() {
}

void CMsgGCToServerPingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerPingRequest& CMsgGCToServerPingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerPingRequest_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(request_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerPingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerPingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_request_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 request_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_request_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_request_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPingRequest)
}

::google::protobuf::uint8* CMsgGCToServerPingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPingRequest)
  return target;
}

size_t CMsgGCToServerPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerPingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPingRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingRequest::MergeFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_time_ = from.request_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingRequest::CopyFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingRequest::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingRequest::Swap(CMsgGCToServerPingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPingRequest::InternalSwap(CMsgGCToServerPingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_id_, other->request_id_);
  swap(request_time_, other->request_time_);
}

::google::protobuf::Metadata CMsgGCToServerPingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerPingResponse::InitAsDefaultInstance() {
}
class CMsgGCToServerPingResponse::HasBitSetters {
 public:
  static void set_has_request_id(CMsgGCToServerPingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_request_time(CMsgGCToServerPingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cluster(CMsgGCToServerPingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPingResponse::kRequestIdFieldNumber;
const int CMsgGCToServerPingResponse::kRequestTimeFieldNumber;
const int CMsgGCToServerPingResponse::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPingResponse)
}
CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(cluster_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPingResponse)
}

void CMsgGCToServerPingResponse::SharedCtor() {
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(cluster_));
}

CMsgGCToServerPingResponse::~CMsgGCToServerPingResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPingResponse)
  SharedDtor();
}

void CMsgGCToServerPingResponse::SharedDtor() {
}

void CMsgGCToServerPingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerPingResponse& CMsgGCToServerPingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerPingResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(cluster_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerPingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerPingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_request_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 request_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_request_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cluster = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_request_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // optional uint32 cluster = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cluster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPingResponse)
}

::google::protobuf::uint8* CMsgGCToServerPingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // optional uint32 cluster = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cluster(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPingResponse)
  return target;
}

size_t CMsgGCToServerPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

    // optional uint32 cluster = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerPingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPingResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingResponse::MergeFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      cluster_ = from.cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingResponse::CopyFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingResponse::Swap(CMsgGCToServerPingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPingResponse::InternalSwap(CMsgGCToServerPingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_id_, other->request_id_);
  swap(request_time_, other->request_time_);
  swap(cluster_, other->cluster_);
}

::google::protobuf::Metadata CMsgGCToServerPingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerConsoleCommand::InitAsDefaultInstance() {
}
class CMsgGCToServerConsoleCommand::HasBitSetters {
 public:
  static void set_has_console_command(CMsgGCToServerConsoleCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerConsoleCommand::kConsoleCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerConsoleCommand)
}
CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(const CMsgGCToServerConsoleCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  console_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_console_command()) {
    console_command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.console_command_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerConsoleCommand)
}

void CMsgGCToServerConsoleCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToServerConsoleCommand_dota_5fgcmessages_5fserver_2eproto.base);
  console_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToServerConsoleCommand::~CMsgGCToServerConsoleCommand() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerConsoleCommand)
  SharedDtor();
}

void CMsgGCToServerConsoleCommand::SharedDtor() {
  console_command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToServerConsoleCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerConsoleCommand& CMsgGCToServerConsoleCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerConsoleCommand_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerConsoleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerConsoleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    console_command_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerConsoleCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerConsoleCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string console_command = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToServerConsoleCommand.console_command");
        object = msg->mutable_console_command();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerConsoleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerConsoleCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string console_command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_console_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->console_command().data(), static_cast<int>(this->console_command().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToServerConsoleCommand.console_command");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerConsoleCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerConsoleCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerConsoleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerConsoleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string console_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->console_command().data(), static_cast<int>(this->console_command().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToServerConsoleCommand.console_command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->console_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerConsoleCommand)
}

::google::protobuf::uint8* CMsgGCToServerConsoleCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerConsoleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string console_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->console_command().data(), static_cast<int>(this->console_command().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToServerConsoleCommand.console_command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->console_command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerConsoleCommand)
  return target;
}

size_t CMsgGCToServerConsoleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerConsoleCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string console_command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->console_command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerConsoleCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerConsoleCommand* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerConsoleCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerConsoleCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerConsoleCommand)
    MergeFrom(*source);
  }
}

void CMsgGCToServerConsoleCommand::MergeFrom(const CMsgGCToServerConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_command()) {
    _has_bits_[0] |= 0x00000001u;
    console_command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.console_command_);
  }
}

void CMsgGCToServerConsoleCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerConsoleCommand::CopyFrom(const CMsgGCToServerConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerConsoleCommand::IsInitialized() const {
  return true;
}

void CMsgGCToServerConsoleCommand::Swap(CMsgGCToServerConsoleCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerConsoleCommand::InternalSwap(CMsgGCToServerConsoleCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  console_command_.Swap(&other->console_command_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgGCToServerConsoleCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGetEventPoints::InitAsDefaultInstance() {
}
class CMsgServerGetEventPoints::HasBitSetters {
 public:
  static void set_has_event_id(CMsgServerGetEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGetEventPoints::kEventIdFieldNumber;
const int CMsgServerGetEventPoints::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGetEventPoints::CMsgServerGetEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGetEventPoints)
}
CMsgServerGetEventPoints::CMsgServerGetEventPoints(const CMsgServerGetEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_id_(from.account_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGetEventPoints)
}

void CMsgServerGetEventPoints::SharedCtor() {
  event_id_ = 0;
}

CMsgServerGetEventPoints::~CMsgServerGetEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGetEventPoints)
  SharedDtor();
}

void CMsgServerGetEventPoints::SharedDtor() {
}

void CMsgServerGetEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGetEventPoints& CMsgServerGetEventPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGetEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGetEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGetEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGetEventPoints::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGetEventPoints*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_account_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGetEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGetEventPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGetEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGetEventPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGetEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGetEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // repeated uint32 account_id = 2;
  for (int i = 0, n = this->account_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGetEventPoints)
}

::google::protobuf::uint8* CMsgServerGetEventPoints::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGetEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // repeated uint32 account_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGetEventPoints)
  return target;
}

size_t CMsgServerGetEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGetEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_id_size());
    total_size += data_size;
  }

  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGetEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGetEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPoints* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGetEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGetEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGetEventPoints)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPoints::MergeFrom(const CMsgServerGetEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGetEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_.MergeFrom(from.account_id_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgServerGetEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGetEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPoints::CopyFrom(const CMsgServerGetEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGetEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPoints::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPoints::Swap(CMsgServerGetEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGetEventPoints::InternalSwap(CMsgServerGetEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_id_.InternalSwap(&other->account_id_);
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgServerGetEventPoints::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGetEventPointsResponse_Points::InitAsDefaultInstance() {
}
class CMsgServerGetEventPointsResponse_Points::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerGetEventPointsResponse_Points* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_points_total(CMsgServerGetEventPointsResponse_Points* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_owned(CMsgServerGetEventPointsResponse_Points* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGetEventPointsResponse_Points::kAccountIdFieldNumber;
const int CMsgServerGetEventPointsResponse_Points::kPointsTotalFieldNumber;
const int CMsgServerGetEventPointsResponse_Points::kOwnedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGetEventPointsResponse.Points)
}
CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points(const CMsgServerGetEventPointsResponse_Points& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(owned_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGetEventPointsResponse.Points)
}

void CMsgServerGetEventPointsResponse_Points::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owned_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(owned_));
}

CMsgServerGetEventPointsResponse_Points::~CMsgServerGetEventPointsResponse_Points() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGetEventPointsResponse.Points)
  SharedDtor();
}

void CMsgServerGetEventPointsResponse_Points::SharedDtor() {
}

void CMsgServerGetEventPointsResponse_Points::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGetEventPointsResponse_Points& CMsgServerGetEventPointsResponse_Points::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGetEventPointsResponse_Points_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGetEventPointsResponse_Points::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owned_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(owned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGetEventPointsResponse_Points::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGetEventPointsResponse_Points*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 points_total = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_points_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool owned = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_owned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGetEventPointsResponse_Points::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_points_total(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_owned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGetEventPointsResponse.Points)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGetEventPointsResponse.Points)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGetEventPointsResponse_Points::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 points_total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_total(), output);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGetEventPointsResponse.Points)
}

::google::protobuf::uint8* CMsgServerGetEventPointsResponse_Points::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 points_total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_total(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGetEventPointsResponse.Points)
  return target;
}

size_t CMsgServerGetEventPointsResponse_Points::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 points_total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_total());
    }

    // optional bool owned = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse_Points* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGetEventPointsResponse_Points>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGetEventPointsResponse.Points)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGetEventPointsResponse.Points)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const CMsgServerGetEventPointsResponse_Points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_total_ = from.points_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      owned_ = from.owned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const CMsgServerGetEventPointsResponse_Points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse_Points::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPointsResponse_Points::Swap(CMsgServerGetEventPointsResponse_Points* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGetEventPointsResponse_Points::InternalSwap(CMsgServerGetEventPointsResponse_Points* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(points_total_, other->points_total_);
  swap(owned_, other->owned_);
}

::google::protobuf::Metadata CMsgServerGetEventPointsResponse_Points::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGetEventPointsResponse::InitAsDefaultInstance() {
}
class CMsgServerGetEventPointsResponse::HasBitSetters {
 public:
  static void set_has_event_id(CMsgServerGetEventPointsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGetEventPointsResponse::kEventIdFieldNumber;
const int CMsgServerGetEventPointsResponse::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGetEventPointsResponse)
}
CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse(const CMsgServerGetEventPointsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGetEventPointsResponse)
}

void CMsgServerGetEventPointsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerGetEventPointsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  event_id_ = 0;
}

CMsgServerGetEventPointsResponse::~CMsgServerGetEventPointsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGetEventPointsResponse)
  SharedDtor();
}

void CMsgServerGetEventPointsResponse::SharedDtor() {
}

void CMsgServerGetEventPointsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGetEventPointsResponse& CMsgServerGetEventPointsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGetEventPointsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGetEventPointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGetEventPointsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGetEventPointsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGetEventPointsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerGetEventPointsResponse_Points::_InternalParse;
          object = msg->add_points();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGetEventPointsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGetEventPointsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGetEventPointsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGetEventPointsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGetEventPointsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGetEventPointsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGetEventPointsResponse)
}

::google::protobuf::uint8* CMsgServerGetEventPointsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGetEventPointsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGetEventPointsResponse)
  return target;
}

size_t CMsgServerGetEventPointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGetEventPointsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGetEventPointsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGetEventPointsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGetEventPointsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGetEventPointsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse::MergeFrom(const CMsgServerGetEventPointsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgServerGetEventPointsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse::CopyFrom(const CMsgServerGetEventPointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPointsResponse::Swap(CMsgServerGetEventPointsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGetEventPointsResponse::InternalSwap(CMsgServerGetEventPointsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgServerGetEventPointsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGrantSurveyPermission_Survey::InitAsDefaultInstance() {
}
class CMsgServerGrantSurveyPermission_Survey::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerGrantSurveyPermission_Survey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_question_id(CMsgServerGrantSurveyPermission_Survey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_expire_time(CMsgServerGrantSurveyPermission_Survey* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_survey_key(CMsgServerGrantSurveyPermission_Survey* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_extra_data(CMsgServerGrantSurveyPermission_Survey* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_extra_data_32(CMsgServerGrantSurveyPermission_Survey* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGrantSurveyPermission_Survey::kAccountIdFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kQuestionIdFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExpireTimeFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kSurveyKeyFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExtraDataFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExtraData32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGrantSurveyPermission.Survey)
}
CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey(const CMsgServerGrantSurveyPermission_Survey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGrantSurveyPermission.Survey)
}

void CMsgServerGrantSurveyPermission_Survey::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(expire_time_));
}

CMsgServerGrantSurveyPermission_Survey::~CMsgServerGrantSurveyPermission_Survey() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  SharedDtor();
}

void CMsgServerGrantSurveyPermission_Survey::SharedDtor() {
}

void CMsgServerGrantSurveyPermission_Survey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGrantSurveyPermission_Survey& CMsgServerGrantSurveyPermission_Survey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGrantSurveyPermission_Survey_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGrantSurveyPermission_Survey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expire_time_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(expire_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGrantSurveyPermission_Survey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGrantSurveyPermission_Survey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 question_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_question_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 expire_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_expire_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 survey_key = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_survey_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 extra_data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_extra_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 extra_data_32 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_extra_data_32(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGrantSurveyPermission_Survey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_question_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expire_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_expire_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 survey_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_survey_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &survey_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 extra_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_extra_data(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extra_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 extra_data_32 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_extra_data_32(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extra_data_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGrantSurveyPermission_Survey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // optional uint32 expire_time = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expire_time(), output);
  }

  // optional uint64 survey_key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->survey_key(), output);
  }

  // optional uint64 extra_data = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->extra_data(), output);
  }

  // optional uint64 extra_data_32 = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->extra_data_32(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGrantSurveyPermission.Survey)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermission_Survey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // optional uint32 expire_time = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expire_time(), target);
  }

  // optional uint64 survey_key = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->survey_key(), target);
  }

  // optional uint64 extra_data = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->extra_data(), target);
  }

  // optional uint64 extra_data_32 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->extra_data_32(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  return target;
}

size_t CMsgServerGrantSurveyPermission_Survey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 question_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint64 survey_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->survey_key());
    }

    // optional uint64 extra_data = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extra_data());
    }

    // optional uint64 extra_data_32 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extra_data_32());
    }

    // optional uint32 expire_time = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission_Survey* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGrantSurveyPermission_Survey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGrantSurveyPermission.Survey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGrantSurveyPermission.Survey)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      survey_key_ = from.survey_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      extra_data_ = from.extra_data_;
    }
    if (cached_has_bits & 0x00000010u) {
      extra_data_32_ = from.extra_data_32_;
    }
    if (cached_has_bits & 0x00000020u) {
      expire_time_ = from.expire_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission_Survey::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermission_Survey::Swap(CMsgServerGrantSurveyPermission_Survey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGrantSurveyPermission_Survey::InternalSwap(CMsgServerGrantSurveyPermission_Survey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(question_id_, other->question_id_);
  swap(survey_key_, other->survey_key_);
  swap(extra_data_, other->extra_data_);
  swap(extra_data_32_, other->extra_data_32_);
  swap(expire_time_, other->expire_time_);
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermission_Survey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGrantSurveyPermission::InitAsDefaultInstance() {
}
class CMsgServerGrantSurveyPermission::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGrantSurveyPermission::kSurveysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGrantSurveyPermission)
}
CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission(const CMsgServerGrantSurveyPermission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      surveys_(from.surveys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGrantSurveyPermission)
}

void CMsgServerGrantSurveyPermission::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerGrantSurveyPermission_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgServerGrantSurveyPermission::~CMsgServerGrantSurveyPermission() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGrantSurveyPermission)
  SharedDtor();
}

void CMsgServerGrantSurveyPermission::SharedDtor() {
}

void CMsgServerGrantSurveyPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGrantSurveyPermission& CMsgServerGrantSurveyPermission::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGrantSurveyPermission_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGrantSurveyPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGrantSurveyPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surveys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGrantSurveyPermission::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGrantSurveyPermission*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerGrantSurveyPermission_Survey::_InternalParse;
          object = msg->add_surveys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGrantSurveyPermission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGrantSurveyPermission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_surveys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGrantSurveyPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGrantSurveyPermission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGrantSurveyPermission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGrantSurveyPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surveys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->surveys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGrantSurveyPermission)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermission::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGrantSurveyPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surveys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->surveys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGrantSurveyPermission)
  return target;
}

size_t CMsgServerGrantSurveyPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGrantSurveyPermission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->surveys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->surveys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGrantSurveyPermission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGrantSurveyPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGrantSurveyPermission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGrantSurveyPermission)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission::MergeFrom(const CMsgServerGrantSurveyPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  surveys_.MergeFrom(from.surveys_);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const CMsgServerGrantSurveyPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermission::Swap(CMsgServerGrantSurveyPermission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGrantSurveyPermission::InternalSwap(CMsgServerGrantSurveyPermission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&surveys_)->InternalSwap(CastToBase(&other->surveys_));
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermission::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGrantSurveyPermissionResponse::InitAsDefaultInstance() {
}
class CMsgServerGrantSurveyPermissionResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgServerGrantSurveyPermissionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGrantSurveyPermissionResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGrantSurveyPermissionResponse)
}
CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse(const CMsgServerGrantSurveyPermissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGrantSurveyPermissionResponse)
}

void CMsgServerGrantSurveyPermissionResponse::SharedCtor() {
  result_ = 0u;
}

CMsgServerGrantSurveyPermissionResponse::~CMsgServerGrantSurveyPermissionResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  SharedDtor();
}

void CMsgServerGrantSurveyPermissionResponse::SharedDtor() {
}

void CMsgServerGrantSurveyPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGrantSurveyPermissionResponse& CMsgServerGrantSurveyPermissionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGrantSurveyPermissionResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGrantSurveyPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGrantSurveyPermissionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGrantSurveyPermissionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGrantSurveyPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGrantSurveyPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGrantSurveyPermissionResponse)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermissionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  return target;
}

size_t CMsgServerGrantSurveyPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermissionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGrantSurveyPermissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGrantSurveyPermissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGrantSurveyPermissionResponse)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermissionResponse::Swap(CMsgServerGrantSurveyPermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGrantSurveyPermissionResponse::InternalSwap(CMsgServerGrantSurveyPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermissionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchConnectionStats_Player::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchConnectionStats_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerToGCMatchConnectionStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ip(CMsgServerToGCMatchConnectionStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_avg_ping_ms(CMsgServerToGCMatchConnectionStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_packet_loss(CMsgServerToGCMatchConnectionStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ping_deviation(CMsgServerToGCMatchConnectionStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_full_resends(CMsgServerToGCMatchConnectionStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchConnectionStats_Player::kAccountIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kIpFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kAvgPingMsFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kPacketLossFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kPingDeviationFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kFullResendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
}
CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(const CMsgServerToGCMatchConnectionStats_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&full_resends_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(full_resends_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
}

void CMsgServerToGCMatchConnectionStats_Player::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_resends_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(full_resends_));
}

CMsgServerToGCMatchConnectionStats_Player::~CMsgServerToGCMatchConnectionStats_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  SharedDtor();
}

void CMsgServerToGCMatchConnectionStats_Player::SharedDtor() {
}

void CMsgServerToGCMatchConnectionStats_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchConnectionStats_Player& CMsgServerToGCMatchConnectionStats_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchConnectionStats_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchConnectionStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&full_resends_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(full_resends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchConnectionStats_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchConnectionStats_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 avg_ping_ms = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_avg_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float packet_loss = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_packet_loss(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float ping_deviation = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_ping_deviation(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 full_resends = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_full_resends(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchConnectionStats_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_ping_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_avg_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float packet_loss = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_packet_loss(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ping_deviation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_ping_deviation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ping_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 full_resends = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_full_resends(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_resends_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchConnectionStats_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional uint32 avg_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_ping_ms(), output);
  }

  // optional float packet_loss = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->packet_loss(), output);
  }

  // optional float ping_deviation = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ping_deviation(), output);
  }

  // optional uint32 full_resends = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->full_resends(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
}

::google::protobuf::uint8* CMsgServerToGCMatchConnectionStats_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional uint32 avg_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_ping_ms(), target);
  }

  // optional float packet_loss = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->packet_loss(), target);
  }

  // optional float ping_deviation = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ping_deviation(), target);
  }

  // optional uint32 full_resends = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->full_resends(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 avg_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_ping_ms());
    }

    // optional float packet_loss = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ping_deviation = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 full_resends = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->full_resends());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchConnectionStats_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_ping_ms_ = from.avg_ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      packet_loss_ = from.packet_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_deviation_ = from.ping_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      full_resends_ = from.full_resends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats_Player::Swap(CMsgServerToGCMatchConnectionStats_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchConnectionStats_Player::InternalSwap(CMsgServerToGCMatchConnectionStats_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(ip_, other->ip_);
  swap(avg_ping_ms_, other->avg_ping_ms_);
  swap(packet_loss_, other->packet_loss_);
  swap(ping_deviation_, other->ping_deviation_);
  swap(full_resends_, other->full_resends_);
}

::google::protobuf::Metadata CMsgServerToGCMatchConnectionStats_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchConnectionStats::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchConnectionStats::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCMatchConnectionStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_region_id(CMsgServerToGCMatchConnectionStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_league_id(CMsgServerToGCMatchConnectionStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cluster_id(CMsgServerToGCMatchConnectionStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchConnectionStats::kMatchIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kRegionIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kLeagueIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kPlayersFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchConnectionStats)
}
CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(const CMsgServerToGCMatchConnectionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchConnectionStats)
}

void CMsgServerToGCMatchConnectionStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCMatchConnectionStats_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_id_));
}

CMsgServerToGCMatchConnectionStats::~CMsgServerToGCMatchConnectionStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchConnectionStats)
  SharedDtor();
}

void CMsgServerToGCMatchConnectionStats::SharedDtor() {
}

void CMsgServerToGCMatchConnectionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchConnectionStats& CMsgServerToGCMatchConnectionStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchConnectionStats_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(cluster_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchConnectionStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchConnectionStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 region_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_region_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCMatchConnectionStats_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional uint32 cluster_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_cluster_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_region_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_cluster_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchConnectionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchConnectionStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_id(), output);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->league_id(), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional uint32 cluster_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchConnectionStats)
}

::google::protobuf::uint8* CMsgServerToGCMatchConnectionStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_id(), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->league_id(), target);
  }

  // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->players(static_cast<int>(i)), target);
  }

  // optional uint32 cluster_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchConnectionStats)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 region_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 cluster_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchConnectionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchConnectionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchConnectionStats)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cluster_id_ = from.cluster_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats::Swap(CMsgServerToGCMatchConnectionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchConnectionStats::InternalSwap(CMsgServerToGCMatchConnectionStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(match_id_, other->match_id_);
  swap(region_id_, other->region_id_);
  swap(league_id_, other->league_id_);
  swap(cluster_id_, other->cluster_id_);
}

::google::protobuf::Metadata CMsgServerToGCMatchConnectionStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerGCUpdateSpectatorCount::InitAsDefaultInstance() {
}
class CMsgServerGCUpdateSpectatorCount::HasBitSetters {
 public:
  static void set_has_spectator_count(CMsgServerGCUpdateSpectatorCount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGCUpdateSpectatorCount::kSpectatorCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGCUpdateSpectatorCount)
}
CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(const CMsgServerGCUpdateSpectatorCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spectator_count_ = from.spectator_count_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGCUpdateSpectatorCount)
}

void CMsgServerGCUpdateSpectatorCount::SharedCtor() {
  spectator_count_ = 0u;
}

CMsgServerGCUpdateSpectatorCount::~CMsgServerGCUpdateSpectatorCount() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGCUpdateSpectatorCount)
  SharedDtor();
}

void CMsgServerGCUpdateSpectatorCount::SharedDtor() {
}

void CMsgServerGCUpdateSpectatorCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerGCUpdateSpectatorCount& CMsgServerGCUpdateSpectatorCount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerGCUpdateSpectatorCount_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerGCUpdateSpectatorCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectator_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerGCUpdateSpectatorCount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerGCUpdateSpectatorCount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 spectator_count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_spectator_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerGCUpdateSpectatorCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spectator_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_spectator_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectator_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGCUpdateSpectatorCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGCUpdateSpectatorCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerGCUpdateSpectatorCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spectator_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spectator_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGCUpdateSpectatorCount)
}

::google::protobuf::uint8* CMsgServerGCUpdateSpectatorCount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spectator_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spectator_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGCUpdateSpectatorCount)
  return target;
}

size_t CMsgServerGCUpdateSpectatorCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 spectator_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spectator_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGCUpdateSpectatorCount* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerGCUpdateSpectatorCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGCUpdateSpectatorCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGCUpdateSpectatorCount)
    MergeFrom(*source);
  }
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spectator_count()) {
    set_spectator_count(from.spectator_count());
  }
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGCUpdateSpectatorCount::IsInitialized() const {
  return true;
}

void CMsgServerGCUpdateSpectatorCount::Swap(CMsgServerGCUpdateSpectatorCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGCUpdateSpectatorCount::InternalSwap(CMsgServerGCUpdateSpectatorCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spectator_count_, other->spectator_count_);
}

::google::protobuf::Metadata CMsgServerGCUpdateSpectatorCount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSerializedCombatLog_Dictionary_DictString::InitAsDefaultInstance() {
}
class CSerializedCombatLog_Dictionary_DictString::HasBitSetters {
 public:
  static void set_has_id(CSerializedCombatLog_Dictionary_DictString* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_value(CSerializedCombatLog_Dictionary_DictString* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSerializedCombatLog_Dictionary_DictString::kIdFieldNumber;
const int CSerializedCombatLog_Dictionary_DictString::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSerializedCombatLog.Dictionary.DictString)
}
CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(const CSerializedCombatLog_Dictionary_DictString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSerializedCombatLog.Dictionary.DictString)
}

void CSerializedCombatLog_Dictionary_DictString::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CSerializedCombatLog_Dictionary_DictString::~CSerializedCombatLog_Dictionary_DictString() {
  // @@protoc_insertion_point(destructor:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  SharedDtor();
}

void CSerializedCombatLog_Dictionary_DictString::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSerializedCombatLog_Dictionary_DictString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSerializedCombatLog_Dictionary_DictString& CSerializedCombatLog_Dictionary_DictString::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSerializedCombatLog_Dictionary_DictString_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CSerializedCombatLog_Dictionary_DictString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSerializedCombatLog_Dictionary_DictString::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSerializedCombatLog_Dictionary_DictString*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSerializedCombatLog_Dictionary_DictString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSerializedCombatLog_Dictionary_DictString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSerializedCombatLog.Dictionary.DictString)
}

::google::protobuf::uint8* CSerializedCombatLog_Dictionary_DictString::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  return target;
}

size_t CSerializedCombatLog_Dictionary_DictString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t CSerializedCombatLog_Dictionary_DictString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary_DictString* source =
      ::google::protobuf::DynamicCastToGenerated<CSerializedCombatLog_Dictionary_DictString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSerializedCombatLog.Dictionary.DictString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSerializedCombatLog.Dictionary.DictString)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary_DictString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CSerializedCombatLog_Dictionary_DictString::Swap(CSerializedCombatLog_Dictionary_DictString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSerializedCombatLog_Dictionary_DictString::InternalSwap(CSerializedCombatLog_Dictionary_DictString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata CSerializedCombatLog_Dictionary_DictString::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSerializedCombatLog_Dictionary::InitAsDefaultInstance() {
}
class CSerializedCombatLog_Dictionary::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSerializedCombatLog_Dictionary::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSerializedCombatLog.Dictionary)
}
CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(const CSerializedCombatLog_Dictionary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSerializedCombatLog.Dictionary)
}

void CSerializedCombatLog_Dictionary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto.base);
}

CSerializedCombatLog_Dictionary::~CSerializedCombatLog_Dictionary() {
  // @@protoc_insertion_point(destructor:proto.dota.CSerializedCombatLog.Dictionary)
  SharedDtor();
}

void CSerializedCombatLog_Dictionary::SharedDtor() {
}

void CSerializedCombatLog_Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSerializedCombatLog_Dictionary& CSerializedCombatLog_Dictionary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSerializedCombatLog_Dictionary_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CSerializedCombatLog_Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSerializedCombatLog.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSerializedCombatLog_Dictionary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSerializedCombatLog_Dictionary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSerializedCombatLog_Dictionary_DictString::_InternalParse;
          object = msg->add_strings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSerializedCombatLog_Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSerializedCombatLog.Dictionary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSerializedCombatLog.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSerializedCombatLog.Dictionary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSerializedCombatLog_Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSerializedCombatLog.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->strings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->strings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSerializedCombatLog.Dictionary)
}

::google::protobuf::uint8* CSerializedCombatLog_Dictionary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSerializedCombatLog.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->strings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->strings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSerializedCombatLog.Dictionary)
  return target;
}

size_t CSerializedCombatLog_Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSerializedCombatLog.Dictionary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->strings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->strings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSerializedCombatLog_Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary* source =
      ::google::protobuf::DynamicCastToGenerated<CSerializedCombatLog_Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSerializedCombatLog.Dictionary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSerializedCombatLog.Dictionary)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary::MergeFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->strings())) return false;
  return true;
}

void CSerializedCombatLog_Dictionary::Swap(CSerializedCombatLog_Dictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSerializedCombatLog_Dictionary::InternalSwap(CSerializedCombatLog_Dictionary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&strings_)->InternalSwap(CastToBase(&other->strings_));
}

::google::protobuf::Metadata CSerializedCombatLog_Dictionary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSerializedCombatLog::InitAsDefaultInstance() {
  ::proto::dota::_CSerializedCombatLog_default_instance_._instance.get_mutable()->dictionary_ = const_cast< ::proto::dota::CSerializedCombatLog_Dictionary*>(
      ::proto::dota::CSerializedCombatLog_Dictionary::internal_default_instance());
}
class CSerializedCombatLog::HasBitSetters {
 public:
  static void set_has_version(CSerializedCombatLog* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CSerializedCombatLog_Dictionary& dictionary(const CSerializedCombatLog* msg);
  static void set_has_dictionary(CSerializedCombatLog* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CSerializedCombatLog_Dictionary&
CSerializedCombatLog::HasBitSetters::dictionary(const CSerializedCombatLog* msg) {
  return *msg->dictionary_;
}
void CSerializedCombatLog::clear_entries() {
  entries_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSerializedCombatLog::kVersionFieldNumber;
const int CSerializedCombatLog::kDictionaryFieldNumber;
const int CSerializedCombatLog::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSerializedCombatLog::CSerializedCombatLog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSerializedCombatLog)
}
CSerializedCombatLog::CSerializedCombatLog(const CSerializedCombatLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dictionary()) {
    dictionary_ = new ::proto::dota::CSerializedCombatLog_Dictionary(*from.dictionary_);
  } else {
    dictionary_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSerializedCombatLog)
}

void CSerializedCombatLog::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSerializedCombatLog_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&dictionary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&dictionary_)) + sizeof(version_));
}

CSerializedCombatLog::~CSerializedCombatLog() {
  // @@protoc_insertion_point(destructor:proto.dota.CSerializedCombatLog)
  SharedDtor();
}

void CSerializedCombatLog::SharedDtor() {
  if (this != internal_default_instance()) delete dictionary_;
}

void CSerializedCombatLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSerializedCombatLog& CSerializedCombatLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSerializedCombatLog_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CSerializedCombatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSerializedCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dictionary_ != nullptr);
    dictionary_->Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSerializedCombatLog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSerializedCombatLog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CSerializedCombatLog_Dictionary::_InternalParse;
        object = msg->mutable_dictionary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTACombatLogEntry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSerializedCombatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSerializedCombatLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSerializedCombatLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSerializedCombatLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSerializedCombatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSerializedCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::dictionary(this), output);
  }

  // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSerializedCombatLog)
}

::google::protobuf::uint8* CSerializedCombatLog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSerializedCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::dictionary(this), target);
  }

  // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSerializedCombatLog)
  return target;
}

size_t CSerializedCombatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSerializedCombatLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dictionary_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSerializedCombatLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog* source =
      ::google::protobuf::DynamicCastToGenerated<CSerializedCombatLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSerializedCombatLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSerializedCombatLog)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog::MergeFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dictionary()->::proto::dota::CSerializedCombatLog_Dictionary::MergeFrom(from.dictionary());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSerializedCombatLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog::CopyFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog::IsInitialized() const {
  if (has_dictionary()) {
    if (!this->dictionary_->IsInitialized()) return false;
  }
  return true;
}

void CSerializedCombatLog::Swap(CSerializedCombatLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSerializedCombatLog::InternalSwap(CSerializedCombatLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(dictionary_, other->dictionary_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata CSerializedCombatLog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCGetAdditionalEquips::InitAsDefaultInstance() {
}
class CMsgServerToGCGetAdditionalEquips::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetAdditionalEquips::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetAdditionalEquips::CMsgServerToGCGetAdditionalEquips()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetAdditionalEquips)
}
CMsgServerToGCGetAdditionalEquips::CMsgServerToGCGetAdditionalEquips(const CMsgServerToGCGetAdditionalEquips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetAdditionalEquips)
}

void CMsgServerToGCGetAdditionalEquips::SharedCtor() {
}

CMsgServerToGCGetAdditionalEquips::~CMsgServerToGCGetAdditionalEquips() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetAdditionalEquips)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquips::SharedDtor() {
}

void CMsgServerToGCGetAdditionalEquips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCGetAdditionalEquips& CMsgServerToGCGetAdditionalEquips::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCGetAdditionalEquips_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCGetAdditionalEquips::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCGetAdditionalEquips::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCGetAdditionalEquips*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCGetAdditionalEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetAdditionalEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetAdditionalEquips)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCGetAdditionalEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetAdditionalEquips)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquips::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetAdditionalEquips)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetAdditionalEquips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquips* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCGetAdditionalEquips>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetAdditionalEquips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetAdditionalEquips)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgServerToGCGetAdditionalEquips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquips::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquips::Swap(CMsgServerToGCGetAdditionalEquips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetAdditionalEquips::InternalSwap(CMsgServerToGCGetAdditionalEquips* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquips::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InitAsDefaultInstance() {
}
class CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::clear_equips() {
  equips_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::kAccountIdFieldNumber;
const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}
CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto.base);
  account_id_ = 0u;
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::~CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedDtor() {
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CAdditionalEquipSlot::_InternalParse;
          object = msg->add_equips();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->equips(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->equips(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->equips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equips(static_cast<int>(i)));
    }
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Swap(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InternalSwap(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&equips_)->InternalSwap(CastToBase(&other->equips_));
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCGetAdditionalEquipsResponse::InitAsDefaultInstance() {
}
class CMsgServerToGCGetAdditionalEquipsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetAdditionalEquipsResponse::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
}
CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse(const CMsgServerToGCGetAdditionalEquipsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCGetAdditionalEquipsResponse_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgServerToGCGetAdditionalEquipsResponse::~CMsgServerToGCGetAdditionalEquipsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedDtor() {
}

void CMsgServerToGCGetAdditionalEquipsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCGetAdditionalEquipsResponse& CMsgServerToGCGetAdditionalEquipsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCGetAdditionalEquipsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCGetAdditionalEquipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCGetAdditionalEquipsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCGetAdditionalEquipsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::_InternalParse;
          object = msg->add_equips();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCGetAdditionalEquipsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCGetAdditionalEquipsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->equips(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquipsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->equips(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->equips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equips(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCGetAdditionalEquipsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse::Swap(CMsgServerToGCGetAdditionalEquipsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetAdditionalEquipsResponse::InternalSwap(CMsgServerToGCGetAdditionalEquipsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&equips_)->InternalSwap(CastToBase(&other->equips_));
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquipsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCGetProfileCard::InitAsDefaultInstance() {
}
class CMsgServerToGCGetProfileCard::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetProfileCard::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetProfileCard)
}
CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard(const CMsgServerToGCGetProfileCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetProfileCard)
}

void CMsgServerToGCGetProfileCard::SharedCtor() {
}

CMsgServerToGCGetProfileCard::~CMsgServerToGCGetProfileCard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetProfileCard)
  SharedDtor();
}

void CMsgServerToGCGetProfileCard::SharedDtor() {
}

void CMsgServerToGCGetProfileCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCGetProfileCard& CMsgServerToGCGetProfileCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCGetProfileCard_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCGetProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCGetProfileCard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCGetProfileCard*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCGetProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetProfileCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetProfileCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCGetProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetProfileCard)
}

::google::protobuf::uint8* CMsgServerToGCGetProfileCard::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetProfileCard)
  return target;
}

size_t CMsgServerToGCGetProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetProfileCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCard* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCGetProfileCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetProfileCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetProfileCard)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCard::MergeFrom(const CMsgServerToGCGetProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const CMsgServerToGCGetProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCard::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetProfileCard::Swap(CMsgServerToGCGetProfileCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetProfileCard::InternalSwap(CMsgServerToGCGetProfileCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
}

::google::protobuf::Metadata CMsgServerToGCGetProfileCard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCGetProfileCardResponse::InitAsDefaultInstance() {
}
class CMsgServerToGCGetProfileCardResponse::HasBitSetters {
 public:
};

void CMsgServerToGCGetProfileCardResponse::clear_cards() {
  cards_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetProfileCardResponse::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetProfileCardResponse)
}
CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse(const CMsgServerToGCGetProfileCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetProfileCardResponse)
}

void CMsgServerToGCGetProfileCardResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCGetProfileCardResponse_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgServerToGCGetProfileCardResponse::~CMsgServerToGCGetProfileCardResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetProfileCardResponse)
  SharedDtor();
}

void CMsgServerToGCGetProfileCardResponse::SharedDtor() {
}

void CMsgServerToGCGetProfileCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCGetProfileCardResponse& CMsgServerToGCGetProfileCardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCGetProfileCardResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCGetProfileCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCGetProfileCardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCGetProfileCardResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAProfileCard::_InternalParse;
          object = msg->add_cards();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCGetProfileCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetProfileCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetProfileCardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCGetProfileCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cards(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetProfileCardResponse)
}

::google::protobuf::uint8* CMsgServerToGCGetProfileCardResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cards(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetProfileCardResponse)
  return target;
}

size_t CMsgServerToGCGetProfileCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cards(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCGetProfileCardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetProfileCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetProfileCardResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const CMsgServerToGCGetProfileCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const CMsgServerToGCGetProfileCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCardResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetProfileCardResponse::Swap(CMsgServerToGCGetProfileCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetProfileCardResponse::InternalSwap(CMsgServerToGCGetProfileCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cards_)->InternalSwap(CastToBase(&other->cards_));
}

::google::protobuf::Metadata CMsgServerToGCGetProfileCardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCVictoryPredictions_Record::InitAsDefaultInstance() {
}
class CMsgServerToGCVictoryPredictions_Record::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerToGCVictoryPredictions_Record* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_id(CMsgServerToGCVictoryPredictions_Record* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCVictoryPredictions_Record::kAccountIdFieldNumber;
const int CMsgServerToGCVictoryPredictions_Record::kItemIdFieldNumber;
const int CMsgServerToGCVictoryPredictions_Record::kItemIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCVictoryPredictions.Record)
}
CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(const CMsgServerToGCVictoryPredictions_Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCVictoryPredictions.Record)
}

void CMsgServerToGCVictoryPredictions_Record::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgServerToGCVictoryPredictions_Record::~CMsgServerToGCVictoryPredictions_Record() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  SharedDtor();
}

void CMsgServerToGCVictoryPredictions_Record::SharedDtor() {
}

void CMsgServerToGCVictoryPredictions_Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCVictoryPredictions_Record& CMsgServerToGCVictoryPredictions_Record::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCVictoryPredictions_Record_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCVictoryPredictions_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCVictoryPredictions_Record::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCVictoryPredictions_Record*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 item_ids = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_item_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_item_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCVictoryPredictions_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 item_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCVictoryPredictions_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // repeated uint64 item_ids = 5;
  for (int i = 0, n = this->item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->item_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCVictoryPredictions.Record)
}

::google::protobuf::uint8* CMsgServerToGCVictoryPredictions_Record::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // repeated uint64 item_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->item_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  return target;
}

size_t CMsgServerToGCVictoryPredictions_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions_Record* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCVictoryPredictions_Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCVictoryPredictions.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCVictoryPredictions.Record)
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions_Record::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions_Record::Swap(CMsgServerToGCVictoryPredictions_Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCVictoryPredictions_Record::InternalSwap(CMsgServerToGCVictoryPredictions_Record* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(item_id_, other->item_id_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgServerToGCVictoryPredictions_Record::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCVictoryPredictions::InitAsDefaultInstance() {
}
class CMsgServerToGCVictoryPredictions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCVictoryPredictions::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCVictoryPredictions)
}
CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(const CMsgServerToGCVictoryPredictions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCVictoryPredictions)
}

void CMsgServerToGCVictoryPredictions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCVictoryPredictions_dota_5fgcmessages_5fserver_2eproto.base);
}

CMsgServerToGCVictoryPredictions::~CMsgServerToGCVictoryPredictions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCVictoryPredictions)
  SharedDtor();
}

void CMsgServerToGCVictoryPredictions::SharedDtor() {
}

void CMsgServerToGCVictoryPredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCVictoryPredictions& CMsgServerToGCVictoryPredictions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCVictoryPredictions_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCVictoryPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCVictoryPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCVictoryPredictions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCVictoryPredictions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCVictoryPredictions_Record::_InternalParse;
          object = msg->add_records();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCVictoryPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCVictoryPredictions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCVictoryPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCVictoryPredictions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCVictoryPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCVictoryPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCVictoryPredictions)
}

::google::protobuf::uint8* CMsgServerToGCVictoryPredictions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCVictoryPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->records(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCVictoryPredictions)
  return target;
}

size_t CMsgServerToGCVictoryPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCVictoryPredictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCVictoryPredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCVictoryPredictions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCVictoryPredictions)
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions::Swap(CMsgServerToGCVictoryPredictions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCVictoryPredictions::InternalSwap(CMsgServerToGCVictoryPredictions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
}

::google::protobuf::Metadata CMsgServerToGCVictoryPredictions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSuspiciousActivity::InitAsDefaultInstance() {
}
class CMsgSuspiciousActivity::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_activity(CMsgSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_intdata1(CMsgSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_intdata2(CMsgSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time(CMsgSuspiciousActivity* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSuspiciousActivity::kAccountIdFieldNumber;
const int CMsgSuspiciousActivity::kActivityFieldNumber;
const int CMsgSuspiciousActivity::kIntdata1FieldNumber;
const int CMsgSuspiciousActivity::kIntdata2FieldNumber;
const int CMsgSuspiciousActivity::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSuspiciousActivity::CMsgSuspiciousActivity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSuspiciousActivity)
}
CMsgSuspiciousActivity::CMsgSuspiciousActivity(const CMsgSuspiciousActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&activity_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(activity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSuspiciousActivity)
}

void CMsgSuspiciousActivity::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(time_));
  activity_ = 1;
}

CMsgSuspiciousActivity::~CMsgSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSuspiciousActivity)
  SharedDtor();
}

void CMsgSuspiciousActivity::SharedDtor() {
}

void CMsgSuspiciousActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSuspiciousActivity& CMsgSuspiciousActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSuspiciousActivity_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSuspiciousActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_));
    activity_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSuspiciousActivity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSuspiciousActivity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ESuspiciousActivity_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_activity(static_cast<::proto::dota::ESuspiciousActivity>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 intdata1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_intdata1(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint32 intdata2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_intdata2(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSuspiciousActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSuspiciousActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ESuspiciousActivity_IsValid(value)) {
            set_activity(static_cast< ::proto::dota::ESuspiciousActivity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 intdata1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_intdata1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intdata1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 intdata2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_intdata2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intdata2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSuspiciousActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSuspiciousActivity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSuspiciousActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->activity(), output);
  }

  // optional sint32 intdata1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->intdata1(), output);
  }

  // optional sint32 intdata2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->intdata2(), output);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSuspiciousActivity)
}

::google::protobuf::uint8* CMsgSuspiciousActivity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->activity(), target);
  }

  // optional sint32 intdata1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->intdata1(), target);
  }

  // optional sint32 intdata2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->intdata2(), target);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSuspiciousActivity)
  return target;
}

size_t CMsgSuspiciousActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSuspiciousActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional sint32 intdata1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intdata1());
    }

    // optional sint32 intdata2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intdata2());
    }

    // optional uint32 time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSuspiciousActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSuspiciousActivity* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSuspiciousActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSuspiciousActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSuspiciousActivity)
    MergeFrom(*source);
  }
}

void CMsgSuspiciousActivity::MergeFrom(const CMsgSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      intdata1_ = from.intdata1_;
    }
    if (cached_has_bits & 0x00000004u) {
      intdata2_ = from.intdata2_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      activity_ = from.activity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSuspiciousActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSuspiciousActivity::CopyFrom(const CMsgSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSuspiciousActivity::IsInitialized() const {
  return true;
}

void CMsgSuspiciousActivity::Swap(CMsgSuspiciousActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSuspiciousActivity::InternalSwap(CMsgSuspiciousActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(intdata1_, other->intdata1_);
  swap(intdata2_, other->intdata2_);
  swap(time_, other->time_);
  swap(activity_, other->activity_);
}

::google::protobuf::Metadata CMsgSuspiciousActivity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCRequestStatus::InitAsDefaultInstance() {
}
class CMsgServerToGCRequestStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRequestStatus)
}
CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(const CMsgServerToGCRequestStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRequestStatus)
}

void CMsgServerToGCRequestStatus::SharedCtor() {
}

CMsgServerToGCRequestStatus::~CMsgServerToGCRequestStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRequestStatus)
  SharedDtor();
}

void CMsgServerToGCRequestStatus::SharedDtor() {
}

void CMsgServerToGCRequestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCRequestStatus& CMsgServerToGCRequestStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCRequestStatus_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCRequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRequestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCRequestStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCRequestStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCRequestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRequestStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRequestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRequestStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCRequestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRequestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRequestStatus)
}

::google::protobuf::uint8* CMsgServerToGCRequestStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRequestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRequestStatus)
  return target;
}

size_t CMsgServerToGCRequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRequestStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCRequestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRequestStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRequestStatus)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus::MergeFrom(const CMsgServerToGCRequestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgServerToGCRequestStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus::CopyFrom(const CMsgServerToGCRequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus::Swap(CMsgServerToGCRequestStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRequestStatus::InternalSwap(CMsgServerToGCRequestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgServerToGCRequestStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCRequestStatus_Response::InitAsDefaultInstance() {
}
class CMsgServerToGCRequestStatus_Response::HasBitSetters {
 public:
  static void set_has_response(CMsgServerToGCRequestStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCRequestStatus_Response::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRequestStatus_Response)
}
CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(const CMsgServerToGCRequestStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRequestStatus_Response)
}

void CMsgServerToGCRequestStatus_Response::SharedCtor() {
  response_ = 0u;
}

CMsgServerToGCRequestStatus_Response::~CMsgServerToGCRequestStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRequestStatus_Response)
  SharedDtor();
}

void CMsgServerToGCRequestStatus_Response::SharedDtor() {
}

void CMsgServerToGCRequestStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCRequestStatus_Response& CMsgServerToGCRequestStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCRequestStatus_Response_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCRequestStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCRequestStatus_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCRequestStatus_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCRequestStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRequestStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRequestStatus_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCRequestStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRequestStatus_Response)
}

::google::protobuf::uint8* CMsgServerToGCRequestStatus_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRequestStatus_Response)
  return target;
}

size_t CMsgServerToGCRequestStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 response = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCRequestStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRequestStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRequestStatus_Response)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    set_response(from.response());
  }
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus_Response::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus_Response::Swap(CMsgServerToGCRequestStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRequestStatus_Response::InternalSwap(CMsgServerToGCRequestStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_, other->response_);
}

::google::protobuf::Metadata CMsgServerToGCRequestStatus_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutAssassinMiniGameInfo::InitAsDefaultInstance() {
}
class CMsgSignOutAssassinMiniGameInfo::HasBitSetters {
 public:
  static void set_has_assassin_won(CMsgSignOutAssassinMiniGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_target_hero_id(CMsgSignOutAssassinMiniGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_contract_completed(CMsgSignOutAssassinMiniGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_contract_complete_time(CMsgSignOutAssassinMiniGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_pa_is_radiant(CMsgSignOutAssassinMiniGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutAssassinMiniGameInfo::kWinningPlayersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kLosingPlayersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kArcanaOwnersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kAssassinWonFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kTargetHeroIdFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kContractCompletedFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kContractCompleteTimeFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kPaIsRadiantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutAssassinMiniGameInfo)
}
CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(const CMsgSignOutAssassinMiniGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      winning_players_(from.winning_players_),
      losing_players_(from.losing_players_),
      arcana_owners_(from.arcana_owners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_hero_id_, &from.target_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_complete_time_) -
    reinterpret_cast<char*>(&target_hero_id_)) + sizeof(contract_complete_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutAssassinMiniGameInfo)
}

void CMsgSignOutAssassinMiniGameInfo::SharedCtor() {
  ::memset(&target_hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contract_complete_time_) -
      reinterpret_cast<char*>(&target_hero_id_)) + sizeof(contract_complete_time_));
}

CMsgSignOutAssassinMiniGameInfo::~CMsgSignOutAssassinMiniGameInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  SharedDtor();
}

void CMsgSignOutAssassinMiniGameInfo::SharedDtor() {
}

void CMsgSignOutAssassinMiniGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutAssassinMiniGameInfo& CMsgSignOutAssassinMiniGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutAssassinMiniGameInfo_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutAssassinMiniGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winning_players_.Clear();
  losing_players_.Clear();
  arcana_owners_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&target_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_complete_time_) -
        reinterpret_cast<char*>(&target_hero_id_)) + sizeof(contract_complete_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutAssassinMiniGameInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutAssassinMiniGameInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 winning_players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_winning_players(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_winning_players();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 losing_players = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_losing_players(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_losing_players();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 arcana_owners = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 25) {
          do {
            msg->add_arcana_owners(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_arcana_owners();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool assassin_won = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_assassin_won(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_hero_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_target_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool contract_completed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_contract_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float contract_complete_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_contract_complete_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool pa_is_radiant = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_pa_is_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutAssassinMiniGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 winning_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_winning_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_winning_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 losing_players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_losing_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_losing_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 arcana_owners = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_arcana_owners())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_arcana_owners())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool assassin_won = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_assassin_won(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assassin_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_hero_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_target_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool contract_completed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_contract_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contract_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float contract_complete_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_contract_complete_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contract_complete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pa_is_radiant = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_pa_is_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pa_is_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutAssassinMiniGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  for (int i = 0, n = this->winning_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->winning_players(i), output);
  }

  // repeated fixed64 losing_players = 2;
  for (int i = 0, n = this->losing_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->losing_players(i), output);
  }

  // repeated fixed64 arcana_owners = 3;
  for (int i = 0, n = this->arcana_owners_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->arcana_owners(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool assassin_won = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->assassin_won(), output);
  }

  // optional uint32 target_hero_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_hero_id(), output);
  }

  // optional bool contract_completed = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contract_completed(), output);
  }

  // optional float contract_complete_time = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->contract_complete_time(), output);
  }

  // optional bool pa_is_radiant = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pa_is_radiant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutAssassinMiniGameInfo)
}

::google::protobuf::uint8* CMsgSignOutAssassinMiniGameInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->winning_players_, target);

  // repeated fixed64 losing_players = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->losing_players_, target);

  // repeated fixed64 arcana_owners = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->arcana_owners_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool assassin_won = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->assassin_won(), target);
  }

  // optional uint32 target_hero_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_hero_id(), target);
  }

  // optional bool contract_completed = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contract_completed(), target);
  }

  // optional float contract_complete_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->contract_complete_time(), target);
  }

  // optional bool pa_is_radiant = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pa_is_radiant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  return target;
}

size_t CMsgSignOutAssassinMiniGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->winning_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->winning_players_size());
    total_size += data_size;
  }

  // repeated fixed64 losing_players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->losing_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->losing_players_size());
    total_size += data_size;
  }

  // repeated fixed64 arcana_owners = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->arcana_owners_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->arcana_owners_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 target_hero_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_id());
    }

    // optional bool assassin_won = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool contract_completed = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pa_is_radiant = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float contract_complete_time = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutAssassinMiniGameInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutAssassinMiniGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutAssassinMiniGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutAssassinMiniGameInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winning_players_.MergeFrom(from.winning_players_);
  losing_players_.MergeFrom(from.losing_players_);
  arcana_owners_.MergeFrom(from.arcana_owners_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      target_hero_id_ = from.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      assassin_won_ = from.assassin_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      contract_completed_ = from.contract_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      pa_is_radiant_ = from.pa_is_radiant_;
    }
    if (cached_has_bits & 0x00000010u) {
      contract_complete_time_ = from.contract_complete_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutAssassinMiniGameInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutAssassinMiniGameInfo::Swap(CMsgSignOutAssassinMiniGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutAssassinMiniGameInfo::InternalSwap(CMsgSignOutAssassinMiniGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  winning_players_.InternalSwap(&other->winning_players_);
  losing_players_.InternalSwap(&other->losing_players_);
  arcana_owners_.InternalSwap(&other->arcana_owners_);
  swap(target_hero_id_, other->target_hero_id_);
  swap(assassin_won_, other->assassin_won_);
  swap(contract_completed_, other->contract_completed_);
  swap(pa_is_radiant_, other->pa_is_radiant_);
  swap(contract_complete_time_, other->contract_complete_time_);
}

::google::protobuf::Metadata CMsgSignOutAssassinMiniGameInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCGetIngameEventData::InitAsDefaultInstance() {
}
class CMsgServerToGCGetIngameEventData::HasBitSetters {
 public:
  static void set_has_event(CMsgServerToGCGetIngameEventData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetIngameEventData::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetIngameEventData)
}
CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData(const CMsgServerToGCGetIngameEventData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetIngameEventData)
}

void CMsgServerToGCGetIngameEventData::SharedCtor() {
  event_ = 0;
}

CMsgServerToGCGetIngameEventData::~CMsgServerToGCGetIngameEventData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetIngameEventData)
  SharedDtor();
}

void CMsgServerToGCGetIngameEventData::SharedDtor() {
}

void CMsgServerToGCGetIngameEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCGetIngameEventData& CMsgServerToGCGetIngameEventData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCGetIngameEventData_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCGetIngameEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetIngameEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCGetIngameEventData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCGetIngameEventData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCGetIngameEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetIngameEventData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetIngameEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetIngameEventData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCGetIngameEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetIngameEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetIngameEventData)
}

::google::protobuf::uint8* CMsgServerToGCGetIngameEventData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetIngameEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetIngameEventData)
  return target;
}

size_t CMsgServerToGCGetIngameEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetIngameEventData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetIngameEventData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCGetIngameEventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetIngameEventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetIngameEventData)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const CMsgServerToGCGetIngameEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    set_event(from.event());
  }
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const CMsgServerToGCGetIngameEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetIngameEventData::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetIngameEventData::Swap(CMsgServerToGCGetIngameEventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetIngameEventData::InternalSwap(CMsgServerToGCGetIngameEventData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

::google::protobuf::Metadata CMsgServerToGCGetIngameEventData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerIngameEventDataOraclePA::InitAsDefaultInstance() {
}
class CMsgGCToServerIngameEventDataOraclePA::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerIngameEventDataOraclePA::kTargetHeroIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
}
CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA(const CMsgGCToServerIngameEventDataOraclePA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_hero_ids_(from.target_hero_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
}

void CMsgGCToServerIngameEventDataOraclePA::SharedCtor() {
}

CMsgGCToServerIngameEventDataOraclePA::~CMsgGCToServerIngameEventDataOraclePA() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  SharedDtor();
}

void CMsgGCToServerIngameEventDataOraclePA::SharedDtor() {
}

void CMsgGCToServerIngameEventDataOraclePA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerIngameEventDataOraclePA& CMsgGCToServerIngameEventDataOraclePA::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerIngameEventDataOraclePA_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerIngameEventDataOraclePA::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_hero_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerIngameEventDataOraclePA::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerIngameEventDataOraclePA*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 target_hero_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_target_hero_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_target_hero_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerIngameEventDataOraclePA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 target_hero_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_target_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerIngameEventDataOraclePA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  for (int i = 0, n = this->target_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->target_hero_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
}

::google::protobuf::uint8* CMsgGCToServerIngameEventDataOraclePA::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->target_hero_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  return target;
}

size_t CMsgGCToServerIngameEventDataOraclePA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->target_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->target_hero_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerIngameEventDataOraclePA* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerIngameEventDataOraclePA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
    MergeFrom(*source);
  }
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_hero_ids_.MergeFrom(from.target_hero_ids_);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerIngameEventDataOraclePA::IsInitialized() const {
  return true;
}

void CMsgGCToServerIngameEventDataOraclePA::Swap(CMsgGCToServerIngameEventDataOraclePA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerIngameEventDataOraclePA::InternalSwap(CMsgGCToServerIngameEventDataOraclePA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_hero_ids_.InternalSwap(&other->target_hero_ids_);
}

::google::protobuf::Metadata CMsgGCToServerIngameEventDataOraclePA::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCKillSummaries_KillSummary::InitAsDefaultInstance() {
}
class CMsgServerToGCKillSummaries_KillSummary::HasBitSetters {
 public:
  static void set_has_killer_hero_id(CMsgServerToGCKillSummaries_KillSummary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_victim_hero_id(CMsgServerToGCKillSummaries_KillSummary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_kill_count(CMsgServerToGCKillSummaries_KillSummary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCKillSummaries_KillSummary::kKillerHeroIdFieldNumber;
const int CMsgServerToGCKillSummaries_KillSummary::kVictimHeroIdFieldNumber;
const int CMsgServerToGCKillSummaries_KillSummary::kKillCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
}
CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(const CMsgServerToGCKillSummaries_KillSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&killer_hero_id_, &from.killer_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_count_) -
    reinterpret_cast<char*>(&killer_hero_id_)) + sizeof(kill_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
}

void CMsgServerToGCKillSummaries_KillSummary::SharedCtor() {
  ::memset(&killer_hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_count_) -
      reinterpret_cast<char*>(&killer_hero_id_)) + sizeof(kill_count_));
}

CMsgServerToGCKillSummaries_KillSummary::~CMsgServerToGCKillSummaries_KillSummary() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  SharedDtor();
}

void CMsgServerToGCKillSummaries_KillSummary::SharedDtor() {
}

void CMsgServerToGCKillSummaries_KillSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCKillSummaries_KillSummary& CMsgServerToGCKillSummaries_KillSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCKillSummaries_KillSummary_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCKillSummaries_KillSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&killer_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kill_count_) -
        reinterpret_cast<char*>(&killer_hero_id_)) + sizeof(kill_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCKillSummaries_KillSummary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCKillSummaries_KillSummary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 killer_hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_killer_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 victim_hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_victim_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kill_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_kill_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCKillSummaries_KillSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_killer_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim_hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_victim_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_kill_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCKillSummaries_KillSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_hero_id(), output);
  }

  // optional uint32 victim_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->victim_hero_id(), output);
  }

  // optional uint32 kill_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
}

::google::protobuf::uint8* CMsgServerToGCKillSummaries_KillSummary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_hero_id(), target);
  }

  // optional uint32 victim_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->victim_hero_id(), target);
  }

  // optional uint32 kill_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  return target;
}

size_t CMsgServerToGCKillSummaries_KillSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 killer_hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_hero_id());
    }

    // optional uint32 victim_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_hero_id());
    }

    // optional uint32 kill_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries_KillSummary* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCKillSummaries_KillSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      killer_hero_id_ = from.killer_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      victim_hero_id_ = from.victim_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kill_count_ = from.kill_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries_KillSummary::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries_KillSummary::Swap(CMsgServerToGCKillSummaries_KillSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCKillSummaries_KillSummary::InternalSwap(CMsgServerToGCKillSummaries_KillSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(killer_hero_id_, other->killer_hero_id_);
  swap(victim_hero_id_, other->victim_hero_id_);
  swap(kill_count_, other->kill_count_);
}

::google::protobuf::Metadata CMsgServerToGCKillSummaries_KillSummary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCKillSummaries::InitAsDefaultInstance() {
}
class CMsgServerToGCKillSummaries::HasBitSetters {
 public:
  static void set_has_ingameevent_id(CMsgServerToGCKillSummaries* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCKillSummaries::kIngameeventIdFieldNumber;
const int CMsgServerToGCKillSummaries::kSummariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCKillSummaries)
}
CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(const CMsgServerToGCKillSummaries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      summaries_(from.summaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ingameevent_id_ = from.ingameevent_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCKillSummaries)
}

void CMsgServerToGCKillSummaries::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCKillSummaries_dota_5fgcmessages_5fserver_2eproto.base);
  ingameevent_id_ = 0u;
}

CMsgServerToGCKillSummaries::~CMsgServerToGCKillSummaries() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCKillSummaries)
  SharedDtor();
}

void CMsgServerToGCKillSummaries::SharedDtor() {
}

void CMsgServerToGCKillSummaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCKillSummaries& CMsgServerToGCKillSummaries::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCKillSummaries_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCKillSummaries::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCKillSummaries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summaries_.Clear();
  ingameevent_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCKillSummaries::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCKillSummaries*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ingameevent_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ingameevent_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCKillSummaries_KillSummary::_InternalParse;
          object = msg->add_summaries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCKillSummaries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCKillSummaries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ingameevent_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ingameevent_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingameevent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_summaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCKillSummaries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCKillSummaries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCKillSummaries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCKillSummaries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ingameevent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ingameevent_id(), output);
  }

  // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->summaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->summaries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCKillSummaries)
}

::google::protobuf::uint8* CMsgServerToGCKillSummaries::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCKillSummaries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ingameevent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ingameevent_id(), target);
  }

  // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->summaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->summaries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCKillSummaries)
  return target;
}

size_t CMsgServerToGCKillSummaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCKillSummaries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->summaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->summaries(static_cast<int>(i)));
    }
  }

  // optional uint32 ingameevent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ingameevent_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCKillSummaries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCKillSummaries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCKillSummaries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCKillSummaries)
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries::MergeFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summaries_.MergeFrom(from.summaries_);
  if (from.has_ingameevent_id()) {
    set_ingameevent_id(from.ingameevent_id());
  }
}

void CMsgServerToGCKillSummaries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries::CopyFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries::Swap(CMsgServerToGCKillSummaries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCKillSummaries::InternalSwap(CMsgServerToGCKillSummaries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&summaries_)->InternalSwap(CastToBase(&other->summaries_));
  swap(ingameevent_id_, other->ingameevent_id_);
}

::google::protobuf::Metadata CMsgServerToGCKillSummaries::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerPredictionResult_Prediction::InitAsDefaultInstance() {
}
class CMsgGCToServerPredictionResult_Prediction::HasBitSetters {
 public:
  static void set_has_item_def(CMsgGCToServerPredictionResult_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_correct(CMsgGCToServerPredictionResult_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_num_fails(CMsgGCToServerPredictionResult_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_result(CMsgGCToServerPredictionResult_Prediction* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPredictionResult_Prediction::kItemDefFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kNumCorrectFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kNumFailsFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kResultFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kGrantedItemDefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPredictionResult.Prediction)
}
CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(const CMsgGCToServerPredictionResult_Prediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      granted_item_defs_(from.granted_item_defs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPredictionResult.Prediction)
}

void CMsgGCToServerPredictionResult_Prediction::SharedCtor() {
  ::memset(&item_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_fails_) -
      reinterpret_cast<char*>(&item_def_)) + sizeof(num_fails_));
  result_ = 1;
}

CMsgGCToServerPredictionResult_Prediction::~CMsgGCToServerPredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  SharedDtor();
}

void CMsgGCToServerPredictionResult_Prediction::SharedDtor() {
}

void CMsgGCToServerPredictionResult_Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerPredictionResult_Prediction& CMsgGCToServerPredictionResult_Prediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerPredictionResult_Prediction_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerPredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  granted_item_defs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fails_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(num_fails_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerPredictionResult_Prediction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerPredictionResult_Prediction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_def(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_correct = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_correct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_fails = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_fails(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 granted_item_defs = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_granted_item_defs(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_granted_item_defs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerPredictionResult_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_def(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_correct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_correct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fails = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_fails(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 granted_item_defs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_granted_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerPredictionResult_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_correct(), output);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_fails(), output);
  }

  // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->granted_item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->granted_item_defs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPredictionResult.Prediction)
}

::google::protobuf::uint8* CMsgGCToServerPredictionResult_Prediction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_fails(), target);
  }

  // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->granted_item_defs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  return target;
}

size_t CMsgGCToServerPredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->granted_item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->granted_item_defs_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 num_correct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_correct());
    }

    // optional uint32 num_fails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fails());
    }

    // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult_Prediction* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerPredictionResult_Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPredictionResult.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPredictionResult.Prediction)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_correct_ = from.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_fails_ = from.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult_Prediction::Swap(CMsgGCToServerPredictionResult_Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPredictionResult_Prediction::InternalSwap(CMsgGCToServerPredictionResult_Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  granted_item_defs_.InternalSwap(&other->granted_item_defs_);
  swap(item_def_, other->item_def_);
  swap(num_correct_, other->num_correct_);
  swap(num_fails_, other->num_fails_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGCToServerPredictionResult_Prediction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToServerPredictionResult::InitAsDefaultInstance() {
}
class CMsgGCToServerPredictionResult::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGCToServerPredictionResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgGCToServerPredictionResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_correct(CMsgGCToServerPredictionResult* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPredictionResult::kAccountIdFieldNumber;
const int CMsgGCToServerPredictionResult::kMatchIdFieldNumber;
const int CMsgGCToServerPredictionResult::kCorrectFieldNumber;
const int CMsgGCToServerPredictionResult::kPredictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPredictionResult)
}
CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(const CMsgGCToServerPredictionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPredictionResult)
}

void CMsgGCToServerPredictionResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToServerPredictionResult_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
}

CMsgGCToServerPredictionResult::~CMsgGCToServerPredictionResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPredictionResult)
  SharedDtor();
}

void CMsgGCToServerPredictionResult::SharedDtor() {
}

void CMsgGCToServerPredictionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToServerPredictionResult& CMsgGCToServerPredictionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToServerPredictionResult_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToServerPredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correct_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToServerPredictionResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToServerPredictionResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool correct = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_correct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCToServerPredictionResult_Prediction::_InternalParse;
          object = msg->add_predictions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToServerPredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPredictionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool correct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_correct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPredictionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToServerPredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->predictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPredictionResult)
}

::google::protobuf::uint8* CMsgGCToServerPredictionResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->predictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPredictionResult)
  return target;
}

size_t CMsgGCToServerPredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPredictionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predictions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerPredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToServerPredictionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPredictionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPredictionResult)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult::MergeFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      correct_ = from.correct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult::CopyFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult::Swap(CMsgGCToServerPredictionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPredictionResult::InternalSwap(CMsgGCToServerPredictionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&predictions_)->InternalSwap(CastToBase(&other->predictions_));
  swap(match_id_, other->match_id_);
  swap(account_id_, other->account_id_);
  swap(correct_, other->correct_);
}

::google::protobuf::Metadata CMsgGCToServerPredictionResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCLockCharmTrading::InitAsDefaultInstance() {
}
class CMsgServerToGCLockCharmTrading::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerToGCLockCharmTrading* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_id(CMsgServerToGCLockCharmTrading* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCLockCharmTrading::kAccountIdFieldNumber;
const int CMsgServerToGCLockCharmTrading::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCLockCharmTrading)
}
CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(const CMsgServerToGCLockCharmTrading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCLockCharmTrading)
}

void CMsgServerToGCLockCharmTrading::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgServerToGCLockCharmTrading::~CMsgServerToGCLockCharmTrading() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCLockCharmTrading)
  SharedDtor();
}

void CMsgServerToGCLockCharmTrading::SharedDtor() {
}

void CMsgServerToGCLockCharmTrading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCLockCharmTrading& CMsgServerToGCLockCharmTrading::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCLockCharmTrading_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCLockCharmTrading::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCLockCharmTrading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCLockCharmTrading::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCLockCharmTrading*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCLockCharmTrading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCLockCharmTrading)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCLockCharmTrading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCLockCharmTrading)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCLockCharmTrading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCLockCharmTrading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCLockCharmTrading)
}

::google::protobuf::uint8* CMsgServerToGCLockCharmTrading::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCLockCharmTrading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCLockCharmTrading)
  return target;
}

size_t CMsgServerToGCLockCharmTrading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCLockCharmTrading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCLockCharmTrading* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCLockCharmTrading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCLockCharmTrading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCLockCharmTrading)
    MergeFrom(*source);
  }
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCLockCharmTrading::IsInitialized() const {
  return true;
}

void CMsgServerToGCLockCharmTrading::Swap(CMsgServerToGCLockCharmTrading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCLockCharmTrading::InternalSwap(CMsgServerToGCLockCharmTrading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgServerToGCLockCharmTrading::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutUpdatePlayerChallenge_Challenge::InitAsDefaultInstance() {
}
class CMsgSignOutUpdatePlayerChallenge_Challenge::HasBitSetters {
 public:
  static void set_has_event_id(CMsgSignOutUpdatePlayerChallenge_Challenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot_id(CMsgSignOutUpdatePlayerChallenge_Challenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sequence_id(CMsgSignOutUpdatePlayerChallenge_Challenge* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_progress(CMsgSignOutUpdatePlayerChallenge_Challenge* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_challenge_rank(CMsgSignOutUpdatePlayerChallenge_Challenge* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kEventIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kSlotIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kSequenceIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kProgressFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kChallengeRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
}
CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(const CMsgSignOutUpdatePlayerChallenge_Challenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_rank_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_rank_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_rank_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_rank_));
}

CMsgSignOutUpdatePlayerChallenge_Challenge::~CMsgSignOutUpdatePlayerChallenge_Challenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  SharedDtor();
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedDtor() {
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutUpdatePlayerChallenge_Challenge_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutUpdatePlayerChallenge_Challenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_rank_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutUpdatePlayerChallenge_Challenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sequence_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 progress = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_progress(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_rank = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_challenge_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutUpdatePlayerChallenge_Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sequence_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_progress(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_challenge_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutUpdatePlayerChallenge_Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  // optional uint32 challenge_rank = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challenge_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
}

::google::protobuf::uint8* CMsgSignOutUpdatePlayerChallenge_Challenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  // optional uint32 challenge_rank = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challenge_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge_Challenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 challenge_rank = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_rank());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge_Challenge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutUpdatePlayerChallenge_Challenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_rank_ = from.challenge_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Swap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_id_, other->event_id_);
  swap(slot_id_, other->slot_id_);
  swap(sequence_id_, other->sequence_id_);
  swap(progress_, other->progress_);
  swap(challenge_rank_, other->challenge_rank_);
}

::google::protobuf::Metadata CMsgSignOutUpdatePlayerChallenge_Challenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutUpdatePlayerChallenge::InitAsDefaultInstance() {
}
class CMsgSignOutUpdatePlayerChallenge::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSignOutUpdatePlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_match_id(CMsgSignOutUpdatePlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hero_id(CMsgSignOutUpdatePlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutUpdatePlayerChallenge::kAccountIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kCompletedFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kRerolledFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kMatchIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge)
}
CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(const CMsgSignOutUpdatePlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      completed_(from.completed_),
      rerolled_(from.rerolled_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge)
}

void CMsgSignOutUpdatePlayerChallenge::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSignOutUpdatePlayerChallenge_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
}

CMsgSignOutUpdatePlayerChallenge::~CMsgSignOutUpdatePlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  SharedDtor();
}

void CMsgSignOutUpdatePlayerChallenge::SharedDtor() {
}

void CMsgSignOutUpdatePlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutUpdatePlayerChallenge& CMsgSignOutUpdatePlayerChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutUpdatePlayerChallenge_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutUpdatePlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completed_.Clear();
  rerolled_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutUpdatePlayerChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutUpdatePlayerChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalParse;
          object = msg->add_completed();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalParse;
          object = msg->add_rerolled();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutUpdatePlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_completed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rerolled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutUpdatePlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->completed_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->completed(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rerolled_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->rerolled(static_cast<int>(i)),
      output);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutUpdatePlayerChallenge)
}

::google::protobuf::uint8* CMsgSignOutUpdatePlayerChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->completed_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->completed(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rerolled_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->rerolled(static_cast<int>(i)), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->completed_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->completed(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rerolled_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rerolled(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutUpdatePlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutUpdatePlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutUpdatePlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  completed_.MergeFrom(from.completed_);
  rerolled_.MergeFrom(from.rerolled_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge::Swap(CMsgSignOutUpdatePlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutUpdatePlayerChallenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&completed_)->InternalSwap(CastToBase(&other->completed_));
  CastToBase(&rerolled_)->InternalSwap(CastToBase(&other->rerolled_));
  swap(account_id_, other->account_id_);
  swap(hero_id_, other->hero_id_);
  swap(match_id_, other->match_id_);
}

::google::protobuf::Metadata CMsgSignOutUpdatePlayerChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCRerollPlayerChallenge::InitAsDefaultInstance() {
  ::proto::dota::_CMsgServerToGCRerollPlayerChallenge_default_instance_._instance.get_mutable()->reroll_msg_ = const_cast< ::proto::dota::CMsgClientToGCRerollPlayerChallenge*>(
      ::proto::dota::CMsgClientToGCRerollPlayerChallenge::internal_default_instance());
}
class CMsgServerToGCRerollPlayerChallenge::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerToGCRerollPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgClientToGCRerollPlayerChallenge& reroll_msg(const CMsgServerToGCRerollPlayerChallenge* msg);
  static void set_has_reroll_msg(CMsgServerToGCRerollPlayerChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgClientToGCRerollPlayerChallenge&
CMsgServerToGCRerollPlayerChallenge::HasBitSetters::reroll_msg(const CMsgServerToGCRerollPlayerChallenge* msg) {
  return *msg->reroll_msg_;
}
void CMsgServerToGCRerollPlayerChallenge::clear_reroll_msg() {
  if (reroll_msg_ != nullptr) reroll_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCRerollPlayerChallenge::kAccountIdFieldNumber;
const int CMsgServerToGCRerollPlayerChallenge::kRerollMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRerollPlayerChallenge)
}
CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(const CMsgServerToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reroll_msg()) {
    reroll_msg_ = new ::proto::dota::CMsgClientToGCRerollPlayerChallenge(*from.reroll_msg_);
  } else {
    reroll_msg_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRerollPlayerChallenge)
}

void CMsgServerToGCRerollPlayerChallenge::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCRerollPlayerChallenge_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&reroll_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&reroll_msg_)) + sizeof(account_id_));
}

CMsgServerToGCRerollPlayerChallenge::~CMsgServerToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgServerToGCRerollPlayerChallenge::SharedDtor() {
  if (this != internal_default_instance()) delete reroll_msg_;
}

void CMsgServerToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCRerollPlayerChallenge& CMsgServerToGCRerollPlayerChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCRerollPlayerChallenge_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reroll_msg_ != nullptr);
    reroll_msg_->Clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCRerollPlayerChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCRerollPlayerChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgClientToGCRerollPlayerChallenge::_InternalParse;
        object = msg->mutable_reroll_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reroll_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::reroll_msg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgServerToGCRerollPlayerChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::reroll_msg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgServerToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reroll_msg_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRerollPlayerChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCRerollPlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRerollPlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRerollPlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reroll_msg()->::proto::dota::CMsgClientToGCRerollPlayerChallenge::MergeFrom(from.reroll_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgServerToGCRerollPlayerChallenge::Swap(CMsgServerToGCRerollPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRerollPlayerChallenge::InternalSwap(CMsgServerToGCRerollPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reroll_msg_, other->reroll_msg_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgServerToGCRerollPlayerChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCHoldEventPoints_HoldRequest::InitAsDefaultInstance() {
}
class CMsgServerToGCHoldEventPoints_HoldRequest::HasBitSetters {
 public:
  static void set_has_account_id(CMsgServerToGCHoldEventPoints_HoldRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_points_held(CMsgServerToGCHoldEventPoints_HoldRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_premium_held(CMsgServerToGCHoldEventPoints_HoldRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCHoldEventPoints_HoldRequest::kAccountIdFieldNumber;
const int CMsgServerToGCHoldEventPoints_HoldRequest::kPointsHeldFieldNumber;
const int CMsgServerToGCHoldEventPoints_HoldRequest::kPremiumHeldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCHoldEventPoints_HoldRequest::CMsgServerToGCHoldEventPoints_HoldRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
}
CMsgServerToGCHoldEventPoints_HoldRequest::CMsgServerToGCHoldEventPoints_HoldRequest(const CMsgServerToGCHoldEventPoints_HoldRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&premium_held_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(premium_held_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&premium_held_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(premium_held_));
}

CMsgServerToGCHoldEventPoints_HoldRequest::~CMsgServerToGCHoldEventPoints_HoldRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  SharedDtor();
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SharedDtor() {
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCHoldEventPoints_HoldRequest& CMsgServerToGCHoldEventPoints_HoldRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCHoldEventPoints_HoldRequest_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCHoldEventPoints_HoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&premium_held_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(premium_held_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCHoldEventPoints_HoldRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCHoldEventPoints_HoldRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 points_held = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_points_held(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 premium_held = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_premium_held(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCHoldEventPoints_HoldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_held = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_points_held(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 premium_held = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_premium_held(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCHoldEventPoints_HoldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 points_held = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_held(), output);
  }

  // optional uint32 premium_held = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_held(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
}

::google::protobuf::uint8* CMsgServerToGCHoldEventPoints_HoldRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 points_held = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_held(), target);
  }

  // optional uint32 premium_held = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_held(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  return target;
}

size_t CMsgServerToGCHoldEventPoints_HoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 points_held = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_held = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_held());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCHoldEventPoints_HoldRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCHoldEventPoints_HoldRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
    MergeFrom(*source);
  }
}

void CMsgServerToGCHoldEventPoints_HoldRequest::MergeFrom(const CMsgServerToGCHoldEventPoints_HoldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_held_ = from.points_held_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_held_ = from.premium_held_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCHoldEventPoints_HoldRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCHoldEventPoints_HoldRequest::CopyFrom(const CMsgServerToGCHoldEventPoints_HoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCHoldEventPoints_HoldRequest::IsInitialized() const {
  return true;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::Swap(CMsgServerToGCHoldEventPoints_HoldRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCHoldEventPoints_HoldRequest::InternalSwap(CMsgServerToGCHoldEventPoints_HoldRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(points_held_, other->points_held_);
  swap(premium_held_, other->premium_held_);
}

::google::protobuf::Metadata CMsgServerToGCHoldEventPoints_HoldRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCHoldEventPoints::InitAsDefaultInstance() {
}
class CMsgServerToGCHoldEventPoints::HasBitSetters {
 public:
  static void set_has_event_id(CMsgServerToGCHoldEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hold_key(CMsgServerToGCHoldEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hold_until(CMsgServerToGCHoldEventPoints* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCHoldEventPoints::kHoldsFieldNumber;
const int CMsgServerToGCHoldEventPoints::kEventIdFieldNumber;
const int CMsgServerToGCHoldEventPoints::kHoldKeyFieldNumber;
const int CMsgServerToGCHoldEventPoints::kHoldUntilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCHoldEventPoints::CMsgServerToGCHoldEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCHoldEventPoints)
}
CMsgServerToGCHoldEventPoints::CMsgServerToGCHoldEventPoints(const CMsgServerToGCHoldEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      holds_(from.holds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hold_key_, &from.hold_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&hold_until_) -
    reinterpret_cast<char*>(&hold_key_)) + sizeof(hold_until_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCHoldEventPoints)
}

void CMsgServerToGCHoldEventPoints::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCHoldEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&hold_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hold_until_) -
      reinterpret_cast<char*>(&hold_key_)) + sizeof(hold_until_));
}

CMsgServerToGCHoldEventPoints::~CMsgServerToGCHoldEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCHoldEventPoints)
  SharedDtor();
}

void CMsgServerToGCHoldEventPoints::SharedDtor() {
}

void CMsgServerToGCHoldEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCHoldEventPoints& CMsgServerToGCHoldEventPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCHoldEventPoints_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCHoldEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCHoldEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  holds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hold_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hold_until_) -
        reinterpret_cast<char*>(&hold_key_)) + sizeof(hold_until_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCHoldEventPoints::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCHoldEventPoints*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest::_InternalParse;
          object = msg->add_holds();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 hold_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hold_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hold_until = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hold_until(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCHoldEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCHoldEventPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_holds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hold_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hold_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hold_until = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_hold_until(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCHoldEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCHoldEventPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCHoldEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCHoldEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->holds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->holds(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_id(), output);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hold_key(), output);
  }

  // optional uint32 hold_until = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hold_until(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCHoldEventPoints)
}

::google::protobuf::uint8* CMsgServerToGCHoldEventPoints::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCHoldEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->holds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->holds(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_id(), target);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hold_key(), target);
  }

  // optional uint32 hold_until = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hold_until(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCHoldEventPoints)
  return target;
}

size_t CMsgServerToGCHoldEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCHoldEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->holds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->holds(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 hold_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hold_key());
    }

    // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 hold_until = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_until());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCHoldEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCHoldEventPoints* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCHoldEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCHoldEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCHoldEventPoints)
    MergeFrom(*source);
  }
}

void CMsgServerToGCHoldEventPoints::MergeFrom(const CMsgServerToGCHoldEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  holds_.MergeFrom(from.holds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hold_key_ = from.hold_key_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hold_until_ = from.hold_until_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCHoldEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCHoldEventPoints::CopyFrom(const CMsgServerToGCHoldEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCHoldEventPoints::IsInitialized() const {
  return true;
}

void CMsgServerToGCHoldEventPoints::Swap(CMsgServerToGCHoldEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCHoldEventPoints::InternalSwap(CMsgServerToGCHoldEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&holds_)->InternalSwap(CastToBase(&other->holds_));
  swap(hold_key_, other->hold_key_);
  swap(event_id_, other->event_id_);
  swap(hold_until_, other->hold_until_);
}

::google::protobuf::Metadata CMsgServerToGCHoldEventPoints::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutReleaseEventPointHolds::InitAsDefaultInstance() {
}
class CMsgSignOutReleaseEventPointHolds::HasBitSetters {
 public:
  static void set_has_event_id(CMsgSignOutReleaseEventPointHolds* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hold_key(CMsgSignOutReleaseEventPointHolds* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutReleaseEventPointHolds::kAccountIdsFieldNumber;
const int CMsgSignOutReleaseEventPointHolds::kEventIdFieldNumber;
const int CMsgSignOutReleaseEventPointHolds::kHoldKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutReleaseEventPointHolds::CMsgSignOutReleaseEventPointHolds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutReleaseEventPointHolds)
}
CMsgSignOutReleaseEventPointHolds::CMsgSignOutReleaseEventPointHolds(const CMsgSignOutReleaseEventPointHolds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hold_key_, &from.hold_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&hold_key_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutReleaseEventPointHolds)
}

void CMsgSignOutReleaseEventPointHolds::SharedCtor() {
  ::memset(&hold_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&hold_key_)) + sizeof(event_id_));
}

CMsgSignOutReleaseEventPointHolds::~CMsgSignOutReleaseEventPointHolds() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutReleaseEventPointHolds)
  SharedDtor();
}

void CMsgSignOutReleaseEventPointHolds::SharedDtor() {
}

void CMsgSignOutReleaseEventPointHolds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutReleaseEventPointHolds& CMsgSignOutReleaseEventPointHolds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutReleaseEventPointHolds_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutReleaseEventPointHolds::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hold_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&hold_key_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutReleaseEventPointHolds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutReleaseEventPointHolds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 hold_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hold_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutReleaseEventPointHolds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hold_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hold_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutReleaseEventPointHolds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutReleaseEventPointHolds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutReleaseEventPointHolds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_id(), output);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hold_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutReleaseEventPointHolds)
}

::google::protobuf::uint8* CMsgSignOutReleaseEventPointHolds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_id(), target);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hold_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutReleaseEventPointHolds)
  return target;
}

size_t CMsgSignOutReleaseEventPointHolds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 hold_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hold_key());
    }

    // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutReleaseEventPointHolds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutReleaseEventPointHolds* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutReleaseEventPointHolds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutReleaseEventPointHolds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutReleaseEventPointHolds)
    MergeFrom(*source);
  }
}

void CMsgSignOutReleaseEventPointHolds::MergeFrom(const CMsgSignOutReleaseEventPointHolds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hold_key_ = from.hold_key_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutReleaseEventPointHolds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutReleaseEventPointHolds::CopyFrom(const CMsgSignOutReleaseEventPointHolds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutReleaseEventPointHolds::IsInitialized() const {
  return true;
}

void CMsgSignOutReleaseEventPointHolds::Swap(CMsgSignOutReleaseEventPointHolds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutReleaseEventPointHolds::InternalSwap(CMsgSignOutReleaseEventPointHolds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  swap(hold_key_, other->hold_key_);
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgSignOutReleaseEventPointHolds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutWagerStats_Player::InitAsDefaultInstance() {
}
class CMsgSignOutWagerStats_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSignOutWagerStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winnings(CMsgSignOutWagerStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_wager(CMsgSignOutWagerStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_wager(CMsgSignOutWagerStats_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutWagerStats_Player::kAccountIdFieldNumber;
const int CMsgSignOutWagerStats_Player::kWinningsFieldNumber;
const int CMsgSignOutWagerStats_Player::kMaxWagerFieldNumber;
const int CMsgSignOutWagerStats_Player::kWagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutWagerStats.Player)
}
CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player(const CMsgSignOutWagerStats_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutWagerStats.Player)
}

void CMsgSignOutWagerStats_Player::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wager_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(wager_));
}

CMsgSignOutWagerStats_Player::~CMsgSignOutWagerStats_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutWagerStats.Player)
  SharedDtor();
}

void CMsgSignOutWagerStats_Player::SharedDtor() {
}

void CMsgSignOutWagerStats_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutWagerStats_Player& CMsgSignOutWagerStats_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutWagerStats_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutWagerStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutWagerStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(wager_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutWagerStats_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutWagerStats_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winnings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_wager = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max_wager(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wager = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_wager(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutWagerStats_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutWagerStats.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winnings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_wager = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_max_wager(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_wager(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutWagerStats.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutWagerStats.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutWagerStats_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutWagerStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnings(), output);
  }

  // optional uint32 max_wager = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_wager(), output);
  }

  // optional uint32 wager = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wager(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutWagerStats.Player)
}

::google::protobuf::uint8* CMsgSignOutWagerStats_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutWagerStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winnings(), target);
  }

  // optional uint32 max_wager = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_wager(), target);
  }

  // optional uint32 wager = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wager(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutWagerStats.Player)
  return target;
}

size_t CMsgSignOutWagerStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutWagerStats.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnings());
    }

    // optional uint32 max_wager = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_wager());
    }

    // optional uint32 wager = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutWagerStats_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutWagerStats_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutWagerStats_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutWagerStats.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutWagerStats.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats_Player::MergeFrom(const CMsgSignOutWagerStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winnings_ = from.winnings_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_wager_ = from.max_wager_;
    }
    if (cached_has_bits & 0x00000008u) {
      wager_ = from.wager_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutWagerStats_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats_Player::CopyFrom(const CMsgSignOutWagerStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutWagerStats_Player::Swap(CMsgSignOutWagerStats_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutWagerStats_Player::InternalSwap(CMsgSignOutWagerStats_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(winnings_, other->winnings_);
  swap(max_wager_, other->max_wager_);
  swap(wager_, other->wager_);
}

::google::protobuf::Metadata CMsgSignOutWagerStats_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutWagerStats::InitAsDefaultInstance() {
}
class CMsgSignOutWagerStats::HasBitSetters {
 public:
  static void set_has_event_id(CMsgSignOutWagerStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutWagerStats::kPlayersFieldNumber;
const int CMsgSignOutWagerStats::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutWagerStats::CMsgSignOutWagerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutWagerStats)
}
CMsgSignOutWagerStats::CMsgSignOutWagerStats(const CMsgSignOutWagerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutWagerStats)
}

void CMsgSignOutWagerStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSignOutWagerStats_dota_5fgcmessages_5fserver_2eproto.base);
  event_id_ = 0;
}

CMsgSignOutWagerStats::~CMsgSignOutWagerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutWagerStats)
  SharedDtor();
}

void CMsgSignOutWagerStats::SharedDtor() {
}

void CMsgSignOutWagerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutWagerStats& CMsgSignOutWagerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutWagerStats_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutWagerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutWagerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutWagerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutWagerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSignOutWagerStats_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutWagerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutWagerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutWagerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutWagerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutWagerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutWagerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutWagerStats)
}

::google::protobuf::uint8* CMsgSignOutWagerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutWagerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutWagerStats)
  return target;
}

size_t CMsgSignOutWagerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutWagerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutWagerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutWagerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutWagerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutWagerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutWagerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutWagerStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats::MergeFrom(const CMsgSignOutWagerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutWagerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgSignOutWagerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutWagerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats::CopyFrom(const CMsgSignOutWagerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutWagerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutWagerStats::Swap(CMsgSignOutWagerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutWagerStats::InternalSwap(CMsgSignOutWagerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgSignOutWagerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpendWager_Player::InitAsDefaultInstance() {
}
class CMsgSpendWager_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSpendWager_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_wager(CMsgSpendWager_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_wager_token_item_id(CMsgSpendWager_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpendWager_Player::kAccountIdFieldNumber;
const int CMsgSpendWager_Player::kWagerFieldNumber;
const int CMsgSpendWager_Player::kWagerTokenItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpendWager_Player::CMsgSpendWager_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpendWager.Player)
}
CMsgSpendWager_Player::CMsgSpendWager_Player(const CMsgSpendWager_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_token_item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(wager_token_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpendWager.Player)
}

void CMsgSpendWager_Player::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wager_token_item_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(wager_token_item_id_));
}

CMsgSpendWager_Player::~CMsgSpendWager_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpendWager.Player)
  SharedDtor();
}

void CMsgSpendWager_Player::SharedDtor() {
}

void CMsgSpendWager_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpendWager_Player& CMsgSpendWager_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpendWager_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpendWager_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpendWager.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_token_item_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(wager_token_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpendWager_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpendWager_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wager = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_wager(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 wager_token_item_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_wager_token_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpendWager_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpendWager.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_wager(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wager_token_item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_wager_token_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wager_token_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpendWager.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpendWager.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpendWager_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpendWager.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 wager = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wager(), output);
  }

  // optional uint64 wager_token_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->wager_token_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpendWager.Player)
}

::google::protobuf::uint8* CMsgSpendWager_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpendWager.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 wager = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wager(), target);
  }

  // optional uint64 wager_token_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->wager_token_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpendWager.Player)
  return target;
}

size_t CMsgSpendWager_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpendWager.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 wager = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager());
    }

    // optional uint64 wager_token_item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wager_token_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpendWager_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpendWager_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpendWager_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpendWager.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpendWager.Player)
    MergeFrom(*source);
  }
}

void CMsgSpendWager_Player::MergeFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wager_ = from.wager_;
    }
    if (cached_has_bits & 0x00000004u) {
      wager_token_item_id_ = from.wager_token_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpendWager_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpendWager_Player::CopyFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager_Player::IsInitialized() const {
  return true;
}

void CMsgSpendWager_Player::Swap(CMsgSpendWager_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpendWager_Player::InternalSwap(CMsgSpendWager_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(wager_, other->wager_);
  swap(wager_token_item_id_, other->wager_token_item_id_);
}

::google::protobuf::Metadata CMsgSpendWager_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpendWager::InitAsDefaultInstance() {
}
class CMsgSpendWager::HasBitSetters {
 public:
  static void set_has_event_id(CMsgSpendWager* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgSpendWager* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgSpendWager* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_server_steam_id(CMsgSpendWager* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpendWager::kPlayersFieldNumber;
const int CMsgSpendWager::kEventIdFieldNumber;
const int CMsgSpendWager::kTimestampFieldNumber;
const int CMsgSpendWager::kMatchIdFieldNumber;
const int CMsgSpendWager::kServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpendWager::CMsgSpendWager()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpendWager)
}
CMsgSpendWager::CMsgSpendWager(const CMsgSpendWager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_steam_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(server_steam_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpendWager)
}

void CMsgSpendWager::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSpendWager_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_steam_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(server_steam_id_));
}

CMsgSpendWager::~CMsgSpendWager() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpendWager)
  SharedDtor();
}

void CMsgSpendWager::SharedDtor() {
}

void CMsgSpendWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpendWager& CMsgSpendWager::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpendWager_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpendWager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpendWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_steam_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(server_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpendWager::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpendWager*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSpendWager.Player players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSpendWager_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 server_steam_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpendWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpendWager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSpendWager.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpendWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpendWager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpendWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpendWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpendWager.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_id(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }

  // optional uint64 server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpendWager)
}

::google::protobuf::uint8* CMsgSpendWager::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpendWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpendWager.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_id(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }

  // optional uint64 server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpendWager)
  return target;
}

size_t CMsgSpendWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpendWager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpendWager.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint64 server_steam_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_steam_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpendWager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpendWager* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpendWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpendWager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpendWager)
    MergeFrom(*source);
  }
}

void CMsgSpendWager::MergeFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpendWager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpendWager::CopyFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager::IsInitialized() const {
  return true;
}

void CMsgSpendWager::Swap(CMsgSpendWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpendWager::InternalSwap(CMsgSpendWager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(event_id_, other->event_id_);
  swap(timestamp_, other->timestamp_);
  swap(match_id_, other->match_id_);
  swap(server_steam_id_, other->server_steam_id_);
}

::google::protobuf::Metadata CMsgSpendWager::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutXPCoins_Player::InitAsDefaultInstance() {
}
class CMsgSignOutXPCoins_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgSignOutXPCoins_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_xp_gained(CMsgSignOutXPCoins_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_coins_spent(CMsgSignOutXPCoins_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_wager_token_item_id(CMsgSignOutXPCoins_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rank_wager(CMsgSignOutXPCoins_Player* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutXPCoins_Player::kAccountIdFieldNumber;
const int CMsgSignOutXPCoins_Player::kXpGainedFieldNumber;
const int CMsgSignOutXPCoins_Player::kCoinsSpentFieldNumber;
const int CMsgSignOutXPCoins_Player::kWagerTokenItemIdFieldNumber;
const int CMsgSignOutXPCoins_Player::kRankWagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutXPCoins.Player)
}
CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(const CMsgSignOutXPCoins_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_wager_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_wager_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutXPCoins.Player)
}

void CMsgSignOutXPCoins_Player::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_wager_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(rank_wager_));
}

CMsgSignOutXPCoins_Player::~CMsgSignOutXPCoins_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutXPCoins.Player)
  SharedDtor();
}

void CMsgSignOutXPCoins_Player::SharedDtor() {
}

void CMsgSignOutXPCoins_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutXPCoins_Player& CMsgSignOutXPCoins_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutXPCoins_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutXPCoins_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutXPCoins.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_wager_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rank_wager_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutXPCoins_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutXPCoins_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xp_gained = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_xp_gained(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 coins_spent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_coins_spent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 wager_token_item_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_wager_token_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rank_wager = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rank_wager(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutXPCoins_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutXPCoins.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_gained = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_xp_gained(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_gained_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 coins_spent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_coins_spent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coins_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wager_token_item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_wager_token_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wager_token_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_wager = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_rank_wager(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutXPCoins.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutXPCoins.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutXPCoins_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutXPCoins.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 xp_gained = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xp_gained(), output);
  }

  // optional uint32 coins_spent = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coins_spent(), output);
  }

  // optional uint64 wager_token_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->wager_token_item_id(), output);
  }

  // optional uint32 rank_wager = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rank_wager(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutXPCoins.Player)
}

::google::protobuf::uint8* CMsgSignOutXPCoins_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutXPCoins.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 xp_gained = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xp_gained(), target);
  }

  // optional uint32 coins_spent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coins_spent(), target);
  }

  // optional uint64 wager_token_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->wager_token_item_id(), target);
  }

  // optional uint32 rank_wager = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rank_wager(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutXPCoins.Player)
  return target;
}

size_t CMsgSignOutXPCoins_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutXPCoins.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 xp_gained = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_gained());
    }

    // optional uint64 wager_token_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wager_token_item_id());
    }

    // optional uint32 coins_spent = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coins_spent());
    }

    // optional uint32 rank_wager = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_wager());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutXPCoins_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutXPCoins_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutXPCoins_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutXPCoins.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutXPCoins.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutXPCoins_Player::MergeFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_gained_ = from.xp_gained_;
    }
    if (cached_has_bits & 0x00000004u) {
      wager_token_item_id_ = from.wager_token_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      coins_spent_ = from.coins_spent_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_wager_ = from.rank_wager_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutXPCoins_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutXPCoins_Player::CopyFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins_Player::Swap(CMsgSignOutXPCoins_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutXPCoins_Player::InternalSwap(CMsgSignOutXPCoins_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(xp_gained_, other->xp_gained_);
  swap(wager_token_item_id_, other->wager_token_item_id_);
  swap(coins_spent_, other->coins_spent_);
  swap(rank_wager_, other->rank_wager_);
}

::google::protobuf::Metadata CMsgSignOutXPCoins_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutXPCoins::InitAsDefaultInstance() {
}
class CMsgSignOutXPCoins::HasBitSetters {
 public:
  static void set_has_event_id(CMsgSignOutXPCoins* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgSignOutXPCoins* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgSignOutXPCoins* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutXPCoins::kPlayersFieldNumber;
const int CMsgSignOutXPCoins::kEventIdFieldNumber;
const int CMsgSignOutXPCoins::kMatchIdFieldNumber;
const int CMsgSignOutXPCoins::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutXPCoins::CMsgSignOutXPCoins()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutXPCoins)
}
CMsgSignOutXPCoins::CMsgSignOutXPCoins(const CMsgSignOutXPCoins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutXPCoins)
}

void CMsgSignOutXPCoins::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSignOutXPCoins_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
}

CMsgSignOutXPCoins::~CMsgSignOutXPCoins() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutXPCoins)
  SharedDtor();
}

void CMsgSignOutXPCoins::SharedDtor() {
}

void CMsgSignOutXPCoins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutXPCoins& CMsgSignOutXPCoins::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutXPCoins_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutXPCoins::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutXPCoins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutXPCoins::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutXPCoins*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSignOutXPCoins_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutXPCoins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutXPCoins)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutXPCoins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutXPCoins)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutXPCoins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutXPCoins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_id(), output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutXPCoins)
}

::google::protobuf::uint8* CMsgSignOutXPCoins::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutXPCoins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutXPCoins)
  return target;
}

size_t CMsgSignOutXPCoins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutXPCoins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutXPCoins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutXPCoins* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutXPCoins>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutXPCoins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutXPCoins)
    MergeFrom(*source);
  }
}

void CMsgSignOutXPCoins::MergeFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutXPCoins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutXPCoins::CopyFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins::Swap(CMsgSignOutXPCoins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutXPCoins::InternalSwap(CMsgSignOutXPCoins* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(match_id_, other->match_id_);
  swap(event_id_, other->event_id_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgSignOutXPCoins::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InitAsDefaultInstance() {
}
class CMsgSignOutCommunityGoalProgress_EventGoalIncrement::HasBitSetters {
 public:
  static void set_has_event_goal_id(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_increment_amount(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunityGoalProgress_EventGoalIncrement::kEventGoalIdFieldNumber;
const int CMsgSignOutCommunityGoalProgress_EventGoalIncrement::kIncrementAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}
CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_goal_id_, &from.event_goal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&increment_amount_) -
    reinterpret_cast<char*>(&event_goal_id_)) + sizeof(increment_amount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedCtor() {
  ::memset(&event_goal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&increment_amount_) -
      reinterpret_cast<char*>(&event_goal_id_)) + sizeof(increment_amount_));
}

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::~CMsgSignOutCommunityGoalProgress_EventGoalIncrement() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  SharedDtor();
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedDtor() {
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& CMsgSignOutCommunityGoalProgress_EventGoalIncrement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_goal_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&increment_amount_) -
        reinterpret_cast<char*>(&event_goal_id_)) + sizeof(increment_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutCommunityGoalProgress_EventGoalIncrement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 event_goal_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_event_goal_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 increment_amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_increment_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_goal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_event_goal_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_goal_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 increment_amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_increment_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &increment_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_goal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_goal_id(), output);
  }

  // optional uint32 increment_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->increment_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}

::google::protobuf::uint8* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_goal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_goal_id(), target);
  }

  // optional uint32 increment_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->increment_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 event_goal_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_goal_id());
    }

    // optional uint32 increment_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->increment_amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunityGoalProgress_EventGoalIncrement* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutCommunityGoalProgress_EventGoalIncrement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_goal_id_ = from.event_goal_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      increment_amount_ = from.increment_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::Swap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InternalSwap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_goal_id_, other->event_goal_id_);
  swap(increment_amount_, other->increment_amount_);
}

::google::protobuf::Metadata CMsgSignOutCommunityGoalProgress_EventGoalIncrement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSignOutCommunityGoalProgress::InitAsDefaultInstance() {
}
class CMsgSignOutCommunityGoalProgress::HasBitSetters {
 public:
  static void set_has_event_id(CMsgSignOutCommunityGoalProgress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunityGoalProgress::kEventIdFieldNumber;
const int CMsgSignOutCommunityGoalProgress::kEventIncrementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunityGoalProgress)
}
CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(const CMsgSignOutCommunityGoalProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_increments_(from.event_increments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunityGoalProgress)
}

void CMsgSignOutCommunityGoalProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSignOutCommunityGoalProgress_dota_5fgcmessages_5fserver_2eproto.base);
  event_id_ = 0;
}

CMsgSignOutCommunityGoalProgress::~CMsgSignOutCommunityGoalProgress() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunityGoalProgress)
  SharedDtor();
}

void CMsgSignOutCommunityGoalProgress::SharedDtor() {
}

void CMsgSignOutCommunityGoalProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSignOutCommunityGoalProgress& CMsgSignOutCommunityGoalProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSignOutCommunityGoalProgress_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgSignOutCommunityGoalProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_increments_.Clear();
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSignOutCommunityGoalProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSignOutCommunityGoalProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_InternalParse;
          object = msg->add_event_increments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSignOutCommunityGoalProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_increments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunityGoalProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunityGoalProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSignOutCommunityGoalProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_increments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->event_increments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunityGoalProgress)
}

::google::protobuf::uint8* CMsgSignOutCommunityGoalProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_increments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->event_increments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunityGoalProgress)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->event_increments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_increments(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSignOutCommunityGoalProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunityGoalProgress* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSignOutCommunityGoalProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunityGoalProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunityGoalProgress)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunityGoalProgress::MergeFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_increments_.MergeFrom(from.event_increments_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress::Swap(CMsgSignOutCommunityGoalProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunityGoalProgress::InternalSwap(CMsgSignOutCommunityGoalProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&event_increments_)->InternalSwap(CastToBase(&other->event_increments_));
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgSignOutCommunityGoalProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCPostMatchTip::InitAsDefaultInstance() {
}
class CMsgServerToGCPostMatchTip::HasBitSetters {
 public:
  static void set_has_event_id(CMsgServerToGCPostMatchTip* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_id(CMsgServerToGCPostMatchTip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tipper_account_id(CMsgServerToGCPostMatchTip* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_recipient_account_id(CMsgServerToGCPostMatchTip* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tip_amount(CMsgServerToGCPostMatchTip* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCPostMatchTip::kEventIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kMatchIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kTipperAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kRecipientAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kTipAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCPostMatchTip)
}
CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip(const CMsgServerToGCPostMatchTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tip_amount_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(tip_amount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCPostMatchTip)
}

void CMsgServerToGCPostMatchTip::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tip_amount_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(tip_amount_));
}

CMsgServerToGCPostMatchTip::~CMsgServerToGCPostMatchTip() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCPostMatchTip)
  SharedDtor();
}

void CMsgServerToGCPostMatchTip::SharedDtor() {
}

void CMsgServerToGCPostMatchTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCPostMatchTip& CMsgServerToGCPostMatchTip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCPostMatchTip_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCPostMatchTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCPostMatchTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tip_amount_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(tip_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCPostMatchTip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCPostMatchTip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event_id(static_cast<::proto::dota::EEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tipper_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tipper_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recipient_account_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_recipient_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tip_amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_tip_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCPostMatchTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCPostMatchTip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tipper_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tipper_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipper_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recipient_account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_recipient_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tip_amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_tip_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCPostMatchTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCPostMatchTip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCPostMatchTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCPostMatchTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 tipper_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tipper_account_id(), output);
  }

  // optional uint32 recipient_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recipient_account_id(), output);
  }

  // optional uint32 tip_amount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tip_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCPostMatchTip)
}

::google::protobuf::uint8* CMsgServerToGCPostMatchTip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCPostMatchTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 tipper_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tipper_account_id(), target);
  }

  // optional uint32 recipient_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recipient_account_id(), target);
  }

  // optional uint32 tip_amount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tip_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCPostMatchTip)
  return target;
}

size_t CMsgServerToGCPostMatchTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCPostMatchTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 tipper_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tipper_account_id());
    }

    // optional uint32 recipient_account_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }

    // optional uint32 tip_amount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCPostMatchTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPostMatchTip* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCPostMatchTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCPostMatchTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCPostMatchTip)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPostMatchTip::MergeFrom(const CMsgServerToGCPostMatchTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tipper_account_id_ = from.tipper_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      tip_amount_ = from.tip_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPostMatchTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPostMatchTip::CopyFrom(const CMsgServerToGCPostMatchTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPostMatchTip::IsInitialized() const {
  return true;
}

void CMsgServerToGCPostMatchTip::Swap(CMsgServerToGCPostMatchTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCPostMatchTip::InternalSwap(CMsgServerToGCPostMatchTip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(event_id_, other->event_id_);
  swap(tipper_account_id_, other->tipper_account_id_);
  swap(recipient_account_id_, other->recipient_account_id_);
  swap(tip_amount_, other->tip_amount_);
}

::google::protobuf::Metadata CMsgServerToGCPostMatchTip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCPostMatchTipResponse::InitAsDefaultInstance() {
}
class CMsgServerToGCPostMatchTipResponse::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCPostMatchTipResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tipper_account_id(CMsgServerToGCPostMatchTipResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_recipient_account_id(CMsgServerToGCPostMatchTipResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_result(CMsgServerToGCPostMatchTipResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCPostMatchTipResponse::kMatchIdFieldNumber;
const int CMsgServerToGCPostMatchTipResponse::kTipperAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTipResponse::kRecipientAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTipResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCPostMatchTipResponse)
}
CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse(const CMsgServerToGCPostMatchTipResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCPostMatchTipResponse)
}

void CMsgServerToGCPostMatchTipResponse::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(result_));
}

CMsgServerToGCPostMatchTipResponse::~CMsgServerToGCPostMatchTipResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCPostMatchTipResponse)
  SharedDtor();
}

void CMsgServerToGCPostMatchTipResponse::SharedDtor() {
}

void CMsgServerToGCPostMatchTipResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCPostMatchTipResponse& CMsgServerToGCPostMatchTipResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCPostMatchTipResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCPostMatchTipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCPostMatchTipResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCPostMatchTipResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tipper_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_tipper_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 recipient_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_recipient_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgServerToGCPostMatchTipResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgServerToGCPostMatchTipResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCPostMatchTipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tipper_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_tipper_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipper_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recipient_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_recipient_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgServerToGCPostMatchTipResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgServerToGCPostMatchTipResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCPostMatchTipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCPostMatchTipResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCPostMatchTipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 tipper_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tipper_account_id(), output);
  }

  // optional uint32 recipient_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recipient_account_id(), output);
  }

  // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCPostMatchTipResponse)
}

::google::protobuf::uint8* CMsgServerToGCPostMatchTipResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 tipper_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tipper_account_id(), target);
  }

  // optional uint32 recipient_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recipient_account_id(), target);
  }

  // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCPostMatchTipResponse)
  return target;
}

size_t CMsgServerToGCPostMatchTipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 tipper_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tipper_account_id());
    }

    // optional uint32 recipient_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }

    // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCPostMatchTipResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPostMatchTipResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCPostMatchTipResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCPostMatchTipResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCPostMatchTipResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPostMatchTipResponse::MergeFrom(const CMsgServerToGCPostMatchTipResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tipper_account_id_ = from.tipper_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPostMatchTipResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPostMatchTipResponse::CopyFrom(const CMsgServerToGCPostMatchTipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPostMatchTipResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCPostMatchTipResponse::Swap(CMsgServerToGCPostMatchTipResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCPostMatchTipResponse::InternalSwap(CMsgServerToGCPostMatchTipResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(tipper_account_id_, other->tipper_account_id_);
  swap(recipient_account_id_, other->recipient_account_id_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgServerToGCPostMatchTipResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::InitAsDefaultInstance() {
}
class CMsgServerToGCCloseCompendiumInGamePredictionVoting::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCCloseCompendiumInGamePredictionVoting* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hltv_delay(CMsgServerToGCCloseCompendiumInGamePredictionVoting* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCloseCompendiumInGamePredictionVoting::kMatchIdFieldNumber;
const int CMsgServerToGCCloseCompendiumInGamePredictionVoting::kHltvDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}
CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hltv_delay_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(hltv_delay_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hltv_delay_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(hltv_delay_));
}

CMsgServerToGCCloseCompendiumInGamePredictionVoting::~CMsgServerToGCCloseCompendiumInGamePredictionVoting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  SharedDtor();
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedDtor() {
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCloseCompendiumInGamePredictionVoting& CMsgServerToGCCloseCompendiumInGamePredictionVoting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCloseCompendiumInGamePredictionVoting_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCloseCompendiumInGamePredictionVoting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hltv_delay_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(hltv_delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCloseCompendiumInGamePredictionVoting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCloseCompendiumInGamePredictionVoting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hltv_delay = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hltv_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hltv_delay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hltv_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hltv_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 hltv_delay = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hltv_delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}

::google::protobuf::uint8* CMsgServerToGCCloseCompendiumInGamePredictionVoting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 hltv_delay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hltv_delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 hltv_delay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hltv_delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCloseCompendiumInGamePredictionVoting* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCloseCompendiumInGamePredictionVoting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hltv_delay_ = from.hltv_delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::Swap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(hltv_delay_, other->hltv_delay_);
}

::google::protobuf::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVoting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InitAsDefaultInstance() {
}
class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}
CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedCtor() {
  result_ = false;
}

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  SharedDtor();
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedDtor() {
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}

::google::protobuf::uint8* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::Swap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InitAsDefaultInstance() {
}
class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::HasBitSetters {
 public:
  static void set_has_prediction_id(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_prediction_value(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_prediction_value_is_mask(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::kPredictionIdFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::kPredictionValueFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::kPredictionValueIsMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}
CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prediction_id_, &from.prediction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prediction_value_is_mask_) -
    reinterpret_cast<char*>(&prediction_id_)) + sizeof(prediction_value_is_mask_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedCtor() {
  ::memset(&prediction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prediction_value_is_mask_) -
      reinterpret_cast<char*>(&prediction_id_)) + sizeof(prediction_value_is_mask_));
}

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  SharedDtor();
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedDtor() {
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&prediction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prediction_value_is_mask_) -
        reinterpret_cast<char*>(&prediction_id_)) + sizeof(prediction_value_is_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 prediction_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_prediction_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 prediction_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_prediction_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool prediction_value_is_mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_prediction_value_is_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prediction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_prediction_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prediction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prediction_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_prediction_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prediction_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prediction_value_is_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_prediction_value_is_mask(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prediction_value_is_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prediction_id(), output);
  }

  // optional uint32 prediction_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prediction_value(), output);
  }

  // optional bool prediction_value_is_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prediction_value_is_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}

::google::protobuf::uint8* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prediction_id(), target);
  }

  // optional uint32 prediction_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prediction_value(), target);
  }

  // optional bool prediction_value_is_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prediction_value_is_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 prediction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prediction_id());
    }

    // optional uint32 prediction_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prediction_value());
    }

    // optional bool prediction_value_is_mask = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      prediction_id_ = from.prediction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      prediction_value_ = from.prediction_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      prediction_value_is_mask_ = from.prediction_value_is_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::Swap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prediction_id_, other->prediction_id_);
  swap(prediction_value_, other->prediction_value_);
  swap(prediction_value_is_mask_, other->prediction_value_is_mask_);
}

::google::protobuf::Metadata CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCompendiumInGamePredictionResults::InitAsDefaultInstance() {
}
class CMsgServerToGCCompendiumInGamePredictionResults::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCCompendiumInGamePredictionResults* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgServerToGCCompendiumInGamePredictionResults* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_league_node_id(CMsgServerToGCCompendiumInGamePredictionResults* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCompendiumInGamePredictionResults::kMatchIdFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults::kResultsFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults::kLeagueIdFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults::kLeagueNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
}
CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(const CMsgServerToGCCompendiumInGamePredictionResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_node_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_node_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
}

void CMsgServerToGCCompendiumInGamePredictionResults::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&league_node_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(league_node_id_));
}

CMsgServerToGCCompendiumInGamePredictionResults::~CMsgServerToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  SharedDtor();
}

void CMsgServerToGCCompendiumInGamePredictionResults::SharedDtor() {
}

void CMsgServerToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCompendiumInGamePredictionResults& CMsgServerToGCCompendiumInGamePredictionResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_node_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCompendiumInGamePredictionResults::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCompendiumInGamePredictionResults*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_InternalParse;
          object = msg->add_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 league_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_node_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_league_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCompendiumInGamePredictionResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_node_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_league_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCompendiumInGamePredictionResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->league_id(), output);
  }

  // optional uint32 league_node_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->league_node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
}

::google::protobuf::uint8* CMsgServerToGCCompendiumInGamePredictionResults::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->league_id(), target);
  }

  // optional uint32 league_node_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->league_node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 league_node_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_node_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResults* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCompendiumInGamePredictionResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_node_id_ = from.league_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults::Swap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCompendiumInGamePredictionResults::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  swap(match_id_, other->match_id_);
  swap(league_id_, other->league_id_);
  swap(league_node_id_, other->league_node_id_);
}

::google::protobuf::Metadata CMsgServerToGCCompendiumInGamePredictionResults::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::InitAsDefaultInstance() {
}
class CMsgServerToGCCompendiumInGamePredictionResultsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgServerToGCCompendiumInGamePredictionResultsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCompendiumInGamePredictionResultsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}
CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SharedCtor() {
  result_ = false;
}

CMsgServerToGCCompendiumInGamePredictionResultsResponse::~CMsgServerToGCCompendiumInGamePredictionResultsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  SharedDtor();
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SharedDtor() {
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCompendiumInGamePredictionResultsResponse& CMsgServerToGCCompendiumInGamePredictionResultsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCompendiumInGamePredictionResultsResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCompendiumInGamePredictionResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCompendiumInGamePredictionResultsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCompendiumInGamePredictionResultsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}

::google::protobuf::uint8* CMsgServerToGCCompendiumInGamePredictionResultsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResultsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCompendiumInGamePredictionResultsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::Swap(CMsgServerToGCCompendiumInGamePredictionResultsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResultsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgServerToGCCompendiumInGamePredictionResultsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCCompendiumInGamePredictionResults::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_._instance.get_mutable()->results_ = const_cast< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults*>(
      ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::internal_default_instance());
}
class CMsgGCToGCCompendiumInGamePredictionResults::HasBitSetters {
 public:
  static const ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults& results(const CMsgGCToGCCompendiumInGamePredictionResults* msg);
  static void set_has_results(CMsgGCToGCCompendiumInGamePredictionResults* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults&
CMsgGCToGCCompendiumInGamePredictionResults::HasBitSetters::results(const CMsgGCToGCCompendiumInGamePredictionResults* msg) {
  return *msg->results_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCCompendiumInGamePredictionResults::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
}
CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(const CMsgGCToGCCompendiumInGamePredictionResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_results()) {
    results_ = new ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
}

void CMsgGCToGCCompendiumInGamePredictionResults::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base);
  results_ = nullptr;
}

CMsgGCToGCCompendiumInGamePredictionResults::~CMsgGCToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  SharedDtor();
}

void CMsgGCToGCCompendiumInGamePredictionResults::SharedDtor() {
  if (this != internal_default_instance()) delete results_;
}

void CMsgGCToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCCompendiumInGamePredictionResults& CMsgGCToGCCompendiumInGamePredictionResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCCompendiumInGamePredictionResults_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(results_ != nullptr);
    results_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCCompendiumInGamePredictionResults::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCCompendiumInGamePredictionResults*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::_InternalParse;
        object = msg->mutable_results();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCCompendiumInGamePredictionResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCCompendiumInGamePredictionResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::results(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
}

::google::protobuf::uint8* CMsgGCToGCCompendiumInGamePredictionResults::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::results(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgGCToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCCompendiumInGamePredictionResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCCompendiumInGamePredictionResults* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCCompendiumInGamePredictionResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
    MergeFrom(*source);
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::MergeFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_results()) {
    mutable_results()->::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(from.results());
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgGCToGCCompendiumInGamePredictionResults::Swap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCCompendiumInGamePredictionResults::InternalSwap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(results_, other->results_);
}

::google::protobuf::Metadata CMsgGCToGCCompendiumInGamePredictionResults::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::HasBitSetters {
 public:
  static void set_has_item(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gold(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_net_worth(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_time(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kItemFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kGoldFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kNetWorthFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kGameTimeFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kInventoryItemsFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kTalentsSkilledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      inventory_items_(from.inventory_items_),
      talents_skilled_(from.talents_skilled_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_, &from.item_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedCtor() {
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  SharedDtor();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedDtor() {
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inventory_items_.Clear();
  talents_skilled_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_time_) -
        reinterpret_cast<char*>(&item_)) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gold = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 net_worth = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 inventory_items = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_inventory_items(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_inventory_items();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated bool talents_skilled = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_talents_skilled(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedBoolParser;
        object = msg->mutable_talents_skilled();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inventory_items = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_inventory_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inventory_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool talents_skilled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56u, input, this->mutable_talents_skilled())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_talents_skilled())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item(), output);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold(), output);
  }

  // optional uint32 net_worth = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->net_worth(), output);
  }

  // optional uint32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_time(), output);
  }

  // repeated uint32 inventory_items = 5;
  for (int i = 0, n = this->inventory_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->inventory_items(i), output);
  }

  // repeated bool talents_skilled = 7;
  for (int i = 0, n = this->talents_skilled_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      7, this->talents_skilled(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}

::google::protobuf::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item(), target);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold(), target);
  }

  // optional uint32 net_worth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->net_worth(), target);
  }

  // optional uint32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_time(), target);
  }

  // repeated uint32 inventory_items = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->inventory_items_, target);

  // repeated bool talents_skilled = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(7, this->talents_skilled_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 inventory_items = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inventory_items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->inventory_items_size());
    total_size += data_size;
  }

  // repeated bool talents_skilled = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->talents_skilled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->talents_skilled_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // optional uint32 gold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 net_worth = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inventory_items_.MergeFrom(from.inventory_items_);
  talents_skilled_.MergeFrom(from.talents_skilled_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inventory_items_.InternalSwap(&other->inventory_items_);
  talents_skilled_.InternalSwap(&other->talents_skilled_);
  swap(item_, other->item_);
  swap(gold_, other->gold_);
  swap(net_worth_, other->net_worth_);
  swap(game_time_, other->game_time_);
}

::google::protobuf::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::HasBitSetters {
 public:
  static void set_has_player_slot(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_account_id(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kPlayerSlotFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kAccountIdFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kHeroIdFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kAlliedHeroIdsFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kEnemyHeroIdsFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kItemPurchasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      item_purchases_(from.item_purchases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_slot_, &from.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_slot_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&player_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&player_slot_)) + sizeof(hero_id_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::~CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  SharedDtor();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedDtor() {
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  item_purchases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&player_slot_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 allied_hero_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_allied_hero_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_allied_hero_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 enemy_hero_ids = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_enemy_hero_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_enemy_hero_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_InternalParse;
          object = msg->add_item_purchases();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allied_hero_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_allied_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allied_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 enemy_hero_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_enemy_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemy_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_purchases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_slot(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 allied_hero_ids = 4;
  for (int i = 0, n = this->allied_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->allied_hero_ids(i), output);
  }

  // repeated uint32 enemy_hero_ids = 5;
  for (int i = 0, n = this->enemy_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->enemy_hero_ids(i), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_purchases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->item_purchases(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}

::google::protobuf::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_slot(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->allied_hero_ids_, target);

  // repeated uint32 enemy_hero_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->enemy_hero_ids_, target);

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_purchases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->item_purchases(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->item_purchases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_purchases(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  item_purchases_.MergeFrom(from.item_purchases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  CastToBase(&item_purchases_)->InternalSwap(CastToBase(&other->item_purchases_));
  swap(player_slot_, other->player_slot_);
  swap(account_id_, other->account_id_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchPlayerItemPurchaseHistory::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchPlayerItemPurchaseHistory::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCMatchPlayerItemPurchaseHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mmr(CMsgServerToGCMatchPlayerItemPurchaseHistory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchPlayerItemPurchaseHistory::kMatchIdFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory::kMmrFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mmr_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory::~CMsgServerToGCMatchPlayerItemPurchaseHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  SharedDtor();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedDtor() {
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchPlayerItemPurchaseHistory& CMsgServerToGCMatchPlayerItemPurchaseHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchPlayerItemPurchaseHistory_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchPlayerItemPurchaseHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmr_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchPlayerItemPurchaseHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchPlayerItemPurchaseHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mmr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_mmr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchPlayerItemPurchaseHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mmr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mmr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mmr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mmr(), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
}

::google::protobuf::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mmr(), target);
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 mmr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mmr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchPlayerItemPurchaseHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      mmr_ = from.mmr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(match_id_, other->match_id_);
  swap(mmr_, other->mmr_);
}

::google::protobuf::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchStateHistory_PlayerState::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchStateHistory_PlayerState::HasBitSetters {
 public:
  static void set_has_hero_id(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_net_worth(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_level(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deaths(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_respawn_time(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_has_buyback(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_has_aegis(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_has_rapier(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_distance(CMsgServerToGCMatchStateHistory_PlayerState* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchStateHistory_PlayerState::kHeroIdFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kNetWorthFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kLevelFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kDeathsFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kRespawnTimeFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kHasBuybackFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kHasAegisFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kHasRapierFieldNumber;
const int CMsgServerToGCMatchStateHistory_PlayerState::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
}
CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(const CMsgServerToGCMatchStateHistory_PlayerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
}

void CMsgServerToGCMatchStateHistory_PlayerState::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(distance_));
}

CMsgServerToGCMatchStateHistory_PlayerState::~CMsgServerToGCMatchStateHistory_PlayerState() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  SharedDtor();
}

void CMsgServerToGCMatchStateHistory_PlayerState::SharedDtor() {
}

void CMsgServerToGCMatchStateHistory_PlayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchStateHistory_PlayerState& CMsgServerToGCMatchStateHistory_PlayerState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchStateHistory_PlayerState_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchStateHistory_PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_rapier_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(has_rapier_));
  }
  distance_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchStateHistory_PlayerState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchStateHistory_PlayerState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 net_worth = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_net_worth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 respawn_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_respawn_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_buyback = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_has_buyback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_aegis = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_has_aegis(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_rapier = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_has_rapier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 distance = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_distance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchStateHistory_PlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_net_worth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 respawn_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_respawn_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respawn_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_buyback = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_has_buyback(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_buyback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_aegis = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_has_aegis(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_aegis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_rapier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_has_rapier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_rapier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 distance = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_distance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchStateHistory_PlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 net_worth = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->net_worth(), output);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 respawn_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->respawn_time(), output);
  }

  // optional bool has_buyback = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_buyback(), output);
  }

  // optional bool has_aegis = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_aegis(), output);
  }

  // optional bool has_rapier = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->has_rapier(), output);
  }

  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
}

::google::protobuf::uint8* CMsgServerToGCMatchStateHistory_PlayerState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 net_worth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->net_worth(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 respawn_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->respawn_time(), target);
  }

  // optional bool has_buyback = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_buyback(), target);
  }

  // optional bool has_aegis = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_aegis(), target);
  }

  // optional bool has_rapier = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->has_rapier(), target);
  }

  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 net_worth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 respawn_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respawn_time());
    }

    // optional bool has_buyback = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_aegis = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_rapier = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory_PlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory_PlayerState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory_PlayerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory_PlayerState::MergeFrom(const CMsgServerToGCMatchStateHistory_PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_buyback_ = from.has_buyback_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_aegis_ = from.has_aegis_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_rapier_ = from.has_rapier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_distance(from.distance());
  }
}

void CMsgServerToGCMatchStateHistory_PlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory_PlayerState::CopyFrom(const CMsgServerToGCMatchStateHistory_PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_PlayerState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_PlayerState::Swap(CMsgServerToGCMatchStateHistory_PlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchStateHistory_PlayerState::InternalSwap(CMsgServerToGCMatchStateHistory_PlayerState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(net_worth_, other->net_worth_);
  swap(level_, other->level_);
  swap(deaths_, other->deaths_);
  swap(respawn_time_, other->respawn_time_);
  swap(has_buyback_, other->has_buyback_);
  swap(has_aegis_, other->has_aegis_);
  swap(has_rapier_, other->has_rapier_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata CMsgServerToGCMatchStateHistory_PlayerState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchStateHistory_TeamState::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchStateHistory_TeamState::HasBitSetters {
 public:
  static void set_has_team(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ancient_health_pct(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_glyph_cooldown(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kills(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_creep_distance_safe(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_creep_distance_mid(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_creep_distance_off(CMsgServerToGCMatchStateHistory_TeamState* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchStateHistory_TeamState::kTeamFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kPlayerStatesFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kTowerHealthPctFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kBarracksHealthPctFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kAncientHealthPctFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kGlyphCooldownFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kKillsFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kCreepDistanceSafeFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kCreepDistanceMidFieldNumber;
const int CMsgServerToGCMatchStateHistory_TeamState::kCreepDistanceOffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
}
CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(const CMsgServerToGCMatchStateHistory_TeamState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_states_(from.player_states_),
      tower_health_pct_(from.tower_health_pct_),
      barracks_health_pct_(from.barracks_health_pct_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&creep_distance_off_) -
    reinterpret_cast<char*>(&team_)) + sizeof(creep_distance_off_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
}

void CMsgServerToGCMatchStateHistory_TeamState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creep_distance_off_) -
      reinterpret_cast<char*>(&team_)) + sizeof(creep_distance_off_));
}

CMsgServerToGCMatchStateHistory_TeamState::~CMsgServerToGCMatchStateHistory_TeamState() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  SharedDtor();
}

void CMsgServerToGCMatchStateHistory_TeamState::SharedDtor() {
}

void CMsgServerToGCMatchStateHistory_TeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchStateHistory_TeamState& CMsgServerToGCMatchStateHistory_TeamState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchStateHistory_TeamState_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchStateHistory_TeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_states_.Clear();
  tower_health_pct_.Clear();
  barracks_health_pct_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creep_distance_off_) -
        reinterpret_cast<char*>(&team_)) + sizeof(creep_distance_off_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchStateHistory_TeamState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchStateHistory_TeamState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCMatchStateHistory.PlayerState player_states = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState::_InternalParse;
          object = msg->add_player_states();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated uint32 tower_health_pct = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_tower_health_pct(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_tower_health_pct();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 barracks_health_pct = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_barracks_health_pct(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_barracks_health_pct();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 ancient_health_pct = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ancient_health_pct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 glyph_cooldown = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_glyph_cooldown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 creep_distance_safe = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_creep_distance_safe(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 creep_distance_mid = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_creep_distance_mid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 creep_distance_off = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_creep_distance_off(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchStateHistory_TeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchStateHistory.PlayerState player_states = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tower_health_pct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_tower_health_pct())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_health_pct())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 barracks_health_pct = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_barracks_health_pct())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_health_pct())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ancient_health_pct = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ancient_health_pct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ancient_health_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 glyph_cooldown = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_glyph_cooldown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glyph_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creep_distance_safe = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_creep_distance_safe(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creep_distance_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creep_distance_mid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_creep_distance_mid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creep_distance_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creep_distance_off = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_creep_distance_off(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creep_distance_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchStateHistory_TeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchStateHistory.PlayerState player_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->player_states(static_cast<int>(i)),
      output);
  }

  // repeated uint32 tower_health_pct = 3;
  for (int i = 0, n = this->tower_health_pct_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->tower_health_pct(i), output);
  }

  // repeated uint32 barracks_health_pct = 4;
  for (int i = 0, n = this->barracks_health_pct_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->barracks_health_pct(i), output);
  }

  // optional uint32 ancient_health_pct = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ancient_health_pct(), output);
  }

  // optional uint32 glyph_cooldown = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->glyph_cooldown(), output);
  }

  // optional uint32 kills = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kills(), output);
  }

  // optional uint32 creep_distance_safe = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->creep_distance_safe(), output);
  }

  // optional uint32 creep_distance_mid = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->creep_distance_mid(), output);
  }

  // optional uint32 creep_distance_off = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->creep_distance_off(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
}

::google::protobuf::uint8* CMsgServerToGCMatchStateHistory_TeamState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // repeated .proto.dota.CMsgServerToGCMatchStateHistory.PlayerState player_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->player_states(static_cast<int>(i)), target);
  }

  // repeated uint32 tower_health_pct = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->tower_health_pct_, target);

  // repeated uint32 barracks_health_pct = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->barracks_health_pct_, target);

  // optional uint32 ancient_health_pct = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ancient_health_pct(), target);
  }

  // optional uint32 glyph_cooldown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->glyph_cooldown(), target);
  }

  // optional uint32 kills = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kills(), target);
  }

  // optional uint32 creep_distance_safe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->creep_distance_safe(), target);
  }

  // optional uint32 creep_distance_mid = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->creep_distance_mid(), target);
  }

  // optional uint32 creep_distance_off = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->creep_distance_off(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_TeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCMatchStateHistory.PlayerState player_states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->player_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_states(static_cast<int>(i)));
    }
  }

  // repeated uint32 tower_health_pct = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tower_health_pct_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tower_health_pct_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_health_pct = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->barracks_health_pct_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->barracks_health_pct_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 ancient_health_pct = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ancient_health_pct());
    }

    // optional uint32 glyph_cooldown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->glyph_cooldown());
    }

    // optional uint32 kills = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 creep_distance_safe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creep_distance_safe());
    }

    // optional uint32 creep_distance_mid = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creep_distance_mid());
    }

    // optional uint32 creep_distance_off = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creep_distance_off());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory_TeamState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory_TeamState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(const CMsgServerToGCMatchStateHistory_TeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_states_.MergeFrom(from.player_states_);
  tower_health_pct_.MergeFrom(from.tower_health_pct_);
  barracks_health_pct_.MergeFrom(from.barracks_health_pct_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      ancient_health_pct_ = from.ancient_health_pct_;
    }
    if (cached_has_bits & 0x00000004u) {
      glyph_cooldown_ = from.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      creep_distance_safe_ = from.creep_distance_safe_;
    }
    if (cached_has_bits & 0x00000020u) {
      creep_distance_mid_ = from.creep_distance_mid_;
    }
    if (cached_has_bits & 0x00000040u) {
      creep_distance_off_ = from.creep_distance_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchStateHistory_TeamState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory_TeamState::CopyFrom(const CMsgServerToGCMatchStateHistory_TeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_TeamState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_TeamState::Swap(CMsgServerToGCMatchStateHistory_TeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchStateHistory_TeamState::InternalSwap(CMsgServerToGCMatchStateHistory_TeamState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_states_)->InternalSwap(CastToBase(&other->player_states_));
  tower_health_pct_.InternalSwap(&other->tower_health_pct_);
  barracks_health_pct_.InternalSwap(&other->barracks_health_pct_);
  swap(team_, other->team_);
  swap(ancient_health_pct_, other->ancient_health_pct_);
  swap(glyph_cooldown_, other->glyph_cooldown_);
  swap(kills_, other->kills_);
  swap(creep_distance_safe_, other->creep_distance_safe_);
  swap(creep_distance_mid_, other->creep_distance_mid_);
  swap(creep_distance_off_, other->creep_distance_off_);
}

::google::protobuf::Metadata CMsgServerToGCMatchStateHistory_TeamState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchStateHistory_MatchState::InitAsDefaultInstance() {
  ::proto::dota::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_._instance.get_mutable()->radiant_state_ = const_cast< ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState*>(
      ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::internal_default_instance());
  ::proto::dota::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_._instance.get_mutable()->dire_state_ = const_cast< ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState*>(
      ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::internal_default_instance());
}
class CMsgServerToGCMatchStateHistory_MatchState::HasBitSetters {
 public:
  static void set_has_game_time(CMsgServerToGCMatchStateHistory_MatchState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState& radiant_state(const CMsgServerToGCMatchStateHistory_MatchState* msg);
  static void set_has_radiant_state(CMsgServerToGCMatchStateHistory_MatchState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState& dire_state(const CMsgServerToGCMatchStateHistory_MatchState* msg);
  static void set_has_dire_state(CMsgServerToGCMatchStateHistory_MatchState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState&
CMsgServerToGCMatchStateHistory_MatchState::HasBitSetters::radiant_state(const CMsgServerToGCMatchStateHistory_MatchState* msg) {
  return *msg->radiant_state_;
}
const ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState&
CMsgServerToGCMatchStateHistory_MatchState::HasBitSetters::dire_state(const CMsgServerToGCMatchStateHistory_MatchState* msg) {
  return *msg->dire_state_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchStateHistory_MatchState::kGameTimeFieldNumber;
const int CMsgServerToGCMatchStateHistory_MatchState::kRadiantStateFieldNumber;
const int CMsgServerToGCMatchStateHistory_MatchState::kDireStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
}
CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(const CMsgServerToGCMatchStateHistory_MatchState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_radiant_state()) {
    radiant_state_ = new ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState(*from.radiant_state_);
  } else {
    radiant_state_ = nullptr;
  }
  if (from.has_dire_state()) {
    dire_state_ = new ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState(*from.dire_state_);
  } else {
    dire_state_ = nullptr;
  }
  game_time_ = from.game_time_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
}

void CMsgServerToGCMatchStateHistory_MatchState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&radiant_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&radiant_state_)) + sizeof(game_time_));
}

CMsgServerToGCMatchStateHistory_MatchState::~CMsgServerToGCMatchStateHistory_MatchState() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  SharedDtor();
}

void CMsgServerToGCMatchStateHistory_MatchState::SharedDtor() {
  if (this != internal_default_instance()) delete radiant_state_;
  if (this != internal_default_instance()) delete dire_state_;
}

void CMsgServerToGCMatchStateHistory_MatchState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchStateHistory_MatchState& CMsgServerToGCMatchStateHistory_MatchState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchStateHistory_MatchState_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchStateHistory_MatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(radiant_state_ != nullptr);
      radiant_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dire_state_ != nullptr);
      dire_state_->Clear();
    }
  }
  game_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchStateHistory_MatchState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchStateHistory_MatchState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::_InternalParse;
        object = msg->mutable_radiant_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::_InternalParse;
        object = msg->mutable_dire_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchStateHistory_MatchState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radiant_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dire_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchStateHistory_MatchState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::radiant_state(this), output);
  }

  // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::dire_state(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
}

::google::protobuf::uint8* CMsgServerToGCMatchStateHistory_MatchState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::radiant_state(this), target);
  }

  // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::dire_state(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_MatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radiant_state_);
    }

    // optional .proto.dota.CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dire_state_);
    }

    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory_MatchState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory_MatchState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory_MatchState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory_MatchState::MergeFrom(const CMsgServerToGCMatchStateHistory_MatchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_radiant_state()->::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(from.radiant_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dire_state()->::proto::dota::CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(from.dire_state());
    }
    if (cached_has_bits & 0x00000004u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchStateHistory_MatchState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory_MatchState::CopyFrom(const CMsgServerToGCMatchStateHistory_MatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory.MatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_MatchState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_MatchState::Swap(CMsgServerToGCMatchStateHistory_MatchState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchStateHistory_MatchState::InternalSwap(CMsgServerToGCMatchStateHistory_MatchState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(radiant_state_, other->radiant_state_);
  swap(dire_state_, other->dire_state_);
  swap(game_time_, other->game_time_);
}

::google::protobuf::Metadata CMsgServerToGCMatchStateHistory_MatchState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCMatchStateHistory::InitAsDefaultInstance() {
}
class CMsgServerToGCMatchStateHistory::HasBitSetters {
 public:
  static void set_has_match_id(CMsgServerToGCMatchStateHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_radiant_won(CMsgServerToGCMatchStateHistory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_mmr(CMsgServerToGCMatchStateHistory* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchStateHistory::kMatchIdFieldNumber;
const int CMsgServerToGCMatchStateHistory::kRadiantWonFieldNumber;
const int CMsgServerToGCMatchStateHistory::kMmrFieldNumber;
const int CMsgServerToGCMatchStateHistory::kMatchStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchStateHistory)
}
CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(const CMsgServerToGCMatchStateHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      match_states_(from.match_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchStateHistory)
}

void CMsgServerToGCMatchStateHistory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerToGCMatchStateHistory_dota_5fgcmessages_5fserver_2eproto.base);
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mmr_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
}

CMsgServerToGCMatchStateHistory::~CMsgServerToGCMatchStateHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchStateHistory)
  SharedDtor();
}

void CMsgServerToGCMatchStateHistory::SharedDtor() {
}

void CMsgServerToGCMatchStateHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCMatchStateHistory& CMsgServerToGCMatchStateHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCMatchStateHistory_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCMatchStateHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchStateHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmr_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(mmr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCMatchStateHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCMatchStateHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool radiant_won = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_radiant_won(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mmr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_mmr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgServerToGCMatchStateHistory_MatchState::_InternalParse;
          object = msg->add_match_states();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCMatchStateHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchStateHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool radiant_won = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_radiant_won(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiant_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mmr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_mmr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mmr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_match_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchStateHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchStateHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCMatchStateHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchStateHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional bool radiant_won = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->radiant_won(), output);
  }

  // optional uint32 mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mmr(), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->match_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchStateHistory)
}

::google::protobuf::uint8* CMsgServerToGCMatchStateHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchStateHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional bool radiant_won = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->radiant_won(), target);
  }

  // optional uint32 mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mmr(), target);
  }

  // repeated .proto.dota.CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->match_states(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchStateHistory)
  return target;
}

size_t CMsgServerToGCMatchStateHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchStateHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->match_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->match_states(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool radiant_won = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 mmr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mmr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCMatchStateHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchStateHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCMatchStateHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchStateHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchStateHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchStateHistory::MergeFrom(const CMsgServerToGCMatchStateHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchStateHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_states_.MergeFrom(from.match_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      radiant_won_ = from.radiant_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      mmr_ = from.mmr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchStateHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchStateHistory::CopyFrom(const CMsgServerToGCMatchStateHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchStateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory::Swap(CMsgServerToGCMatchStateHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchStateHistory::InternalSwap(CMsgServerToGCMatchStateHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&match_states_)->InternalSwap(CastToBase(&other->match_states_));
  swap(match_id_, other->match_id_);
  swap(radiant_won_, other->radiant_won_);
  swap(mmr_, other->mmr_);
}

::google::protobuf::Metadata CMsgServerToGCMatchStateHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCavernCrawlIsHeroActive::InitAsDefaultInstance() {
}
class CMsgServerToGCCavernCrawlIsHeroActive::HasBitSetters {
 public:
  static void set_has_event_id(CMsgServerToGCCavernCrawlIsHeroActive* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_account_id(CMsgServerToGCCavernCrawlIsHeroActive* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgServerToGCCavernCrawlIsHeroActive* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCavernCrawlIsHeroActive::kEventIdFieldNumber;
const int CMsgServerToGCCavernCrawlIsHeroActive::kAccountIdFieldNumber;
const int CMsgServerToGCCavernCrawlIsHeroActive::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
}
CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(const CMsgServerToGCCavernCrawlIsHeroActive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
}

void CMsgServerToGCCavernCrawlIsHeroActive::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
}

CMsgServerToGCCavernCrawlIsHeroActive::~CMsgServerToGCCavernCrawlIsHeroActive() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  SharedDtor();
}

void CMsgServerToGCCavernCrawlIsHeroActive::SharedDtor() {
}

void CMsgServerToGCCavernCrawlIsHeroActive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCavernCrawlIsHeroActive& CMsgServerToGCCavernCrawlIsHeroActive::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCavernCrawlIsHeroActive_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCavernCrawlIsHeroActive::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCavernCrawlIsHeroActive::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCavernCrawlIsHeroActive*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCavernCrawlIsHeroActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCavernCrawlIsHeroActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
}

::google::protobuf::uint8* CMsgServerToGCCavernCrawlIsHeroActive::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCavernCrawlIsHeroActive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCavernCrawlIsHeroActive* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCavernCrawlIsHeroActive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCavernCrawlIsHeroActive::MergeFrom(const CMsgServerToGCCavernCrawlIsHeroActive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCavernCrawlIsHeroActive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCavernCrawlIsHeroActive::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActive::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActive::Swap(CMsgServerToGCCavernCrawlIsHeroActive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCavernCrawlIsHeroActive::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_id_, other->event_id_);
  swap(account_id_, other->account_id_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CMsgServerToGCCavernCrawlIsHeroActive::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::InitAsDefaultInstance() {
}
class CMsgServerToGCCavernCrawlIsHeroActiveResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgServerToGCCavernCrawlIsHeroActiveResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_potential_winnings(CMsgServerToGCCavernCrawlIsHeroActiveResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCavernCrawlIsHeroActiveResponse::kResultFieldNumber;
const int CMsgServerToGCCavernCrawlIsHeroActiveResponse::kPotentialWinningsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}
CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&potential_winnings_) -
    reinterpret_cast<char*>(&result_)) + sizeof(potential_winnings_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&potential_winnings_) -
      reinterpret_cast<char*>(&result_)) + sizeof(potential_winnings_));
}

CMsgServerToGCCavernCrawlIsHeroActiveResponse::~CMsgServerToGCCavernCrawlIsHeroActiveResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  SharedDtor();
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SharedDtor() {
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerToGCCavernCrawlIsHeroActiveResponse& CMsgServerToGCCavernCrawlIsHeroActiveResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerToGCCavernCrawlIsHeroActiveResponse_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerToGCCavernCrawlIsHeroActiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&potential_winnings_) -
        reinterpret_cast<char*>(&result_)) + sizeof(potential_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerToGCCavernCrawlIsHeroActiveResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerToGCCavernCrawlIsHeroActiveResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 potential_winnings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_potential_winnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 potential_winnings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_potential_winnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 potential_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->potential_winnings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}

::google::protobuf::uint8* CMsgServerToGCCavernCrawlIsHeroActiveResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 potential_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->potential_winnings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 potential_winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential_winnings());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCavernCrawlIsHeroActiveResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerToGCCavernCrawlIsHeroActiveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      potential_winnings_ = from.potential_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::Swap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCavernCrawlIsHeroActiveResponse::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(potential_winnings_, other->potential_winnings_);
}

::google::protobuf::Metadata CMsgServerToGCCavernCrawlIsHeroActiveResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCtoServerTensorflowInstance::InitAsDefaultInstance() {
}
class CMsgGCtoServerTensorflowInstance::HasBitSetters {
 public:
  static void set_has_server_instance(CMsgGCtoServerTensorflowInstance* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCtoServerTensorflowInstance::kServerInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCtoServerTensorflowInstance)
}
CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(const CMsgGCtoServerTensorflowInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_instance_ = from.server_instance_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCtoServerTensorflowInstance)
}

void CMsgGCtoServerTensorflowInstance::SharedCtor() {
  server_instance_ = 0u;
}

CMsgGCtoServerTensorflowInstance::~CMsgGCtoServerTensorflowInstance() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCtoServerTensorflowInstance)
  SharedDtor();
}

void CMsgGCtoServerTensorflowInstance::SharedDtor() {
}

void CMsgGCtoServerTensorflowInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCtoServerTensorflowInstance& CMsgGCtoServerTensorflowInstance::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCtoServerTensorflowInstance_dota_5fgcmessages_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCtoServerTensorflowInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_instance_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCtoServerTensorflowInstance::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCtoServerTensorflowInstance*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_instance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_instance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCtoServerTensorflowInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_instance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_instance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCtoServerTensorflowInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCtoServerTensorflowInstance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCtoServerTensorflowInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_instance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_instance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCtoServerTensorflowInstance)
}

::google::protobuf::uint8* CMsgGCtoServerTensorflowInstance::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_instance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_instance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCtoServerTensorflowInstance)
  return target;
}

size_t CMsgGCtoServerTensorflowInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_instance = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_instance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCtoServerTensorflowInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCtoServerTensorflowInstance* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCtoServerTensorflowInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCtoServerTensorflowInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCtoServerTensorflowInstance)
    MergeFrom(*source);
  }
}

void CMsgGCtoServerTensorflowInstance::MergeFrom(const CMsgGCtoServerTensorflowInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_instance()) {
    set_server_instance(from.server_instance());
  }
}

void CMsgGCtoServerTensorflowInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCtoServerTensorflowInstance::CopyFrom(const CMsgGCtoServerTensorflowInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCtoServerTensorflowInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCtoServerTensorflowInstance::IsInitialized() const {
  return true;
}

void CMsgGCtoServerTensorflowInstance::Swap(CMsgGCtoServerTensorflowInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCtoServerTensorflowInstance::InternalSwap(CMsgGCtoServerTensorflowInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_instance_, other->server_instance_);
}

::google::protobuf::Metadata CMsgGCtoServerTensorflowInstance::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fserver_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fserver_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPoorNetworkConditions_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgPoorNetworkConditions_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPoorNetworkConditions_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPoorNetworkConditions* Arena::CreateMaybeMessage< ::proto::dota::CMsgPoorNetworkConditions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPoorNetworkConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameserverCrash* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameserverCrash >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameserverCrash >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgConnectedPlayers_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgConnectedPlayers_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgConnectedPlayers_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgConnectedPlayers* Arena::CreateMaybeMessage< ::proto::dota::CMsgConnectedPlayers >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgConnectedPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameServerInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLeaverDetected* Arena::CreateMaybeMessage< ::proto::dota::CMsgLeaverDetected >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLeaverDetected >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLeaverDetectedResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgLeaverDetectedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLeaverDetectedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyFinalPlayerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyFinalPlayerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyFinalPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLivePlayerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLivePlayerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLivePlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyMatch* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyMatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAUpdateClippy* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAUpdateClippy >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAUpdateClippy >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCRealtimeStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCRealtimeStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCRealtimeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerRealtimeStatsStartStop* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerRealtimeStatsStartStop >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerRealtimeStatsStartStop >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerUpdateSteamBroadcasting* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerUpdateSteamBroadcasting >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerUpdateSteamBroadcasting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_CTeam* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_CTeam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_CTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_CCustomGameData* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_CCustomGameData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_CCustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut_WardPlacement* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut_WardPlacement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut_WardPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOut* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOut >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOut >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutDraftInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutDraftInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutDraftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutBotInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutBotInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutBotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutPlayerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutPlayerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutCommunicationSummary* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutCommunicationSummary >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutCommunicationSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignoutResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgTimedRewardContainer* Arena::CreateMaybeMessage< ::proto::dota::CMsgTimedRewardContainer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgTimedRewardContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOutPermissionRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOutPermissionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOutPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOutPermissionResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOutPermissionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOutPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameMatchSignOutEventGameData* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameMatchSignOutEventGameData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameMatchSignOutEventGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALiveScoreboardUpdate* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALiveScoreboardUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALiveScoreboardUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestPlayerResources* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestPlayerResources >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestPlayerResources >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestPlayerResourcesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestPlayerResourcesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestPlayerResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestBatchPlayerResources* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestBatchPlayerResources >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestBatchPlayerResources >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPlayerFailedToConnect* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPlayerFailedToConnect >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPlayerFailedToConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToRelayConnect* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToRelayConnect >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToRelayConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCGCToLANServerRelayConnect* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCGCToLANServerRelayConnect >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCGCToLANServerRelayConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToRelayConnectResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToRelayConnectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToRelayConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCBanStatusRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCBanStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCBanStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCBanStatusResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCBanStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCBanStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgTournamentItemEvent* Arena::CreateMaybeMessage< ::proto::dota::CMsgTournamentItemEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgTournamentItemEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgTournamentItemEventResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgTournamentItemEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgTournamentItemEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgTeamFanfare* Arena::CreateMaybeMessage< ::proto::dota::CMsgTeamFanfare >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgTeamFanfare >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgResponseTeamFanfare* Arena::CreateMaybeMessage< ::proto::dota::CMsgResponseTeamFanfare >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgResponseTeamFanfare >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameServerUploadSaveGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameServerUploadSaveGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameServerUploadSaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameServerSaveGameResult* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameServerSaveGameResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameServerSaveGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameServerGetLoadGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameServerGetLoadGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameServerGetLoadGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGameServerGetLoadGameResult* Arena::CreateMaybeMessage< ::proto::dota::CMsgGameServerGetLoadGameResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGameServerGetLoadGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAGenerateDiretidePrizeList* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAGenerateDiretidePrizeList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAGenerateDiretidePrizeList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAGenerateDiretidePrizeListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARewardDiretidePrizes* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARewardDiretidePrizes >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARewardDiretidePrizes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTADiretidePrizesRewardedResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTADiretidePrizesRewardedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTADiretidePrizesRewardedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAAwardEventPoints* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAAwardEventPoints >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAAwardEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFrostivusTimeElapsed* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFrostivusTimeElapsed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFrostivusTimeElapsed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerPingRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerPingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerPingResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerPingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerConsoleCommand* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerConsoleCommand >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerConsoleCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGetEventPoints* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGetEventPoints >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGetEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGetEventPointsResponse_Points* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGetEventPointsResponse_Points >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGetEventPointsResponse_Points >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGetEventPointsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGetEventPointsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGetEventPointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGrantSurveyPermission_Survey* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGrantSurveyPermission_Survey >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGrantSurveyPermission_Survey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGrantSurveyPermission* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGrantSurveyPermission >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGrantSurveyPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGrantSurveyPermissionResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGrantSurveyPermissionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGrantSurveyPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchConnectionStats_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchConnectionStats_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchConnectionStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchConnectionStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchConnectionStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchConnectionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerGCUpdateSpectatorCount* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerGCUpdateSpectatorCount >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerGCUpdateSpectatorCount >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSerializedCombatLog_Dictionary_DictString* Arena::CreateMaybeMessage< ::proto::dota::CSerializedCombatLog_Dictionary_DictString >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSerializedCombatLog_Dictionary_DictString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSerializedCombatLog_Dictionary* Arena::CreateMaybeMessage< ::proto::dota::CSerializedCombatLog_Dictionary >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSerializedCombatLog_Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSerializedCombatLog* Arena::CreateMaybeMessage< ::proto::dota::CSerializedCombatLog >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSerializedCombatLog >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCGetAdditionalEquips* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCGetAdditionalEquips >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCGetAdditionalEquips >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCGetProfileCard* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCGetProfileCard >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCGetProfileCard >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCGetProfileCardResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCGetProfileCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCGetProfileCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCVictoryPredictions_Record* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCVictoryPredictions_Record >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCVictoryPredictions_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCVictoryPredictions* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCVictoryPredictions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCVictoryPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSuspiciousActivity* Arena::CreateMaybeMessage< ::proto::dota::CMsgSuspiciousActivity >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSuspiciousActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCRequestStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCRequestStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCRequestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCRequestStatus_Response* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCRequestStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCRequestStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutAssassinMiniGameInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutAssassinMiniGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutAssassinMiniGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCGetIngameEventData* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCGetIngameEventData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCGetIngameEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerIngameEventDataOraclePA* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerIngameEventDataOraclePA >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerIngameEventDataOraclePA >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCKillSummaries_KillSummary* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCKillSummaries_KillSummary >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCKillSummaries_KillSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCKillSummaries* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCKillSummaries >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCKillSummaries >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerPredictionResult_Prediction* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerPredictionResult_Prediction >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerPredictionResult_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToServerPredictionResult* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToServerPredictionResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToServerPredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCLockCharmTrading* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCLockCharmTrading >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCLockCharmTrading >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutUpdatePlayerChallenge* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutUpdatePlayerChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutUpdatePlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCRerollPlayerChallenge* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCRerollPlayerChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCRerollPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCHoldEventPoints* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCHoldEventPoints >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCHoldEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutReleaseEventPointHolds* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutReleaseEventPointHolds >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutReleaseEventPointHolds >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutWagerStats_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutWagerStats_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutWagerStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutWagerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutWagerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutWagerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpendWager_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpendWager_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpendWager_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpendWager* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpendWager >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpendWager >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutXPCoins_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutXPCoins_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutXPCoins_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutXPCoins* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutXPCoins >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutXPCoins >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSignOutCommunityGoalProgress* Arena::CreateMaybeMessage< ::proto::dota::CMsgSignOutCommunityGoalProgress >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSignOutCommunityGoalProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCPostMatchTip* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCPostMatchTip >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCPostMatchTip >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCPostMatchTipResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCPostMatchTipResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCPostMatchTipResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVoting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCCompendiumInGamePredictionResults >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchStateHistory_PlayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchStateHistory_TeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchStateHistory_MatchState* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchStateHistory_MatchState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchStateHistory_MatchState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCMatchStateHistory* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCMatchStateHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCMatchStateHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActive >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerToGCCavernCrawlIsHeroActiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCtoServerTensorflowInstance* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCtoServerTensorflowInstance >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCtoServerTensorflowInstance >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
