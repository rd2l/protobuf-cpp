// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#include "dota_match_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CSOEconItem_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_CDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto;
namespace proto {
namespace dota {
class CDOTAMatchMetadataFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadataFile> _instance;
} _CDOTAMatchMetadataFile_default_instance_;
class CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_PlayerKill> _instance;
} _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
class CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_ItemPurchase> _instance;
} _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
class CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_InventorySnapshot> _instance;
} _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
class CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_AutoStyleCriteria> _instance;
} _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
class CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_StrangeGemProgress> _instance;
} _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
class CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_VictoryPrediction> _instance;
} _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
class CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_SubChallenge> _instance;
} _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
class CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_EventData> _instance;
} _CDOTAMatchMetadata_Team_EventData_default_instance_;
class CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_Player> _instance;
} _CDOTAMatchMetadata_Team_Player_default_instance_;
class CDOTAMatchMetadata_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team> _instance;
} _CDOTAMatchMetadata_Team_default_instance_;
class CDOTAMatchMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata> _instance;
} _CDOTAMatchMetadata_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget> _instance;
} _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility> _instance;
} _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment> _instance;
} _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget> _instance;
} _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord> _instance;
} _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_;
class CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player> _instance;
} _CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
class CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Building> _instance;
} _CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
class CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team> _instance;
} _CDOTAMatchPrivateMetadata_Team_default_instance_;
class CDOTAMatchPrivateMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata> _instance;
} _CDOTAMatchPrivateMetadata_default_instance_;
class CMsgDOTADPCMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTADPCMatch> _instance;
} _CMsgDOTADPCMatch_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCDOTAMatchMetadataFile_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadataFile_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadataFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadataFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchMetadataFile_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchMetadataFile_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_EventData_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_EventData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_EventData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_Player_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_CDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsCDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CSOEconItem_base_5fgcmessages_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_Team_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchMetadata_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CLobbyTimedRewardDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgMatchTips_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto}, {}};

static void InitDefaultsCDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_Team_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base,
      &scc_info_CDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCDOTAMatchPrivateMetadata_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAMatchPrivateMetadata_default_instance_;
    new (ptr) ::proto::dota::CDOTAMatchPrivateMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAMatchPrivateMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAMatchPrivateMetadata_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAMatchPrivateMetadata_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base,}};

static void InitDefaultsCMsgDOTADPCMatch_dota_5fmatch_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTADPCMatch_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTADPCMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTADPCMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTADPCMatch_dota_5fmatch_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTADPCMatch_dota_5fmatch_5fmetadata_2eproto}, {
      &scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto.base,}};

void InitDefaults_dota_5fmatch_5fmetadata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadataFile_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAMatchPrivateMetadata_dota_5fmatch_5fmetadata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTADPCMatch_dota_5fmatch_5fmetadata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fmatch_5fmetadata_2eproto[22];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_dota_5fmatch_5fmetadata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fmatch_5fmetadata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fmatch_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadataFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadataFile, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadataFile, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadataFile, metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadataFile, private_metadata_),
  3,
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_PlayerKill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_PlayerKill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_PlayerKill, victim_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_PlayerKill, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot, level_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, gem_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, required_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, starting_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, ending_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction, starting_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge, start_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge, end_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge, completed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, event_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, challenge_quest_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, challenge_quest_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, challenge_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, challenge_rank_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, challenge_rank_previously_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, event_owned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, sub_challenges_with_progress_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, wager_winnings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, cavern_challenge_active_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, cavern_challenge_winnings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, amount_wagered_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, team_wager_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_EventData, periodic_point_adjustments_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  8,
  ~0u,
  10,
  9,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, equipped_econ_items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, win_streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, fight_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, farm_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, support_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, push_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, level_up_times_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, inventory_snapshot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, avg_stats_calibrated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, auto_style_criteria_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, event_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, strange_gem_progress_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, hero_xp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, victory_prediction_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team_Player, lane_selection_flags_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  ~0u,
  ~0u,
  ~0u,
  18,
  19,
  ~0u,
  20,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, dota_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, graph_experience_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, graph_gold_earned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, cm_first_pick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, cm_captain_player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, cm_bans_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, cm_picks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata_Team, cm_penalty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, item_rewards_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, report_until_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, event_game_custom_table_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchMetadata, match_tips_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, damage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, source_unit_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, by_hero_targets_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, damage_by_ability_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, elapsed_duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, is_hidden_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, buff_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, buff_modifier_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, by_hero_targets_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, position_stream_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, combat_segments_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, damage_unit_names_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, buff_records_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, graph_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, graph_deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, graph_assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, graph_lasthits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player, graph_denies_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building, unit_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building, position_quant_x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building, position_quant_y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building, death_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team, dota_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata_Team, buildings_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAMatchPrivateMetadata, graph_win_probability_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCMatch, match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCMatch, metadata_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::dota::CDOTAMatchMetadataFile)},
  { 13, 20, sizeof(::proto::dota::CDOTAMatchMetadata_Team_PlayerKill)},
  { 22, 29, sizeof(::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase)},
  { 31, 42, sizeof(::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot)},
  { 48, 55, sizeof(::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria)},
  { 57, 69, sizeof(::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress)},
  { 76, 85, sizeof(::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction)},
  { 89, 98, sizeof(::proto::dota::CDOTAMatchMetadata_Team_SubChallenge)},
  { 102, 123, sizeof(::proto::dota::CDOTAMatchMetadata_Team_EventData)},
  { 139, 176, sizeof(::proto::dota::CDOTAMatchMetadata_Team_Player)},
  { 208, 223, sizeof(::proto::dota::CDOTAMatchMetadata_Team)},
  { 233, 245, sizeof(::proto::dota::CDOTAMatchMetadata)},
  { 252, 259, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget)},
  { 261, 269, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility)},
  { 272, 279, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment)},
  { 281, 289, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget)},
  { 292, 300, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord)},
  { 303, 319, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Player)},
  { 330, 339, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team_Building)},
  { 343, 351, sizeof(::proto::dota::CDOTAMatchPrivateMetadata_Team)},
  { 354, 361, sizeof(::proto::dota::CDOTAMatchPrivateMetadata)},
  { 363, 370, sizeof(::proto::dota::CMsgDOTADPCMatch)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadataFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_PlayerKill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_SubChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_EventData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_Building_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAMatchPrivateMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTADPCMatch_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto = {
  {}, AddDescriptors_dota_5fmatch_5fmetadata_2eproto, "dota_match_metadata.proto", schemas,
  file_default_instances, TableStruct_dota_5fmatch_5fmetadata_2eproto::offsets,
  file_level_metadata_dota_5fmatch_5fmetadata_2eproto, 22, file_level_enum_descriptors_dota_5fmatch_5fmetadata_2eproto, file_level_service_descriptors_dota_5fmatch_5fmetadata_2eproto,
};

const char descriptor_table_protodef_dota_5fmatch_5fmetadata_2eproto[] =
  "\n\031dota_match_metadata.proto\022\nproto.dota\032"
  "\025base_gcmessages.proto\032-dota_gcmessages_"
  "common_match_management.proto\032\034dota_gcme"
  "ssages_common.proto\"\207\001\n\026CDOTAMatchMetada"
  "taFile\022\017\n\007version\030\001 \002(\005\022\020\n\010match_id\030\002 \002("
  "\004\0220\n\010metadata\030\003 \001(\0132\036.proto.dota.CDOTAMa"
  "tchMetadata\022\030\n\020private_metadata\030\005 \001(\014\"\367\026"
  "\n\022CDOTAMatchMetadata\0222\n\005teams\030\001 \003(\0132#.pr"
  "oto.dota.CDOTAMatchMetadata.Team\022:\n\014item"
  "_rewards\030\002 \003(\0132$.proto.dota.CLobbyTimedR"
  "ewardDetails\022\020\n\010lobby_id\030\003 \001(\006\022\031\n\021report"
  "_until_time\030\004 \001(\006\022\037\n\027event_game_custom_t"
  "able\030\005 \001(\014\022\030\n\020primary_event_id\030\006 \001(\r\022-\n\n"
  "match_tips\030\007 \003(\0132\031.proto.dota.CMsgMatchT"
  "ips\032\331\024\n\004Team\022\021\n\tdota_team\030\001 \001(\r\022;\n\007playe"
  "rs\030\002 \003(\0132*.proto.dota.CDOTAMatchMetadata"
  ".Team.Player\022\030\n\020graph_experience\030\003 \003(\002\022\031"
  "\n\021graph_gold_earned\030\004 \003(\002\022\027\n\017graph_net_w"
  "orth\030\005 \003(\002\022\025\n\rcm_first_pick\030\006 \001(\010\022\034\n\024cm_"
  "captain_player_id\030\007 \001(\r\022\017\n\007cm_bans\030\010 \003(\r"
  "\022\020\n\010cm_picks\030\t \003(\r\022\022\n\ncm_penalty\030\n \001(\r\0320"
  "\n\nPlayerKill\022\023\n\013victim_slot\030\001 \001(\r\022\r\n\005cou"
  "nt\030\002 \001(\r\0326\n\014ItemPurchase\022\017\n\007item_id\030\001 \001("
  "\r\022\025\n\rpurchase_time\030\002 \001(\005\032v\n\021InventorySna"
  "pshot\022\017\n\007item_id\030\001 \003(\r\022\021\n\tgame_time\030\002 \001("
  "\005\022\r\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assi"
  "sts\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\0326\n\021AutoStyleCri"
  "teria\022\022\n\nname_token\030\001 \001(\r\022\r\n\005value\030\002 \001(\002"
  "\032\306\001\n\022StrangeGemProgress\022\027\n\017kill_eater_ty"
  "pe\030\001 \001(\r\022\032\n\022gem_item_def_index\030\002 \001(\r\022\030\n\020"
  "required_hero_id\030\003 \001(\r\022\026\n\016starting_value"
  "\030\004 \001(\r\022\024\n\014ending_value\030\005 \001(\r\022\034\n\024owner_it"
  "em_def_index\030\006 \001(\r\022\025\n\rowner_item_id\030\007 \001("
  "\004\032h\n\021VictoryPrediction\022\017\n\007item_id\030\001 \001(\004\022"
  "\026\n\016item_def_index\030\002 \001(\r\022\026\n\016starting_valu"
  "e\030\003 \001(\r\022\022\n\nis_victory\030\004 \001(\010\032Z\n\014SubChalle"
  "nge\022\017\n\007slot_id\030\001 \001(\r\022\023\n\013start_value\030\002 \001("
  "\r\022\021\n\tend_value\030\003 \001(\r\022\021\n\tcompleted\030\004 \001(\010\032"
  "\240\004\n\tEventData\022\020\n\010event_id\030\001 \001(\r\022\024\n\014event"
  "_points\030\002 \001(\r\022\035\n\025challenge_instance_id\030\003"
  " \001(\r\022\032\n\022challenge_quest_id\030\004 \001(\r\022$\n\034chal"
  "lenge_quest_challenge_id\030\005 \001(\r\022\033\n\023challe"
  "nge_completed\030\006 \001(\010\022 \n\030challenge_rank_co"
  "mpleted\030\007 \001(\r\022+\n#challenge_rank_previous"
  "ly_completed\030\010 \001(\r\022\023\n\013event_owned\030\t \001(\010\022"
  "V\n\034sub_challenges_with_progress\030\n \003(\01320."
  "proto.dota.CDOTAMatchMetadata.Team.SubCh"
  "allenge\022\026\n\016wager_winnings\030\013 \001(\r\022\037\n\027caver"
  "n_challenge_active\030\014 \001(\010\022!\n\031cavern_chall"
  "enge_winnings\030\r \001(\r\022\026\n\016amount_wagered\030\016 "
  "\001(\r\022\031\n\021team_wager_amount\030\017 \001(\r\022\"\n\032period"
  "ic_point_adjustments\030\020 \001(\r\032\372\010\n\006Player\022\022\n"
  "\naccount_id\030\001 \001(\r\022\030\n\020ability_upgrades\030\002 "
  "\003(\r\022\023\n\013player_slot\030\003 \001(\r\0224\n\023equipped_eco"
  "n_items\030\004 \003(\0132\027.proto.dota.CSOEconItem\022="
  "\n\005kills\030\005 \003(\0132..proto.dota.CDOTAMatchMet"
  "adata.Team.PlayerKill\022\?\n\005items\030\006 \003(\01320.p"
  "roto.dota.CDOTAMatchMetadata.Team.ItemPu"
  "rchase\022\025\n\ravg_kills_x16\030\007 \001(\r\022\026\n\016avg_dea"
  "ths_x16\030\010 \001(\r\022\027\n\017avg_assists_x16\030\t \001(\r\022\023"
  "\n\013avg_gpm_x16\030\n \001(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r"
  "\022\026\n\016best_kills_x16\030\014 \001(\r\022\030\n\020best_assists"
  "_x16\030\r \001(\r\022\024\n\014best_gpm_x16\030\016 \001(\r\022\024\n\014best"
  "_xpm_x16\030\017 \001(\r\022\022\n\nwin_streak\030\020 \001(\r\022\027\n\017be"
  "st_win_streak\030\021 \001(\r\022\023\n\013fight_score\030\022 \001(\002"
  "\022\022\n\nfarm_score\030\023 \001(\002\022\025\n\rsupport_score\030\024 "
  "\001(\002\022\022\n\npush_score\030\025 \001(\002\022\026\n\016level_up_time"
  "s\030\026 \003(\r\022\027\n\017graph_net_worth\030\027 \003(\002\022Q\n\022inve"
  "ntory_snapshot\030\030 \003(\01325.proto.dota.CDOTAM"
  "atchMetadata.Team.InventorySnapshot\022\034\n\024a"
  "vg_stats_calibrated\030\031 \001(\010\022R\n\023auto_style_"
  "criteria\030\032 \003(\01325.proto.dota.CDOTAMatchMe"
  "tadata.Team.AutoStyleCriteria\022A\n\nevent_d"
  "ata\030\035 \003(\0132-.proto.dota.CDOTAMatchMetadat"
  "a.Team.EventData\022T\n\024strange_gem_progress"
  "\030\036 \003(\01326.proto.dota.CDOTAMatchMetadata.T"
  "eam.StrangeGemProgress\022\017\n\007hero_xp\030\037 \001(\r\022"
  "\025\n\rcamps_stacked\030  \001(\r\022Q\n\022victory_predic"
  "tion\030! \003(\01325.proto.dota.CDOTAMatchMetada"
  "ta.Team.VictoryPrediction\022\034\n\024lane_select"
  "ion_flags\030\" \001(\r\"\374\n\n\031CDOTAMatchPrivateMet"
  "adata\0229\n\005teams\030\001 \003(\0132*.proto.dota.CDOTAM"
  "atchPrivateMetadata.Team\022\035\n\025graph_win_pr"
  "obability\030\002 \003(\002\032\204\n\n\004Team\022\021\n\tdota_team\030\001 "
  "\001(\r\022B\n\007players\030\002 \003(\01321.proto.dota.CDOTAM"
  "atchPrivateMetadata.Team.Player\022F\n\tbuild"
  "ings\030\003 \003(\01323.proto.dota.CDOTAMatchPrivat"
  "eMetadata.Team.Building\032\365\007\n\006Player\022\022\n\nac"
  "count_id\030\001 \001(\r\022\023\n\013player_slot\030\002 \001(\r\022\027\n\017p"
  "osition_stream\030\003 \001(\014\022X\n\017combat_segments\030"
  "\004 \003(\0132\?.proto.dota.CDOTAMatchPrivateMeta"
  "data.Team.Player.CombatSegment\022\031\n\021damage"
  "_unit_names\030\005 \003(\t\022R\n\014buff_records\030\006 \003(\0132"
  "<.proto.dota.CDOTAMatchPrivateMetadata.T"
  "eam.Player.BuffRecord\022\023\n\013graph_kills\030\007 \003"
  "(\002\022\024\n\014graph_deaths\030\010 \003(\002\022\025\n\rgraph_assist"
  "s\030\t \003(\002\022\026\n\016graph_lasthits\030\n \003(\002\022\024\n\014graph"
  "_denies\030\013 \003(\002\032\371\002\n\rCombatSegment\022\021\n\tgame_"
  "time\030\001 \001(\005\022j\n\021damage_by_ability\030\002 \003(\0132O."
  "proto.dota.CDOTAMatchPrivateMetadata.Tea"
  "m.Player.CombatSegment.DamageByAbility\032\350"
  "\001\n\017DamageByAbility\022\031\n\021source_unit_index\030"
  "\003 \001(\r\022\022\n\nability_id\030\001 \001(\r\022u\n\017by_hero_tar"
  "gets\030\002 \003(\0132\\.proto.dota.CDOTAMatchPrivat"
  "eMetadata.Team.Player.CombatSegment.Dama"
  "geByAbility.ByHeroTarget\032/\n\014ByHeroTarget"
  "\022\017\n\007hero_id\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\032\363\001\n\nBu"
  "ffRecord\022\027\n\017buff_ability_id\030\001 \001(\r\022\032\n\022buf"
  "f_modifier_name\030\003 \001(\t\022b\n\017by_hero_targets"
  "\030\002 \003(\0132I.proto.dota.CDOTAMatchPrivateMet"
  "adata.Team.Player.BuffRecord.ByHeroTarge"
  "t\032L\n\014ByHeroTarget\022\017\n\007hero_id\030\001 \001(\r\022\030\n\020el"
  "apsed_duration\030\002 \001(\002\022\021\n\tis_hidden\030\003 \001(\010\032"
  "e\n\010Building\022\021\n\tunit_name\030\001 \001(\t\022\030\n\020positi"
  "on_quant_x\030\002 \001(\r\022\030\n\020position_quant_y\030\003 \001"
  "(\r\022\022\n\ndeath_time\030\004 \001(\002\"n\n\020CMsgDOTADPCMat"
  "ch\022(\n\005match\030\001 \001(\0132\031.proto.dota.CMsgDOTAM"
  "atch\0220\n\010metadata\030\002 \001(\0132\036.proto.dota.CDOT"
  "AMatchMetadataB\003\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fmatch_5fmetadata_2eproto = {
  false, InitDefaults_dota_5fmatch_5fmetadata_2eproto, 
  descriptor_table_protodef_dota_5fmatch_5fmetadata_2eproto,
  "dota_match_metadata.proto", &assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto, 4739,
};

void AddDescriptors_dota_5fmatch_5fmetadata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_base_5fgcmessages_2eproto,
    ::AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
    ::AddDescriptors_dota_5fgcmessages_5fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fmatch_5fmetadata_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fmatch_5fmetadata_2eproto = []() { AddDescriptors_dota_5fmatch_5fmetadata_2eproto(); return true; }();
namespace proto {
namespace dota {

// ===================================================================

void CDOTAMatchMetadataFile::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAMatchMetadataFile_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::proto::dota::CDOTAMatchMetadata*>(
      ::proto::dota::CDOTAMatchMetadata::internal_default_instance());
}
class CDOTAMatchMetadataFile::HasBitSetters {
 public:
  static void set_has_version(CDOTAMatchMetadataFile* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_match_id(CDOTAMatchMetadataFile* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CDOTAMatchMetadata& metadata(const CDOTAMatchMetadataFile* msg);
  static void set_has_metadata(CDOTAMatchMetadataFile* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_private_metadata(CDOTAMatchMetadataFile* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAMatchMetadata&
CDOTAMatchMetadataFile::HasBitSetters::metadata(const CDOTAMatchMetadataFile* msg) {
  return *msg->metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadataFile::kVersionFieldNumber;
const int CDOTAMatchMetadataFile::kMatchIdFieldNumber;
const int CDOTAMatchMetadataFile::kMetadataFieldNumber;
const int CDOTAMatchMetadataFile::kPrivateMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadataFile::CDOTAMatchMetadataFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadataFile)
}
CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_metadata()) {
    private_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_metadata_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::proto::dota::CDOTAMatchMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadataFile)
}

void CDOTAMatchMetadataFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchMetadataFile_dota_5fmatch_5fmetadata_2eproto.base);
  private_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(version_));
}

CDOTAMatchMetadataFile::~CDOTAMatchMetadataFile() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadataFile)
  SharedDtor();
}

void CDOTAMatchMetadataFile::SharedDtor() {
  private_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void CDOTAMatchMetadataFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadataFile& CDOTAMatchMetadataFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadataFile_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      private_metadata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadataFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadataFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMatchMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes private_metadata = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_private_metadata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadataFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes private_metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadataFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  // optional bytes private_metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->private_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadataFile)
}

::google::protobuf::uint8* CDOTAMatchMetadataFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  // optional bytes private_metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->private_metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadataFile)
  return target;
}

size_t CDOTAMatchMetadataFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (has_match_id()) {
    // required uint64 match_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  return total_size;
}
size_t CDOTAMatchMetadataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 match_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());

    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes private_metadata = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_metadata());
    }

    // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadataFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadataFile* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadataFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadataFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadataFile)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadataFile::MergeFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metadata()->::proto::dota::CDOTAMatchMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadataFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadataFile::CopyFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void CDOTAMatchMetadataFile::Swap(CDOTAMatchMetadataFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadataFile::InternalSwap(CDOTAMatchMetadataFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_metadata_.Swap(&other->private_metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(match_id_, other->match_id_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata CDOTAMatchMetadataFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_PlayerKill::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_PlayerKill::HasBitSetters {
 public:
  static void set_has_victim_slot(CDOTAMatchMetadata_Team_PlayerKill* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_count(CDOTAMatchMetadata_Team_PlayerKill* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_PlayerKill::kVictimSlotFieldNumber;
const int CDOTAMatchMetadata_Team_PlayerKill::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
}
CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&victim_slot_, &from.victim_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor() {
  ::memset(&victim_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
}

void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_PlayerKill::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_PlayerKill_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&victim_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_PlayerKill::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_PlayerKill*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 victim_slot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_victim_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_PlayerKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victim_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_victim_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_PlayerKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victim_slot(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_PlayerKill::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

size_t CDOTAMatchMetadata_Team_PlayerKill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 victim_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_slot());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_PlayerKill* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_PlayerKill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      victim_slot_ = from.victim_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::Swap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_PlayerKill::InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(victim_slot_, other->victim_slot_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_ItemPurchase::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_ItemPurchase::HasBitSetters {
 public:
  static void set_has_item_id(CDOTAMatchMetadata_Team_ItemPurchase* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_purchase_time(CDOTAMatchMetadata_Team_ItemPurchase* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_ItemPurchase::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_ItemPurchase::kPurchaseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
}
CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purchase_time_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
}

void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_ItemPurchase::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_ItemPurchase_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_time_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_ItemPurchase::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_ItemPurchase*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 purchase_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_purchase_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_ItemPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 purchase_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_purchase_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_ItemPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_ItemPurchase::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

size_t CDOTAMatchMetadata_Team_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional int32 purchase_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ItemPurchase* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_ItemPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_time_ = from.purchase_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::Swap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_ItemPurchase::InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
  swap(purchase_time_, other->purchase_time_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_InventorySnapshot::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_InventorySnapshot::HasBitSetters {
 public:
  static void set_has_game_time(CDOTAMatchMetadata_Team_InventorySnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kills(CDOTAMatchMetadata_Team_InventorySnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_deaths(CDOTAMatchMetadata_Team_InventorySnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_assists(CDOTAMatchMetadata_Team_InventorySnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_level(CDOTAMatchMetadata_Team_InventorySnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_InventorySnapshot::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kGameTimeFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kKillsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kDeathsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kAssistsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
}
CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_id_(from.item_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor() {
  ::memset(&game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_InventorySnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_InventorySnapshot_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_InventorySnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_item_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_item_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 game_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kills = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_deaths(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 assists = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_assists(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_InventorySnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_item_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_InventorySnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  for (int i = 0, n = this->item_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_id(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_time(), output);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_InventorySnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->item_id_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

size_t CDOTAMatchMetadata_Team_InventorySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 game_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_InventorySnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_InventorySnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_id_.MergeFrom(from.item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_InventorySnapshot::InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_id_.InternalSwap(&other->item_id_);
  swap(game_time_, other->game_time_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(level_, other->level_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_AutoStyleCriteria::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_AutoStyleCriteria::HasBitSetters {
 public:
  static void set_has_name_token(CDOTAMatchMetadata_Team_AutoStyleCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CDOTAMatchMetadata_Team_AutoStyleCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_AutoStyleCriteria::kNameTokenFieldNumber;
const int CDOTAMatchMetadata_Team_AutoStyleCriteria::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
}
CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_token_, &from.name_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor() {
  ::memset(&name_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_AutoStyleCriteria_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_AutoStyleCriteria*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 name_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_name_token(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_AutoStyleCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 name_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_name_token(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->name_token(), output);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->name_token(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

size_t CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 name_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_token());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_AutoStyleCriteria* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_AutoStyleCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_token_ = from.name_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_token_, other->name_token_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_StrangeGemProgress::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_StrangeGemProgress::HasBitSetters {
 public:
  static void set_has_kill_eater_type(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gem_item_def_index(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_required_hero_id(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_starting_value(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ending_value(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_owner_item_def_index(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_owner_item_id(CDOTAMatchMetadata_Team_StrangeGemProgress* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kKillEaterTypeFieldNumber;
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kGemItemDefIndexFieldNumber;
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kRequiredHeroIdFieldNumber;
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kStartingValueFieldNumber;
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kEndingValueFieldNumber;
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kOwnerItemDefIndexFieldNumber;
const int CDOTAMatchMetadata_Team_StrangeGemProgress::kOwnerItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
}
CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_eater_type_, &from.kill_eater_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedCtor() {
  ::memset(&kill_eater_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_item_id_) -
      reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
}

CDOTAMatchMetadata_Team_StrangeGemProgress::~CDOTAMatchMetadata_Team_StrangeGemProgress() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedDtor() {
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_StrangeGemProgress& CDOTAMatchMetadata_Team_StrangeGemProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_StrangeGemProgress_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_StrangeGemProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&kill_eater_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_item_id_) -
        reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_StrangeGemProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 kill_eater_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_kill_eater_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gem_item_def_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gem_item_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 required_hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_required_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 starting_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_starting_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ending_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ending_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_item_def_index = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_owner_item_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 owner_item_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_owner_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_StrangeGemProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kill_eater_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_kill_eater_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_eater_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gem_item_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gem_item_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_required_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 starting_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_starting_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starting_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ending_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ending_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ending_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_item_def_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_owner_item_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 owner_item_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_owner_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_StrangeGemProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 kill_eater_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kill_eater_type(), output);
  }

  // optional uint32 gem_item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gem_item_def_index(), output);
  }

  // optional uint32 required_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_hero_id(), output);
  }

  // optional uint32 starting_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starting_value(), output);
  }

  // optional uint32 ending_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ending_value(), output);
  }

  // optional uint32 owner_item_def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->owner_item_def_index(), output);
  }

  // optional uint64 owner_item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->owner_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_StrangeGemProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 kill_eater_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kill_eater_type(), target);
  }

  // optional uint32 gem_item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gem_item_def_index(), target);
  }

  // optional uint32 required_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->required_hero_id(), target);
  }

  // optional uint32 starting_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starting_value(), target);
  }

  // optional uint32 ending_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ending_value(), target);
  }

  // optional uint32 owner_item_def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->owner_item_def_index(), target);
  }

  // optional uint64 owner_item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->owner_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_StrangeGemProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 kill_eater_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_eater_type());
    }

    // optional uint32 gem_item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_item_def_index());
    }

    // optional uint32 required_hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_hero_id());
    }

    // optional uint32 starting_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starting_value());
    }

    // optional uint32 ending_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ending_value());
    }

    // optional uint32 owner_item_def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_item_def_index());
    }

    // optional uint64 owner_item_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_StrangeGemProgress* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_StrangeGemProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      kill_eater_type_ = from.kill_eater_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      gem_item_def_index_ = from.gem_item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_hero_id_ = from.required_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      ending_value_ = from.ending_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      owner_item_def_index_ = from.owner_item_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      owner_item_id_ = from.owner_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_StrangeGemProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::Swap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kill_eater_type_, other->kill_eater_type_);
  swap(gem_item_def_index_, other->gem_item_def_index_);
  swap(required_hero_id_, other->required_hero_id_);
  swap(starting_value_, other->starting_value_);
  swap(ending_value_, other->ending_value_);
  swap(owner_item_def_index_, other->owner_item_def_index_);
  swap(owner_item_id_, other->owner_item_id_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_StrangeGemProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_VictoryPrediction::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_VictoryPrediction::HasBitSetters {
 public:
  static void set_has_item_id(CDOTAMatchMetadata_Team_VictoryPrediction* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_def_index(CDOTAMatchMetadata_Team_VictoryPrediction* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_starting_value(CDOTAMatchMetadata_Team_VictoryPrediction* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_victory(CDOTAMatchMetadata_Team_VictoryPrediction* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_VictoryPrediction::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_VictoryPrediction::kItemDefIndexFieldNumber;
const int CDOTAMatchMetadata_Team_VictoryPrediction::kStartingValueFieldNumber;
const int CDOTAMatchMetadata_Team_VictoryPrediction::kIsVictoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
}
CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_victory_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
}

CDOTAMatchMetadata_Team_VictoryPrediction::~CDOTAMatchMetadata_Team_VictoryPrediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SharedDtor() {
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_VictoryPrediction& CDOTAMatchMetadata_Team_VictoryPrediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_VictoryPrediction_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_VictoryPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_victory_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_VictoryPrediction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 starting_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_starting_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_victory = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_victory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_VictoryPrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 starting_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_starting_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starting_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_victory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_victory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_VictoryPrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional uint32 starting_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starting_value(), output);
  }

  // optional bool is_victory = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_victory(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_VictoryPrediction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional uint32 starting_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starting_value(), target);
  }

  // optional bool is_victory = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_victory(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  return target;
}

size_t CDOTAMatchMetadata_Team_VictoryPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional uint32 starting_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starting_value());
    }

    // optional bool is_victory = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_VictoryPrediction* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_VictoryPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_victory_ = from.is_victory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_VictoryPrediction::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::Swap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_VictoryPrediction::InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
  swap(item_def_index_, other->item_def_index_);
  swap(starting_value_, other->starting_value_);
  swap(is_victory_, other->is_victory_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_VictoryPrediction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_SubChallenge::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_SubChallenge::HasBitSetters {
 public:
  static void set_has_slot_id(CDOTAMatchMetadata_Team_SubChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_start_value(CDOTAMatchMetadata_Team_SubChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_end_value(CDOTAMatchMetadata_Team_SubChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_completed(CDOTAMatchMetadata_Team_SubChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_SubChallenge::kSlotIdFieldNumber;
const int CDOTAMatchMetadata_Team_SubChallenge::kStartValueFieldNumber;
const int CDOTAMatchMetadata_Team_SubChallenge::kEndValueFieldNumber;
const int CDOTAMatchMetadata_Team_SubChallenge::kCompletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
}
CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
}

void CDOTAMatchMetadata_Team_SubChallenge::SharedCtor() {
  ::memset(&slot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
}

CDOTAMatchMetadata_Team_SubChallenge::~CDOTAMatchMetadata_Team_SubChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_SubChallenge::SharedDtor() {
}

void CDOTAMatchMetadata_Team_SubChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_SubChallenge& CDOTAMatchMetadata_Team_SubChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_SubChallenge_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_SubChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_SubChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_SubChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_slot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_end_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool completed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_SubChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_slot_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_start_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_end_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool completed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_SubChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_id(), output);
  }

  // optional uint32 start_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_value(), output);
  }

  // optional uint32 end_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_value(), output);
  }

  // optional bool completed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->completed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_SubChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_id(), target);
  }

  // optional uint32 start_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_value(), target);
  }

  // optional uint32 end_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_value(), target);
  }

  // optional bool completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->completed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  return target;
}

size_t CDOTAMatchMetadata_Team_SubChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 start_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_value());
    }

    // optional uint32 end_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_value());
    }

    // optional bool completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_SubChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_SubChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_value_ = from.start_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_value_ = from.end_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_SubChallenge::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_SubChallenge::Swap(CDOTAMatchMetadata_Team_SubChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_SubChallenge::InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_id_, other->slot_id_);
  swap(start_value_, other->start_value_);
  swap(end_value_, other->end_value_);
  swap(completed_, other->completed_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_SubChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_EventData::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_EventData::HasBitSetters {
 public:
  static void set_has_event_id(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event_points(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_challenge_instance_id(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_challenge_quest_id(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_challenge_quest_challenge_id(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_challenge_completed(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_challenge_rank_completed(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_challenge_rank_previously_completed(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_event_owned(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_wager_winnings(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_cavern_challenge_active(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_cavern_challenge_winnings(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_amount_wagered(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_team_wager_amount(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_periodic_point_adjustments(CDOTAMatchMetadata_Team_EventData* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_EventData::kEventIdFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kEventPointsFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kChallengeInstanceIdFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kChallengeQuestIdFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kChallengeQuestChallengeIdFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kChallengeCompletedFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kChallengeRankCompletedFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kChallengeRankPreviouslyCompletedFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kEventOwnedFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kSubChallengesWithProgressFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kWagerWinningsFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kCavernChallengeActiveFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kCavernChallengeWinningsFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kAmountWageredFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kTeamWagerAmountFieldNumber;
const int CDOTAMatchMetadata_Team_EventData::kPeriodicPointAdjustmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.EventData)
}
CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sub_challenges_with_progress_(from.sub_challenges_with_progress_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&periodic_point_adjustments_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(periodic_point_adjustments_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.EventData)
}

void CDOTAMatchMetadata_Team_EventData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto.base);
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&periodic_point_adjustments_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(periodic_point_adjustments_));
}

CDOTAMatchMetadata_Team_EventData::~CDOTAMatchMetadata_Team_EventData() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.EventData)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_EventData::SharedDtor() {
}

void CDOTAMatchMetadata_Team_EventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_EventData& CDOTAMatchMetadata_Team_EventData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_EventData_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_challenges_with_progress_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_completed_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_completed_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&event_owned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&periodic_point_adjustments_) -
        reinterpret_cast<char*>(&event_owned_)) + sizeof(periodic_point_adjustments_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_EventData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_EventData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_points = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_event_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_instance_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_challenge_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_quest_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_challenge_quest_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_quest_challenge_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_challenge_quest_challenge_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool challenge_completed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_challenge_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_rank_completed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_challenge_rank_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 challenge_rank_previously_completed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_challenge_rank_previously_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool event_owned = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_event_owned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge::_InternalParse;
          object = msg->add_sub_challenges_with_progress();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // optional uint32 wager_winnings = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_wager_winnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool cavern_challenge_active = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_cavern_challenge_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cavern_challenge_winnings = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_cavern_challenge_winnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 amount_wagered = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_amount_wagered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_wager_amount = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_team_wager_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 periodic_point_adjustments = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_periodic_point_adjustments(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_EventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_event_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_challenge_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_quest_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_challenge_quest_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_quest_challenge_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_challenge_quest_challenge_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_quest_challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool challenge_completed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_challenge_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &challenge_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_rank_completed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_challenge_rank_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_rank_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_rank_previously_completed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_challenge_rank_previously_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_rank_previously_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool event_owned = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_event_owned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sub_challenges_with_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager_winnings = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_wager_winnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cavern_challenge_active = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_cavern_challenge_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cavern_challenge_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cavern_challenge_winnings = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_cavern_challenge_winnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavern_challenge_winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 amount_wagered = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_amount_wagered(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_wagered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_wager_amount = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_team_wager_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_wager_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 periodic_point_adjustments = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_periodic_point_adjustments(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &periodic_point_adjustments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.EventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.EventData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_EventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_points(), output);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challenge_instance_id(), output);
  }

  // optional uint32 challenge_quest_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_quest_id(), output);
  }

  // optional uint32 challenge_quest_challenge_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challenge_quest_challenge_id(), output);
  }

  // optional bool challenge_completed = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->challenge_completed(), output);
  }

  // optional uint32 challenge_rank_completed = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->challenge_rank_completed(), output);
  }

  // optional uint32 challenge_rank_previously_completed = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->challenge_rank_previously_completed(), output);
  }

  // optional bool event_owned = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->event_owned(), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_challenges_with_progress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->sub_challenges_with_progress(static_cast<int>(i)),
      output);
  }

  // optional uint32 wager_winnings = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wager_winnings(), output);
  }

  // optional bool cavern_challenge_active = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cavern_challenge_active(), output);
  }

  // optional uint32 cavern_challenge_winnings = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cavern_challenge_winnings(), output);
  }

  // optional uint32 amount_wagered = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->amount_wagered(), output);
  }

  // optional uint32 team_wager_amount = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->team_wager_amount(), output);
  }

  // optional uint32 periodic_point_adjustments = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->periodic_point_adjustments(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.EventData)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_EventData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_points(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challenge_instance_id(), target);
  }

  // optional uint32 challenge_quest_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_quest_id(), target);
  }

  // optional uint32 challenge_quest_challenge_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challenge_quest_challenge_id(), target);
  }

  // optional bool challenge_completed = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->challenge_completed(), target);
  }

  // optional uint32 challenge_rank_completed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->challenge_rank_completed(), target);
  }

  // optional uint32 challenge_rank_previously_completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->challenge_rank_previously_completed(), target);
  }

  // optional bool event_owned = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->event_owned(), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_challenges_with_progress_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->sub_challenges_with_progress(static_cast<int>(i)), target);
  }

  // optional uint32 wager_winnings = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wager_winnings(), target);
  }

  // optional bool cavern_challenge_active = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cavern_challenge_active(), target);
  }

  // optional uint32 cavern_challenge_winnings = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cavern_challenge_winnings(), target);
  }

  // optional uint32 amount_wagered = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->amount_wagered(), target);
  }

  // optional uint32 team_wager_amount = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->team_wager_amount(), target);
  }

  // optional uint32 periodic_point_adjustments = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->periodic_point_adjustments(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.EventData)
  return target;
}

size_t CDOTAMatchMetadata_Team_EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_challenges_with_progress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sub_challenges_with_progress(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_instance_id());
    }

    // optional uint32 challenge_quest_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_quest_id());
    }

    // optional uint32 challenge_quest_challenge_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_quest_challenge_id());
    }

    // optional uint32 challenge_rank_completed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_rank_completed());
    }

    // optional uint32 challenge_rank_previously_completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_rank_previously_completed());
    }

    // optional bool challenge_completed = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool event_owned = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_challenge_active = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 wager_winnings = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_winnings());
    }

    // optional uint32 cavern_challenge_winnings = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cavern_challenge_winnings());
    }

    // optional uint32 amount_wagered = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount_wagered());
    }

    // optional uint32 team_wager_amount = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_wager_amount());
    }

    // optional uint32 periodic_point_adjustments = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->periodic_point_adjustments());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_EventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_EventData* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_EventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.EventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.EventData)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_EventData::MergeFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_challenges_with_progress_.MergeFrom(from.sub_challenges_with_progress_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_quest_id_ = from.challenge_quest_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_quest_challenge_id_ = from.challenge_quest_challenge_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_rank_completed_ = from.challenge_rank_completed_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_rank_previously_completed_ = from.challenge_rank_previously_completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      challenge_completed_ = from.challenge_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      event_owned_ = from.event_owned_;
    }
    if (cached_has_bits & 0x00000200u) {
      cavern_challenge_active_ = from.cavern_challenge_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      wager_winnings_ = from.wager_winnings_;
    }
    if (cached_has_bits & 0x00000800u) {
      cavern_challenge_winnings_ = from.cavern_challenge_winnings_;
    }
    if (cached_has_bits & 0x00001000u) {
      amount_wagered_ = from.amount_wagered_;
    }
    if (cached_has_bits & 0x00002000u) {
      team_wager_amount_ = from.team_wager_amount_;
    }
    if (cached_has_bits & 0x00004000u) {
      periodic_point_adjustments_ = from.periodic_point_adjustments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_EventData::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_EventData::Swap(CDOTAMatchMetadata_Team_EventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_EventData::InternalSwap(CDOTAMatchMetadata_Team_EventData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sub_challenges_with_progress_)->InternalSwap(CastToBase(&other->sub_challenges_with_progress_));
  swap(event_id_, other->event_id_);
  swap(event_points_, other->event_points_);
  swap(challenge_instance_id_, other->challenge_instance_id_);
  swap(challenge_quest_id_, other->challenge_quest_id_);
  swap(challenge_quest_challenge_id_, other->challenge_quest_challenge_id_);
  swap(challenge_rank_completed_, other->challenge_rank_completed_);
  swap(challenge_rank_previously_completed_, other->challenge_rank_previously_completed_);
  swap(challenge_completed_, other->challenge_completed_);
  swap(event_owned_, other->event_owned_);
  swap(cavern_challenge_active_, other->cavern_challenge_active_);
  swap(wager_winnings_, other->wager_winnings_);
  swap(cavern_challenge_winnings_, other->cavern_challenge_winnings_);
  swap(amount_wagered_, other->amount_wagered_);
  swap(team_wager_amount_, other->team_wager_amount_);
  swap(periodic_point_adjustments_, other->periodic_point_adjustments_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_EventData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team_Player::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team_Player::HasBitSetters {
 public:
  static void set_has_account_id(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_player_slot(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_avg_kills_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_avg_deaths_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_avg_assists_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_avg_gpm_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_avg_xpm_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_best_kills_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_best_assists_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_best_gpm_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_best_xpm_x16(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_win_streak(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_best_win_streak(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_fight_score(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_farm_score(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_support_score(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_push_score(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_avg_stats_calibrated(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_hero_xp(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_camps_stacked(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_lane_selection_flags(CDOTAMatchMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
};

void CDOTAMatchMetadata_Team_Player::clear_equipped_econ_items() {
  equipped_econ_items_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_Player::kAccountIdFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAbilityUpgradesFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kPlayerSlotFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kEquippedEconItemsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kKillsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kItemsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgKillsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgDeathsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgAssistsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgGpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgXpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestKillsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestAssistsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestGpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestXpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kWinStreakFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestWinStreakFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kFightScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kFarmScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kSupportScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kPushScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kLevelUpTimesFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kGraphNetWorthFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kInventorySnapshotFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgStatsCalibratedFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAutoStyleCriteriaFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kEventDataFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kStrangeGemProgressFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kHeroXpFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kCampsStackedFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kVictoryPredictionFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kLaneSelectionFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.Player)
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      equipped_econ_items_(from.equipped_econ_items_),
      kills_(from.kills_),
      items_(from.items_),
      level_up_times_(from.level_up_times_),
      graph_net_worth_(from.graph_net_worth_),
      inventory_snapshot_(from.inventory_snapshot_),
      auto_style_criteria_(from.auto_style_criteria_),
      event_data_(from.event_data_),
      strange_gem_progress_(from.strange_gem_progress_),
      victory_prediction_(from.victory_prediction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_selection_flags_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(lane_selection_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.Player)
}

void CDOTAMatchMetadata_Team_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_selection_flags_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(lane_selection_flags_));
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.Player)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_Player::SharedDtor() {
}

void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_upgrades_.Clear();
  equipped_econ_items_.Clear();
  kills_.Clear();
  items_.Clear();
  level_up_times_.Clear();
  graph_net_worth_.Clear();
  inventory_snapshot_.Clear();
  auto_style_criteria_.Clear();
  event_data_.Clear();
  strange_gem_progress_.Clear();
  victory_prediction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_kills_x16_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(best_kills_x16_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&best_assists_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&support_score_) -
        reinterpret_cast<char*>(&best_assists_x16_)) + sizeof(support_score_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&push_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_selection_flags_) -
        reinterpret_cast<char*>(&push_score_)) + sizeof(lane_selection_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 ability_upgrades = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_ability_upgrades(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_ability_upgrades();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 player_slot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSOEconItem::_InternalParse;
          object = msg->add_equipped_econ_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill::_InternalParse;
          object = msg->add_kills();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase::_InternalParse;
          object = msg->add_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional uint32 avg_kills_x16 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_avg_kills_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_deaths_x16 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_avg_deaths_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_assists_x16 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_avg_assists_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_gpm_x16 = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_avg_gpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 avg_xpm_x16 = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_avg_xpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_kills_x16 = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_best_kills_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_assists_x16 = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_best_assists_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_gpm_x16 = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_best_gpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_xpm_x16 = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_best_xpm_x16(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 win_streak = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_win_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 best_win_streak = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_best_win_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fight_score = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 149) goto handle_unusual;
        msg->set_fight_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float farm_score = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_farm_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float support_score = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 165) goto handle_unusual;
        msg->set_support_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float push_score = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_push_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated uint32 level_up_times = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) == 176) {
          do {
            msg->add_level_up_times(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 432 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_level_up_times();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_net_worth = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) == 189) {
          do {
            msg->add_graph_net_worth(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 445 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_net_worth();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot::_InternalParse;
          object = msg->add_inventory_snapshot();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 450 && (ptr += 2));
        break;
      }
      // optional bool avg_stats_calibrated = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_avg_stats_calibrated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalParse;
          object = msg->add_auto_style_criteria();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 466 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_EventData::_InternalParse;
          object = msg->add_event_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 490 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalParse;
          object = msg->add_strange_gem_progress();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 498 && (ptr += 2));
        break;
      }
      // optional uint32 hero_xp = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_hero_xp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 camps_stacked = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_camps_stacked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction::_InternalParse;
          object = msg->add_victory_prediction();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 650 && (ptr += 2));
        break;
      }
      // optional uint32 lane_selection_flags = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_lane_selection_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ability_upgrades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ability_upgrades())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ability_upgrades())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equipped_econ_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_kills_x16 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_avg_kills_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_deaths_x16 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_avg_deaths_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_deaths_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_assists_x16 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_avg_assists_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_gpm_x16 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_avg_gpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_xpm_x16 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_avg_xpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_kills_x16 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_best_kills_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_assists_x16 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_best_assists_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_gpm_x16 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_best_gpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_xpm_x16 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_best_xpm_x16(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_streak = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_win_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_win_streak = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_best_win_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fight_score = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (149 & 0xFF)) {
          HasBitSetters::set_has_fight_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fight_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float farm_score = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {
          HasBitSetters::set_has_farm_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farm_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float support_score = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (165 & 0xFF)) {
          HasBitSetters::set_has_support_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &support_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float push_score = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (173 & 0xFF)) {
          HasBitSetters::set_has_push_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &push_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 level_up_times = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_level_up_times())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_up_times())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_net_worth = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189u, input, this->mutable_graph_net_worth())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_net_worth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inventory_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool avg_stats_calibrated = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_avg_stats_calibrated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &avg_stats_calibrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auto_style_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_strange_gem_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_xp = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_hero_xp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 camps_stacked = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_camps_stacked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camps_stacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (266 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_victory_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_selection_flags = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_lane_selection_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_selection_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0, n = this->ability_upgrades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ability_upgrades(i), output);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_slot(), output);
  }

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipped_econ_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->equipped_econ_items(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->kills(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->items(static_cast<int>(i)),
      output);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avg_kills_x16(), output);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avg_deaths_x16(), output);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avg_assists_x16(), output);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avg_gpm_x16(), output);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avg_xpm_x16(), output);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->best_kills_x16(), output);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->best_assists_x16(), output);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->best_gpm_x16(), output);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->best_xpm_x16(), output);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->win_streak(), output);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->best_win_streak(), output);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fight_score(), output);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->farm_score(), output);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->support_score(), output);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->push_score(), output);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0, n = this->level_up_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->level_up_times(i), output);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0, n = this->graph_net_worth_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->graph_net_worth(i), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inventory_snapshot_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->inventory_snapshot(static_cast<int>(i)),
      output);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->avg_stats_calibrated(), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auto_style_criteria_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26,
      this->auto_style_criteria(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29,
      this->event_data(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->strange_gem_progress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30,
      this->strange_gem_progress(static_cast<int>(i)),
      output);
  }

  // optional uint32 hero_xp = 31;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->hero_xp(), output);
  }

  // optional uint32 camps_stacked = 32;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->camps_stacked(), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->victory_prediction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33,
      this->victory_prediction(static_cast<int>(i)),
      output);
  }

  // optional uint32 lane_selection_flags = 34;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->lane_selection_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.Player)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 ability_upgrades = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ability_upgrades_, target);

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_slot(), target);
  }

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipped_econ_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->equipped_econ_items(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->kills(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->items(static_cast<int>(i)), target);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->fight_score(), target);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->farm_score(), target);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->support_score(), target);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->level_up_times_, target);

  // repeated float graph_net_worth = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(23, this->graph_net_worth_, target);

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inventory_snapshot_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->inventory_snapshot(static_cast<int>(i)), target);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->avg_stats_calibrated(), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auto_style_criteria_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->auto_style_criteria(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->event_data(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->strange_gem_progress_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->strange_gem_progress(static_cast<int>(i)), target);
  }

  // optional uint32 hero_xp = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->hero_xp(), target);
  }

  // optional uint32 camps_stacked = 32;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->camps_stacked(), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->victory_prediction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->victory_prediction(static_cast<int>(i)), target);
  }

  // optional uint32 lane_selection_flags = 34;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->lane_selection_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ability_upgrades = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ability_upgrades_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ability_upgrades_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->equipped_econ_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equipped_econ_items(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->kills_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->kills(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated uint32 level_up_times = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->level_up_times_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->level_up_times_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->graph_net_worth_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->inventory_snapshot_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inventory_snapshot(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->auto_style_criteria_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auto_style_criteria(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->event_data_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_data(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->strange_gem_progress_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->strange_gem_progress(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->victory_prediction_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->victory_prediction(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_kills_x16());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 best_assists_x16 = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_streak());
    }

    // optional uint32 best_win_streak = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_win_streak());
    }

    // optional float fight_score = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float support_score = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional float push_score = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool avg_stats_calibrated = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_xp = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_xp());
    }

    // optional uint32 camps_stacked = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camps_stacked());
    }

    // optional uint32 lane_selection_flags = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_selection_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  kills_.MergeFrom(from.kills_);
  items_.MergeFrom(from.items_);
  level_up_times_.MergeFrom(from.level_up_times_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  inventory_snapshot_.MergeFrom(from.inventory_snapshot_);
  auto_style_criteria_.MergeFrom(from.auto_style_criteria_);
  event_data_.MergeFrom(from.event_data_);
  strange_gem_progress_.MergeFrom(from.strange_gem_progress_);
  victory_prediction_.MergeFrom(from.victory_prediction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000800u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      support_score_ = from.support_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      push_score_ = from.push_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      avg_stats_calibrated_ = from.avg_stats_calibrated_;
    }
    if (cached_has_bits & 0x00040000u) {
      hero_xp_ = from.hero_xp_;
    }
    if (cached_has_bits & 0x00080000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00100000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player::Swap(CDOTAMatchMetadata_Team_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_Player::InternalSwap(CDOTAMatchMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  CastToBase(&equipped_econ_items_)->InternalSwap(CastToBase(&other->equipped_econ_items_));
  CastToBase(&kills_)->InternalSwap(CastToBase(&other->kills_));
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  level_up_times_.InternalSwap(&other->level_up_times_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  CastToBase(&inventory_snapshot_)->InternalSwap(CastToBase(&other->inventory_snapshot_));
  CastToBase(&auto_style_criteria_)->InternalSwap(CastToBase(&other->auto_style_criteria_));
  CastToBase(&event_data_)->InternalSwap(CastToBase(&other->event_data_));
  CastToBase(&strange_gem_progress_)->InternalSwap(CastToBase(&other->strange_gem_progress_));
  CastToBase(&victory_prediction_)->InternalSwap(CastToBase(&other->victory_prediction_));
  swap(account_id_, other->account_id_);
  swap(player_slot_, other->player_slot_);
  swap(avg_kills_x16_, other->avg_kills_x16_);
  swap(avg_deaths_x16_, other->avg_deaths_x16_);
  swap(avg_assists_x16_, other->avg_assists_x16_);
  swap(avg_gpm_x16_, other->avg_gpm_x16_);
  swap(avg_xpm_x16_, other->avg_xpm_x16_);
  swap(best_kills_x16_, other->best_kills_x16_);
  swap(best_assists_x16_, other->best_assists_x16_);
  swap(best_gpm_x16_, other->best_gpm_x16_);
  swap(best_xpm_x16_, other->best_xpm_x16_);
  swap(win_streak_, other->win_streak_);
  swap(best_win_streak_, other->best_win_streak_);
  swap(fight_score_, other->fight_score_);
  swap(farm_score_, other->farm_score_);
  swap(support_score_, other->support_score_);
  swap(push_score_, other->push_score_);
  swap(avg_stats_calibrated_, other->avg_stats_calibrated_);
  swap(hero_xp_, other->hero_xp_);
  swap(camps_stacked_, other->camps_stacked_);
  swap(lane_selection_flags_, other->lane_selection_flags_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata_Team::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata_Team::HasBitSetters {
 public:
  static void set_has_dota_team(CDOTAMatchMetadata_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cm_first_pick(CDOTAMatchMetadata_Team* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cm_captain_player_id(CDOTAMatchMetadata_Team* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cm_penalty(CDOTAMatchMetadata_Team* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team::kDotaTeamFieldNumber;
const int CDOTAMatchMetadata_Team::kPlayersFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphExperienceFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphGoldEarnedFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphNetWorthFieldNumber;
const int CDOTAMatchMetadata_Team::kCmFirstPickFieldNumber;
const int CDOTAMatchMetadata_Team::kCmCaptainPlayerIdFieldNumber;
const int CDOTAMatchMetadata_Team::kCmBansFieldNumber;
const int CDOTAMatchMetadata_Team::kCmPicksFieldNumber;
const int CDOTAMatchMetadata_Team::kCmPenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team)
}
CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      graph_experience_(from.graph_experience_),
      graph_gold_earned_(from.graph_gold_earned_),
      graph_net_worth_(from.graph_net_worth_),
      cm_bans_(from.cm_bans_),
      cm_picks_(from.cm_picks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team)
}

void CDOTAMatchMetadata_Team::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base);
  ::memset(&dota_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cm_penalty_) -
      reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team)
  SharedDtor();
}

void CDOTAMatchMetadata_Team::SharedDtor() {
}

void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata_Team& CDOTAMatchMetadata_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  graph_experience_.Clear();
  graph_gold_earned_.Clear();
  graph_net_worth_.Clear();
  cm_bans_.Clear();
  cm_picks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cm_penalty_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dota_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated float graph_experience = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 29) {
          do {
            msg->add_graph_experience(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_experience();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_gold_earned = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 37) {
          do {
            msg->add_graph_gold_earned(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_gold_earned();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_net_worth = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 45) {
          do {
            msg->add_graph_net_worth(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 45 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_net_worth();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool cm_first_pick = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_cm_first_pick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cm_captain_player_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_cm_captain_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 cm_bans = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_cm_bans(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_cm_bans();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 cm_picks = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_cm_picks(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_cm_picks();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 cm_penalty = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_cm_penalty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dota_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_experience = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_graph_experience())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_experience())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_gold_earned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_graph_gold_earned())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_gold_earned())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_net_worth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_graph_net_worth())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_net_worth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cm_first_pick = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_cm_first_pick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cm_first_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cm_captain_player_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_cm_captain_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_captain_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cm_bans = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_cm_bans())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_bans())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cm_picks = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_cm_picks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_picks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cm_penalty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_cm_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->players(static_cast<int>(i)),
      output);
  }

  // repeated float graph_experience = 3;
  for (int i = 0, n = this->graph_experience_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->graph_experience(i), output);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0, n = this->graph_gold_earned_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->graph_gold_earned(i), output);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0, n = this->graph_net_worth_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->graph_net_worth(i), output);
  }

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cm_first_pick(), output);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cm_captain_player_id(), output);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0, n = this->cm_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->cm_bans(i), output);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0, n = this->cm_picks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->cm_picks(i), output);
  }

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cm_penalty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players(static_cast<int>(i)), target);
  }

  // repeated float graph_experience = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->graph_experience_, target);

  // repeated float graph_gold_earned = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->graph_gold_earned_, target);

  // repeated float graph_net_worth = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->graph_net_worth_, target);

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cm_first_pick(), target);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cm_captain_player_id(), target);
  }

  // repeated uint32 cm_bans = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->cm_bans_, target);

  // repeated uint32 cm_picks = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->cm_picks_, target);

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cm_penalty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team)
  return target;
}

size_t CDOTAMatchMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated float graph_experience = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_experience_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_experience_size());
    total_size += data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_gold_earned_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_gold_earned_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_net_worth_size());
    total_size += data_size;
  }

  // repeated uint32 cm_bans = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_bans_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_bans_size());
    total_size += data_size;
  }

  // repeated uint32 cm_picks = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_picks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_picks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_captain_player_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_captain_player_id());
    }

    // optional uint32 cm_penalty = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_penalty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team::MergeFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  graph_experience_.MergeFrom(from.graph_experience_);
  graph_gold_earned_.MergeFrom(from.graph_gold_earned_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  cm_bans_.MergeFrom(from.cm_bans_);
  cm_picks_.MergeFrom(from.cm_picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      cm_first_pick_ = from.cm_first_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      cm_captain_player_id_ = from.cm_captain_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cm_penalty_ = from.cm_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team::Swap(CDOTAMatchMetadata_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team::InternalSwap(CDOTAMatchMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  graph_experience_.InternalSwap(&other->graph_experience_);
  graph_gold_earned_.InternalSwap(&other->graph_gold_earned_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  cm_bans_.InternalSwap(&other->cm_bans_);
  cm_picks_.InternalSwap(&other->cm_picks_);
  swap(dota_team_, other->dota_team_);
  swap(cm_first_pick_, other->cm_first_pick_);
  swap(cm_captain_player_id_, other->cm_captain_player_id_);
  swap(cm_penalty_, other->cm_penalty_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchMetadata::InitAsDefaultInstance() {
}
class CDOTAMatchMetadata::HasBitSetters {
 public:
  static void set_has_lobby_id(CDOTAMatchMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_report_until_time(CDOTAMatchMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_event_game_custom_table(CDOTAMatchMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary_event_id(CDOTAMatchMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

void CDOTAMatchMetadata::clear_item_rewards() {
  item_rewards_.Clear();
}
void CDOTAMatchMetadata::clear_match_tips() {
  match_tips_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata::kTeamsFieldNumber;
const int CDOTAMatchMetadata::kItemRewardsFieldNumber;
const int CDOTAMatchMetadata::kLobbyIdFieldNumber;
const int CDOTAMatchMetadata::kReportUntilTimeFieldNumber;
const int CDOTAMatchMetadata::kEventGameCustomTableFieldNumber;
const int CDOTAMatchMetadata::kPrimaryEventIdFieldNumber;
const int CDOTAMatchMetadata::kMatchTipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata::CDOTAMatchMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata)
}
CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      item_rewards_(from.item_rewards_),
      match_tips_(from.match_tips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_game_custom_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_game_custom_table()) {
    event_game_custom_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_custom_table_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata)
}

void CDOTAMatchMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto.base);
  event_game_custom_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_event_id_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata)
  SharedDtor();
}

void CDOTAMatchMetadata::SharedDtor() {
  event_game_custom_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchMetadata& CDOTAMatchMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchMetadata_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  item_rewards_.Clear();
  match_tips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_game_custom_table_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_event_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchMetadata_Team::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyTimedRewardDetails::_InternalParse;
          object = msg->add_item_rewards();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional fixed64 lobby_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 report_until_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_report_until_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes event_game_custom_table = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_event_game_custom_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 primary_event_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_primary_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgMatchTips match_tips = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgMatchTips::_InternalParse;
          object = msg->add_match_tips();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_rewards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 report_until_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_report_until_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &report_until_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes event_game_custom_table = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_game_custom_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 primary_event_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_primary_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primary_event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgMatchTips match_tips = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_match_tips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_rewards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->item_rewards(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->lobby_id(), output);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->report_until_time(), output);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->event_game_custom_table(), output);
  }

  // optional uint32 primary_event_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->primary_event_id(), output);
  }

  // repeated .proto.dota.CMsgMatchTips match_tips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_tips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->match_tips(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata)
}

::google::protobuf::uint8* CDOTAMatchMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->teams(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_rewards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->item_rewards(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->report_until_time(), target);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->event_game_custom_table(), target);
  }

  // optional uint32 primary_event_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->primary_event_id(), target);
  }

  // repeated .proto.dota.CMsgMatchTips match_tips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_tips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->match_tips(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata)
  return target;
}

size_t CDOTAMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_rewards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_rewards(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgMatchTips match_tips = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->match_tips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->match_tips(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes event_game_custom_table = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_game_custom_table());
    }

    // optional fixed64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 primary_event_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->primary_event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata::MergeFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  item_rewards_.MergeFrom(from.item_rewards_);
  match_tips_.MergeFrom(from.match_tips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_game_custom_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_custom_table_);
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      report_until_time_ = from.report_until_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      primary_event_id_ = from.primary_event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata::Swap(CDOTAMatchMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata::InternalSwap(CDOTAMatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  CastToBase(&item_rewards_)->InternalSwap(CastToBase(&other->item_rewards_));
  CastToBase(&match_tips_)->InternalSwap(CastToBase(&other->match_tips_));
  event_game_custom_table_.Swap(&other->event_game_custom_table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lobby_id_, other->lobby_id_);
  swap(report_until_time_, other->report_until_time_);
  swap(primary_event_id_, other->primary_event_id_);
}

::google::protobuf::Metadata CDOTAMatchMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::HasBitSetters {
 public:
  static void set_has_hero_id(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_damage(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::kHeroIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::kDamageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(damage_));
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SharedDtor() {
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(damage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 damage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_damage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 damage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_ = from.damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(damage_, other->damage_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::HasBitSetters {
 public:
  static void set_has_source_unit_index(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ability_id(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::kSourceUnitIndexFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::kAbilityIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::kByHeroTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      by_hero_targets_(from.by_hero_targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_unit_index_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto.base);
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_unit_index_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SharedDtor() {
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_hero_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_unit_index_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_InternalParse;
          object = msg->add_by_hero_targets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 source_unit_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_source_unit_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_by_hero_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_unit_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_source_unit_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_unit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_hero_targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->by_hero_targets(static_cast<int>(i)),
      output);
  }

  // optional uint32 source_unit_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_hero_targets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->by_hero_targets(static_cast<int>(i)), target);
  }

  // optional uint32 source_unit_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->by_hero_targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->by_hero_targets(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 source_unit_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_unit_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_hero_targets_.MergeFrom(from.by_hero_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_unit_index_ = from.source_unit_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&by_hero_targets_)->InternalSwap(CastToBase(&other->by_hero_targets_));
  swap(ability_id_, other->ability_id_);
  swap(source_unit_index_, other->source_unit_index_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::HasBitSetters {
 public:
  static void set_has_game_time(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::kGameTimeFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::kDamageByAbilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      damage_by_ability_(from.damage_by_ability_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_time_ = from.game_time_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto.base);
  game_time_ = 0;
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SharedDtor() {
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damage_by_ability_.Clear();
  game_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 game_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_InternalParse;
          object = msg->add_damage_by_ability();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_damage_by_ability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_time(), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->damage_by_ability_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->damage_by_ability(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_time(), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->damage_by_ability_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->damage_by_ability(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->damage_by_ability_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->damage_by_ability(static_cast<int>(i)));
    }
  }

  // optional int32 game_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  damage_by_ability_.MergeFrom(from.damage_by_ability_);
  if (from.has_game_time()) {
    set_game_time(from.game_time());
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&damage_by_ability_)->InternalSwap(CastToBase(&other->damage_by_ability_));
  swap(game_time_, other->game_time_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::HasBitSetters {
 public:
  static void set_has_hero_id(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_elapsed_duration(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_hidden(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::kHeroIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::kElapsedDurationFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::kIsHiddenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_hidden_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(is_hidden_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_hidden_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(is_hidden_));
}

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SharedDtor() {
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_hidden_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(is_hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float elapsed_duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_elapsed_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool is_hidden = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_hidden(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float elapsed_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_elapsed_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elapsed_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hidden = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_hidden(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional float elapsed_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->elapsed_duration(), output);
  }

  // optional bool is_hidden = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional float elapsed_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->elapsed_duration(), target);
  }

  // optional bool is_hidden = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional float elapsed_duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool is_hidden = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_duration_ = from.elapsed_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_hidden_ = from.is_hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::Swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(elapsed_duration_, other->elapsed_duration_);
  swap(is_hidden_, other->is_hidden_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::HasBitSetters {
 public:
  static void set_has_buff_ability_id(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_buff_modifier_name(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::kBuffAbilityIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::kBuffModifierNameFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::kByHeroTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      by_hero_targets_(from.by_hero_targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buff_modifier_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buff_modifier_name()) {
    buff_modifier_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_modifier_name_);
  }
  buff_ability_id_ = from.buff_ability_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto.base);
  buff_modifier_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_ability_id_ = 0u;
}

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SharedDtor() {
  buff_modifier_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_hero_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buff_modifier_name_.ClearNonDefaultToEmptyNoArena();
  }
  buff_ability_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 buff_ability_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_buff_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_InternalParse;
          object = msg->add_by_hero_targets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional string buff_modifier_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
        object = msg->mutable_buff_modifier_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buff_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_buff_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_by_hero_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string buff_modifier_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buff_modifier_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buff_modifier_name().data(), static_cast<int>(this->buff_modifier_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 buff_ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buff_ability_id(), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_hero_targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->by_hero_targets(static_cast<int>(i)),
      output);
  }

  // optional string buff_modifier_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buff_modifier_name().data(), static_cast<int>(this->buff_modifier_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->buff_modifier_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 buff_ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buff_ability_id(), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_hero_targets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->by_hero_targets(static_cast<int>(i)), target);
  }

  // optional string buff_modifier_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buff_modifier_name().data(), static_cast<int>(this->buff_modifier_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->buff_modifier_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->by_hero_targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->by_hero_targets(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string buff_modifier_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buff_modifier_name());
    }

    // optional uint32 buff_ability_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_ability_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_hero_targets_.MergeFrom(from.by_hero_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buff_modifier_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_modifier_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      buff_ability_id_ = from.buff_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::Swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&by_hero_targets_)->InternalSwap(CastToBase(&other->by_hero_targets_));
  buff_modifier_name_.Swap(&other->buff_modifier_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buff_ability_id_, other->buff_ability_id_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Player::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Player::HasBitSetters {
 public:
  static void set_has_account_id(CDOTAMatchPrivateMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_slot(CDOTAMatchPrivateMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_position_stream(CDOTAMatchPrivateMetadata_Team_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player::kAccountIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kPlayerSlotFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kPositionStreamFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kCombatSegmentsFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kDamageUnitNamesFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kBuffRecordsFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kGraphKillsFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kGraphDeathsFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kGraphAssistsFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kGraphLasthitsFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kGraphDeniesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
}
CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      combat_segments_(from.combat_segments_),
      damage_unit_names_(from.damage_unit_names_),
      buff_records_(from.buff_records_),
      graph_kills_(from.graph_kills_),
      graph_deaths_(from.graph_deaths_),
      graph_assists_(from.graph_assists_),
      graph_lasthits_(from.graph_lasthits_),
      graph_denies_(from.graph_denies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_stream_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_position_stream()) {
    position_stream_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_stream_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base);
  position_stream_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_slot_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
}

CDOTAMatchPrivateMetadata_Team_Player::~CDOTAMatchPrivateMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedDtor() {
  position_stream_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Player_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  combat_segments_.Clear();
  damage_unit_names_.Clear();
  buff_records_.Clear();
  graph_kills_.Clear();
  graph_deaths_.Clear();
  graph_assists_.Clear();
  graph_lasthits_.Clear();
  graph_denies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    position_stream_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_slot_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_slot = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_player_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes position_stream = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_position_stream();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_InternalParse;
          object = msg->add_combat_segments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated string damage_unit_names = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
          object = msg->add_damage_unit_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_InternalParse;
          object = msg->add_buff_records();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated float graph_kills = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 61) {
          do {
            msg->add_graph_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 61 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_kills();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_deaths = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 69) {
          do {
            msg->add_graph_deaths(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 69 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_deaths();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_assists = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 77) {
          do {
            msg->add_graph_assists(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 77 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_assists();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_lasthits = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 85) {
          do {
            msg->add_graph_lasthits(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 85 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_lasthits();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float graph_denies = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) == 93) {
          do {
            msg->add_graph_denies(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 93 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_denies();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_player_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes position_stream = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_combat_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string damage_unit_names = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_damage_unit_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage_unit_names(this->damage_unit_names_size() - 1).data(),
            static_cast<int>(this->damage_unit_names(this->damage_unit_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buff_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_kills = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_graph_kills())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_kills())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_deaths = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_graph_deaths())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_deaths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_assists = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77u, input, this->mutable_graph_assists())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_assists())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_lasthits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85u, input, this->mutable_graph_lasthits())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_lasthits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_denies = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93u, input, this->mutable_graph_denies())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_denies())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_slot(), output);
  }

  // optional bytes position_stream = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->position_stream(), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->combat_segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->combat_segments(static_cast<int>(i)),
      output);
  }

  // repeated string damage_unit_names = 5;
  for (int i = 0, n = this->damage_unit_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_unit_names(i).data(), static_cast<int>(this->damage_unit_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->damage_unit_names(i), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->buff_records(static_cast<int>(i)),
      output);
  }

  // repeated float graph_kills = 7;
  for (int i = 0, n = this->graph_kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->graph_kills(i), output);
  }

  // repeated float graph_deaths = 8;
  for (int i = 0, n = this->graph_deaths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->graph_deaths(i), output);
  }

  // repeated float graph_assists = 9;
  for (int i = 0, n = this->graph_assists_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->graph_assists(i), output);
  }

  // repeated float graph_lasthits = 10;
  for (int i = 0, n = this->graph_lasthits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->graph_lasthits(i), output);
  }

  // repeated float graph_denies = 11;
  for (int i = 0, n = this->graph_denies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->graph_denies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_slot(), target);
  }

  // optional bytes position_stream = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->position_stream(), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->combat_segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->combat_segments(static_cast<int>(i)), target);
  }

  // repeated string damage_unit_names = 5;
  for (int i = 0, n = this->damage_unit_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_unit_names(i).data(), static_cast<int>(this->damage_unit_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->damage_unit_names(i), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->buff_records(static_cast<int>(i)), target);
  }

  // repeated float graph_kills = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->graph_kills_, target);

  // repeated float graph_deaths = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->graph_deaths_, target);

  // repeated float graph_assists = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(9, this->graph_assists_, target);

  // repeated float graph_lasthits = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(10, this->graph_lasthits_, target);

  // repeated float graph_denies = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(11, this->graph_denies_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->combat_segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->combat_segments(static_cast<int>(i)));
    }
  }

  // repeated string damage_unit_names = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->damage_unit_names_size());
  for (int i = 0, n = this->damage_unit_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->damage_unit_names(i));
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buff_records(static_cast<int>(i)));
    }
  }

  // repeated float graph_kills = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_kills_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_kills_size());
    total_size += data_size;
  }

  // repeated float graph_deaths = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_deaths_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_deaths_size());
    total_size += data_size;
  }

  // repeated float graph_assists = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_assists_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_assists_size());
    total_size += data_size;
  }

  // repeated float graph_lasthits = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_lasthits_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_lasthits_size());
    total_size += data_size;
  }

  // repeated float graph_denies = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_denies_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_denies_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes position_stream = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position_stream());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  combat_segments_.MergeFrom(from.combat_segments_);
  damage_unit_names_.MergeFrom(from.damage_unit_names_);
  buff_records_.MergeFrom(from.buff_records_);
  graph_kills_.MergeFrom(from.graph_kills_);
  graph_deaths_.MergeFrom(from.graph_deaths_);
  graph_assists_.MergeFrom(from.graph_assists_);
  graph_lasthits_.MergeFrom(from.graph_lasthits_);
  graph_denies_.MergeFrom(from.graph_denies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      position_stream_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_stream_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player::Swap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&combat_segments_)->InternalSwap(CastToBase(&other->combat_segments_));
  damage_unit_names_.InternalSwap(CastToBase(&other->damage_unit_names_));
  CastToBase(&buff_records_)->InternalSwap(CastToBase(&other->buff_records_));
  graph_kills_.InternalSwap(&other->graph_kills_);
  graph_deaths_.InternalSwap(&other->graph_deaths_);
  graph_assists_.InternalSwap(&other->graph_assists_);
  graph_lasthits_.InternalSwap(&other->graph_lasthits_);
  graph_denies_.InternalSwap(&other->graph_denies_);
  position_stream_.Swap(&other->position_stream_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(player_slot_, other->player_slot_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team_Building::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team_Building::HasBitSetters {
 public:
  static void set_has_unit_name(CDOTAMatchPrivateMetadata_Team_Building* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_position_quant_x(CDOTAMatchPrivateMetadata_Team_Building* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_position_quant_y(CDOTAMatchPrivateMetadata_Team_Building* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_death_time(CDOTAMatchPrivateMetadata_Team_Building* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Building::kUnitNameFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kPositionQuantXFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kPositionQuantYFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kDeathTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
}
CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unit_name()) {
    unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
  }
  ::memcpy(&position_quant_x_, &from.position_quant_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&death_time_) -
    reinterpret_cast<char*>(&position_quant_x_)) + sizeof(death_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto.base);
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_quant_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&death_time_) -
      reinterpret_cast<char*>(&position_quant_x_)) + sizeof(death_time_));
}

CDOTAMatchPrivateMetadata_Team_Building::~CDOTAMatchPrivateMetadata_Team_Building() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedDtor() {
  unit_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team_Building::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_Building_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team_Building::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unit_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&position_quant_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&death_time_) -
        reinterpret_cast<char*>(&position_quant_x_)) + sizeof(death_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team_Building::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team_Building*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string unit_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
        object = msg->mutable_unit_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 position_quant_x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_position_quant_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 position_quant_y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_position_quant_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float death_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_death_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team_Building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), static_cast<int>(this->unit_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_quant_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_position_quant_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_quant_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_quant_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_position_quant_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_quant_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float death_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_death_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &death_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team_Building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), static_cast<int>(this->unit_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // optional uint32 position_quant_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_quant_x(), output);
  }

  // optional uint32 position_quant_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position_quant_y(), output);
  }

  // optional float death_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->death_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Building::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), static_cast<int>(this->unit_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // optional uint32 position_quant_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_quant_x(), target);
  }

  // optional uint32 position_quant_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position_quant_y(), target);
  }

  // optional float death_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->death_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unit_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }

    // optional uint32 position_quant_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_quant_x());
    }

    // optional uint32 position_quant_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_quant_y());
    }

    // optional float death_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Building* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Building>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      position_quant_x_ = from.position_quant_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_quant_y_ = from.position_quant_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      death_time_ = from.death_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Building::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Building::Swap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Building::InternalSwap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unit_name_.Swap(&other->unit_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_quant_x_, other->position_quant_x_);
  swap(position_quant_y_, other->position_quant_y_);
  swap(death_time_, other->death_time_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Building::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata_Team::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata_Team::HasBitSetters {
 public:
  static void set_has_dota_team(CDOTAMatchPrivateMetadata_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team::kDotaTeamFieldNumber;
const int CDOTAMatchPrivateMetadata_Team::kPlayersFieldNumber;
const int CDOTAMatchPrivateMetadata_Team::kBuildingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team)
}
CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dota_team_ = from.dota_team_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team)
}

void CDOTAMatchPrivateMetadata_Team::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base);
  dota_team_ = 0u;
}

CDOTAMatchPrivateMetadata_Team::~CDOTAMatchPrivateMetadata_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team::SharedDtor() {
}

void CDOTAMatchPrivateMetadata_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_Team_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  buildings_.Clear();
  dota_team_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dota_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building::_InternalParse;
          object = msg->add_buildings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dota_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->players(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->buildings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->buildings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->buildings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buildings(static_cast<int>(i)));
    }
  }

  // optional uint32 dota_team = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dota_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  buildings_.MergeFrom(from.buildings_);
  if (from.has_dota_team()) {
    set_dota_team(from.dota_team());
  }
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team::Swap(CDOTAMatchPrivateMetadata_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team::InternalSwap(CDOTAMatchPrivateMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  CastToBase(&buildings_)->InternalSwap(CastToBase(&other->buildings_));
  swap(dota_team_, other->dota_team_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAMatchPrivateMetadata::InitAsDefaultInstance() {
}
class CDOTAMatchPrivateMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata::kTeamsFieldNumber;
const int CDOTAMatchPrivateMetadata::kGraphWinProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata)
}
CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      graph_win_probability_(from.graph_win_probability_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata)
}

void CDOTAMatchPrivateMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAMatchPrivateMetadata_dota_5fmatch_5fmetadata_2eproto.base);
}

CDOTAMatchPrivateMetadata::~CDOTAMatchPrivateMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata::SharedDtor() {
}

void CDOTAMatchPrivateMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAMatchPrivateMetadata& CDOTAMatchPrivateMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAMatchPrivateMetadata_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CDOTAMatchPrivateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  graph_win_probability_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAMatchPrivateMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAMatchPrivateMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDOTAMatchPrivateMetadata_Team::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated float graph_win_probability = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 21) {
          do {
            msg->add_graph_win_probability(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 21 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_graph_win_probability();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAMatchPrivateMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_win_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_graph_win_probability())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_win_probability())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAMatchPrivateMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated float graph_win_probability = 2;
  for (int i = 0, n = this->graph_win_probability_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->graph_win_probability(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->teams(static_cast<int>(i)), target);
  }

  // repeated float graph_win_probability = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->graph_win_probability_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata)
  return target;
}

size_t CDOTAMatchPrivateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated float graph_win_probability = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_win_probability_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_win_probability_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAMatchPrivateMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata::MergeFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  graph_win_probability_.MergeFrom(from.graph_win_probability_);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata::Swap(CDOTAMatchPrivateMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata::InternalSwap(CDOTAMatchPrivateMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  graph_win_probability_.InternalSwap(&other->graph_win_probability_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTADPCMatch::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTADPCMatch_default_instance_._instance.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTAMatch*>(
      ::proto::dota::CMsgDOTAMatch::internal_default_instance());
  ::proto::dota::_CMsgDOTADPCMatch_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::proto::dota::CDOTAMatchMetadata*>(
      ::proto::dota::CDOTAMatchMetadata::internal_default_instance());
}
class CMsgDOTADPCMatch::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTAMatch& match(const CMsgDOTADPCMatch* msg);
  static void set_has_match(CMsgDOTADPCMatch* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CDOTAMatchMetadata& metadata(const CMsgDOTADPCMatch* msg);
  static void set_has_metadata(CMsgDOTADPCMatch* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgDOTAMatch&
CMsgDOTADPCMatch::HasBitSetters::match(const CMsgDOTADPCMatch* msg) {
  return *msg->match_;
}
const ::proto::dota::CDOTAMatchMetadata&
CMsgDOTADPCMatch::HasBitSetters::metadata(const CMsgDOTADPCMatch* msg) {
  return *msg->metadata_;
}
void CMsgDOTADPCMatch::clear_match() {
  if (match_ != nullptr) match_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTADPCMatch::kMatchFieldNumber;
const int CMsgDOTADPCMatch::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTADPCMatch::CMsgDOTADPCMatch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTADPCMatch)
}
CMsgDOTADPCMatch::CMsgDOTADPCMatch(const CMsgDOTADPCMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTAMatch(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::proto::dota::CDOTAMatchMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTADPCMatch)
}

void CMsgDOTADPCMatch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTADPCMatch_dota_5fmatch_5fmetadata_2eproto.base);
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&match_)) + sizeof(metadata_));
}

CMsgDOTADPCMatch::~CMsgDOTADPCMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTADPCMatch)
  SharedDtor();
}

void CMsgDOTADPCMatch::SharedDtor() {
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete metadata_;
}

void CMsgDOTADPCMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTADPCMatch& CMsgDOTADPCMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTADPCMatch_dota_5fmatch_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTADPCMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTADPCMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTADPCMatch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTADPCMatch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAMatch match = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAMatch::_InternalParse;
        object = msg->mutable_match();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CDOTAMatchMetadata metadata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAMatchMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTADPCMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTADPCMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAMatch match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMatchMetadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTADPCMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTADPCMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTADPCMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTADPCMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch match = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::match(this), output);
  }

  // optional .proto.dota.CDOTAMatchMetadata metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTADPCMatch)
}

::google::protobuf::uint8* CMsgDOTADPCMatch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTADPCMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::match(this), target);
  }

  // optional .proto.dota.CDOTAMatchMetadata metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTADPCMatch)
  return target;
}

size_t CMsgDOTADPCMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTADPCMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAMatch match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional .proto.dota.CDOTAMatchMetadata metadata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTADPCMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCMatch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTADPCMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTADPCMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTADPCMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCMatch::MergeFrom(const CMsgDOTADPCMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTADPCMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match()->::proto::dota::CMsgDOTAMatch::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metadata()->::proto::dota::CDOTAMatchMetadata::MergeFrom(from.metadata());
    }
  }
}

void CMsgDOTADPCMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTADPCMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCMatch::CopyFrom(const CMsgDOTADPCMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTADPCMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCMatch::IsInitialized() const {
  return true;
}

void CMsgDOTADPCMatch::Swap(CMsgDOTADPCMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTADPCMatch::InternalSwap(CMsgDOTADPCMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_, other->match_);
  swap(metadata_, other->metadata_);
}

::google::protobuf::Metadata CMsgDOTADPCMatch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fmatch_5fmetadata_2eproto);
  return ::file_level_metadata_dota_5fmatch_5fmetadata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadataFile* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadataFile >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadataFile >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_EventData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_EventData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchMetadata* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata_Team* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAMatchPrivateMetadata* Arena::CreateMaybeMessage< ::proto::dota::CDOTAMatchPrivateMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAMatchPrivateMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTADPCMatch* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTADPCMatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTADPCMatch >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
