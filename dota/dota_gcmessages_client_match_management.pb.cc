// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#include "dota_gcmessages_client_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPingData_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fshared_5fenums_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientHardwareSpecs_dota_5fshared_5fenums_2eproto;
namespace proto {
namespace dota {
class CMsgStartFindingMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartFindingMatch> _instance;
} _CMsgStartFindingMatch_default_instance_;
class CMsgStartFindingMatchResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartFindingMatchResult> _instance;
} _CMsgStartFindingMatchResult_default_instance_;
class CMsgStopFindingMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStopFindingMatch> _instance;
} _CMsgStopFindingMatch_default_instance_;
class CMsgPartyBuilderOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyBuilderOptions> _instance;
} _CMsgPartyBuilderOptions_default_instance_;
class CMsgReadyUpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyUp> _instance;
} _CMsgReadyUp_default_instance_;
class CMsgReadyUpStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyUpStatus> _instance;
} _CMsgReadyUpStatus_default_instance_;
class CMsgAbandonCurrentGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAbandonCurrentGame> _instance;
} _CMsgAbandonCurrentGame_default_instance_;
class CMsgPracticeLobbySetDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbySetDetails> _instance;
} _CMsgPracticeLobbySetDetails_default_instance_;
class CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyCreate_SaveGame> _instance;
} _CMsgPracticeLobbyCreate_SaveGame_default_instance_;
class CMsgPracticeLobbyCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyCreate> _instance;
} _CMsgPracticeLobbyCreate_default_instance_;
class CMsgPracticeLobbySetTeamSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbySetTeamSlot> _instance;
} _CMsgPracticeLobbySetTeamSlot_default_instance_;
class CMsgPracticeLobbySetCoachDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbySetCoach> _instance;
} _CMsgPracticeLobbySetCoach_default_instance_;
class CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyJoinBroadcastChannel> _instance;
} _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
class CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyCloseBroadcastChannel> _instance;
} _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_;
class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus> _instance;
} _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_;
class CMsgPracticeLobbyKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyKick> _instance;
} _CMsgPracticeLobbyKick_default_instance_;
class CMsgPracticeLobbyKickFromTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyKickFromTeam> _instance;
} _CMsgPracticeLobbyKickFromTeam_default_instance_;
class CMsgPracticeLobbyLeaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyLeave> _instance;
} _CMsgPracticeLobbyLeave_default_instance_;
class CMsgPracticeLobbyLaunchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyLaunch> _instance;
} _CMsgPracticeLobbyLaunch_default_instance_;
class CMsgApplyTeamToPracticeLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyTeamToPracticeLobby> _instance;
} _CMsgApplyTeamToPracticeLobby_default_instance_;
class CMsgClearPracticeLobbyTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearPracticeLobbyTeam> _instance;
} _CMsgClearPracticeLobbyTeam_default_instance_;
class CMsgPracticeLobbyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyList> _instance;
} _CMsgPracticeLobbyList_default_instance_;
class CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyListResponseEntry_CLobbyMember> _instance;
} _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
class CMsgPracticeLobbyListResponseEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyListResponseEntry> _instance;
} _CMsgPracticeLobbyListResponseEntry_default_instance_;
class CMsgPracticeLobbyListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyListResponse> _instance;
} _CMsgPracticeLobbyListResponse_default_instance_;
class CMsgLobbyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyList> _instance;
} _CMsgLobbyList_default_instance_;
class CMsgLobbyListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyListResponse> _instance;
} _CMsgLobbyListResponse_default_instance_;
class CMsgPracticeLobbyJoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyJoin> _instance;
} _CMsgPracticeLobbyJoin_default_instance_;
class CMsgPracticeLobbyJoinResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyJoinResponse> _instance;
} _CMsgPracticeLobbyJoinResponse_default_instance_;
class CMsgFriendPracticeLobbyListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFriendPracticeLobbyListRequest> _instance;
} _CMsgFriendPracticeLobbyListRequest_default_instance_;
class CMsgFriendPracticeLobbyListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFriendPracticeLobbyListResponse> _instance;
} _CMsgFriendPracticeLobbyListResponse_default_instance_;
class CMsgGuildmatePracticeLobbyListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGuildmatePracticeLobbyListRequest> _instance;
} _CMsgGuildmatePracticeLobbyListRequest_default_instance_;
class CMsgGuildmatePracticeLobbyListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGuildmatePracticeLobbyListResponse> _instance;
} _CMsgGuildmatePracticeLobbyListResponse_default_instance_;
class CMsgJoinableCustomGameModesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomGameModesRequest> _instance;
} _CMsgJoinableCustomGameModesRequest_default_instance_;
class CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomGameModesResponseEntry> _instance;
} _CMsgJoinableCustomGameModesResponseEntry_default_instance_;
class CMsgJoinableCustomGameModesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomGameModesResponse> _instance;
} _CMsgJoinableCustomGameModesResponse_default_instance_;
class CMsgJoinableCustomLobbiesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomLobbiesRequest> _instance;
} _CMsgJoinableCustomLobbiesRequest_default_instance_;
class CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomLobbiesResponseEntry> _instance;
} _CMsgJoinableCustomLobbiesResponseEntry_default_instance_;
class CMsgJoinableCustomLobbiesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomLobbiesResponse> _instance;
} _CMsgJoinableCustomLobbiesResponse_default_instance_;
class CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgQuickJoinCustomLobby_LegacyRegionPing> _instance;
} _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_;
class CMsgQuickJoinCustomLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgQuickJoinCustomLobby> _instance;
} _CMsgQuickJoinCustomLobby_default_instance_;
class CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgQuickJoinCustomLobbyResponse> _instance;
} _CMsgQuickJoinCustomLobbyResponse_default_instance_;
class CMsgBotGameCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotGameCreate> _instance;
} _CMsgBotGameCreate_default_instance_;
class CMsgCustomGameCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCustomGameCreate> _instance;
} _CMsgCustomGameCreate_default_instance_;
class CMsgEventGameCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgEventGameCreate> _instance;
} _CMsgEventGameCreate_default_instance_;
class CMsgDOTAPartyMemberSetCoachDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPartyMemberSetCoach> _instance;
} _CMsgDOTAPartyMemberSetCoach_default_instance_;
class CMsgDOTASetGroupLeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASetGroupLeader> _instance;
} _CMsgDOTASetGroupLeader_default_instance_;
class CMsgDOTACancelGroupInvitesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACancelGroupInvites> _instance;
} _CMsgDOTACancelGroupInvites_default_instance_;
class CMsgDOTASetGroupOpenStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASetGroupOpenStatus> _instance;
} _CMsgDOTASetGroupOpenStatus_default_instance_;
class CMsgDOTAGroupMergeInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGroupMergeInvite> _instance;
} _CMsgDOTAGroupMergeInvite_default_instance_;
class CMsgDOTAGroupMergeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGroupMergeResponse> _instance;
} _CMsgDOTAGroupMergeResponse_default_instance_;
class CMsgDOTAGroupMergeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGroupMergeReply> _instance;
} _CMsgDOTAGroupMergeReply_default_instance_;
class CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyGameDetails_Team> _instance;
} _CMsgSpectatorLobbyGameDetails_Team_default_instance_;
class CMsgSpectatorLobbyGameDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyGameDetails> _instance;
} _CMsgSpectatorLobbyGameDetails_default_instance_;
class CMsgSetSpectatorLobbyDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetSpectatorLobbyDetails> _instance;
} _CMsgSetSpectatorLobbyDetails_default_instance_;
class CMsgCreateSpectatorLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCreateSpectatorLobby> _instance;
} _CMsgCreateSpectatorLobby_default_instance_;
class CMsgSpectatorLobbyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyList> _instance;
} _CMsgSpectatorLobbyList_default_instance_;
class CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyListResponse_SpectatorLobby> _instance;
} _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_;
class CMsgSpectatorLobbyListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyListResponse> _instance;
} _CMsgSpectatorLobbyListResponse_default_instance_;
class CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCRequestSteamDatagramTicket> _instance;
} _CMsgClientToGCRequestSteamDatagramTicket_default_instance_;
class CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCRequestSteamDatagramTicketResponse> _instance;
} _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_;
class CMsgGCToClientSteamDatagramTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientSteamDatagramTicket> _instance;
} _CMsgGCToClientSteamDatagramTicket_default_instance_;
class CMsgGCToClientRequestLaneSelectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientRequestLaneSelection> _instance;
} _CMsgGCToClientRequestLaneSelection_default_instance_;
class CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientRequestLaneSelectionResponse> _instance;
} _CMsgGCToClientRequestLaneSelectionResponse_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgStartFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgStartFindingMatch_default_instance_;
    new (ptr) ::proto::dota::CMsgStartFindingMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgStartFindingMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgStartFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgStartFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgClientPingData_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgStartFindingMatchResult_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgStartFindingMatchResult_default_instance_;
    new (ptr) ::proto::dota::CMsgStartFindingMatchResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgStartFindingMatchResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStartFindingMatchResult_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStartFindingMatchResult_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgStopFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgStopFindingMatch_default_instance_;
    new (ptr) ::proto::dota::CMsgStopFindingMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgStopFindingMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStopFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStopFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPartyBuilderOptions_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPartyBuilderOptions_default_instance_;
    new (ptr) ::proto::dota::CMsgPartyBuilderOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPartyBuilderOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPartyBuilderOptions_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPartyBuilderOptions_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgReadyUp_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgReadyUp_default_instance_;
    new (ptr) ::proto::dota::CMsgReadyUp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgReadyUp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgReadyUp_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgReadyUp_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CDOTAClientHardwareSpecs_dota_5fshared_5fenums_2eproto.base,}};

static void InitDefaultsCMsgReadyUpStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgReadyUpStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgReadyUpStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgReadyUpStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgReadyUpStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgReadyUpStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgAbandonCurrentGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAbandonCurrentGame_default_instance_;
    new (ptr) ::proto::dota::CMsgAbandonCurrentGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAbandonCurrentGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAbandonCurrentGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAbandonCurrentGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbySetDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbySetDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbySetDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CLobbyTeamDetails_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyCreate_SaveGame_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyCreate_SaveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyCreate_SaveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyCreate_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgPracticeLobbyCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgPracticeLobbyCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgPracticeLobbySetTeamSlot_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbySetTeamSlot_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbySetTeamSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbySetTeamSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbySetTeamSlot_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbySetTeamSlot_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbySetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbySetCoach_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbySetCoach();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbySetCoach::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbySetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbySetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyJoinBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyJoinBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyJoinBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyCloseBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyCloseBroadcastChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyCloseBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyCloseBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyKick_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyKick_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyKick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyKick_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyKick_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyKickFromTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyKickFromTeam_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyKickFromTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyKickFromTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyKickFromTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyKickFromTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyLeave_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyLeave_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyLeave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyLeave::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyLeave_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyLeave_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyLaunch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyLaunch_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyLaunch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyLaunch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyLaunch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyLaunch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgApplyTeamToPracticeLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgApplyTeamToPracticeLobby_default_instance_;
    new (ptr) ::proto::dota::CMsgApplyTeamToPracticeLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgApplyTeamToPracticeLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgApplyTeamToPracticeLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgApplyTeamToPracticeLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgClearPracticeLobbyTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClearPracticeLobbyTeam_default_instance_;
    new (ptr) ::proto::dota::CMsgClearPracticeLobbyTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClearPracticeLobbyTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClearPracticeLobbyTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClearPracticeLobbyTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyList_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyListResponseEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyListResponseEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyListResponseEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyList_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgPracticeLobbyJoin_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyJoin_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyJoin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyJoin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyJoin_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyJoin_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgPracticeLobbyJoinResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPracticeLobbyJoinResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgPracticeLobbyJoinResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPracticeLobbyJoinResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPracticeLobbyJoinResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPracticeLobbyJoinResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgFriendPracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgFriendPracticeLobbyListRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgFriendPracticeLobbyListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgFriendPracticeLobbyListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFriendPracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFriendPracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgFriendPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgFriendPracticeLobbyListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgFriendPracticeLobbyListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgFriendPracticeLobbyListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgFriendPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgFriendPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgGuildmatePracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGuildmatePracticeLobbyListRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGuildmatePracticeLobbyListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGuildmatePracticeLobbyListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGuildmatePracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGuildmatePracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgGuildmatePracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGuildmatePracticeLobbyListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGuildmatePracticeLobbyListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGuildmatePracticeLobbyListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGuildmatePracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGuildmatePracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgJoinableCustomGameModesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgJoinableCustomGameModesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgJoinableCustomGameModesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgJoinableCustomGameModesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJoinableCustomGameModesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJoinableCustomGameModesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgJoinableCustomGameModesResponseEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgJoinableCustomGameModesResponseEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgJoinableCustomGameModesResponseEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgJoinableCustomGameModesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgJoinableCustomGameModesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgJoinableCustomGameModesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgJoinableCustomGameModesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgJoinableCustomGameModesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgJoinableCustomGameModesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgJoinableCustomLobbiesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgJoinableCustomLobbiesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgJoinableCustomLobbiesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgJoinableCustomLobbiesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJoinableCustomLobbiesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJoinableCustomLobbiesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgJoinableCustomLobbiesResponseEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgJoinableCustomLobbiesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgJoinableCustomLobbiesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgJoinableCustomLobbiesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgJoinableCustomLobbiesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgJoinableCustomLobbiesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgJoinableCustomLobbiesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_;
    new (ptr) ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgQuickJoinCustomLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgQuickJoinCustomLobby_default_instance_;
    new (ptr) ::proto::dota::CMsgQuickJoinCustomLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgQuickJoinCustomLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgQuickJoinCustomLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgQuickJoinCustomLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,
      &scc_info_CMsgClientPingData_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgQuickJoinCustomLobbyResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgQuickJoinCustomLobbyResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgQuickJoinCustomLobbyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgQuickJoinCustomLobbyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgQuickJoinCustomLobbyResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgQuickJoinCustomLobbyResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgBotGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgBotGameCreate_default_instance_;
    new (ptr) ::proto::dota::CMsgBotGameCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgBotGameCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBotGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBotGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgCustomGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgCustomGameCreate_default_instance_;
    new (ptr) ::proto::dota::CMsgCustomGameCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgCustomGameCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCustomGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCustomGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgEventGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgEventGameCreate_default_instance_;
    new (ptr) ::proto::dota::CMsgEventGameCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgEventGameCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgEventGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgEventGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTAPartyMemberSetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPartyMemberSetCoach_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPartyMemberSetCoach();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPartyMemberSetCoach::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPartyMemberSetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPartyMemberSetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTASetGroupLeader_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASetGroupLeader_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASetGroupLeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASetGroupLeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASetGroupLeader_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASetGroupLeader_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTACancelGroupInvites_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTACancelGroupInvites_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTACancelGroupInvites();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTACancelGroupInvites::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACancelGroupInvites_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTACancelGroupInvites_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTASetGroupOpenStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASetGroupOpenStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASetGroupOpenStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASetGroupOpenStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASetGroupOpenStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASetGroupOpenStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTAGroupMergeInvite_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAGroupMergeInvite_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAGroupMergeInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAGroupMergeInvite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAGroupMergeInvite_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAGroupMergeInvite_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTAGroupMergeResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAGroupMergeResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAGroupMergeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAGroupMergeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAGroupMergeResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAGroupMergeResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgDOTAGroupMergeReply_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAGroupMergeReply_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAGroupMergeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAGroupMergeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAGroupMergeReply_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAGroupMergeReply_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectatorLobbyGameDetails_Team_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectatorLobbyGameDetails_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectatorLobbyGameDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectatorLobbyGameDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectatorLobbyGameDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSetSpectatorLobbyDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgSetSpectatorLobbyDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSetSpectatorLobbyDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgCreateSpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgCreateSpectatorLobby_default_instance_;
    new (ptr) ::proto::dota::CMsgCreateSpectatorLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgCreateSpectatorLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgCreateSpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgCreateSpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgSpectatorLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectatorLobbyList_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectatorLobbyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectatorLobbyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpectatorLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSpectatorLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgSpectatorLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectatorLobbyListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectatorLobbyListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectatorLobbyListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSpectatorLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSpectatorLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {
      &scc_info_CMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base,}};

static void InitDefaultsCMsgClientToGCRequestSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCRequestSteamDatagramTicket_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCRequestSteamDatagramTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCRequestSteamDatagramTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCRequestSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCRequestSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgClientToGCRequestSteamDatagramTicketResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCRequestSteamDatagramTicketResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCRequestSteamDatagramTicketResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgGCToClientSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientSteamDatagramTicket_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientSteamDatagramTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientSteamDatagramTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgGCToClientRequestLaneSelection_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientRequestLaneSelection_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientRequestLaneSelection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientRequestLaneSelection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientRequestLaneSelection_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientRequestLaneSelection_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

static void InitDefaultsCMsgGCToClientRequestLaneSelectionResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientRequestLaneSelectionResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientRequestLaneSelectionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientRequestLaneSelectionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientRequestLaneSelectionResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientRequestLaneSelectionResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto}, {}};

void InitDefaults_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStartFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStartFindingMatchResult_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStopFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPartyBuilderOptions_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgReadyUp_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgReadyUpStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAbandonCurrentGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbySetTeamSlot_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbySetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyJoinBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyCloseBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyKick_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyKickFromTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyLeave_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyLaunch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgApplyTeamToPracticeLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClearPracticeLobbyTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyJoin_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPracticeLobbyJoinResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFriendPracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFriendPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGuildmatePracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGuildmatePracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJoinableCustomGameModesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJoinableCustomGameModesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJoinableCustomLobbiesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJoinableCustomLobbiesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgQuickJoinCustomLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgQuickJoinCustomLobbyResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBotGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCustomGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgEventGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPartyMemberSetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASetGroupLeader_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTACancelGroupInvites_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASetGroupOpenStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAGroupMergeInvite_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAGroupMergeResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAGroupMergeReply_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCreateSpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectatorLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectatorLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCRequestSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCRequestSteamDatagramTicketResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientRequestLaneSelection_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientRequestLaneSelectionResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[64];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, matchgroups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, game_modes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, match_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, matchlanguages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, game_language_enum_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, game_language_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, ping_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, region_select_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, solo_queue_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, bot_script_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, steam_clan_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatch, lane_selection_flags_),
  0,
  13,
  3,
  14,
  15,
  4,
  16,
  5,
  6,
  1,
  2,
  7,
  9,
  8,
  11,
  10,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, legacy_generic_eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, error_token_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, debug_message_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStartFindingMatchResult, responsible_party_members_),
  3,
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStopFindingMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgStopFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, additional_slots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, match_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, matchgroups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyBuilderOptions, language_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUp, state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUp, ready_up_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUp, hardware_specs_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUpStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUpStatus, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUpStatus, accepted_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReadyUpStatus, declined_ids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAbandonCurrentGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAbandonCurrentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, game_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, team_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, cm_pick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, fill_with_bots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, intro_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, allow_spectating_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, game_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, leagueid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, penalty_level_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, penalty_level_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, load_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, radiant_series_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, dire_series_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, allchat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, dota_tv_delay_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, lan_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_min_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_max_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, visibility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, previous_match_override_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, pause_setting_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, bot_difficulty_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, bot_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, bot_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, selection_priority_rules_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, custom_game_penalties_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetDetails, league_node_id_),
  5,
  0,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  1,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  26,
  39,
  27,
  2,
  3,
  22,
  23,
  24,
  25,
  29,
  30,
  32,
  31,
  33,
  36,
  35,
  38,
  37,
  28,
  4,
  34,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate_SaveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate_SaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate_SaveGame, data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate_SaveGame, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate_SaveGame, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate_SaveGame, signature_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, lobby_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCreate, save_game_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetTeamSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetTeamSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetTeamSlot, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetTeamSlot, slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetTeamSlot, bot_difficulty_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbySetCoach, team_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel, preferred_description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel, preferred_country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel, preferred_language_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel, channel_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyKick, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyKickFromTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyKickFromTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyKickFromTeam, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyLeave, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyLaunch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyLaunch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyLaunch, client_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyTeamToPracticeLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyTeamToPracticeLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyTeamToPracticeLobby, team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClearPracticeLobbyTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClearPracticeLobbyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyList, pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyList, region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyList, game_mode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember, player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, guild_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, guild_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, friend_present_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, max_player_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponseEntry, lan_host_ping_location_),
  4,
  ~0u,
  8,
  5,
  6,
  7,
  0,
  1,
  10,
  9,
  11,
  2,
  12,
  13,
  14,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyListResponse, lobbies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyList, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyList, game_mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyListResponse, lobbies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoin, custom_game_timestamp_),
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPracticeLobbyJoinResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFriendPracticeLobbyListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFriendPracticeLobbyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFriendPracticeLobbyListRequest, friends_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFriendPracticeLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFriendPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFriendPracticeLobbyListResponse, lobbies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGuildmatePracticeLobbyListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGuildmatePracticeLobbyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGuildmatePracticeLobbyListRequest, guilds_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGuildmatePracticeLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGuildmatePracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGuildmatePracticeLobbyListResponse, lobbies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesRequest, server_region_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponseEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponseEntry, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponseEntry, lobby_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponseEntry, player_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomGameModesResponse, game_modes_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesRequest, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesRequest, custom_game_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, lobby_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, member_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, leader_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, max_player_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, has_pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry, lan_host_ping_location_),
  4,
  5,
  0,
  6,
  7,
  1,
  2,
  8,
  9,
  10,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgJoinableCustomLobbiesResponse, lobbies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing, server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing, ping_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing, region_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, legacy_server_region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, create_lobby_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, allow_any_map_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, legacy_region_pings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobby, ping_data_),
  3,
  2,
  4,
  0,
  5,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgQuickJoinCustomLobbyResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgBotGameCreate, difficulty_dire_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, map_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameCreate, custom_game_id_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, search_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, difficulty_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, map_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgEventGameCreate, custom_game_id_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPartyMemberSetCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPartyMemberSetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPartyMemberSetCoach, wants_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASetGroupLeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASetGroupLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASetGroupLeader, new_leader_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACancelGroupInvites, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACancelGroupInvites, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACancelGroupInvites, invited_steamids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACancelGroupInvites, invited_groupids_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASetGroupOpenStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASetGroupOpenStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASetGroupOpenStatus, open_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeInvite, other_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeResponse, initiator_group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeResponse, accept_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAGroupMergeReply, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails_Team, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails_Team, team_logo_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, language_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, stream_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, stream_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, series_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, radiant_team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyGameDetails, dire_team_),
  6,
  4,
  5,
  0,
  1,
  7,
  8,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetSpectatorLobbyDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetSpectatorLobbyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetSpectatorLobbyDetails, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetSpectatorLobbyDetails, lobby_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetSpectatorLobbyDetails, pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetSpectatorLobbyDetails, game_details_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCreateSpectatorLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCreateSpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCreateSpectatorLobby, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCreateSpectatorLobby, details_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, game_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, member_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby, game_details_),
  2,
  0,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectatorLobbyListResponse, lobbies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicket, server_steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse, serialized_ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse, message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_time_expiry_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_gameserver_net_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_signature_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, legacy_extra_fields_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientSteamDatagramTicket, serialized_ticket_),
  3,
  2,
  4,
  5,
  6,
  0,
  7,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientRequestLaneSelection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientRequestLaneSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientRequestLaneSelectionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientRequestLaneSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientRequestLaneSelectionResponse, lane_selection_flags_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::proto::dota::CMsgStartFindingMatch)},
  { 39, 49, sizeof(::proto::dota::CMsgStartFindingMatchResult)},
  { 54, 59, sizeof(::proto::dota::CMsgStopFindingMatch)},
  { 59, 69, sizeof(::proto::dota::CMsgPartyBuilderOptions)},
  { 74, 82, sizeof(::proto::dota::CMsgReadyUp)},
  { 85, 93, sizeof(::proto::dota::CMsgReadyUpStatus)},
  { 96, 101, sizeof(::proto::dota::CMsgAbandonCurrentGame)},
  { 101, 147, sizeof(::proto::dota::CMsgPracticeLobbySetDetails)},
  { 188, 197, sizeof(::proto::dota::CMsgPracticeLobbyCreate_SaveGame)},
  { 201, 211, sizeof(::proto::dota::CMsgPracticeLobbyCreate)},
  { 216, 224, sizeof(::proto::dota::CMsgPracticeLobbySetTeamSlot)},
  { 227, 233, sizeof(::proto::dota::CMsgPracticeLobbySetCoach)},
  { 234, 243, sizeof(::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel)},
  { 247, 253, sizeof(::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel)},
  { 254, 259, sizeof(::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)},
  { 259, 265, sizeof(::proto::dota::CMsgPracticeLobbyKick)},
  { 266, 272, sizeof(::proto::dota::CMsgPracticeLobbyKickFromTeam)},
  { 273, 278, sizeof(::proto::dota::CMsgPracticeLobbyLeave)},
  { 278, 284, sizeof(::proto::dota::CMsgPracticeLobbyLaunch)},
  { 285, 291, sizeof(::proto::dota::CMsgApplyTeamToPracticeLobby)},
  { 292, 297, sizeof(::proto::dota::CMsgClearPracticeLobbyTeam)},
  { 297, 305, sizeof(::proto::dota::CMsgPracticeLobbyList)},
  { 308, 315, sizeof(::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember)},
  { 317, 338, sizeof(::proto::dota::CMsgPracticeLobbyListResponseEntry)},
  { 354, 360, sizeof(::proto::dota::CMsgPracticeLobbyListResponse)},
  { 361, 368, sizeof(::proto::dota::CMsgLobbyList)},
  { 370, 376, sizeof(::proto::dota::CMsgLobbyListResponse)},
  { 377, 387, sizeof(::proto::dota::CMsgPracticeLobbyJoin)},
  { 392, 398, sizeof(::proto::dota::CMsgPracticeLobbyJoinResponse)},
  { 399, 405, sizeof(::proto::dota::CMsgFriendPracticeLobbyListRequest)},
  { 406, 412, sizeof(::proto::dota::CMsgFriendPracticeLobbyListResponse)},
  { 413, 419, sizeof(::proto::dota::CMsgGuildmatePracticeLobbyListRequest)},
  { 420, 426, sizeof(::proto::dota::CMsgGuildmatePracticeLobbyListResponse)},
  { 427, 433, sizeof(::proto::dota::CMsgJoinableCustomGameModesRequest)},
  { 434, 442, sizeof(::proto::dota::CMsgJoinableCustomGameModesResponseEntry)},
  { 445, 451, sizeof(::proto::dota::CMsgJoinableCustomGameModesResponse)},
  { 452, 459, sizeof(::proto::dota::CMsgJoinableCustomLobbiesRequest)},
  { 461, 477, sizeof(::proto::dota::CMsgJoinableCustomLobbiesResponseEntry)},
  { 488, 494, sizeof(::proto::dota::CMsgJoinableCustomLobbiesResponse)},
  { 495, 503, sizeof(::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing)},
  { 506, 518, sizeof(::proto::dota::CMsgQuickJoinCustomLobby)},
  { 525, 531, sizeof(::proto::dota::CMsgQuickJoinCustomLobbyResponse)},
  { 532, 543, sizeof(::proto::dota::CMsgBotGameCreate)},
  { 549, 560, sizeof(::proto::dota::CMsgCustomGameCreate)},
  { 566, 577, sizeof(::proto::dota::CMsgEventGameCreate)},
  { 583, 589, sizeof(::proto::dota::CMsgDOTAPartyMemberSetCoach)},
  { 590, 596, sizeof(::proto::dota::CMsgDOTASetGroupLeader)},
  { 597, 604, sizeof(::proto::dota::CMsgDOTACancelGroupInvites)},
  { 606, 612, sizeof(::proto::dota::CMsgDOTASetGroupOpenStatus)},
  { 613, 619, sizeof(::proto::dota::CMsgDOTAGroupMergeInvite)},
  { 620, 627, sizeof(::proto::dota::CMsgDOTAGroupMergeResponse)},
  { 629, 635, sizeof(::proto::dota::CMsgDOTAGroupMergeReply)},
  { 636, 644, sizeof(::proto::dota::CMsgSpectatorLobbyGameDetails_Team)},
  { 647, 662, sizeof(::proto::dota::CMsgSpectatorLobbyGameDetails)},
  { 672, 681, sizeof(::proto::dota::CMsgSetSpectatorLobbyDetails)},
  { 685, 692, sizeof(::proto::dota::CMsgCreateSpectatorLobby)},
  { 694, 699, sizeof(::proto::dota::CMsgSpectatorLobbyList)},
  { 699, 710, sizeof(::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby)},
  { 716, 722, sizeof(::proto::dota::CMsgSpectatorLobbyListResponse)},
  { 723, 729, sizeof(::proto::dota::CMsgClientToGCRequestSteamDatagramTicket)},
  { 730, 737, sizeof(::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse)},
  { 739, 753, sizeof(::proto::dota::CMsgGCToClientSteamDatagramTicket)},
  { 762, 767, sizeof(::proto::dota::CMsgGCToClientRequestLaneSelection)},
  { 767, 773, sizeof(::proto::dota::CMsgGCToClientRequestLaneSelectionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgStartFindingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgStartFindingMatchResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgStopFindingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPartyBuilderOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgReadyUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgReadyUpStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAbandonCurrentGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbySetDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyCreate_SaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbySetTeamSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbySetCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyCloseBroadcastChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyKickFromTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyLaunch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgApplyTeamToPracticeLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClearPracticeLobbyTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyListResponseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyJoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPracticeLobbyJoinResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgFriendPracticeLobbyListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgFriendPracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGuildmatePracticeLobbyListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGuildmatePracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgJoinableCustomGameModesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgJoinableCustomGameModesResponseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgJoinableCustomGameModesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgJoinableCustomLobbiesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgJoinableCustomLobbiesResponseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgJoinableCustomLobbiesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgQuickJoinCustomLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgQuickJoinCustomLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgBotGameCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgCustomGameCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgEventGameCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPartyMemberSetCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASetGroupLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTACancelGroupInvites_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASetGroupOpenStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAGroupMergeInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAGroupMergeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAGroupMergeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectatorLobbyGameDetails_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectatorLobbyGameDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSetSpectatorLobbyDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgCreateSpectatorLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectatorLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectatorLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCRequestSteamDatagramTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientSteamDatagramTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientRequestLaneSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientRequestLaneSelectionResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, "dota_gcmessages_client_match_management.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, 64, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[] =
  "\n-dota_gcmessages_client_match_managemen"
  "t.proto\022\nproto.dota\032\023steammessages.proto"
  "\032\027dota_shared_enums.proto\032\027dota_client_e"
  "nums.proto\032\025base_gcmessages.proto\032-dota_"
  "gcmessages_common_match_management.proto"
  "\"\377\004\n\025CMsgStartFindingMatch\022\013\n\003key\030\001 \001(\t\022"
  "\037\n\013matchgroups\030\002 \001(\r:\n4294967295\022\026\n\016clie"
  "nt_version\030\003 \001(\r\022\036\n\ngame_modes\030\004 \001(\r:\n42"
  "94967295\022J\n\016bot_difficulty\030\005 \001(\0162\035.proto"
  ".dota.DOTABotDifficulty:\023BOT_DIFFICULTY_"
  "HARD\022<\n\nmatch_type\030\006 \001(\0162\025.proto.dota.Ma"
  "tchType:\021MATCH_TYPE_CASUAL\022\"\n\016matchlangu"
  "ages\030\007 \001(\r:\n4294967295\022\017\n\007team_id\030\010 \001(\r\022"
  "N\n\022game_language_enum\030\n \001(\0162\032.proto.dota"
  ".MatchLanguages:\026MATCH_LANGUAGE_INVALID\022"
  "\032\n\022game_language_name\030\013 \001(\t\0221\n\tping_data"
  "\030\014 \001(\0132\036.proto.dota.CMsgClientPingData\022\033"
  "\n\023region_select_flags\030\r \001(\r\022\022\n\nsolo_queu"
  "e\030\016 \001(\010\022\030\n\020bot_script_index\030\017 \001(\r\022\035\n\025ste"
  "am_clan_account_id\030\020 \001(\r\022\032\n\022is_challenge"
  "_match\030\021 \001(\010\022\034\n\024lane_selection_flags\030\022 \001"
  "(\r\"\351\001\n\033CMsgStartFindingMatchResult\022!\n\026le"
  "gacy_generic_eresult\030\001 \001(\r:\0012\022X\n\006result\030"
  "\002 \001(\0162$.proto.dota.EStartFindingMatchRes"
  "ult:\"k_EStartFindingMatchResult_Invalid\022"
  "\023\n\013error_token\030\003 \001(\t\022\025\n\rdebug_message\030\004 "
  "\001(\t\022!\n\031responsible_party_members\030\005 \003(\006\"\026"
  "\n\024CMsgStopFindingMatch\"\344\001\n\027CMsgPartyBuil"
  "derOptions\022\030\n\020additional_slots\030\001 \001(\r\022<\n\n"
  "match_type\030\002 \001(\0162\025.proto.dota.MatchType:"
  "\021MATCH_TYPE_CASUAL\022\023\n\013matchgroups\030\003 \001(\r\022"
  "\026\n\016client_version\030\004 \001(\r\022D\n\010language\030\005 \001("
  "\0162\032.proto.dota.MatchLanguages:\026MATCH_LAN"
  "GUAGE_INVALID\"\261\001\n\013CMsgReadyUp\022N\n\005state\030\001"
  " \001(\0162\037.proto.dota.DOTALobbyReadyState:\036D"
  "OTALobbyReadyState_UNDECLARED\022\024\n\014ready_u"
  "p_key\030\002 \001(\006\022<\n\016hardware_specs\030\003 \001(\0132$.pr"
  "oto.dota.CDOTAClientHardwareSpecs\"Q\n\021CMs"
  "gReadyUpStatus\022\020\n\010lobby_id\030\001 \001(\006\022\024\n\014acce"
  "pted_ids\030\002 \003(\r\022\024\n\014declined_ids\030\003 \003(\r\"\030\n\026"
  "CMsgAbandonCurrentGame\"\350\013\n\033CMsgPracticeL"
  "obbySetDetails\022\020\n\010lobby_id\030\001 \001(\004\022\021\n\tgame"
  "_name\030\002 \001(\t\0223\n\014team_details\030\003 \003(\0132\035.prot"
  "o.dota.CLobbyTeamDetails\022\025\n\rserver_regio"
  "n\030\004 \001(\r\022\021\n\tgame_mode\030\005 \001(\r\0229\n\007cm_pick\030\006 "
  "\001(\0162\030.proto.dota.DOTA_CM_PICK:\016DOTA_CM_R"
  "ANDOM\022U\n\026bot_difficulty_radiant\030\t \001(\0162\035."
  "proto.dota.DOTABotDifficulty:\026BOT_DIFFIC"
  "ULTY_PASSIVE\022\024\n\014allow_cheats\030\n \001(\010\022\026\n\016fi"
  "ll_with_bots\030\013 \001(\010\022\022\n\nintro_mode\030\014 \001(\010\022\030"
  "\n\020allow_spectating\030\r \001(\010\022G\n\014game_version"
  "\030\016 \001(\0162\033.proto.dota.DOTAGameVersion:\024GAM"
  "E_VERSION_CURRENT\022\020\n\010pass_key\030\017 \001(\t\022\020\n\010l"
  "eagueid\030\020 \001(\r\022\035\n\025penalty_level_radiant\030\021"
  " \001(\r\022\032\n\022penalty_level_dire\030\022 \001(\r\022\024\n\014load"
  "_game_id\030\023 \001(\r\022\023\n\013series_type\030\024 \001(\r\022\033\n\023r"
  "adiant_series_wins\030\025 \001(\r\022\030\n\020dire_series_"
  "wins\030\026 \001(\r\022\026\n\007allchat\030\027 \001(\010:\005false\022D\n\rdo"
  "ta_tv_delay\030\030 \001(\0162\034.proto.dota.LobbyDota"
  "TVDelay:\017LobbyDotaTV_120\022\013\n\003lan\030\031 \001(\010\022\030\n"
  "\020custom_game_mode\030\032 \001(\t\022\027\n\017custom_map_na"
  "me\030\033 \001(\t\022\031\n\021custom_difficulty\030\034 \001(\r\022\026\n\016c"
  "ustom_game_id\030\035 \001(\004\022\032\n\022custom_min_player"
  "s\030\036 \001(\r\022\032\n\022custom_max_players\030\037 \001(\r\022O\n\nv"
  "isibility\030! \001(\0162\037.proto.dota.DOTALobbyVi"
  "sibility:\032DOTALobbyVisibility_Public\022\027\n\017"
  "custom_game_crc\030\" \001(\006\022\035\n\025custom_game_tim"
  "estamp\030% \001(\007\022\037\n\027previous_match_override\030"
  "& \001(\004\022Y\n\rpause_setting\030* \001(\0162!.proto.dot"
  "a.LobbyDotaPauseSetting:\037LobbyDotaPauseS"
  "etting_Unlimited\022R\n\023bot_difficulty_dire\030"
  "+ \001(\0162\035.proto.dota.DOTABotDifficulty:\026BO"
  "T_DIFFICULTY_PASSIVE\022\023\n\013bot_radiant\030, \001("
  "\004\022\020\n\010bot_dire\030- \001(\004\022m\n\030selection_priorit"
  "y_rules\030. \001(\0162&.proto.dota.DOTASelection"
  "PriorityRules:#k_DOTASelectionPriorityRu"
  "les_Manual\022\035\n\025custom_game_penalties\030/ \001("
  "\010\022\036\n\026lan_host_ping_location\0300 \001(\t\022\026\n\016lea"
  "gue_node_id\0301 \001(\r\"\250\002\n\027CMsgPracticeLobbyC"
  "reate\022\022\n\nsearch_key\030\001 \001(\t\022\020\n\010pass_key\030\005 "
  "\001(\t\022\026\n\016client_version\030\006 \001(\r\022>\n\rlobby_det"
  "ails\030\007 \001(\0132\'.proto.dota.CMsgPracticeLobb"
  "ySetDetails\022\?\n\tsave_game\030\010 \001(\0132,.proto.d"
  "ota.CMsgPracticeLobbyCreate.SaveGame\032N\n\010"
  "SaveGame\022\014\n\004data\030\001 \001(\014\022\017\n\007version\030\002 \001(\005\022"
  "\020\n\010steam_id\030\003 \001(\006\022\021\n\tsignature\030\004 \001(\006\"\273\001\n"
  "\034CMsgPracticeLobbySetTeamSlot\022>\n\004team\030\001 "
  "\001(\0162\030.proto.dota.DOTA_GC_TEAM:\026DOTA_GC_T"
  "EAM_GOOD_GUYS\022\014\n\004slot\030\002 \001(\r\022M\n\016bot_diffi"
  "culty\030\003 \001(\0162\035.proto.dota.DOTABotDifficul"
  "ty:\026BOT_DIFFICULTY_PASSIVE\"[\n\031CMsgPracti"
  "ceLobbySetCoach\022>\n\004team\030\001 \001(\0162\030.proto.do"
  "ta.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\""
  "\230\001\n%CMsgPracticeLobbyJoinBroadcastChanne"
  "l\022\017\n\007channel\030\001 \001(\r\022\035\n\025preferred_descript"
  "ion\030\002 \001(\t\022\036\n\026preferred_country_code\030\003 \001("
  "\t\022\037\n\027preferred_language_code\030\004 \001(\t\"9\n&CM"
  "sgPracticeLobbyCloseBroadcastChannel\022\017\n\007"
  "channel\030\001 \001(\r\"8\n6CMsgPracticeLobbyToggle"
  "BroadcastChannelCameramanStatus\"+\n\025CMsgP"
  "racticeLobbyKick\022\022\n\naccount_id\030\003 \001(\r\"3\n\035"
  "CMsgPracticeLobbyKickFromTeam\022\022\n\naccount"
  "_id\030\001 \001(\r\"\030\n\026CMsgPracticeLobbyLeave\"1\n\027C"
  "MsgPracticeLobbyLaunch\022\026\n\016client_version"
  "\030\005 \001(\r\"/\n\034CMsgApplyTeamToPracticeLobby\022\017"
  "\n\007team_id\030\001 \001(\r\"\034\n\032CMsgClearPracticeLobb"
  "yTeam\"{\n\025CMsgPracticeLobbyList\022\020\n\010pass_k"
  "ey\030\002 \001(\t\022\016\n\006region\030\003 \001(\r\022@\n\tgame_mode\030\004 "
  "\001(\0162\031.proto.dota.DOTA_GameMode:\022DOTA_GAM"
  "EMODE_NONE\"\251\004\n\"CMsgPracticeLobbyListResp"
  "onseEntry\022\020\n\002id\030\001 \001(\004B\004\200\246\035\001\022L\n\007members\030\005"
  " \003(\0132;.proto.dota.CMsgPracticeLobbyListR"
  "esponseEntry.CLobbyMember\022\031\n\021requires_pa"
  "ss_key\030\006 \001(\010\022\031\n\021leader_account_id\030\007 \001(\r\022"
  "\020\n\010guild_id\030\010 \001(\r\022\022\n\nguild_logo\030\t \001(\004\022\014\n"
  "\004name\030\n \001(\t\022\030\n\020custom_game_mode\030\013 \001(\t\022@\n"
  "\tgame_mode\030\014 \001(\0162\031.proto.dota.DOTA_GameM"
  "ode:\022DOTA_GAMEMODE_NONE\022\026\n\016friend_presen"
  "t\030\r \001(\010\022\017\n\007players\030\016 \001(\r\022\027\n\017custom_map_n"
  "ame\030\017 \001(\t\022\030\n\020max_player_count\030\020 \001(\r\022\025\n\rs"
  "erver_region\030\021 \001(\r\022\021\n\tleague_id\030\023 \001(\r\022\036\n"
  "\026lan_host_ping_location\030\024 \001(\t\0327\n\014CLobbyM"
  "ember\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_name"
  "\030\002 \001(\t\"`\n\035CMsgPracticeLobbyListResponse\022"
  "\?\n\007lobbies\030\002 \003(\0132..proto.dota.CMsgPracti"
  "ceLobbyListResponseEntry\"k\n\rCMsgLobbyLis"
  "t\022\030\n\rserver_region\030\001 \001(\r:\0010\022@\n\tgame_mode"
  "\030\002 \001(\0162\031.proto.dota.DOTA_GameMode:\022DOTA_"
  "GAMEMODE_NONE\"X\n\025CMsgLobbyListResponse\022\?"
  "\n\007lobbies\030\001 \003(\0132..proto.dota.CMsgPractic"
  "eLobbyListResponseEntry\"\213\001\n\025CMsgPractice"
  "LobbyJoin\022\020\n\010lobby_id\030\001 \001(\004\022\026\n\016client_ve"
  "rsion\030\002 \001(\r\022\020\n\010pass_key\030\003 \001(\t\022\027\n\017custom_"
  "game_crc\030\004 \001(\006\022\035\n\025custom_game_timestamp\030"
  "\005 \001(\007\"j\n\035CMsgPracticeLobbyJoinResponse\022I"
  "\n\006result\030\001 \001(\0162\037.proto.dota.DOTAJoinLobb"
  "yResult:\030DOTA_JOIN_RESULT_SUCCESS\"5\n\"CMs"
  "gFriendPracticeLobbyListRequest\022\017\n\007frien"
  "ds\030\001 \003(\r\"f\n#CMsgFriendPracticeLobbyListR"
  "esponse\022\?\n\007lobbies\030\001 \003(\0132..proto.dota.CM"
  "sgPracticeLobbyListResponseEntry\"7\n%CMsg"
  "GuildmatePracticeLobbyListRequest\022\016\n\006gui"
  "lds\030\001 \003(\r\"i\n&CMsgGuildmatePracticeLobbyL"
  "istResponse\022\?\n\007lobbies\030\001 \003(\0132..proto.dot"
  "a.CMsgPracticeLobbyListResponseEntry\";\n\""
  "CMsgJoinableCustomGameModesRequest\022\025\n\rse"
  "rver_region\030\001 \001(\r\"m\n(CMsgJoinableCustomG"
  "ameModesResponseEntry\022\026\n\016custom_game_id\030"
  "\001 \001(\004\022\023\n\013lobby_count\030\002 \001(\r\022\024\n\014player_cou"
  "nt\030\003 \001(\r\"o\n#CMsgJoinableCustomGameModesR"
  "esponse\022H\n\ngame_modes\030\001 \003(\01324.proto.dota"
  ".CMsgJoinableCustomGameModesResponseEntr"
  "y\"Q\n CMsgJoinableCustomLobbiesRequest\022\025\n"
  "\rserver_region\030\001 \001(\r\022\026\n\016custom_game_id\030\002"
  " \001(\004\"\254\002\n&CMsgJoinableCustomLobbiesRespon"
  "seEntry\022\020\n\010lobby_id\030\001 \001(\006\022\026\n\016custom_game"
  "_id\030\002 \001(\004\022\022\n\nlobby_name\030\003 \001(\t\022\024\n\014member_"
  "count\030\004 \001(\r\022\031\n\021leader_account_id\030\005 \001(\r\022\023"
  "\n\013leader_name\030\006 \001(\t\022\027\n\017custom_map_name\030\007"
  " \001(\t\022\030\n\020max_player_count\030\010 \001(\r\022\025\n\rserver"
  "_region\030\t \001(\r\022\024\n\014has_pass_key\030\013 \001(\010\022\036\n\026l"
  "an_host_ping_location\030\014 \001(\t\"h\n!CMsgJoina"
  "bleCustomLobbiesResponse\022C\n\007lobbies\030\001 \003("
  "\01322.proto.dota.CMsgJoinableCustomLobbies"
  "ResponseEntry\"\233\003\n\030CMsgQuickJoinCustomLob"
  "by\022\034\n\024legacy_server_region\030\001 \001(\r\022\026\n\016cust"
  "om_game_id\030\002 \001(\004\022\026\n\016client_version\030\003 \001(\r"
  "\022E\n\024create_lobby_details\030\004 \001(\0132\'.proto.d"
  "ota.CMsgPracticeLobbySetDetails\022\025\n\rallow"
  "_any_map\030\005 \001(\010\022R\n\023legacy_region_pings\030\006 "
  "\003(\01325.proto.dota.CMsgQuickJoinCustomLobb"
  "y.LegacyRegionPing\0221\n\tping_data\030\007 \001(\0132\036."
  "proto.dota.CMsgClientPingData\032L\n\020LegacyR"
  "egionPing\022\025\n\rserver_region\030\001 \001(\r\022\014\n\004ping"
  "\030\002 \001(\r\022\023\n\013region_code\030\003 \001(\007\"m\n CMsgQuick"
  "JoinCustomLobbyResponse\022I\n\006result\030\001 \001(\0162"
  "\037.proto.dota.DOTAJoinLobbyResult:\030DOTA_J"
  "OIN_RESULT_SUCCESS\"\265\002\n\021CMsgBotGameCreate"
  "\022\022\n\nsearch_key\030\001 \001(\t\022\026\n\016client_version\030\002"
  " \001(\r\022Q\n\022difficulty_radiant\030\003 \001(\0162\035.proto"
  ".dota.DOTABotDifficulty:\026BOT_DIFFICULTY_"
  "PASSIVE\022>\n\004team\030\004 \001(\0162\030.proto.dota.DOTA_"
  "GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\021\n\tgame_"
  "mode\030\005 \001(\r\022N\n\017difficulty_dire\030\006 \001(\0162\035.pr"
  "oto.dota.DOTABotDifficulty:\026BOT_DIFFICUL"
  "TY_PASSIVE\"\216\001\n\024CMsgCustomGameCreate\022\022\n\ns"
  "earch_key\030\001 \001(\t\022\026\n\016client_version\030\002 \001(\r\022"
  "\022\n\ndifficulty\030\003 \001(\r\022\021\n\tgame_mode\030\004 \001(\t\022\013"
  "\n\003map\030\005 \001(\t\022\026\n\016custom_game_id\030\007 \001(\004\"\215\001\n\023"
  "CMsgEventGameCreate\022\022\n\nsearch_key\030\001 \001(\t\022"
  "\026\n\016client_version\030\002 \001(\r\022\022\n\ndifficulty\030\003 "
  "\001(\r\022\021\n\tgame_mode\030\004 \001(\t\022\013\n\003map\030\005 \001(\t\022\026\n\016c"
  "ustom_game_id\030\007 \001(\004\"2\n\033CMsgDOTAPartyMemb"
  "erSetCoach\022\023\n\013wants_coach\030\001 \001(\010\"4\n\026CMsgD"
  "OTASetGroupLeader\022\032\n\022new_leader_steamid\030"
  "\001 \001(\006\"P\n\032CMsgDOTACancelGroupInvites\022\030\n\020i"
  "nvited_steamids\030\001 \003(\006\022\030\n\020invited_groupid"
  "s\030\002 \003(\006\"*\n\032CMsgDOTASetGroupOpenStatus\022\014\n"
  "\004open\030\001 \001(\010\"2\n\030CMsgDOTAGroupMergeInvite\022"
  "\026\n\016other_group_id\030\001 \001(\006\"H\n\032CMsgDOTAGroup"
  "MergeResponse\022\032\n\022initiator_group_id\030\001 \001("
  "\006\022\016\n\006accept\030\002 \001(\010\"h\n\027CMsgDOTAGroupMergeR"
  "eply\022M\n\006result\030\001 \001(\0162!.proto.dota.EDOTAG"
  "roupMergeResult:\032k_EDOTAGroupMergeResult"
  "_OK\"\212\003\n\035CMsgSpectatorLobbyGameDetails\022\020\n"
  "\010language\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\027\n\017ser"
  "ver_steam_id\030\003 \001(\006\022\022\n\nstream_url\030\004 \001(\t\022\023"
  "\n\013stream_name\030\005 \001(\t\022\021\n\tleague_id\030\006 \001(\r\022\023"
  "\n\013series_type\030\007 \001(\r\022\023\n\013series_game\030\010 \001(\r"
  "\022D\n\014radiant_team\030\t \001(\0132..proto.dota.CMsg"
  "SpectatorLobbyGameDetails.Team\022A\n\tdire_t"
  "eam\030\n \001(\0132..proto.dota.CMsgSpectatorLobb"
  "yGameDetails.Team\032=\n\004Team\022\017\n\007team_id\030\001 \001"
  "(\r\022\021\n\tteam_name\030\002 \001(\t\022\021\n\tteam_logo\030\003 \001(\006"
  "\"\227\001\n\034CMsgSetSpectatorLobbyDetails\022\020\n\010lob"
  "by_id\030\001 \001(\004\022\022\n\nlobby_name\030\002 \001(\t\022\020\n\010pass_"
  "key\030\003 \001(\t\022\?\n\014game_details\030\004 \001(\0132).proto."
  "dota.CMsgSpectatorLobbyGameDetails\"m\n\030CM"
  "sgCreateSpectatorLobby\022\026\n\016client_version"
  "\030\001 \001(\r\0229\n\007details\030\002 \001(\0132(.proto.dota.CMs"
  "gSetSpectatorLobbyDetails\"\030\n\026CMsgSpectat"
  "orLobbyList\"\261\002\n\036CMsgSpectatorLobbyListRe"
  "sponse\022J\n\007lobbies\030\001 \003(\01329.proto.dota.CMs"
  "gSpectatorLobbyListResponse.SpectatorLob"
  "by\032\302\001\n\016SpectatorLobby\022\020\n\010lobby_id\030\001 \001(\004\022"
  "\021\n\tgame_name\030\002 \001(\t\022\031\n\021requires_pass_key\030"
  "\003 \001(\010\022\031\n\021leader_account_id\030\004 \001(\r\022\024\n\014memb"
  "er_count\030\005 \001(\r\022\?\n\014game_details\030\007 \001(\0132).p"
  "roto.dota.CMsgSpectatorLobbyGameDetails\""
  "C\n(CMsgClientToGCRequestSteamDatagramTic"
  "ket\022\027\n\017server_steam_id\030\001 \001(\006\"^\n0CMsgClie"
  "ntToGCRequestSteamDatagramTicketResponse"
  "\022\031\n\021serialized_ticket\030\001 \001(\014\022\017\n\007message\030\002"
  " \001(\t\"\267\002\n!CMsgGCToClientSteamDatagramTick"
  "et\022\032\n\022legacy_time_expiry\030\001 \001(\007\022\"\n\032legacy"
  "_authorized_steam_id\030\002 \001(\006\022#\n\033legacy_aut"
  "horized_public_ip\030\003 \001(\007\022\"\n\032legacy_gamese"
  "rver_steam_id\030\004 \001(\006\022 \n\030legacy_gameserver"
  "_net_id\030\005 \001(\006\022\030\n\020legacy_signature\030\006 \001(\014\022"
  "\025\n\rlegacy_app_id\030\007 \001(\r\022\033\n\023legacy_extra_f"
  "ields\030\010 \003(\014\022\031\n\021serialized_ticket\030\020 \001(\014\"$"
  "\n\"CMsgGCToClientRequestLaneSelection\"J\n*"
  "CMsgGCToClientRequestLaneSelectionRespon"
  "se\022\034\n\024lane_selection_flags\030\001 \001(\r*\235\013\n\030ESt"
  "artFindingMatchResult\022&\n\"k_EStartFinding"
  "MatchResult_Invalid\020\000\022!\n\035k_EStartFinding"
  "MatchResult_OK\020\001\022/\n+k_EStartFindingMatch"
  "Result_AlreadySearching\020\002\022*\n&k_EStartFin"
  "dingMatchResult_FailGeneric\020d\022+\n\'k_EStar"
  "tFindingMatchResult_FailedIgnore\020e\0222\n.k_"
  "EStartFindingMatchResult_MatchmakingDisa"
  "bled\020f\022,\n(k_EStartFindingMatchResult_Reg"
  "ionOffline\020g\0222\n.k_EStartFindingMatchResu"
  "lt_MatchmakingCooldown\020h\022.\n*k_EStartFind"
  "ingMatchResult_ClientOutOfDate\020i\0227\n3k_ES"
  "tartFindingMatchResult_CompetitiveNoLowP"
  "riority\020j\0225\n1k_EStartFindingMatchResult_"
  "CompetitiveNotUnlocked\020k\0222\n.k_EStartFind"
  "ingMatchResult_GameModeNotUnlocked\020l\022<\n8"
  "k_EStartFindingMatchResult_CompetitiveNo"
  "tEnoughSkillData\020m\0222\n.k_EStartFindingMat"
  "chResult_MissingInitialSkill\020n\022<\n8k_ESta"
  "rtFindingMatchResult_CompetitiveRankSpre"
  "adTooLarge\020o\0223\n/k_EStartFindingMatchResu"
  "lt_MemberAlreadyInLobby\020p\0223\n/k_EStartFin"
  "dingMatchResult_MemberNotVACVerified\020q\0229"
  "\n5k_EStartFindingMatchResult_WeekendTour"
  "neyBadPartySize\020r\022>\n:k_EStartFindingMatc"
  "hResult_WeekendTourneyTeamBuyInTooSmall\020"
  "s\022D\n@k_EStartFindingMatchResult_WeekendT"
  "ourneyIndividualBuyInTooLarge\020t\022>\n:k_ESt"
  "artFindingMatchResult_WeekendTourneyTeam"
  "BuyInTooLarge\020u\022:\n6k_EStartFindingMatchR"
  "esult_MemberMissingEventOwnership\020v\0228\n4k"
  "_EStartFindingMatchResult_WeekendTourney"
  "NotUnlocked\020w\022@\n<k_EStartFindingMatchRes"
  "ult_WeekendTourneyRecentParticipation\020x\022"
  "\?\n;k_EStartFindingMatchResult_MemberMiss"
  "ingAnchoredPhoneNumber\020y\022.\n*k_EStartFind"
  "ingMatchResult_NotMemberOfClan\020zB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto,
  "dota_gcmessages_client_match_management.proto", &assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, 11199,
};

void AddDescriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_steammessages_2eproto,
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
    ::AddDescriptors_dota_5fclient_5fenums_2eproto,
    ::AddDescriptors_base_5fgcmessages_2eproto,
    ::AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* EStartFindingMatchResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[0];
}
bool EStartFindingMatchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgStartFindingMatch::InitAsDefaultInstance() {
  ::proto::dota::_CMsgStartFindingMatch_default_instance_._instance.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
}
class CMsgStartFindingMatch::HasBitSetters {
 public:
  static void set_has_key(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_matchgroups(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_client_version(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_modes(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_bot_difficulty(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_match_type(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_matchlanguages(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_team_id(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_game_language_enum(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_game_language_name(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgClientPingData& ping_data(const CMsgStartFindingMatch* msg);
  static void set_has_ping_data(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_region_select_flags(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_solo_queue(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_bot_script_index(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_steam_clan_account_id(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_is_challenge_match(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_lane_selection_flags(CMsgStartFindingMatch* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

const ::proto::dota::CMsgClientPingData&
CMsgStartFindingMatch::HasBitSetters::ping_data(const CMsgStartFindingMatch* msg) {
  return *msg->ping_data_;
}
void CMsgStartFindingMatch::clear_ping_data() {
  if (ping_data_ != nullptr) ping_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartFindingMatch::kKeyFieldNumber;
const int CMsgStartFindingMatch::kMatchgroupsFieldNumber;
const int CMsgStartFindingMatch::kClientVersionFieldNumber;
const int CMsgStartFindingMatch::kGameModesFieldNumber;
const int CMsgStartFindingMatch::kBotDifficultyFieldNumber;
const int CMsgStartFindingMatch::kMatchTypeFieldNumber;
const int CMsgStartFindingMatch::kMatchlanguagesFieldNumber;
const int CMsgStartFindingMatch::kTeamIdFieldNumber;
const int CMsgStartFindingMatch::kGameLanguageEnumFieldNumber;
const int CMsgStartFindingMatch::kGameLanguageNameFieldNumber;
const int CMsgStartFindingMatch::kPingDataFieldNumber;
const int CMsgStartFindingMatch::kRegionSelectFlagsFieldNumber;
const int CMsgStartFindingMatch::kSoloQueueFieldNumber;
const int CMsgStartFindingMatch::kBotScriptIndexFieldNumber;
const int CMsgStartFindingMatch::kSteamClanAccountIdFieldNumber;
const int CMsgStartFindingMatch::kIsChallengeMatchFieldNumber;
const int CMsgStartFindingMatch::kLaneSelectionFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartFindingMatch::CMsgStartFindingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStartFindingMatch)
}
CMsgStartFindingMatch::CMsgStartFindingMatch(const CMsgStartFindingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  game_language_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_language_name()) {
    game_language_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_language_name_);
  }
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchlanguages_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(matchlanguages_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStartFindingMatch)
}

void CMsgStartFindingMatch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgStartFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_language_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ping_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_selection_flags_) -
      reinterpret_cast<char*>(&ping_data_)) + sizeof(lane_selection_flags_));
  matchgroups_ = 4294967295u;
  game_modes_ = 4294967295u;
  bot_difficulty_ = 3;
  matchlanguages_ = 4294967295u;
}

CMsgStartFindingMatch::~CMsgStartFindingMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStartFindingMatch)
  SharedDtor();
}

void CMsgStartFindingMatch::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_language_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgStartFindingMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStartFindingMatch& CMsgStartFindingMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStartFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgStartFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStartFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_language_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ping_data_ != nullptr);
      ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_select_flags_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(region_select_flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bot_script_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_selection_flags_) -
        reinterpret_cast<char*>(&bot_script_index_)) + sizeof(lane_selection_flags_));
    matchgroups_ = 4294967295u;
    game_modes_ = 4294967295u;
    bot_difficulty_ = 3;
  }
  matchlanguages_ = 4294967295u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStartFindingMatch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStartFindingMatch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgStartFindingMatch.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 matchgroups = 2 [default = 4294967295];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_matchgroups(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_modes = 4 [default = 4294967295];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_modes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::MatchType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_type(static_cast<::proto::dota::MatchType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matchlanguages = 7 [default = 4294967295];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_matchlanguages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::MatchLanguages_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(10, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_language_enum(static_cast<::proto::dota::MatchLanguages>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_language_name = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgStartFindingMatch.game_language_name");
        object = msg->mutable_game_language_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgClientPingData ping_data = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgClientPingData::_InternalParse;
        object = msg->mutable_ping_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 region_select_flags = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_region_select_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solo_queue = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_solo_queue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bot_script_index = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_bot_script_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steam_clan_account_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_steam_clan_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_challenge_match = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_is_challenge_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lane_selection_flags = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_lane_selection_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStartFindingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStartFindingMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatch.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroups = 2 [default = 4294967295];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_matchgroups(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_modes = 4 [default = 4294967295];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_modes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchlanguages = 7 [default = 4294967295];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_matchlanguages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchLanguages_IsValid(value)) {
            set_game_language_enum(static_cast< ::proto::dota::MatchLanguages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_language_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_language_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_language_name().data(), static_cast<int>(this->game_language_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatch.game_language_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_select_flags = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_region_select_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_select_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_queue = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_solo_queue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_script_index = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_bot_script_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_script_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_clan_account_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_steam_clan_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_clan_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_challenge_match = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_is_challenge_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_challenge_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_selection_flags = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_lane_selection_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_selection_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStartFindingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStartFindingMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStartFindingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStartFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchgroups(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bot_difficulty(), output);
  }

  // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->match_type(), output);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->matchlanguages(), output);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team_id(), output);
  }

  // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->game_language_enum(), output);
  }

  // optional string game_language_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_language_name().data(), static_cast<int>(this->game_language_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.game_language_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->game_language_name(), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::ping_data(this), output);
  }

  // optional uint32 region_select_flags = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->region_select_flags(), output);
  }

  // optional bool solo_queue = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->solo_queue(), output);
  }

  // optional uint32 bot_script_index = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bot_script_index(), output);
  }

  // optional uint32 steam_clan_account_id = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->steam_clan_account_id(), output);
  }

  // optional bool is_challenge_match = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_challenge_match(), output);
  }

  // optional uint32 lane_selection_flags = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->lane_selection_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStartFindingMatch)
}

::google::protobuf::uint8* CMsgStartFindingMatch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStartFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchgroups(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bot_difficulty(), target);
  }

  // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->match_type(), target);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->matchlanguages(), target);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team_id(), target);
  }

  // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->game_language_enum(), target);
  }

  // optional string game_language_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_language_name().data(), static_cast<int>(this->game_language_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.game_language_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->game_language_name(), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::ping_data(this), target);
  }

  // optional uint32 region_select_flags = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->region_select_flags(), target);
  }

  // optional bool solo_queue = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->solo_queue(), target);
  }

  // optional uint32 bot_script_index = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bot_script_index(), target);
  }

  // optional uint32 steam_clan_account_id = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->steam_clan_account_id(), target);
  }

  // optional bool is_challenge_match = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_challenge_match(), target);
  }

  // optional uint32 lane_selection_flags = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->lane_selection_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStartFindingMatch)
  return target;
}

size_t CMsgStartFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStartFindingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string game_language_name = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_language_name());
    }

    // optional .proto.dota.CMsgClientPingData ping_data = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional uint32 team_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_language_enum());
    }

    // optional uint32 region_select_flags = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_select_flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 bot_script_index = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_script_index());
    }

    // optional bool solo_queue = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_challenge_match = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 steam_clan_account_id = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_clan_account_id());
    }

    // optional uint32 lane_selection_flags = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_selection_flags());
    }

    // optional uint32 matchgroups = 2 [default = 4294967295];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 game_modes = 4 [default = 4294967295];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

  }
  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchlanguages());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartFindingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartFindingMatch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStartFindingMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStartFindingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStartFindingMatch)
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatch::MergeFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_language_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_language_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_language_enum_ = from.game_language_enum_;
    }
    if (cached_has_bits & 0x00000080u) {
      region_select_flags_ = from.region_select_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bot_script_index_ = from.bot_script_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      solo_queue_ = from.solo_queue_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_challenge_match_ = from.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      steam_clan_account_id_ = from.steam_clan_account_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00004000u) {
      game_modes_ = from.game_modes_;
    }
    if (cached_has_bits & 0x00008000u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_matchlanguages(from.matchlanguages());
  }
}

void CMsgStartFindingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatch::CopyFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatch::Swap(CMsgStartFindingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartFindingMatch::InternalSwap(CMsgStartFindingMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_language_name_.Swap(&other->game_language_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ping_data_, other->ping_data_);
  swap(client_version_, other->client_version_);
  swap(match_type_, other->match_type_);
  swap(team_id_, other->team_id_);
  swap(game_language_enum_, other->game_language_enum_);
  swap(region_select_flags_, other->region_select_flags_);
  swap(bot_script_index_, other->bot_script_index_);
  swap(solo_queue_, other->solo_queue_);
  swap(is_challenge_match_, other->is_challenge_match_);
  swap(steam_clan_account_id_, other->steam_clan_account_id_);
  swap(lane_selection_flags_, other->lane_selection_flags_);
  swap(matchgroups_, other->matchgroups_);
  swap(game_modes_, other->game_modes_);
  swap(bot_difficulty_, other->bot_difficulty_);
  swap(matchlanguages_, other->matchlanguages_);
}

::google::protobuf::Metadata CMsgStartFindingMatch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStartFindingMatchResult::InitAsDefaultInstance() {
}
class CMsgStartFindingMatchResult::HasBitSetters {
 public:
  static void set_has_legacy_generic_eresult(CMsgStartFindingMatchResult* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_result(CMsgStartFindingMatchResult* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_error_token(CMsgStartFindingMatchResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_debug_message(CMsgStartFindingMatchResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartFindingMatchResult::kLegacyGenericEresultFieldNumber;
const int CMsgStartFindingMatchResult::kResultFieldNumber;
const int CMsgStartFindingMatchResult::kErrorTokenFieldNumber;
const int CMsgStartFindingMatchResult::kDebugMessageFieldNumber;
const int CMsgStartFindingMatchResult::kResponsiblePartyMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartFindingMatchResult::CMsgStartFindingMatchResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStartFindingMatchResult)
}
CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      responsible_party_members_(from.responsible_party_members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_token()) {
    error_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_token_);
  }
  debug_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug_message()) {
    debug_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_message_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_generic_eresult_) -
    reinterpret_cast<char*>(&result_)) + sizeof(legacy_generic_eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStartFindingMatchResult)
}

void CMsgStartFindingMatchResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgStartFindingMatchResult_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  error_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  legacy_generic_eresult_ = 2u;
}

CMsgStartFindingMatchResult::~CMsgStartFindingMatchResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStartFindingMatchResult)
  SharedDtor();
}

void CMsgStartFindingMatchResult::SharedDtor() {
  error_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartFindingMatchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStartFindingMatchResult& CMsgStartFindingMatchResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStartFindingMatchResult_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgStartFindingMatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStartFindingMatchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsible_party_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      debug_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    result_ = 0;
    legacy_generic_eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStartFindingMatchResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStartFindingMatchResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_generic_eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_legacy_generic_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EStartFindingMatchResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::EStartFindingMatchResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string error_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgStartFindingMatchResult.error_token");
        object = msg->mutable_error_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string debug_message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgStartFindingMatchResult.debug_message");
        object = msg->mutable_debug_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated fixed64 responsible_party_members = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 41) {
          do {
            msg->add_responsible_party_members(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 41 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_responsible_party_members();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStartFindingMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStartFindingMatchResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_generic_eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_legacy_generic_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_generic_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EStartFindingMatchResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::EStartFindingMatchResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_token().data(), static_cast<int>(this->error_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatchResult.error_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_message().data(), static_cast<int>(this->debug_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatchResult.debug_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 responsible_party_members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41u, input, this->mutable_responsible_party_members())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_responsible_party_members())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStartFindingMatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStartFindingMatchResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStartFindingMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStartFindingMatchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_generic_eresult(), output);
  }

  // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string error_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_token().data(), static_cast<int>(this->error_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.error_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_token(), output);
  }

  // optional string debug_message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message().data(), static_cast<int>(this->debug_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.debug_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->debug_message(), output);
  }

  // repeated fixed64 responsible_party_members = 5;
  for (int i = 0, n = this->responsible_party_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->responsible_party_members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStartFindingMatchResult)
}

::google::protobuf::uint8* CMsgStartFindingMatchResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStartFindingMatchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_generic_eresult(), target);
  }

  // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string error_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_token().data(), static_cast<int>(this->error_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.error_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_token(), target);
  }

  // optional string debug_message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message().data(), static_cast<int>(this->debug_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.debug_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debug_message(), target);
  }

  // repeated fixed64 responsible_party_members = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(5, this->responsible_party_members_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStartFindingMatchResult)
  return target;
}

size_t CMsgStartFindingMatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStartFindingMatchResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 responsible_party_members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->responsible_party_members_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->responsible_party_members_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string error_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_token());
    }

    // optional string debug_message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_message());
    }

    // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 legacy_generic_eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_generic_eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartFindingMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartFindingMatchResult* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStartFindingMatchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStartFindingMatchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStartFindingMatchResult)
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatchResult::MergeFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responsible_party_members_.MergeFrom(from.responsible_party_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      debug_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_generic_eresult_ = from.legacy_generic_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartFindingMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatchResult::CopyFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatchResult::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatchResult::Swap(CMsgStartFindingMatchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartFindingMatchResult::InternalSwap(CMsgStartFindingMatchResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  responsible_party_members_.InternalSwap(&other->responsible_party_members_);
  error_token_.Swap(&other->error_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  debug_message_.Swap(&other->debug_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(legacy_generic_eresult_, other->legacy_generic_eresult_);
}

::google::protobuf::Metadata CMsgStartFindingMatchResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStopFindingMatch::InitAsDefaultInstance() {
}
class CMsgStopFindingMatch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStopFindingMatch::CMsgStopFindingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStopFindingMatch)
}
CMsgStopFindingMatch::CMsgStopFindingMatch(const CMsgStopFindingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStopFindingMatch)
}

void CMsgStopFindingMatch::SharedCtor() {
}

CMsgStopFindingMatch::~CMsgStopFindingMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStopFindingMatch)
  SharedDtor();
}

void CMsgStopFindingMatch::SharedDtor() {
}

void CMsgStopFindingMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStopFindingMatch& CMsgStopFindingMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStopFindingMatch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgStopFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStopFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStopFindingMatch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStopFindingMatch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStopFindingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStopFindingMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStopFindingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStopFindingMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStopFindingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStopFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStopFindingMatch)
}

::google::protobuf::uint8* CMsgStopFindingMatch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStopFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStopFindingMatch)
  return target;
}

size_t CMsgStopFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStopFindingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStopFindingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopFindingMatch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStopFindingMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStopFindingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStopFindingMatch)
    MergeFrom(*source);
  }
}

void CMsgStopFindingMatch::MergeFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgStopFindingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFindingMatch::CopyFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStopFindingMatch::Swap(CMsgStopFindingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStopFindingMatch::InternalSwap(CMsgStopFindingMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgStopFindingMatch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPartyBuilderOptions::InitAsDefaultInstance() {
}
class CMsgPartyBuilderOptions::HasBitSetters {
 public:
  static void set_has_additional_slots(CMsgPartyBuilderOptions* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_match_type(CMsgPartyBuilderOptions* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_matchgroups(CMsgPartyBuilderOptions* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_version(CMsgPartyBuilderOptions* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_language(CMsgPartyBuilderOptions* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyBuilderOptions::kAdditionalSlotsFieldNumber;
const int CMsgPartyBuilderOptions::kMatchTypeFieldNumber;
const int CMsgPartyBuilderOptions::kMatchgroupsFieldNumber;
const int CMsgPartyBuilderOptions::kClientVersionFieldNumber;
const int CMsgPartyBuilderOptions::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyBuilderOptions::CMsgPartyBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyBuilderOptions)
}
CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&additional_slots_, &from.additional_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&additional_slots_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyBuilderOptions)
}

void CMsgPartyBuilderOptions::SharedCtor() {
  ::memset(&additional_slots_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&additional_slots_)) + sizeof(language_));
}

CMsgPartyBuilderOptions::~CMsgPartyBuilderOptions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyBuilderOptions)
  SharedDtor();
}

void CMsgPartyBuilderOptions::SharedDtor() {
}

void CMsgPartyBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPartyBuilderOptions& CMsgPartyBuilderOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPartyBuilderOptions_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPartyBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&additional_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&additional_slots_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPartyBuilderOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPartyBuilderOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 additional_slots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_additional_slots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::MatchType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_match_type(static_cast<::proto::dota::MatchType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matchgroups = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_matchgroups(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::MatchLanguages_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_language(static_cast<::proto::dota::MatchLanguages>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPartyBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyBuilderOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_additional_slots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_matchgroups(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchLanguages_IsValid(value)) {
            set_language(static_cast< ::proto::dota::MatchLanguages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyBuilderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPartyBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_slots(), output);
  }

  // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_type(), output);
  }

  // optional uint32 matchgroups = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchgroups(), output);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_version(), output);
  }

  // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyBuilderOptions)
}

::google::protobuf::uint8* CMsgPartyBuilderOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_slots(), target);
  }

  // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_type(), target);
  }

  // optional uint32 matchgroups = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchgroups(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_version(), target);
  }

  // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyBuilderOptions)
  return target;
}

size_t CMsgPartyBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 additional_slots = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_slots());
    }

    // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional uint32 matchgroups = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyBuilderOptions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPartyBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyBuilderOptions)
    MergeFrom(*source);
  }
}

void CMsgPartyBuilderOptions::MergeFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      additional_slots_ = from.additional_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyBuilderOptions::CopyFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyBuilderOptions::IsInitialized() const {
  return true;
}

void CMsgPartyBuilderOptions::Swap(CMsgPartyBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyBuilderOptions::InternalSwap(CMsgPartyBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(additional_slots_, other->additional_slots_);
  swap(match_type_, other->match_type_);
  swap(matchgroups_, other->matchgroups_);
  swap(client_version_, other->client_version_);
  swap(language_, other->language_);
}

::google::protobuf::Metadata CMsgPartyBuilderOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgReadyUp::InitAsDefaultInstance() {
  ::proto::dota::_CMsgReadyUp_default_instance_._instance.get_mutable()->hardware_specs_ = const_cast< ::proto::dota::CDOTAClientHardwareSpecs*>(
      ::proto::dota::CDOTAClientHardwareSpecs::internal_default_instance());
}
class CMsgReadyUp::HasBitSetters {
 public:
  static void set_has_state(CMsgReadyUp* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ready_up_key(CMsgReadyUp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CDOTAClientHardwareSpecs& hardware_specs(const CMsgReadyUp* msg);
  static void set_has_hardware_specs(CMsgReadyUp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CDOTAClientHardwareSpecs&
CMsgReadyUp::HasBitSetters::hardware_specs(const CMsgReadyUp* msg) {
  return *msg->hardware_specs_;
}
void CMsgReadyUp::clear_hardware_specs() {
  if (hardware_specs_ != nullptr) hardware_specs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyUp::kStateFieldNumber;
const int CMsgReadyUp::kReadyUpKeyFieldNumber;
const int CMsgReadyUp::kHardwareSpecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyUp::CMsgReadyUp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReadyUp)
}
CMsgReadyUp::CMsgReadyUp(const CMsgReadyUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hardware_specs()) {
    hardware_specs_ = new ::proto::dota::CDOTAClientHardwareSpecs(*from.hardware_specs_);
  } else {
    hardware_specs_ = nullptr;
  }
  ::memcpy(&ready_up_key_, &from.ready_up_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&ready_up_key_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReadyUp)
}

void CMsgReadyUp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgReadyUp_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::memset(&hardware_specs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&hardware_specs_)) + sizeof(state_));
}

CMsgReadyUp::~CMsgReadyUp() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReadyUp)
  SharedDtor();
}

void CMsgReadyUp::SharedDtor() {
  if (this != internal_default_instance()) delete hardware_specs_;
}

void CMsgReadyUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgReadyUp& CMsgReadyUp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgReadyUp_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgReadyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hardware_specs_ != nullptr);
    hardware_specs_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ready_up_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&ready_up_key_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgReadyUp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgReadyUp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTALobbyReadyState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::proto::dota::DOTALobbyReadyState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 ready_up_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_ready_up_key(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDOTAClientHardwareSpecs::_InternalParse;
        object = msg->mutable_hardware_specs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgReadyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReadyUp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALobbyReadyState_IsValid(value)) {
            set_state(static_cast< ::proto::dota::DOTALobbyReadyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ready_up_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_ready_up_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ready_up_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hardware_specs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReadyUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReadyUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgReadyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional fixed64 ready_up_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->ready_up_key(), output);
  }

  // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::hardware_specs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReadyUp)
}

::google::protobuf::uint8* CMsgReadyUp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional fixed64 ready_up_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->ready_up_key(), target);
  }

  // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::hardware_specs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReadyUp)
  return target;
}

size_t CMsgReadyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReadyUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hardware_specs_);
    }

    // optional fixed64 ready_up_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgReadyUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReadyUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReadyUp)
    MergeFrom(*source);
  }
}

void CMsgReadyUp::MergeFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hardware_specs()->::proto::dota::CDOTAClientHardwareSpecs::MergeFrom(from.hardware_specs());
    }
    if (cached_has_bits & 0x00000002u) {
      ready_up_key_ = from.ready_up_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUp::CopyFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUp::IsInitialized() const {
  return true;
}

void CMsgReadyUp::Swap(CMsgReadyUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyUp::InternalSwap(CMsgReadyUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hardware_specs_, other->hardware_specs_);
  swap(ready_up_key_, other->ready_up_key_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata CMsgReadyUp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgReadyUpStatus::InitAsDefaultInstance() {
}
class CMsgReadyUpStatus::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgReadyUpStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyUpStatus::kLobbyIdFieldNumber;
const int CMsgReadyUpStatus::kAcceptedIdsFieldNumber;
const int CMsgReadyUpStatus::kDeclinedIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyUpStatus::CMsgReadyUpStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReadyUpStatus)
}
CMsgReadyUpStatus::CMsgReadyUpStatus(const CMsgReadyUpStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      accepted_ids_(from.accepted_ids_),
      declined_ids_(from.declined_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReadyUpStatus)
}

void CMsgReadyUpStatus::SharedCtor() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgReadyUpStatus::~CMsgReadyUpStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReadyUpStatus)
  SharedDtor();
}

void CMsgReadyUpStatus::SharedDtor() {
}

void CMsgReadyUpStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgReadyUpStatus& CMsgReadyUpStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgReadyUpStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgReadyUpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReadyUpStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accepted_ids_.Clear();
  declined_ids_.Clear();
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgReadyUpStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgReadyUpStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated uint32 accepted_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_accepted_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_accepted_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 declined_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_declined_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_declined_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgReadyUpStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReadyUpStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 accepted_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_accepted_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accepted_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 declined_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_declined_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_declined_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReadyUpStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReadyUpStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgReadyUpStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReadyUpStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // repeated uint32 accepted_ids = 2;
  for (int i = 0, n = this->accepted_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->accepted_ids(i), output);
  }

  // repeated uint32 declined_ids = 3;
  for (int i = 0, n = this->declined_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->declined_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReadyUpStatus)
}

::google::protobuf::uint8* CMsgReadyUpStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReadyUpStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // repeated uint32 accepted_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->accepted_ids_, target);

  // repeated uint32 declined_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->declined_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReadyUpStatus)
  return target;
}

size_t CMsgReadyUpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReadyUpStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accepted_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->accepted_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->accepted_ids_size());
    total_size += data_size;
  }

  // repeated uint32 declined_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->declined_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->declined_ids_size());
    total_size += data_size;
  }

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyUpStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUpStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgReadyUpStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReadyUpStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReadyUpStatus)
    MergeFrom(*source);
  }
}

void CMsgReadyUpStatus::MergeFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accepted_ids_.MergeFrom(from.accepted_ids_);
  declined_ids_.MergeFrom(from.declined_ids_);
  if (from.has_lobby_id()) {
    set_lobby_id(from.lobby_id());
  }
}

void CMsgReadyUpStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUpStatus::CopyFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUpStatus::IsInitialized() const {
  return true;
}

void CMsgReadyUpStatus::Swap(CMsgReadyUpStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyUpStatus::InternalSwap(CMsgReadyUpStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accepted_ids_.InternalSwap(&other->accepted_ids_);
  declined_ids_.InternalSwap(&other->declined_ids_);
  swap(lobby_id_, other->lobby_id_);
}

::google::protobuf::Metadata CMsgReadyUpStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAbandonCurrentGame::InitAsDefaultInstance() {
}
class CMsgAbandonCurrentGame::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAbandonCurrentGame::CMsgAbandonCurrentGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAbandonCurrentGame)
}
CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAbandonCurrentGame)
}

void CMsgAbandonCurrentGame::SharedCtor() {
}

CMsgAbandonCurrentGame::~CMsgAbandonCurrentGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAbandonCurrentGame)
  SharedDtor();
}

void CMsgAbandonCurrentGame::SharedDtor() {
}

void CMsgAbandonCurrentGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAbandonCurrentGame& CMsgAbandonCurrentGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAbandonCurrentGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgAbandonCurrentGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAbandonCurrentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAbandonCurrentGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAbandonCurrentGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAbandonCurrentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAbandonCurrentGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAbandonCurrentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAbandonCurrentGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAbandonCurrentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAbandonCurrentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAbandonCurrentGame)
}

::google::protobuf::uint8* CMsgAbandonCurrentGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAbandonCurrentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAbandonCurrentGame)
  return target;
}

size_t CMsgAbandonCurrentGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAbandonCurrentGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAbandonCurrentGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAbandonCurrentGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAbandonCurrentGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAbandonCurrentGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAbandonCurrentGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAbandonCurrentGame)
    MergeFrom(*source);
  }
}

void CMsgAbandonCurrentGame::MergeFrom(const CMsgAbandonCurrentGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAbandonCurrentGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgAbandonCurrentGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAbandonCurrentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAbandonCurrentGame::CopyFrom(const CMsgAbandonCurrentGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAbandonCurrentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAbandonCurrentGame::IsInitialized() const {
  return true;
}

void CMsgAbandonCurrentGame::Swap(CMsgAbandonCurrentGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAbandonCurrentGame::InternalSwap(CMsgAbandonCurrentGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgAbandonCurrentGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbySetDetails::InitAsDefaultInstance() {
}
class CMsgPracticeLobbySetDetails::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_game_name(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_region(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_game_mode(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_cm_pick(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_bot_difficulty_radiant(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_allow_cheats(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_fill_with_bots(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_intro_mode(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_allow_spectating(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_game_version(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_pass_key(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_leagueid(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_penalty_level_radiant(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_penalty_level_dire(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_load_game_id(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_series_type(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_radiant_series_wins(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_dire_series_wins(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_allchat(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_dota_tv_delay(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_lan(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_custom_game_mode(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_custom_map_name(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_custom_difficulty(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_custom_game_id(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_custom_min_players(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_custom_max_players(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_visibility(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_custom_game_crc(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_custom_game_timestamp(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_previous_match_override(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_pause_setting(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_bot_difficulty_dire(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_bot_radiant(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_bot_dire(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_selection_priority_rules(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_custom_game_penalties(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_lan_host_ping_location(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_league_node_id(CMsgPracticeLobbySetDetails* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
};

void CMsgPracticeLobbySetDetails::clear_team_details() {
  team_details_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbySetDetails::kLobbyIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameNameFieldNumber;
const int CMsgPracticeLobbySetDetails::kTeamDetailsFieldNumber;
const int CMsgPracticeLobbySetDetails::kServerRegionFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kCmPickFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDifficultyRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllowCheatsFieldNumber;
const int CMsgPracticeLobbySetDetails::kFillWithBotsFieldNumber;
const int CMsgPracticeLobbySetDetails::kIntroModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllowSpectatingFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameVersionFieldNumber;
const int CMsgPracticeLobbySetDetails::kPassKeyFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueidFieldNumber;
const int CMsgPracticeLobbySetDetails::kPenaltyLevelRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kPenaltyLevelDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kLoadGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kSeriesTypeFieldNumber;
const int CMsgPracticeLobbySetDetails::kRadiantSeriesWinsFieldNumber;
const int CMsgPracticeLobbySetDetails::kDireSeriesWinsFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllchatFieldNumber;
const int CMsgPracticeLobbySetDetails::kDotaTvDelayFieldNumber;
const int CMsgPracticeLobbySetDetails::kLanFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMapNameFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomDifficultyFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMinPlayersFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMaxPlayersFieldNumber;
const int CMsgPracticeLobbySetDetails::kVisibilityFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameCrcFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameTimestampFieldNumber;
const int CMsgPracticeLobbySetDetails::kPreviousMatchOverrideFieldNumber;
const int CMsgPracticeLobbySetDetails::kPauseSettingFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDifficultyDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kSelectionPriorityRulesFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGamePenaltiesFieldNumber;
const int CMsgPracticeLobbySetDetails::kLanHostPingLocationFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbySetDetails)
}
CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      team_details_(from.team_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_game_mode()) {
    custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lan_host_ping_location()) {
    lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dota_tv_delay_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(dota_tv_delay_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbySetDetails)
}

void CMsgPracticeLobbySetDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_dire_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(bot_dire_));
  dota_tv_delay_ = 1;
}

CMsgPracticeLobbySetDetails::~CMsgPracticeLobbySetDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbySetDetails)
  SharedDtor();
}

void CMsgPracticeLobbySetDetails::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbySetDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbySetDetails& CMsgPracticeLobbySetDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbySetDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbySetDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbySetDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_details_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pass_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_game_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      custom_map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      lan_host_ping_location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_mode_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cm_pick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leagueid_) -
        reinterpret_cast<char*>(&cm_pick_)) + sizeof(leagueid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&penalty_level_radiant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_id_) -
        reinterpret_cast<char*>(&penalty_level_radiant_)) + sizeof(custom_game_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&custom_min_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_match_override_) -
        reinterpret_cast<char*>(&custom_min_players_)) + sizeof(previous_match_override_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&custom_game_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_dire_) -
        reinterpret_cast<char*>(&custom_game_timestamp_)) + sizeof(bot_dire_));
    dota_tv_delay_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbySetDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbySetDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbySetDetails.game_name");
        object = msg->mutable_game_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CLobbyTeamDetails::_InternalParse;
          object = msg->add_team_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 server_region = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_mode = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_CM_PICK_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_cm_pick(static_cast<::proto::dota::DOTA_CM_PICK>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(9, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty_radiant(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_cheats = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_allow_cheats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool fill_with_bots = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_fill_with_bots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool intro_mode = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_intro_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_spectating = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_allow_spectating(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAGameVersion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_version(static_cast<::proto::dota::DOTAGameVersion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pass_key = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbySetDetails.pass_key");
        object = msg->mutable_pass_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 leagueid = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_leagueid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 penalty_level_radiant = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_penalty_level_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 penalty_level_dire = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_penalty_level_dire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 load_game_id = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_load_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_series_wins = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_radiant_series_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_series_wins = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_dire_series_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allchat = 23 [default = false];
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_allchat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::LobbyDotaTVDelay_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(24, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_dota_tv_delay(static_cast<::proto::dota::LobbyDotaTVDelay>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool lan = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_lan(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string custom_game_mode = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
        object = msg->mutable_custom_game_mode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string custom_map_name = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
        object = msg->mutable_custom_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 custom_difficulty = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_custom_difficulty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 custom_game_id = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 custom_min_players = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_custom_min_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 custom_max_players = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_custom_max_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTALobbyVisibility_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(33, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_visibility(static_cast<::proto::dota::DOTALobbyVisibility>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 custom_game_crc = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_custom_game_crc(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 custom_game_timestamp = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_custom_game_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint64 previous_match_override = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_previous_match_override(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::LobbyDotaPauseSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(42, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_pause_setting(static_cast<::proto::dota::LobbyDotaPauseSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(43, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty_dire(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bot_radiant = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_bot_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bot_dire = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_bot_dire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTASelectionPriorityRules_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(46, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_selection_priority_rules(static_cast<::proto::dota::DOTASelectionPriorityRules>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool custom_game_penalties = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_custom_game_penalties(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string lan_host_ping_location = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbySetDetails.lan_host_ping_location");
        object = msg->mutable_lan_host_ping_location();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 league_node_id = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_league_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbySetDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbySetDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::proto::dota::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_cheats = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_allow_cheats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fill_with_bots = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_fill_with_bots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool intro_mode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_intro_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_spectating = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_allow_spectating(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::proto::dota::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), static_cast<int>(this->pass_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_leagueid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_radiant = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_penalty_level_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_dire = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_penalty_level_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 load_game_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_load_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_series_wins = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_radiant_series_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_series_wins = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_dire_series_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allchat = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_allchat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::proto::dota::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lan = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_lan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_game_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_difficulty = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_custom_difficulty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_min_players = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_custom_min_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_max_players = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_custom_max_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::proto::dota::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                33, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (273 & 0xFF)) {
          HasBitSetters::set_has_custom_game_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (301 & 0xFF)) {
          HasBitSetters::set_has_custom_game_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 previous_match_override = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_previous_match_override(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previous_match_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaPauseSetting_IsValid(value)) {
            set_pause_setting(static_cast< ::proto::dota::LobbyDotaPauseSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                42, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                43, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_radiant = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_bot_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_dire = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_bot_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityRules_IsValid(value)) {
            set_selection_priority_rules(static_cast< ::proto::dota::DOTASelectionPriorityRules >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                46, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool custom_game_penalties = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_custom_game_penalties(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_penalties_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lan_host_ping_location = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lan_host_ping_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.lan_host_ping_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_node_id = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_league_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbySetDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbySetDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbySetDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbySetDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->team_details(static_cast<int>(i)),
      output);
  }

  // optional uint32 server_region = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_region(), output);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_mode(), output);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cm_pick(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bot_difficulty_radiant(), output);
  }

  // optional bool allow_cheats = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->intro_mode(), output);
  }

  // optional bool allow_spectating = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_spectating(), output);
  }

  // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->game_version(), output);
  }

  // optional string pass_key = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pass_key(), output);
  }

  // optional uint32 leagueid = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->load_game_id(), output);
  }

  // optional uint32 series_type = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->radiant_series_wins(), output);
  }

  // optional uint32 dire_series_wins = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->dire_series_wins(), output);
  }

  // optional bool allchat = 23 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->allchat(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->dota_tv_delay(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lan = 25;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->lan(), output);
  }

  // optional string custom_game_mode = 26;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 27;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->custom_map_name(), output);
  }

  // optional uint32 custom_difficulty = 28;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->custom_difficulty(), output);
  }

  // optional uint64 custom_game_id = 29;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->custom_game_id(), output);
  }

  // optional uint32 custom_min_players = 30;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 31;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->custom_max_players(), output);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(34, this->custom_game_crc(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 custom_game_timestamp = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(37, this->custom_game_timestamp(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 previous_match_override = 38;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->previous_match_override(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->pause_setting(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      43, this->bot_difficulty_dire(), output);
  }

  // optional uint64 bot_radiant = 44;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->bot_radiant(), output);
  }

  // optional uint64 bot_dire = 45;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->bot_dire(), output);
  }

  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->selection_priority_rules(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool custom_game_penalties = 47;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->custom_game_penalties(), output);
  }

  // optional string lan_host_ping_location = 48;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.lan_host_ping_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->lan_host_ping_location(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 league_node_id = 49;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->league_node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbySetDetails)
}

::google::protobuf::uint8* CMsgPracticeLobbySetDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbySetDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->team_details(static_cast<int>(i)), target);
  }

  // optional uint32 server_region = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_region(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_mode(), target);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cm_pick(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bot_difficulty_radiant(), target);
  }

  // optional bool allow_cheats = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->intro_mode(), target);
  }

  // optional bool allow_spectating = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_spectating(), target);
  }

  // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->game_version(), target);
  }

  // optional string pass_key = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pass_key(), target);
  }

  // optional uint32 leagueid = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->load_game_id(), target);
  }

  // optional uint32 series_type = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->dire_series_wins(), target);
  }

  // optional bool allchat = 23 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->allchat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->dota_tv_delay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lan = 25;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->lan(), target);
  }

  // optional string custom_game_mode = 26;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 27;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->custom_difficulty(), target);
  }

  // optional uint64 custom_game_id = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->custom_game_id(), target);
  }

  // optional uint32 custom_min_players = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->custom_max_players(), target);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 34;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(34, this->custom_game_crc(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 custom_game_timestamp = 37;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(37, this->custom_game_timestamp(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 previous_match_override = 38;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->previous_match_override(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->pause_setting(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      43, this->bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 44;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->bot_radiant(), target);
  }

  // optional uint64 bot_dire = 45;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->bot_dire(), target);
  }

  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->selection_priority_rules(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool custom_game_penalties = 47;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->custom_game_penalties(), target);
  }

  // optional string lan_host_ping_location = 48;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.lan_host_ping_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->lan_host_ping_location(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 league_node_id = 49;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->league_node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbySetDetails)
  return target;
}

size_t CMsgPracticeLobbySetDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbySetDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->team_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_details(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string pass_key = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional string custom_game_mode = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 27;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional string lan_host_ping_location = 48;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lan_host_ping_location());
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 server_region = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 game_mode = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool allow_spectating = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional uint32 leagueid = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 penalty_level_radiant = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

    // optional uint32 load_game_id = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

    // optional uint32 custom_difficulty = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional uint64 custom_game_id = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 custom_min_players = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

    // optional uint32 custom_max_players = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional bool allchat = 23 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool lan = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_game_penalties = 47;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional fixed64 custom_game_crc = 34;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional uint64 previous_match_override = 38;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previous_match_override());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed32 custom_game_timestamp = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_setting());
    }

    // optional uint32 league_node_id = 49;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_node_id());
    }

    // optional uint64 bot_radiant = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_radiant());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

    // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_priority_rules());
    }

    // optional uint64 bot_dire = 45;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_dire());
    }

    // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbySetDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbySetDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbySetDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbySetDetails)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetDetails::MergeFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_details_.MergeFrom(from.team_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cm_pick_ = from.cm_pick_;
    }
    if (cached_has_bits & 0x00000200u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000400u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00000800u) {
      fill_with_bots_ = from.fill_with_bots_;
    }
    if (cached_has_bits & 0x00001000u) {
      intro_mode_ = from.intro_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      allow_spectating_ = from.allow_spectating_;
    }
    if (cached_has_bits & 0x00004000u) {
      game_version_ = from.game_version_;
    }
    if (cached_has_bits & 0x00008000u) {
      leagueid_ = from.leagueid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      penalty_level_radiant_ = from.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x00020000u) {
      penalty_level_dire_ = from.penalty_level_dire_;
    }
    if (cached_has_bits & 0x00040000u) {
      load_game_id_ = from.load_game_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      radiant_series_wins_ = from.radiant_series_wins_;
    }
    if (cached_has_bits & 0x00200000u) {
      dire_series_wins_ = from.dire_series_wins_;
    }
    if (cached_has_bits & 0x00400000u) {
      custom_difficulty_ = from.custom_difficulty_;
    }
    if (cached_has_bits & 0x00800000u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      custom_min_players_ = from.custom_min_players_;
    }
    if (cached_has_bits & 0x02000000u) {
      custom_max_players_ = from.custom_max_players_;
    }
    if (cached_has_bits & 0x04000000u) {
      allchat_ = from.allchat_;
    }
    if (cached_has_bits & 0x08000000u) {
      lan_ = from.lan_;
    }
    if (cached_has_bits & 0x10000000u) {
      custom_game_penalties_ = from.custom_game_penalties_;
    }
    if (cached_has_bits & 0x20000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x40000000u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x80000000u) {
      previous_match_override_ = from.previous_match_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      pause_setting_ = from.pause_setting_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      bot_radiant_ = from.bot_radiant_;
    }
    if (cached_has_bits & 0x00000010u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_priority_rules_ = from.selection_priority_rules_;
    }
    if (cached_has_bits & 0x00000040u) {
      bot_dire_ = from.bot_dire_;
    }
    if (cached_has_bits & 0x00000080u) {
      dota_tv_delay_ = from.dota_tv_delay_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgPracticeLobbySetDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetDetails::CopyFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetDetails::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetDetails::Swap(CMsgPracticeLobbySetDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbySetDetails::InternalSwap(CMsgPracticeLobbySetDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  CastToBase(&team_details_)->InternalSwap(CastToBase(&other->team_details_));
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pass_key_.Swap(&other->pass_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_game_mode_.Swap(&other->custom_game_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_map_name_.Swap(&other->custom_map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lobby_id_, other->lobby_id_);
  swap(server_region_, other->server_region_);
  swap(game_mode_, other->game_mode_);
  swap(cm_pick_, other->cm_pick_);
  swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  swap(allow_cheats_, other->allow_cheats_);
  swap(fill_with_bots_, other->fill_with_bots_);
  swap(intro_mode_, other->intro_mode_);
  swap(allow_spectating_, other->allow_spectating_);
  swap(game_version_, other->game_version_);
  swap(leagueid_, other->leagueid_);
  swap(penalty_level_radiant_, other->penalty_level_radiant_);
  swap(penalty_level_dire_, other->penalty_level_dire_);
  swap(load_game_id_, other->load_game_id_);
  swap(series_type_, other->series_type_);
  swap(radiant_series_wins_, other->radiant_series_wins_);
  swap(dire_series_wins_, other->dire_series_wins_);
  swap(custom_difficulty_, other->custom_difficulty_);
  swap(custom_game_id_, other->custom_game_id_);
  swap(custom_min_players_, other->custom_min_players_);
  swap(custom_max_players_, other->custom_max_players_);
  swap(allchat_, other->allchat_);
  swap(lan_, other->lan_);
  swap(custom_game_penalties_, other->custom_game_penalties_);
  swap(visibility_, other->visibility_);
  swap(custom_game_crc_, other->custom_game_crc_);
  swap(previous_match_override_, other->previous_match_override_);
  swap(custom_game_timestamp_, other->custom_game_timestamp_);
  swap(pause_setting_, other->pause_setting_);
  swap(league_node_id_, other->league_node_id_);
  swap(bot_radiant_, other->bot_radiant_);
  swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
  swap(selection_priority_rules_, other->selection_priority_rules_);
  swap(bot_dire_, other->bot_dire_);
  swap(dota_tv_delay_, other->dota_tv_delay_);
}

::google::protobuf::Metadata CMsgPracticeLobbySetDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyCreate_SaveGame::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyCreate_SaveGame::HasBitSetters {
 public:
  static void set_has_data(CMsgPracticeLobbyCreate_SaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(CMsgPracticeLobbyCreate_SaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steam_id(CMsgPracticeLobbyCreate_SaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_signature(CMsgPracticeLobbyCreate_SaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyCreate_SaveGame::kDataFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kVersionFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kSteamIdFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
}
CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
}

void CMsgPracticeLobbyCreate_SaveGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
}

CMsgPracticeLobbyCreate_SaveGame::~CMsgPracticeLobbyCreate_SaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  SharedDtor();
}

void CMsgPracticeLobbyCreate_SaveGame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyCreate_SaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate_SaveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyCreate_SaveGame_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyCreate_SaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyCreate_SaveGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyCreate_SaveGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 signature = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_signature(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyCreate_SaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_signature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyCreate_SaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  // optional fixed64 signature = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
}

::google::protobuf::uint8* CMsgPracticeLobbyCreate_SaveGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  // optional fixed64 signature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  return target;
}

size_t CMsgPracticeLobbyCreate_SaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 steam_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate_SaveGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyCreate_SaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate_SaveGame::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate_SaveGame::Swap(CMsgPracticeLobbyCreate_SaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyCreate_SaveGame::InternalSwap(CMsgPracticeLobbyCreate_SaveGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(signature_, other->signature_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata CMsgPracticeLobbyCreate_SaveGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyCreate::InitAsDefaultInstance() {
  ::proto::dota::_CMsgPracticeLobbyCreate_default_instance_._instance.get_mutable()->lobby_details_ = const_cast< ::proto::dota::CMsgPracticeLobbySetDetails*>(
      ::proto::dota::CMsgPracticeLobbySetDetails::internal_default_instance());
  ::proto::dota::_CMsgPracticeLobbyCreate_default_instance_._instance.get_mutable()->save_game_ = const_cast< ::proto::dota::CMsgPracticeLobbyCreate_SaveGame*>(
      ::proto::dota::CMsgPracticeLobbyCreate_SaveGame::internal_default_instance());
}
class CMsgPracticeLobbyCreate::HasBitSetters {
 public:
  static void set_has_search_key(CMsgPracticeLobbyCreate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pass_key(CMsgPracticeLobbyCreate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_version(CMsgPracticeLobbyCreate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgPracticeLobbySetDetails& lobby_details(const CMsgPracticeLobbyCreate* msg);
  static void set_has_lobby_details(CMsgPracticeLobbyCreate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgPracticeLobbyCreate_SaveGame& save_game(const CMsgPracticeLobbyCreate* msg);
  static void set_has_save_game(CMsgPracticeLobbyCreate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::proto::dota::CMsgPracticeLobbySetDetails&
CMsgPracticeLobbyCreate::HasBitSetters::lobby_details(const CMsgPracticeLobbyCreate* msg) {
  return *msg->lobby_details_;
}
const ::proto::dota::CMsgPracticeLobbyCreate_SaveGame&
CMsgPracticeLobbyCreate::HasBitSetters::save_game(const CMsgPracticeLobbyCreate* msg) {
  return *msg->save_game_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyCreate::kSearchKeyFieldNumber;
const int CMsgPracticeLobbyCreate::kPassKeyFieldNumber;
const int CMsgPracticeLobbyCreate::kClientVersionFieldNumber;
const int CMsgPracticeLobbyCreate::kLobbyDetailsFieldNumber;
const int CMsgPracticeLobbyCreate::kSaveGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyCreate)
}
CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  if (from.has_lobby_details()) {
    lobby_details_ = new ::proto::dota::CMsgPracticeLobbySetDetails(*from.lobby_details_);
  } else {
    lobby_details_ = nullptr;
  }
  if (from.has_save_game()) {
    save_game_ = new ::proto::dota::CMsgPracticeLobbyCreate_SaveGame(*from.save_game_);
  } else {
    save_game_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyCreate)
}

void CMsgPracticeLobbyCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&lobby_details_)) + sizeof(client_version_));
}

CMsgPracticeLobbyCreate::~CMsgPracticeLobbyCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyCreate)
  SharedDtor();
}

void CMsgPracticeLobbyCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lobby_details_;
  if (this != internal_default_instance()) delete save_game_;
}

void CMsgPracticeLobbyCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyCreate& CMsgPracticeLobbyCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pass_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lobby_details_ != nullptr);
      lobby_details_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(save_game_ != nullptr);
      save_game_->Clear();
    }
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyCreate.search_key");
        object = msg->mutable_search_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string pass_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyCreate.pass_key");
        object = msg->mutable_pass_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgPracticeLobbySetDetails::_InternalParse;
        object = msg->mutable_lobby_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgPracticeLobbyCreate_SaveGame::_InternalParse;
        object = msg->mutable_save_game();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), static_cast<int>(this->pass_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyCreate.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lobby_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional string pass_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pass_key(), output);
  }

  // optional uint32 client_version = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_version(), output);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::lobby_details(this), output);
  }

  // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::save_game(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyCreate)
}

::google::protobuf::uint8* CMsgPracticeLobbyCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional string pass_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pass_key(), target);
  }

  // optional uint32 client_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_version(), target);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::lobby_details(this), target);
  }

  // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::save_game(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyCreate)
  return target;
}

size_t CMsgPracticeLobbyCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string pass_key = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lobby_details_);
    }

    // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *save_game_);
    }

    // optional uint32 client_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyCreate)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate::MergeFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lobby_details()->::proto::dota::CMsgPracticeLobbySetDetails::MergeFrom(from.lobby_details());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_save_game()->::proto::dota::CMsgPracticeLobbyCreate_SaveGame::MergeFrom(from.save_game());
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate::CopyFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate::Swap(CMsgPracticeLobbyCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyCreate::InternalSwap(CMsgPracticeLobbyCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pass_key_.Swap(&other->pass_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lobby_details_, other->lobby_details_);
  swap(save_game_, other->save_game_);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgPracticeLobbyCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbySetTeamSlot::InitAsDefaultInstance() {
}
class CMsgPracticeLobbySetTeamSlot::HasBitSetters {
 public:
  static void set_has_team(CMsgPracticeLobbySetTeamSlot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_slot(CMsgPracticeLobbySetTeamSlot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bot_difficulty(CMsgPracticeLobbySetTeamSlot* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbySetTeamSlot::kTeamFieldNumber;
const int CMsgPracticeLobbySetTeamSlot::kSlotFieldNumber;
const int CMsgPracticeLobbySetTeamSlot::kBotDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbySetTeamSlot)
}
CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_) -
    reinterpret_cast<char*>(&team_)) + sizeof(bot_difficulty_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbySetTeamSlot)
}

void CMsgPracticeLobbySetTeamSlot::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_difficulty_) -
      reinterpret_cast<char*>(&team_)) + sizeof(bot_difficulty_));
}

CMsgPracticeLobbySetTeamSlot::~CMsgPracticeLobbySetTeamSlot() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbySetTeamSlot)
  SharedDtor();
}

void CMsgPracticeLobbySetTeamSlot::SharedDtor() {
}

void CMsgPracticeLobbySetTeamSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbySetTeamSlot& CMsgPracticeLobbySetTeamSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbySetTeamSlot_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbySetTeamSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_difficulty_) -
        reinterpret_cast<char*>(&team_)) + sizeof(bot_difficulty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbySetTeamSlot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbySetTeamSlot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GC_TEAM_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_team(static_cast<::proto::dota::DOTA_GC_TEAM>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_bot_difficulty(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbySetTeamSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbySetTeamSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbySetTeamSlot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbySetTeamSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bot_difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbySetTeamSlot)
}

::google::protobuf::uint8* CMsgPracticeLobbySetTeamSlot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bot_difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbySetTeamSlot)
  return target;
}

size_t CMsgPracticeLobbySetTeamSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetTeamSlot* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbySetTeamSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbySetTeamSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbySetTeamSlot)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetTeamSlot::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetTeamSlot::Swap(CMsgPracticeLobbySetTeamSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbySetTeamSlot::InternalSwap(CMsgPracticeLobbySetTeamSlot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(slot_, other->slot_);
  swap(bot_difficulty_, other->bot_difficulty_);
}

::google::protobuf::Metadata CMsgPracticeLobbySetTeamSlot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbySetCoach::InitAsDefaultInstance() {
}
class CMsgPracticeLobbySetCoach::HasBitSetters {
 public:
  static void set_has_team(CMsgPracticeLobbySetCoach* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbySetCoach::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbySetCoach)
}
CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbySetCoach)
}

void CMsgPracticeLobbySetCoach::SharedCtor() {
  team_ = 0;
}

CMsgPracticeLobbySetCoach::~CMsgPracticeLobbySetCoach() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbySetCoach)
  SharedDtor();
}

void CMsgPracticeLobbySetCoach::SharedDtor() {
}

void CMsgPracticeLobbySetCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbySetCoach& CMsgPracticeLobbySetCoach::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbySetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbySetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbySetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbySetCoach::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbySetCoach*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GC_TEAM_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_team(static_cast<::proto::dota::DOTA_GC_TEAM>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbySetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbySetCoach)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbySetCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbySetCoach)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbySetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbySetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbySetCoach)
}

::google::protobuf::uint8* CMsgPracticeLobbySetCoach::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbySetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbySetCoach)
  return target;
}

size_t CMsgPracticeLobbySetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbySetCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbySetCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetCoach* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbySetCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbySetCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbySetCoach)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetCoach::MergeFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team()) {
    set_team(from.team());
  }
}

void CMsgPracticeLobbySetCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetCoach::CopyFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetCoach::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetCoach::Swap(CMsgPracticeLobbySetCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbySetCoach::InternalSwap(CMsgPracticeLobbySetCoach* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
}

::google::protobuf::Metadata CMsgPracticeLobbySetCoach::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyJoinBroadcastChannel::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyJoinBroadcastChannel::HasBitSetters {
 public:
  static void set_has_channel(CMsgPracticeLobbyJoinBroadcastChannel* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_preferred_description(CMsgPracticeLobbyJoinBroadcastChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_preferred_country_code(CMsgPracticeLobbyJoinBroadcastChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_preferred_language_code(CMsgPracticeLobbyJoinBroadcastChannel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyJoinBroadcastChannel::kChannelFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredDescriptionFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredCountryCodeFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
}
CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preferred_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_description()) {
    preferred_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_description_);
  }
  preferred_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_country_code()) {
    preferred_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_country_code_);
  }
  preferred_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_language_code()) {
    preferred_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_language_code_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyJoinBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  preferred_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
}

CMsgPracticeLobbyJoinBroadcastChannel::~CMsgPracticeLobbyJoinBroadcastChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  SharedDtor();
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedDtor() {
  preferred_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyJoinBroadcastChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyJoinBroadcastChannel& CMsgPracticeLobbyJoinBroadcastChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyJoinBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyJoinBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      preferred_description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      preferred_country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      preferred_language_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyJoinBroadcastChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyJoinBroadcastChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string preferred_description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
        object = msg->mutable_preferred_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string preferred_country_code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
        object = msg->mutable_preferred_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string preferred_language_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
        object = msg->mutable_preferred_language_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyJoinBroadcastChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_description().data(), static_cast<int>(this->preferred_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_country_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_country_code().data(), static_cast<int>(this->preferred_country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_language_code().data(), static_cast<int>(this->preferred_language_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyJoinBroadcastChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional string preferred_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_description().data(), static_cast<int>(this->preferred_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->preferred_description(), output);
  }

  // optional string preferred_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_country_code().data(), static_cast<int>(this->preferred_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->preferred_country_code(), output);
  }

  // optional string preferred_language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_language_code().data(), static_cast<int>(this->preferred_language_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preferred_language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoinBroadcastChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional string preferred_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_description().data(), static_cast<int>(this->preferred_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->preferred_description(), target);
  }

  // optional string preferred_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_country_code().data(), static_cast<int>(this->preferred_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->preferred_country_code(), target);
  }

  // optional string preferred_language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_language_code().data(), static_cast<int>(this->preferred_language_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preferred_language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyJoinBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string preferred_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_description());
    }

    // optional string preferred_country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_country_code());
    }

    // optional string preferred_language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_language_code());
    }

    // optional uint32 channel = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinBroadcastChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyJoinBroadcastChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      preferred_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      preferred_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      preferred_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_language_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinBroadcastChannel::Swap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyJoinBroadcastChannel::InternalSwap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  preferred_description_.Swap(&other->preferred_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preferred_country_code_.Swap(&other->preferred_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preferred_language_code_.Swap(&other->preferred_language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
}

::google::protobuf::Metadata CMsgPracticeLobbyJoinBroadcastChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyCloseBroadcastChannel::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyCloseBroadcastChannel::HasBitSetters {
 public:
  static void set_has_channel(CMsgPracticeLobbyCloseBroadcastChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyCloseBroadcastChannel::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
}
CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedCtor() {
  channel_ = 0u;
}

CMsgPracticeLobbyCloseBroadcastChannel::~CMsgPracticeLobbyCloseBroadcastChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  SharedDtor();
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedDtor() {
}

void CMsgPracticeLobbyCloseBroadcastChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyCloseBroadcastChannel& CMsgPracticeLobbyCloseBroadcastChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyCloseBroadcastChannel_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyCloseBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyCloseBroadcastChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyCloseBroadcastChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyCloseBroadcastChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyCloseBroadcastChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
}

::google::protobuf::uint8* CMsgPracticeLobbyCloseBroadcastChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyCloseBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 channel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCloseBroadcastChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyCloseBroadcastChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    set_channel(from.channel());
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCloseBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCloseBroadcastChannel::Swap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyCloseBroadcastChannel::InternalSwap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_, other->channel_);
}

::google::protobuf::Metadata CMsgPracticeLobbyCloseBroadcastChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}
CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedCtor() {
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  SharedDtor();
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedDtor() {
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

::google::protobuf::uint8* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return target;
}

size_t CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Swap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InternalSwap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyKick::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyKick::HasBitSetters {
 public:
  static void set_has_account_id(CMsgPracticeLobbyKick* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyKick::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyKick::CMsgPracticeLobbyKick()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyKick)
}
CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyKick)
}

void CMsgPracticeLobbyKick::SharedCtor() {
  account_id_ = 0u;
}

CMsgPracticeLobbyKick::~CMsgPracticeLobbyKick() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyKick)
  SharedDtor();
}

void CMsgPracticeLobbyKick::SharedDtor() {
}

void CMsgPracticeLobbyKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyKick& CMsgPracticeLobbyKick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyKick_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyKick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyKick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyKick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyKick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyKick)
}

::google::protobuf::uint8* CMsgPracticeLobbyKick::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyKick)
  return target;
}

size_t CMsgPracticeLobbyKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyKick* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyKick)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKick::MergeFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgPracticeLobbyKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKick::CopyFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKick::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKick::Swap(CMsgPracticeLobbyKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyKick::InternalSwap(CMsgPracticeLobbyKick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgPracticeLobbyKick::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyKickFromTeam::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyKickFromTeam::HasBitSetters {
 public:
  static void set_has_account_id(CMsgPracticeLobbyKickFromTeam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyKickFromTeam::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyKickFromTeam)
}
CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyKickFromTeam)
}

void CMsgPracticeLobbyKickFromTeam::SharedCtor() {
  account_id_ = 0u;
}

CMsgPracticeLobbyKickFromTeam::~CMsgPracticeLobbyKickFromTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyKickFromTeam)
  SharedDtor();
}

void CMsgPracticeLobbyKickFromTeam::SharedDtor() {
}

void CMsgPracticeLobbyKickFromTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyKickFromTeam& CMsgPracticeLobbyKickFromTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyKickFromTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyKickFromTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyKickFromTeam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyKickFromTeam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyKickFromTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyKickFromTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyKickFromTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyKickFromTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyKickFromTeam)
}

::google::protobuf::uint8* CMsgPracticeLobbyKickFromTeam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyKickFromTeam)
  return target;
}

size_t CMsgPracticeLobbyKickFromTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyKickFromTeam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyKickFromTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyKickFromTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyKickFromTeam)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKickFromTeam::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKickFromTeam::Swap(CMsgPracticeLobbyKickFromTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyKickFromTeam::InternalSwap(CMsgPracticeLobbyKickFromTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgPracticeLobbyKickFromTeam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyLeave::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyLeave::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyLeave)
}
CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyLeave)
}

void CMsgPracticeLobbyLeave::SharedCtor() {
}

CMsgPracticeLobbyLeave::~CMsgPracticeLobbyLeave() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyLeave)
  SharedDtor();
}

void CMsgPracticeLobbyLeave::SharedDtor() {
}

void CMsgPracticeLobbyLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyLeave& CMsgPracticeLobbyLeave::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyLeave_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyLeave::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyLeave*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyLeave)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyLeave)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyLeave)
}

::google::protobuf::uint8* CMsgPracticeLobbyLeave::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyLeave)
  return target;
}

size_t CMsgPracticeLobbyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyLeave* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyLeave)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLeave::MergeFrom(const CMsgPracticeLobbyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPracticeLobbyLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLeave::CopyFrom(const CMsgPracticeLobbyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLeave::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLeave::Swap(CMsgPracticeLobbyLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyLeave::InternalSwap(CMsgPracticeLobbyLeave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgPracticeLobbyLeave::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyLaunch::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyLaunch::HasBitSetters {
 public:
  static void set_has_client_version(CMsgPracticeLobbyLaunch* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyLaunch::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyLaunch)
}
CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyLaunch)
}

void CMsgPracticeLobbyLaunch::SharedCtor() {
  client_version_ = 0u;
}

CMsgPracticeLobbyLaunch::~CMsgPracticeLobbyLaunch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyLaunch)
  SharedDtor();
}

void CMsgPracticeLobbyLaunch::SharedDtor() {
}

void CMsgPracticeLobbyLaunch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyLaunch& CMsgPracticeLobbyLaunch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyLaunch_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyLaunch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyLaunch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyLaunch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyLaunch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyLaunch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyLaunch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyLaunch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyLaunch)
}

::google::protobuf::uint8* CMsgPracticeLobbyLaunch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyLaunch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyLaunch)
  return target;
}

size_t CMsgPracticeLobbyLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyLaunch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyLaunch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyLaunch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyLaunch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyLaunch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyLaunch)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLaunch::MergeFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_version()) {
    set_client_version(from.client_version());
  }
}

void CMsgPracticeLobbyLaunch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLaunch::CopyFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLaunch::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLaunch::Swap(CMsgPracticeLobbyLaunch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyLaunch::InternalSwap(CMsgPracticeLobbyLaunch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgPracticeLobbyLaunch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgApplyTeamToPracticeLobby::InitAsDefaultInstance() {
}
class CMsgApplyTeamToPracticeLobby::HasBitSetters {
 public:
  static void set_has_team_id(CMsgApplyTeamToPracticeLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyTeamToPracticeLobby::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyTeamToPracticeLobby)
}
CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyTeamToPracticeLobby)
}

void CMsgApplyTeamToPracticeLobby::SharedCtor() {
  team_id_ = 0u;
}

CMsgApplyTeamToPracticeLobby::~CMsgApplyTeamToPracticeLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyTeamToPracticeLobby)
  SharedDtor();
}

void CMsgApplyTeamToPracticeLobby::SharedDtor() {
}

void CMsgApplyTeamToPracticeLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgApplyTeamToPracticeLobby& CMsgApplyTeamToPracticeLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgApplyTeamToPracticeLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgApplyTeamToPracticeLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgApplyTeamToPracticeLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgApplyTeamToPracticeLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgApplyTeamToPracticeLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyTeamToPracticeLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyTeamToPracticeLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgApplyTeamToPracticeLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyTeamToPracticeLobby)
}

::google::protobuf::uint8* CMsgApplyTeamToPracticeLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyTeamToPracticeLobby)
  return target;
}

size_t CMsgApplyTeamToPracticeLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyTeamToPracticeLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgApplyTeamToPracticeLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyTeamToPracticeLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyTeamToPracticeLobby)
    MergeFrom(*source);
  }
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyTeamToPracticeLobby::IsInitialized() const {
  return true;
}

void CMsgApplyTeamToPracticeLobby::Swap(CMsgApplyTeamToPracticeLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyTeamToPracticeLobby::InternalSwap(CMsgApplyTeamToPracticeLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgApplyTeamToPracticeLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClearPracticeLobbyTeam::InitAsDefaultInstance() {
}
class CMsgClearPracticeLobbyTeam::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClearPracticeLobbyTeam)
}
CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam(const CMsgClearPracticeLobbyTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClearPracticeLobbyTeam)
}

void CMsgClearPracticeLobbyTeam::SharedCtor() {
}

CMsgClearPracticeLobbyTeam::~CMsgClearPracticeLobbyTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClearPracticeLobbyTeam)
  SharedDtor();
}

void CMsgClearPracticeLobbyTeam::SharedDtor() {
}

void CMsgClearPracticeLobbyTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClearPracticeLobbyTeam& CMsgClearPracticeLobbyTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClearPracticeLobbyTeam_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgClearPracticeLobbyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClearPracticeLobbyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClearPracticeLobbyTeam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClearPracticeLobbyTeam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClearPracticeLobbyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClearPracticeLobbyTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClearPracticeLobbyTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClearPracticeLobbyTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClearPracticeLobbyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClearPracticeLobbyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClearPracticeLobbyTeam)
}

::google::protobuf::uint8* CMsgClearPracticeLobbyTeam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClearPracticeLobbyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClearPracticeLobbyTeam)
  return target;
}

size_t CMsgClearPracticeLobbyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClearPracticeLobbyTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearPracticeLobbyTeam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClearPracticeLobbyTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClearPracticeLobbyTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClearPracticeLobbyTeam)
    MergeFrom(*source);
  }
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const CMsgClearPracticeLobbyTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClearPracticeLobbyTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearPracticeLobbyTeam::CopyFrom(const CMsgClearPracticeLobbyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearPracticeLobbyTeam::IsInitialized() const {
  return true;
}

void CMsgClearPracticeLobbyTeam::Swap(CMsgClearPracticeLobbyTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearPracticeLobbyTeam::InternalSwap(CMsgClearPracticeLobbyTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClearPracticeLobbyTeam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyList::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyList::HasBitSetters {
 public:
  static void set_has_pass_key(CMsgPracticeLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_region(CMsgPracticeLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_mode(CMsgPracticeLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyList::kPassKeyFieldNumber;
const int CMsgPracticeLobbyList::kRegionFieldNumber;
const int CMsgPracticeLobbyList::kGameModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyList::CMsgPracticeLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyList)
}
CMsgPracticeLobbyList::CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&region_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyList)
}

void CMsgPracticeLobbyList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&region_)) + sizeof(game_mode_));
}

CMsgPracticeLobbyList::~CMsgPracticeLobbyList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyList)
  SharedDtor();
}

void CMsgPracticeLobbyList::SharedDtor() {
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyList& CMsgPracticeLobbyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pass_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&region_)) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string pass_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyList.pass_key");
        object = msg->mutable_pass_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 region = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_mode(static_cast<::proto::dota::DOTA_GameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pass_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), static_cast<int>(this->pass_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyList.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pass_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyList.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass_key(), output);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyList)
}

::google::protobuf::uint8* CMsgPracticeLobbyList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pass_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyList.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass_key(), target);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyList)
  return target;
}

size_t CMsgPracticeLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string pass_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint32 region = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyList)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyList::MergeFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyList::CopyFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyList::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyList::Swap(CMsgPracticeLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyList::InternalSwap(CMsgPracticeLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pass_key_.Swap(&other->pass_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
  swap(game_mode_, other->game_mode_);
}

::google::protobuf::Metadata CMsgPracticeLobbyList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyListResponseEntry_CLobbyMember::HasBitSetters {
 public:
  static void set_has_account_id(CMsgPracticeLobbyListResponseEntry_CLobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_name(CMsgPracticeLobbyListResponseEntry_CLobbyMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyListResponseEntry_CLobbyMember::kAccountIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry_CLobbyMember::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}
CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember::~CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  SharedDtor();
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyListResponseEntry_CLobbyMember_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmptyNoArena();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyListResponseEntry_CLobbyMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyListResponseEntry_CLobbyMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponseEntry_CLobbyMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry_CLobbyMember* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyListResponseEntry_CLobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::InternalSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponseEntry_CLobbyMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyListResponseEntry::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyListResponseEntry::HasBitSetters {
 public:
  static void set_has_id(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_requires_pass_key(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_leader_account_id(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_guild_id(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_guild_logo(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_name(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_custom_game_mode(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_game_mode(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_friend_present(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_players(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_custom_map_name(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_player_count(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_server_region(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_league_id(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_lan_host_ping_location(CMsgPracticeLobbyListResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyListResponseEntry::kIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kMembersFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kRequiresPassKeyFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLeaderAccountIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGuildIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGuildLogoFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kNameFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kCustomGameModeFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGameModeFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kFriendPresentFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kPlayersFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kCustomMapNameFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kMaxPlayerCountFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kServerRegionFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLeagueIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLanHostPingLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyListResponseEntry)
}
CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_game_mode()) {
    custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lan_host_ping_location()) {
    lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyListResponseEntry)
}

void CMsgPracticeLobbyListResponseEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&league_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(league_id_));
}

CMsgPracticeLobbyListResponseEntry::~CMsgPracticeLobbyListResponseEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyListResponseEntry)
  SharedDtor();
}

void CMsgPracticeLobbyListResponseEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyListResponseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponseEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyListResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyListResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_game_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      lan_host_ping_location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_logo_) -
        reinterpret_cast<char*>(&id_)) + sizeof(guild_logo_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&requires_pass_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&requires_pass_key_)) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyListResponseEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyListResponseEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional bool requires_pass_key = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_requires_pass_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leader_account_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_leader_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 guild_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_guild_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 guild_logo = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_guild_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyListResponseEntry.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string custom_game_mode = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
        object = msg->mutable_custom_game_mode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(12, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_mode(static_cast<::proto::dota::DOTA_GameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool friend_present = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_friend_present(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string custom_map_name = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
        object = msg->mutable_custom_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 max_player_count = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_max_player_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_region = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string lan_host_ping_location = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
        object = msg->mutable_lan_host_ping_location();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyListResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_pass_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_requires_pass_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_leader_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_guild_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_logo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_guild_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_game_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friend_present = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_friend_present(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_player_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_max_player_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lan_host_ping_location = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lan_host_ping_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyListResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyListResponseEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyListResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional bool requires_pass_key = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leader_account_id(), output);
  }

  // optional uint32 guild_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->guild_logo(), output);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string custom_game_mode = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->custom_game_mode(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->game_mode(), output);
  }

  // optional bool friend_present = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->friend_present(), output);
  }

  // optional uint32 players = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->players(), output);
  }

  // optional string custom_map_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->custom_map_name(), output);
  }

  // optional uint32 max_player_count = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_player_count(), output);
  }

  // optional uint32 server_region = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->server_region(), output);
  }

  // optional uint32 league_id = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->league_id(), output);
  }

  // optional string lan_host_ping_location = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->lan_host_ping_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyListResponseEntry)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponseEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->members(static_cast<int>(i)), target);
  }

  // optional bool requires_pass_key = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leader_account_id(), target);
  }

  // optional uint32 guild_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->guild_logo(), target);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string custom_game_mode = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), static_cast<int>(this->custom_game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->custom_game_mode(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->game_mode(), target);
  }

  // optional bool friend_present = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->friend_present(), target);
  }

  // optional uint32 players = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->players(), target);
  }

  // optional string custom_map_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->custom_map_name(), target);
  }

  // optional uint32 max_player_count = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_player_count(), target);
  }

  // optional uint32 server_region = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->server_region(), target);
  }

  // optional uint32 league_id = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->league_id(), target);
  }

  // optional string lan_host_ping_location = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->lan_host_ping_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyListResponseEntry)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string custom_game_mode = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional string lan_host_ping_location = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lan_host_ping_location());
    }

    // optional uint64 id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 leader_account_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 guild_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 guild_logo = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool requires_pass_key = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool friend_present = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional uint32 players = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional uint32 max_player_count = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_player_count());
    }

    // optional uint32 server_region = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 league_id = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyListResponseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyListResponseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyListResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      guild_logo_ = from.guild_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000200u) {
      friend_present_ = from.friend_present_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_player_count_ = from.max_player_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00004000u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry::Swap(CMsgPracticeLobbyListResponseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyListResponseEntry::InternalSwap(CMsgPracticeLobbyListResponseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_game_mode_.Swap(&other->custom_game_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_map_name_.Swap(&other->custom_map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(leader_account_id_, other->leader_account_id_);
  swap(guild_id_, other->guild_id_);
  swap(guild_logo_, other->guild_logo_);
  swap(requires_pass_key_, other->requires_pass_key_);
  swap(friend_present_, other->friend_present_);
  swap(game_mode_, other->game_mode_);
  swap(players_, other->players_);
  swap(max_player_count_, other->max_player_count_);
  swap(server_region_, other->server_region_);
  swap(league_id_, other->league_id_);
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponseEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyListResponse::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyListResponse)
}
CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyListResponse)
}

void CMsgPracticeLobbyListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgPracticeLobbyListResponse::~CMsgPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyListResponse)
  SharedDtor();
}

void CMsgPracticeLobbyListResponse::SharedDtor() {
}

void CMsgPracticeLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyListResponse& CMsgPracticeLobbyListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPracticeLobbyListResponseEntry::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyListResponse)
  return target;
}

size_t CMsgPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponse::MergeFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponse::Swap(CMsgPracticeLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyListResponse::InternalSwap(CMsgPracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyList::InitAsDefaultInstance() {
}
class CMsgLobbyList::HasBitSetters {
 public:
  static void set_has_server_region(CMsgLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_mode(CMsgLobbyList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyList::kServerRegionFieldNumber;
const int CMsgLobbyList::kGameModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyList::CMsgLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyList)
}
CMsgLobbyList::CMsgLobbyList(const CMsgLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_region_, &from.server_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&server_region_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyList)
}

void CMsgLobbyList::SharedCtor() {
  ::memset(&server_region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&server_region_)) + sizeof(game_mode_));
}

CMsgLobbyList::~CMsgLobbyList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyList)
  SharedDtor();
}

void CMsgLobbyList::SharedDtor() {
}

void CMsgLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyList& CMsgLobbyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&server_region_)) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_game_mode(static_cast<::proto::dota::DOTA_GameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyList)
}

::google::protobuf::uint8* CMsgLobbyList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyList)
  return target;
}

size_t CMsgLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 server_region = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyList)
    MergeFrom(*source);
  }
}

void CMsgLobbyList::MergeFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyList::CopyFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyList::IsInitialized() const {
  return true;
}

void CMsgLobbyList::Swap(CMsgLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyList::InternalSwap(CMsgLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_region_, other->server_region_);
  swap(game_mode_, other->game_mode_);
}

::google::protobuf::Metadata CMsgLobbyList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyListResponse::InitAsDefaultInstance() {
}
class CMsgLobbyListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyListResponse::CMsgLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyListResponse)
}
CMsgLobbyListResponse::CMsgLobbyListResponse(const CMsgLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyListResponse)
}

void CMsgLobbyListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgLobbyListResponse::~CMsgLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyListResponse)
  SharedDtor();
}

void CMsgLobbyListResponse::SharedDtor() {
}

void CMsgLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyListResponse& CMsgLobbyListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPracticeLobbyListResponseEntry::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyListResponse)
}

::google::protobuf::uint8* CMsgLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyListResponse)
  return target;
}

size_t CMsgLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgLobbyListResponse::MergeFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyListResponse::CopyFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyListResponse::Swap(CMsgLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyListResponse::InternalSwap(CMsgLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
}

::google::protobuf::Metadata CMsgLobbyListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyJoin::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyJoin::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgPracticeLobbyJoin* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_version(CMsgPracticeLobbyJoin* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_pass_key(CMsgPracticeLobbyJoin* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_custom_game_crc(CMsgPracticeLobbyJoin* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_custom_game_timestamp(CMsgPracticeLobbyJoin* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyJoin::kLobbyIdFieldNumber;
const int CMsgPracticeLobbyJoin::kClientVersionFieldNumber;
const int CMsgPracticeLobbyJoin::kPassKeyFieldNumber;
const int CMsgPracticeLobbyJoin::kCustomGameCrcFieldNumber;
const int CMsgPracticeLobbyJoin::kCustomGameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyJoin)
}
CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_crc_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_crc_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyJoin)
}

void CMsgPracticeLobbyJoin::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPracticeLobbyJoin_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_game_crc_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_crc_));
}

CMsgPracticeLobbyJoin::~CMsgPracticeLobbyJoin() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyJoin)
  SharedDtor();
}

void CMsgPracticeLobbyJoin::SharedDtor() {
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyJoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyJoin& CMsgPracticeLobbyJoin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyJoin_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pass_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_crc_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyJoin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyJoin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pass_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgPracticeLobbyJoin.pass_key");
        object = msg->mutable_pass_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 custom_game_crc = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_custom_game_crc(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 custom_game_timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_custom_game_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyJoin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), static_cast<int>(this->pass_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoin.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_custom_game_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_custom_game_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyJoin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoin.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_key(), output);
  }

  // optional fixed64 custom_game_crc = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyJoin)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoin.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_key(), target);
  }

  // optional fixed64 custom_game_crc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyJoin)
  return target;
}

size_t CMsgPracticeLobbyJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyJoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string pass_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional fixed32 custom_game_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed64 custom_game_crc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoin* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyJoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyJoin)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoin::MergeFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoin::CopyFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoin::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoin::Swap(CMsgPracticeLobbyJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyJoin::InternalSwap(CMsgPracticeLobbyJoin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pass_key_.Swap(&other->pass_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lobby_id_, other->lobby_id_);
  swap(client_version_, other->client_version_);
  swap(custom_game_timestamp_, other->custom_game_timestamp_);
  swap(custom_game_crc_, other->custom_game_crc_);
}

::google::protobuf::Metadata CMsgPracticeLobbyJoin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPracticeLobbyJoinResponse::InitAsDefaultInstance() {
}
class CMsgPracticeLobbyJoinResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgPracticeLobbyJoinResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyJoinResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyJoinResponse)
}
CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyJoinResponse)
}

void CMsgPracticeLobbyJoinResponse::SharedCtor() {
  result_ = 0;
}

CMsgPracticeLobbyJoinResponse::~CMsgPracticeLobbyJoinResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyJoinResponse)
  SharedDtor();
}

void CMsgPracticeLobbyJoinResponse::SharedDtor() {
}

void CMsgPracticeLobbyJoinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPracticeLobbyJoinResponse& CMsgPracticeLobbyJoinResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPracticeLobbyJoinResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgPracticeLobbyJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPracticeLobbyJoinResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPracticeLobbyJoinResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAJoinLobbyResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::DOTAJoinLobbyResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPracticeLobbyJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAJoinLobbyResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::DOTAJoinLobbyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyJoinResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPracticeLobbyJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyJoinResponse)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoinResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyJoinResponse)
  return target;
}

size_t CMsgPracticeLobbyJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPracticeLobbyJoinResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyJoinResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyJoinResponse)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinResponse::Swap(CMsgPracticeLobbyJoinResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyJoinResponse::InternalSwap(CMsgPracticeLobbyJoinResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgPracticeLobbyJoinResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFriendPracticeLobbyListRequest::InitAsDefaultInstance() {
}
class CMsgFriendPracticeLobbyListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFriendPracticeLobbyListRequest::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFriendPracticeLobbyListRequest)
}
CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFriendPracticeLobbyListRequest)
}

void CMsgFriendPracticeLobbyListRequest::SharedCtor() {
}

CMsgFriendPracticeLobbyListRequest::~CMsgFriendPracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFriendPracticeLobbyListRequest)
  SharedDtor();
}

void CMsgFriendPracticeLobbyListRequest::SharedDtor() {
}

void CMsgFriendPracticeLobbyListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFriendPracticeLobbyListRequest& CMsgFriendPracticeLobbyListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFriendPracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgFriendPracticeLobbyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFriendPracticeLobbyListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFriendPracticeLobbyListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 friends = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_friends(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_friends();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFriendPracticeLobbyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 friends = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_friends())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_friends())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFriendPracticeLobbyListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFriendPracticeLobbyListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFriendPracticeLobbyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  for (int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->friends(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFriendPracticeLobbyListRequest)
}

::google::protobuf::uint8* CMsgFriendPracticeLobbyListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->friends_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFriendPracticeLobbyListRequest)
  return target;
}

size_t CMsgFriendPracticeLobbyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->friends_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->friends_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFriendPracticeLobbyListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFriendPracticeLobbyListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFriendPracticeLobbyListRequest)
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListRequest::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListRequest::Swap(CMsgFriendPracticeLobbyListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFriendPracticeLobbyListRequest::InternalSwap(CMsgFriendPracticeLobbyListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
}

::google::protobuf::Metadata CMsgFriendPracticeLobbyListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFriendPracticeLobbyListResponse::InitAsDefaultInstance() {
}
class CMsgFriendPracticeLobbyListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFriendPracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFriendPracticeLobbyListResponse)
}
CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFriendPracticeLobbyListResponse)
}

void CMsgFriendPracticeLobbyListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFriendPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgFriendPracticeLobbyListResponse::~CMsgFriendPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFriendPracticeLobbyListResponse)
  SharedDtor();
}

void CMsgFriendPracticeLobbyListResponse::SharedDtor() {
}

void CMsgFriendPracticeLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFriendPracticeLobbyListResponse& CMsgFriendPracticeLobbyListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFriendPracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgFriendPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFriendPracticeLobbyListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFriendPracticeLobbyListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPracticeLobbyListResponseEntry::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFriendPracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFriendPracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFriendPracticeLobbyListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFriendPracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFriendPracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgFriendPracticeLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFriendPracticeLobbyListResponse)
  return target;
}

size_t CMsgFriendPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFriendPracticeLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFriendPracticeLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFriendPracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListResponse::Swap(CMsgFriendPracticeLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFriendPracticeLobbyListResponse::InternalSwap(CMsgFriendPracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
}

::google::protobuf::Metadata CMsgFriendPracticeLobbyListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGuildmatePracticeLobbyListRequest::InitAsDefaultInstance() {
}
class CMsgGuildmatePracticeLobbyListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGuildmatePracticeLobbyListRequest::kGuildsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGuildmatePracticeLobbyListRequest::CMsgGuildmatePracticeLobbyListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
}
CMsgGuildmatePracticeLobbyListRequest::CMsgGuildmatePracticeLobbyListRequest(const CMsgGuildmatePracticeLobbyListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      guilds_(from.guilds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
}

void CMsgGuildmatePracticeLobbyListRequest::SharedCtor() {
}

CMsgGuildmatePracticeLobbyListRequest::~CMsgGuildmatePracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  SharedDtor();
}

void CMsgGuildmatePracticeLobbyListRequest::SharedDtor() {
}

void CMsgGuildmatePracticeLobbyListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGuildmatePracticeLobbyListRequest& CMsgGuildmatePracticeLobbyListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGuildmatePracticeLobbyListRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgGuildmatePracticeLobbyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guilds_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGuildmatePracticeLobbyListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGuildmatePracticeLobbyListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 guilds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_guilds(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_guilds();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGuildmatePracticeLobbyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 guilds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_guilds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guilds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGuildmatePracticeLobbyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 guilds = 1;
  for (int i = 0, n = this->guilds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->guilds(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
}

::google::protobuf::uint8* CMsgGuildmatePracticeLobbyListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 guilds = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->guilds_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  return target;
}

size_t CMsgGuildmatePracticeLobbyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 guilds = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->guilds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guilds_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildmatePracticeLobbyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildmatePracticeLobbyListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGuildmatePracticeLobbyListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
    MergeFrom(*source);
  }
}

void CMsgGuildmatePracticeLobbyListRequest::MergeFrom(const CMsgGuildmatePracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guilds_.MergeFrom(from.guilds_);
}

void CMsgGuildmatePracticeLobbyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildmatePracticeLobbyListRequest::CopyFrom(const CMsgGuildmatePracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildmatePracticeLobbyListRequest::IsInitialized() const {
  return true;
}

void CMsgGuildmatePracticeLobbyListRequest::Swap(CMsgGuildmatePracticeLobbyListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGuildmatePracticeLobbyListRequest::InternalSwap(CMsgGuildmatePracticeLobbyListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guilds_.InternalSwap(&other->guilds_);
}

::google::protobuf::Metadata CMsgGuildmatePracticeLobbyListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGuildmatePracticeLobbyListResponse::InitAsDefaultInstance() {
}
class CMsgGuildmatePracticeLobbyListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGuildmatePracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGuildmatePracticeLobbyListResponse::CMsgGuildmatePracticeLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
}
CMsgGuildmatePracticeLobbyListResponse::CMsgGuildmatePracticeLobbyListResponse(const CMsgGuildmatePracticeLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
}

void CMsgGuildmatePracticeLobbyListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGuildmatePracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgGuildmatePracticeLobbyListResponse::~CMsgGuildmatePracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  SharedDtor();
}

void CMsgGuildmatePracticeLobbyListResponse::SharedDtor() {
}

void CMsgGuildmatePracticeLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGuildmatePracticeLobbyListResponse& CMsgGuildmatePracticeLobbyListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGuildmatePracticeLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgGuildmatePracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGuildmatePracticeLobbyListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGuildmatePracticeLobbyListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgPracticeLobbyListResponseEntry::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGuildmatePracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGuildmatePracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgGuildmatePracticeLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  return target;
}

size_t CMsgGuildmatePracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGuildmatePracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildmatePracticeLobbyListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGuildmatePracticeLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgGuildmatePracticeLobbyListResponse::MergeFrom(const CMsgGuildmatePracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgGuildmatePracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildmatePracticeLobbyListResponse::CopyFrom(const CMsgGuildmatePracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildmatePracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgGuildmatePracticeLobbyListResponse::Swap(CMsgGuildmatePracticeLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGuildmatePracticeLobbyListResponse::InternalSwap(CMsgGuildmatePracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
}

::google::protobuf::Metadata CMsgGuildmatePracticeLobbyListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJoinableCustomGameModesRequest::InitAsDefaultInstance() {
}
class CMsgJoinableCustomGameModesRequest::HasBitSetters {
 public:
  static void set_has_server_region(CMsgJoinableCustomGameModesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomGameModesRequest::kServerRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomGameModesRequest)
}
CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_region_ = from.server_region_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomGameModesRequest)
}

void CMsgJoinableCustomGameModesRequest::SharedCtor() {
  server_region_ = 0u;
}

CMsgJoinableCustomGameModesRequest::~CMsgJoinableCustomGameModesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomGameModesRequest)
  SharedDtor();
}

void CMsgJoinableCustomGameModesRequest::SharedDtor() {
}

void CMsgJoinableCustomGameModesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJoinableCustomGameModesRequest& CMsgJoinableCustomGameModesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJoinableCustomGameModesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgJoinableCustomGameModesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_region_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJoinableCustomGameModesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJoinableCustomGameModesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJoinableCustomGameModesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomGameModesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomGameModesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJoinableCustomGameModesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomGameModesRequest)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomGameModesRequest)
  return target;
}

size_t CMsgJoinableCustomGameModesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_region = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_region());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJoinableCustomGameModesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomGameModesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomGameModesRequest)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_region()) {
    set_server_region(from.server_region());
  }
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesRequest::Swap(CMsgJoinableCustomGameModesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomGameModesRequest::InternalSwap(CMsgJoinableCustomGameModesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_region_, other->server_region_);
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJoinableCustomGameModesResponseEntry::InitAsDefaultInstance() {
}
class CMsgJoinableCustomGameModesResponseEntry::HasBitSetters {
 public:
  static void set_has_custom_game_id(CMsgJoinableCustomGameModesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lobby_count(CMsgJoinableCustomGameModesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_count(CMsgJoinableCustomGameModesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomGameModesResponseEntry::kCustomGameIdFieldNumber;
const int CMsgJoinableCustomGameModesResponseEntry::kLobbyCountFieldNumber;
const int CMsgJoinableCustomGameModesResponseEntry::kPlayerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
}
CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(player_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
}

void CMsgJoinableCustomGameModesResponseEntry::SharedCtor() {
  ::memset(&custom_game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_) -
      reinterpret_cast<char*>(&custom_game_id_)) + sizeof(player_count_));
}

CMsgJoinableCustomGameModesResponseEntry::~CMsgJoinableCustomGameModesResponseEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  SharedDtor();
}

void CMsgJoinableCustomGameModesResponseEntry::SharedDtor() {
}

void CMsgJoinableCustomGameModesResponseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponseEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJoinableCustomGameModesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgJoinableCustomGameModesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_count_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(player_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJoinableCustomGameModesResponseEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJoinableCustomGameModesResponseEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lobby_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_lobby_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_player_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJoinableCustomGameModesResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_lobby_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_player_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJoinableCustomGameModesResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->custom_game_id(), output);
  }

  // optional uint32 lobby_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lobby_count(), output);
  }

  // optional uint32 player_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesResponseEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->custom_game_id(), target);
  }

  // optional uint32 lobby_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lobby_count(), target);
  }

  // optional uint32 player_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomGameModesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 custom_game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 lobby_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_count());
    }

    // optional uint32 player_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponseEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJoinableCustomGameModesResponseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_count_ = from.lobby_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_count_ = from.player_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponseEntry::Swap(CMsgJoinableCustomGameModesResponseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomGameModesResponseEntry::InternalSwap(CMsgJoinableCustomGameModesResponseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(custom_game_id_, other->custom_game_id_);
  swap(lobby_count_, other->lobby_count_);
  swap(player_count_, other->player_count_);
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesResponseEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJoinableCustomGameModesResponse::InitAsDefaultInstance() {
}
class CMsgJoinableCustomGameModesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomGameModesResponse::kGameModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomGameModesResponse)
}
CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_modes_(from.game_modes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomGameModesResponse)
}

void CMsgJoinableCustomGameModesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJoinableCustomGameModesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgJoinableCustomGameModesResponse::~CMsgJoinableCustomGameModesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomGameModesResponse)
  SharedDtor();
}

void CMsgJoinableCustomGameModesResponse::SharedDtor() {
}

void CMsgJoinableCustomGameModesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJoinableCustomGameModesResponse& CMsgJoinableCustomGameModesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJoinableCustomGameModesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgJoinableCustomGameModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_modes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJoinableCustomGameModesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJoinableCustomGameModesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgJoinableCustomGameModesResponseEntry::_InternalParse;
          object = msg->add_game_modes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJoinableCustomGameModesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomGameModesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomGameModesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJoinableCustomGameModesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_modes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->game_modes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomGameModesResponse)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_modes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->game_modes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomGameModesResponse)
  return target;
}

size_t CMsgJoinableCustomGameModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->game_modes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_modes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJoinableCustomGameModesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomGameModesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomGameModesResponse)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_modes_.MergeFrom(from.game_modes_);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponse::Swap(CMsgJoinableCustomGameModesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomGameModesResponse::InternalSwap(CMsgJoinableCustomGameModesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&game_modes_)->InternalSwap(CastToBase(&other->game_modes_));
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJoinableCustomLobbiesRequest::InitAsDefaultInstance() {
}
class CMsgJoinableCustomLobbiesRequest::HasBitSetters {
 public:
  static void set_has_server_region(CMsgJoinableCustomLobbiesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_custom_game_id(CMsgJoinableCustomLobbiesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomLobbiesRequest::kServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesRequest::kCustomGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomLobbiesRequest)
}
CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(server_region_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomLobbiesRequest)
}

void CMsgJoinableCustomLobbiesRequest::SharedCtor() {
  ::memset(&custom_game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_region_) -
      reinterpret_cast<char*>(&custom_game_id_)) + sizeof(server_region_));
}

CMsgJoinableCustomLobbiesRequest::~CMsgJoinableCustomLobbiesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomLobbiesRequest)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesRequest::SharedDtor() {
}

void CMsgJoinableCustomLobbiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJoinableCustomLobbiesRequest& CMsgJoinableCustomLobbiesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJoinableCustomLobbiesRequest_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgJoinableCustomLobbiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(server_region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJoinableCustomLobbiesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJoinableCustomLobbiesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJoinableCustomLobbiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomLobbiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomLobbiesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJoinableCustomLobbiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomLobbiesRequest)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomLobbiesRequest)
  return target;
}

size_t CMsgJoinableCustomLobbiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 server_region = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJoinableCustomLobbiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomLobbiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomLobbiesRequest)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesRequest::Swap(CMsgJoinableCustomLobbiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomLobbiesRequest::InternalSwap(CMsgJoinableCustomLobbiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(custom_game_id_, other->custom_game_id_);
  swap(server_region_, other->server_region_);
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJoinableCustomLobbiesResponseEntry::InitAsDefaultInstance() {
}
class CMsgJoinableCustomLobbiesResponseEntry::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_custom_game_id(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_lobby_name(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_member_count(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_leader_account_id(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_leader_name(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_custom_map_name(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_player_count(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_server_region(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_has_pass_key(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_lan_host_ping_location(CMsgJoinableCustomLobbiesResponseEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomLobbiesResponseEntry::kLobbyIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kCustomGameIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLobbyNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kMemberCountFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLeaderAccountIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLeaderNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kCustomMapNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kMaxPlayerCountFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kHasPassKeyFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLanHostPingLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
}
CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_name()) {
    lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
  }
  leader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_name()) {
    leader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lan_host_ping_location()) {
    lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_pass_key_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(has_pass_key_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_pass_key_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(has_pass_key_));
}

CMsgJoinableCustomLobbiesResponseEntry::~CMsgJoinableCustomLobbiesResponseEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedDtor() {
  lobby_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJoinableCustomLobbiesResponseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponseEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJoinableCustomLobbiesResponseEntry_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgJoinableCustomLobbiesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      leader_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      lan_host_ping_location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_account_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(leader_account_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&max_player_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_pass_key_) -
        reinterpret_cast<char*>(&max_player_count_)) + sizeof(has_pass_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJoinableCustomLobbiesResponseEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJoinableCustomLobbiesResponseEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string lobby_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
        object = msg->mutable_lobby_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 member_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_member_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leader_account_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_leader_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string leader_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
        object = msg->mutable_leader_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string custom_map_name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
        object = msg->mutable_custom_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 max_player_count = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_max_player_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_region = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_pass_key = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_has_pass_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string lan_host_ping_location = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
        object = msg->mutable_lan_host_ping_location();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJoinableCustomLobbiesResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lobby_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby_name().data(), static_cast<int>(this->lobby_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_member_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_leader_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leader_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_name().data(), static_cast<int>(this->leader_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_player_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_max_player_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_pass_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_has_pass_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lan_host_ping_location = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lan_host_ping_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJoinableCustomLobbiesResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  // optional string lobby_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), static_cast<int>(this->lobby_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lobby_name(), output);
  }

  // optional uint32 member_count = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->member_count(), output);
  }

  // optional uint32 leader_account_id = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leader_account_id(), output);
  }

  // optional string leader_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), static_cast<int>(this->leader_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leader_name(), output);
  }

  // optional string custom_map_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom_map_name(), output);
  }

  // optional uint32 max_player_count = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_player_count(), output);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_region(), output);
  }

  // optional bool has_pass_key = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_pass_key(), output);
  }

  // optional string lan_host_ping_location = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->lan_host_ping_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesResponseEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  // optional string lobby_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), static_cast<int>(this->lobby_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lobby_name(), target);
  }

  // optional uint32 member_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->member_count(), target);
  }

  // optional uint32 leader_account_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leader_account_id(), target);
  }

  // optional string leader_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), static_cast<int>(this->leader_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leader_name(), target);
  }

  // optional string custom_map_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), static_cast<int>(this->custom_map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom_map_name(), target);
  }

  // optional uint32 max_player_count = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_player_count(), target);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_region(), target);
  }

  // optional bool has_pass_key = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->has_pass_key(), target);
  }

  // optional string lan_host_ping_location = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lan_host_ping_location().data(), static_cast<int>(this->lan_host_ping_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lan_host_ping_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lobby_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }

    // optional string leader_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

    // optional string custom_map_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional string lan_host_ping_location = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lan_host_ping_location());
    }

    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 member_count = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional uint32 leader_account_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 max_player_count = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_player_count());
    }

    // optional uint32 server_region = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional bool has_pass_key = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponseEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJoinableCustomLobbiesResponseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      leader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      lan_host_ping_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lan_host_ping_location_);
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      member_count_ = from.member_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      leader_account_id_ = from.leader_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      max_player_count_ = from.max_player_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_pass_key_ = from.has_pass_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponseEntry::Swap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomLobbiesResponseEntry::InternalSwap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_name_.Swap(&other->lobby_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leader_name_.Swap(&other->leader_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_map_name_.Swap(&other->custom_map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lobby_id_, other->lobby_id_);
  swap(custom_game_id_, other->custom_game_id_);
  swap(member_count_, other->member_count_);
  swap(leader_account_id_, other->leader_account_id_);
  swap(max_player_count_, other->max_player_count_);
  swap(server_region_, other->server_region_);
  swap(has_pass_key_, other->has_pass_key_);
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesResponseEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJoinableCustomLobbiesResponse::InitAsDefaultInstance() {
}
class CMsgJoinableCustomLobbiesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomLobbiesResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomLobbiesResponse)
}
CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomLobbiesResponse)
}

void CMsgJoinableCustomLobbiesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJoinableCustomLobbiesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgJoinableCustomLobbiesResponse::~CMsgJoinableCustomLobbiesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomLobbiesResponse)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesResponse::SharedDtor() {
}

void CMsgJoinableCustomLobbiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJoinableCustomLobbiesResponse& CMsgJoinableCustomLobbiesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJoinableCustomLobbiesResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgJoinableCustomLobbiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJoinableCustomLobbiesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJoinableCustomLobbiesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJoinableCustomLobbiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomLobbiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomLobbiesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJoinableCustomLobbiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomLobbiesResponse)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomLobbiesResponse)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJoinableCustomLobbiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomLobbiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomLobbiesResponse)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponse::Swap(CMsgJoinableCustomLobbiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomLobbiesResponse::InternalSwap(CMsgJoinableCustomLobbiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgQuickJoinCustomLobby_LegacyRegionPing::InitAsDefaultInstance() {
}
class CMsgQuickJoinCustomLobby_LegacyRegionPing::HasBitSetters {
 public:
  static void set_has_server_region(CMsgQuickJoinCustomLobby_LegacyRegionPing* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ping(CMsgQuickJoinCustomLobby_LegacyRegionPing* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_region_code(CMsgQuickJoinCustomLobby_LegacyRegionPing* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kServerRegionFieldNumber;
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kPingFieldNumber;
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kRegionCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
}
CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_region_, &from.server_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_code_) -
    reinterpret_cast<char*>(&server_region_)) + sizeof(region_code_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedCtor() {
  ::memset(&server_region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_code_) -
      reinterpret_cast<char*>(&server_region_)) + sizeof(region_code_));
}

CMsgQuickJoinCustomLobby_LegacyRegionPing::~CMsgQuickJoinCustomLobby_LegacyRegionPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  SharedDtor();
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedDtor() {
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgQuickJoinCustomLobby_LegacyRegionPing_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgQuickJoinCustomLobby_LegacyRegionPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_code_) -
        reinterpret_cast<char*>(&server_region_)) + sizeof(region_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgQuickJoinCustomLobby_LegacyRegionPing::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgQuickJoinCustomLobby_LegacyRegionPing*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ping = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ping(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 region_code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_region_code(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgQuickJoinCustomLobby_LegacyRegionPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ping(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 region_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_region_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &region_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping(), output);
  }

  // optional fixed32 region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->region_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobby_LegacyRegionPing::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping(), target);
  }

  // optional fixed32 region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->region_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return target;
}

size_t CMsgQuickJoinCustomLobby_LegacyRegionPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 server_region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional fixed32 region_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby_LegacyRegionPing* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgQuickJoinCustomLobby_LegacyRegionPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_code_ = from.region_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Swap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::InternalSwap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_region_, other->server_region_);
  swap(ping_, other->ping_);
  swap(region_code_, other->region_code_);
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobby_LegacyRegionPing::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgQuickJoinCustomLobby::InitAsDefaultInstance() {
  ::proto::dota::_CMsgQuickJoinCustomLobby_default_instance_._instance.get_mutable()->create_lobby_details_ = const_cast< ::proto::dota::CMsgPracticeLobbySetDetails*>(
      ::proto::dota::CMsgPracticeLobbySetDetails::internal_default_instance());
  ::proto::dota::_CMsgQuickJoinCustomLobby_default_instance_._instance.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
}
class CMsgQuickJoinCustomLobby::HasBitSetters {
 public:
  static void set_has_legacy_server_region(CMsgQuickJoinCustomLobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_custom_game_id(CMsgQuickJoinCustomLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_version(CMsgQuickJoinCustomLobby* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgPracticeLobbySetDetails& create_lobby_details(const CMsgQuickJoinCustomLobby* msg);
  static void set_has_create_lobby_details(CMsgQuickJoinCustomLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_allow_any_map(CMsgQuickJoinCustomLobby* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CMsgClientPingData& ping_data(const CMsgQuickJoinCustomLobby* msg);
  static void set_has_ping_data(CMsgQuickJoinCustomLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgPracticeLobbySetDetails&
CMsgQuickJoinCustomLobby::HasBitSetters::create_lobby_details(const CMsgQuickJoinCustomLobby* msg) {
  return *msg->create_lobby_details_;
}
const ::proto::dota::CMsgClientPingData&
CMsgQuickJoinCustomLobby::HasBitSetters::ping_data(const CMsgQuickJoinCustomLobby* msg) {
  return *msg->ping_data_;
}
void CMsgQuickJoinCustomLobby::clear_ping_data() {
  if (ping_data_ != nullptr) ping_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQuickJoinCustomLobby::kLegacyServerRegionFieldNumber;
const int CMsgQuickJoinCustomLobby::kCustomGameIdFieldNumber;
const int CMsgQuickJoinCustomLobby::kClientVersionFieldNumber;
const int CMsgQuickJoinCustomLobby::kCreateLobbyDetailsFieldNumber;
const int CMsgQuickJoinCustomLobby::kAllowAnyMapFieldNumber;
const int CMsgQuickJoinCustomLobby::kLegacyRegionPingsFieldNumber;
const int CMsgQuickJoinCustomLobby::kPingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgQuickJoinCustomLobby)
}
CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      legacy_region_pings_(from.legacy_region_pings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_lobby_details()) {
    create_lobby_details_ = new ::proto::dota::CMsgPracticeLobbySetDetails(*from.create_lobby_details_);
  } else {
    create_lobby_details_ = nullptr;
  }
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_any_map_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(allow_any_map_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgQuickJoinCustomLobby)
}

void CMsgQuickJoinCustomLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgQuickJoinCustomLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::memset(&create_lobby_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_any_map_) -
      reinterpret_cast<char*>(&create_lobby_details_)) + sizeof(allow_any_map_));
}

CMsgQuickJoinCustomLobby::~CMsgQuickJoinCustomLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgQuickJoinCustomLobby)
  SharedDtor();
}

void CMsgQuickJoinCustomLobby::SharedDtor() {
  if (this != internal_default_instance()) delete create_lobby_details_;
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgQuickJoinCustomLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgQuickJoinCustomLobby& CMsgQuickJoinCustomLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgQuickJoinCustomLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgQuickJoinCustomLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgQuickJoinCustomLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacy_region_pings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(create_lobby_details_ != nullptr);
      create_lobby_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ping_data_ != nullptr);
      ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_any_map_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(allow_any_map_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgQuickJoinCustomLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgQuickJoinCustomLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_server_region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_legacy_server_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgPracticeLobbySetDetails::_InternalParse;
        object = msg->mutable_create_lobby_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool allow_any_map = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_allow_any_map(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing::_InternalParse;
          object = msg->add_legacy_region_pings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgClientPingData ping_data = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgClientPingData::_InternalParse;
        object = msg->mutable_ping_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgQuickJoinCustomLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgQuickJoinCustomLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_legacy_server_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_lobby_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_any_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_allow_any_map(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_any_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_legacy_region_pings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgQuickJoinCustomLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgQuickJoinCustomLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgQuickJoinCustomLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgQuickJoinCustomLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_server_region = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_server_region(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::create_lobby_details(this), output);
  }

  // optional bool allow_any_map = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_any_map(), output);
  }

  // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->legacy_region_pings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->legacy_region_pings(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::ping_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgQuickJoinCustomLobby)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgQuickJoinCustomLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_server_region = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::create_lobby_details(this), target);
  }

  // optional bool allow_any_map = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_any_map(), target);
  }

  // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->legacy_region_pings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->legacy_region_pings(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::ping_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgQuickJoinCustomLobby)
  return target;
}

size_t CMsgQuickJoinCustomLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgQuickJoinCustomLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_region_pings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->legacy_region_pings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *create_lobby_details_);
    }

    // optional .proto.dota.CMsgClientPingData ping_data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 legacy_server_region = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_server_region());
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional bool allow_any_map = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuickJoinCustomLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgQuickJoinCustomLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgQuickJoinCustomLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgQuickJoinCustomLobby)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby::MergeFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacy_region_pings_.MergeFrom(from.legacy_region_pings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_create_lobby_details()->::proto::dota::CMsgPracticeLobbySetDetails::MergeFrom(from.create_lobby_details());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000004u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_server_region_ = from.legacy_server_region_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      allow_any_map_ = from.allow_any_map_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuickJoinCustomLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby::CopyFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby::Swap(CMsgQuickJoinCustomLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQuickJoinCustomLobby::InternalSwap(CMsgQuickJoinCustomLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&legacy_region_pings_)->InternalSwap(CastToBase(&other->legacy_region_pings_));
  swap(create_lobby_details_, other->create_lobby_details_);
  swap(ping_data_, other->ping_data_);
  swap(custom_game_id_, other->custom_game_id_);
  swap(legacy_server_region_, other->legacy_server_region_);
  swap(client_version_, other->client_version_);
  swap(allow_any_map_, other->allow_any_map_);
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgQuickJoinCustomLobbyResponse::InitAsDefaultInstance() {
}
class CMsgQuickJoinCustomLobbyResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgQuickJoinCustomLobbyResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQuickJoinCustomLobbyResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgQuickJoinCustomLobbyResponse)
}
CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgQuickJoinCustomLobbyResponse)
}

void CMsgQuickJoinCustomLobbyResponse::SharedCtor() {
  result_ = 0;
}

CMsgQuickJoinCustomLobbyResponse::~CMsgQuickJoinCustomLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  SharedDtor();
}

void CMsgQuickJoinCustomLobbyResponse::SharedDtor() {
}

void CMsgQuickJoinCustomLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgQuickJoinCustomLobbyResponse& CMsgQuickJoinCustomLobbyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgQuickJoinCustomLobbyResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgQuickJoinCustomLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgQuickJoinCustomLobbyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgQuickJoinCustomLobbyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAJoinLobbyResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::DOTAJoinLobbyResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgQuickJoinCustomLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAJoinLobbyResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::DOTAJoinLobbyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgQuickJoinCustomLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgQuickJoinCustomLobbyResponse)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobbyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  return target;
}

size_t CMsgQuickJoinCustomLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobbyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgQuickJoinCustomLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgQuickJoinCustomLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgQuickJoinCustomLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobbyResponse::Swap(CMsgQuickJoinCustomLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQuickJoinCustomLobbyResponse::InternalSwap(CMsgQuickJoinCustomLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobbyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBotGameCreate::InitAsDefaultInstance() {
}
class CMsgBotGameCreate::HasBitSetters {
 public:
  static void set_has_search_key(CMsgBotGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_version(CMsgBotGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_difficulty_radiant(CMsgBotGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team(CMsgBotGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_mode(CMsgBotGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_difficulty_dire(CMsgBotGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotGameCreate::kSearchKeyFieldNumber;
const int CMsgBotGameCreate::kClientVersionFieldNumber;
const int CMsgBotGameCreate::kDifficultyRadiantFieldNumber;
const int CMsgBotGameCreate::kTeamFieldNumber;
const int CMsgBotGameCreate::kGameModeFieldNumber;
const int CMsgBotGameCreate::kDifficultyDireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotGameCreate::CMsgBotGameCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotGameCreate)
}
CMsgBotGameCreate::CMsgBotGameCreate(const CMsgBotGameCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_dire_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotGameCreate)
}

void CMsgBotGameCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgBotGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_dire_) -
      reinterpret_cast<char*>(&client_version_)) + sizeof(difficulty_dire_));
}

CMsgBotGameCreate::~CMsgBotGameCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotGameCreate)
  SharedDtor();
}

void CMsgBotGameCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotGameCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBotGameCreate& CMsgBotGameCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBotGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgBotGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&difficulty_dire_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(difficulty_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBotGameCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBotGameCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgBotGameCreate.search_key");
        object = msg->mutable_search_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_difficulty_radiant(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_GC_TEAM_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_team(static_cast<::proto::dota::DOTA_GC_TEAM>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_mode = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTABotDifficulty_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_difficulty_dire(static_cast<::proto::dota::DOTABotDifficulty>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBotGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotGameCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgBotGameCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotGameCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBotGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotGameCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->difficulty_radiant(), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team(), output);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_mode(), output);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->difficulty_dire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotGameCreate)
}

::google::protobuf::uint8* CMsgBotGameCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotGameCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty_radiant(), target);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_mode(), target);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->difficulty_dire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotGameCreate)
  return target;
}

size_t CMsgBotGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotGameCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty_radiant());
    }

    // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 game_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotGameCreate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBotGameCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotGameCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotGameCreate)
    MergeFrom(*source);
  }
}

void CMsgBotGameCreate::MergeFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      difficulty_radiant_ = from.difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficulty_dire_ = from.difficulty_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotGameCreate::CopyFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotGameCreate::IsInitialized() const {
  return true;
}

void CMsgBotGameCreate::Swap(CMsgBotGameCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotGameCreate::InternalSwap(CMsgBotGameCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_version_, other->client_version_);
  swap(difficulty_radiant_, other->difficulty_radiant_);
  swap(team_, other->team_);
  swap(game_mode_, other->game_mode_);
  swap(difficulty_dire_, other->difficulty_dire_);
}

::google::protobuf::Metadata CMsgBotGameCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCustomGameCreate::InitAsDefaultInstance() {
}
class CMsgCustomGameCreate::HasBitSetters {
 public:
  static void set_has_search_key(CMsgCustomGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_version(CMsgCustomGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_difficulty(CMsgCustomGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_mode(CMsgCustomGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_map(CMsgCustomGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_custom_game_id(CMsgCustomGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCustomGameCreate::kSearchKeyFieldNumber;
const int CMsgCustomGameCreate::kClientVersionFieldNumber;
const int CMsgCustomGameCreate::kDifficultyFieldNumber;
const int CMsgCustomGameCreate::kGameModeFieldNumber;
const int CMsgCustomGameCreate::kMapFieldNumber;
const int CMsgCustomGameCreate::kCustomGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCustomGameCreate::CMsgCustomGameCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCustomGameCreate)
}
CMsgCustomGameCreate::CMsgCustomGameCreate(const CMsgCustomGameCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mode()) {
    game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCustomGameCreate)
}

void CMsgCustomGameCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgCustomGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_game_id_) -
      reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
}

CMsgCustomGameCreate::~CMsgCustomGameCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCustomGameCreate)
  SharedDtor();
}

void CMsgCustomGameCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgCustomGameCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCustomGameCreate& CMsgCustomGameCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCustomGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgCustomGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCustomGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_id_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCustomGameCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCustomGameCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgCustomGameCreate.search_key");
        object = msg->mutable_search_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_difficulty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_mode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgCustomGameCreate.game_mode");
        object = msg->mutable_game_mode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string map = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgCustomGameCreate.map");
        object = msg->mutable_map();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 custom_game_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCustomGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCustomGameCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_difficulty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), static_cast<int>(this->game_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameCreate.game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameCreate.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCustomGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCustomGameCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCustomGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCustomGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), static_cast<int>(this->game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_mode(), output);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map(), output);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->custom_game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCustomGameCreate)
}

::google::protobuf::uint8* CMsgCustomGameCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCustomGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), static_cast<int>(this->game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_mode(), target);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->custom_game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCustomGameCreate)
  return target;
}

size_t CMsgCustomGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCustomGameCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string game_mode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string map = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 difficulty = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint64 custom_game_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCustomGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameCreate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCustomGameCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCustomGameCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCustomGameCreate)
    MergeFrom(*source);
  }
}

void CMsgCustomGameCreate::MergeFrom(const CMsgCustomGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCustomGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCustomGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameCreate::CopyFrom(const CMsgCustomGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCustomGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameCreate::IsInitialized() const {
  return true;
}

void CMsgCustomGameCreate::Swap(CMsgCustomGameCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCustomGameCreate::InternalSwap(CMsgCustomGameCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_mode_.Swap(&other->game_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_version_, other->client_version_);
  swap(difficulty_, other->difficulty_);
  swap(custom_game_id_, other->custom_game_id_);
}

::google::protobuf::Metadata CMsgCustomGameCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgEventGameCreate::InitAsDefaultInstance() {
}
class CMsgEventGameCreate::HasBitSetters {
 public:
  static void set_has_search_key(CMsgEventGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_version(CMsgEventGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_difficulty(CMsgEventGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_game_mode(CMsgEventGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_map(CMsgEventGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_custom_game_id(CMsgEventGameCreate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgEventGameCreate::kSearchKeyFieldNumber;
const int CMsgEventGameCreate::kClientVersionFieldNumber;
const int CMsgEventGameCreate::kDifficultyFieldNumber;
const int CMsgEventGameCreate::kGameModeFieldNumber;
const int CMsgEventGameCreate::kMapFieldNumber;
const int CMsgEventGameCreate::kCustomGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgEventGameCreate::CMsgEventGameCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgEventGameCreate)
}
CMsgEventGameCreate::CMsgEventGameCreate(const CMsgEventGameCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mode()) {
    game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgEventGameCreate)
}

void CMsgEventGameCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgEventGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_game_id_) -
      reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
}

CMsgEventGameCreate::~CMsgEventGameCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgEventGameCreate)
  SharedDtor();
}

void CMsgEventGameCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgEventGameCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgEventGameCreate& CMsgEventGameCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgEventGameCreate_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgEventGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgEventGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_id_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(custom_game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgEventGameCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgEventGameCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgEventGameCreate.search_key");
        object = msg->mutable_search_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_difficulty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_mode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgEventGameCreate.game_mode");
        object = msg->mutable_game_mode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string map = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgEventGameCreate.map");
        object = msg->mutable_map();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 custom_game_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgEventGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgEventGameCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgEventGameCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_difficulty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), static_cast<int>(this->game_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgEventGameCreate.game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgEventGameCreate.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgEventGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgEventGameCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgEventGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgEventGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), static_cast<int>(this->game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_mode(), output);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map(), output);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->custom_game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgEventGameCreate)
}

::google::protobuf::uint8* CMsgEventGameCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgEventGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), static_cast<int>(this->game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_mode(), target);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->custom_game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgEventGameCreate)
  return target;
}

size_t CMsgEventGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgEventGameCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string game_mode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string map = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 difficulty = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint64 custom_game_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgEventGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgEventGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEventGameCreate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgEventGameCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgEventGameCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgEventGameCreate)
    MergeFrom(*source);
  }
}

void CMsgEventGameCreate::MergeFrom(const CMsgEventGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgEventGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgEventGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgEventGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEventGameCreate::CopyFrom(const CMsgEventGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgEventGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEventGameCreate::IsInitialized() const {
  return true;
}

void CMsgEventGameCreate::Swap(CMsgEventGameCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgEventGameCreate::InternalSwap(CMsgEventGameCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_mode_.Swap(&other->game_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_version_, other->client_version_);
  swap(difficulty_, other->difficulty_);
  swap(custom_game_id_, other->custom_game_id_);
}

::google::protobuf::Metadata CMsgEventGameCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPartyMemberSetCoach::InitAsDefaultInstance() {
}
class CMsgDOTAPartyMemberSetCoach::HasBitSetters {
 public:
  static void set_has_wants_coach(CMsgDOTAPartyMemberSetCoach* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPartyMemberSetCoach::kWantsCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPartyMemberSetCoach)
}
CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wants_coach_ = from.wants_coach_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPartyMemberSetCoach)
}

void CMsgDOTAPartyMemberSetCoach::SharedCtor() {
  wants_coach_ = false;
}

CMsgDOTAPartyMemberSetCoach::~CMsgDOTAPartyMemberSetCoach() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPartyMemberSetCoach)
  SharedDtor();
}

void CMsgDOTAPartyMemberSetCoach::SharedDtor() {
}

void CMsgDOTAPartyMemberSetCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPartyMemberSetCoach& CMsgDOTAPartyMemberSetCoach::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPartyMemberSetCoach_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPartyMemberSetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wants_coach_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPartyMemberSetCoach::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPartyMemberSetCoach*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool wants_coach = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_wants_coach(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPartyMemberSetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool wants_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_wants_coach(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPartyMemberSetCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPartyMemberSetCoach)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPartyMemberSetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wants_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wants_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPartyMemberSetCoach)
}

::google::protobuf::uint8* CMsgDOTAPartyMemberSetCoach::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wants_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wants_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPartyMemberSetCoach)
  return target;
}

size_t CMsgDOTAPartyMemberSetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool wants_coach = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPartyMemberSetCoach* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPartyMemberSetCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPartyMemberSetCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPartyMemberSetCoach)
    MergeFrom(*source);
  }
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wants_coach()) {
    set_wants_coach(from.wants_coach());
  }
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartyMemberSetCoach::IsInitialized() const {
  return true;
}

void CMsgDOTAPartyMemberSetCoach::Swap(CMsgDOTAPartyMemberSetCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPartyMemberSetCoach::InternalSwap(CMsgDOTAPartyMemberSetCoach* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wants_coach_, other->wants_coach_);
}

::google::protobuf::Metadata CMsgDOTAPartyMemberSetCoach::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASetGroupLeader::InitAsDefaultInstance() {
}
class CMsgDOTASetGroupLeader::HasBitSetters {
 public:
  static void set_has_new_leader_steamid(CMsgDOTASetGroupLeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASetGroupLeader::kNewLeaderSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASetGroupLeader)
}
CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_leader_steamid_ = from.new_leader_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASetGroupLeader)
}

void CMsgDOTASetGroupLeader::SharedCtor() {
  new_leader_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTASetGroupLeader::~CMsgDOTASetGroupLeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASetGroupLeader)
  SharedDtor();
}

void CMsgDOTASetGroupLeader::SharedDtor() {
}

void CMsgDOTASetGroupLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASetGroupLeader& CMsgDOTASetGroupLeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASetGroupLeader_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASetGroupLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASetGroupLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_leader_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASetGroupLeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASetGroupLeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 new_leader_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_new_leader_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASetGroupLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASetGroupLeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 new_leader_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_new_leader_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &new_leader_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASetGroupLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASetGroupLeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASetGroupLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASetGroupLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 new_leader_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->new_leader_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASetGroupLeader)
}

::google::protobuf::uint8* CMsgDOTASetGroupLeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASetGroupLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 new_leader_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->new_leader_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASetGroupLeader)
  return target;
}

size_t CMsgDOTASetGroupLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASetGroupLeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 new_leader_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASetGroupLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASetGroupLeader* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASetGroupLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASetGroupLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASetGroupLeader)
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupLeader::MergeFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_leader_steamid()) {
    set_new_leader_steamid(from.new_leader_steamid());
  }
}

void CMsgDOTASetGroupLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupLeader::CopyFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupLeader::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupLeader::Swap(CMsgDOTASetGroupLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASetGroupLeader::InternalSwap(CMsgDOTASetGroupLeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_leader_steamid_, other->new_leader_steamid_);
}

::google::protobuf::Metadata CMsgDOTASetGroupLeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTACancelGroupInvites::InitAsDefaultInstance() {
}
class CMsgDOTACancelGroupInvites::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACancelGroupInvites::kInvitedSteamidsFieldNumber;
const int CMsgDOTACancelGroupInvites::kInvitedGroupidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACancelGroupInvites)
}
CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      invited_steamids_(from.invited_steamids_),
      invited_groupids_(from.invited_groupids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACancelGroupInvites)
}

void CMsgDOTACancelGroupInvites::SharedCtor() {
}

CMsgDOTACancelGroupInvites::~CMsgDOTACancelGroupInvites() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACancelGroupInvites)
  SharedDtor();
}

void CMsgDOTACancelGroupInvites::SharedDtor() {
}

void CMsgDOTACancelGroupInvites::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTACancelGroupInvites& CMsgDOTACancelGroupInvites::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTACancelGroupInvites_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTACancelGroupInvites::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACancelGroupInvites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invited_steamids_.Clear();
  invited_groupids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTACancelGroupInvites::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTACancelGroupInvites*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 invited_steamids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_invited_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_invited_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 invited_groupids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_invited_groupids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_invited_groupids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTACancelGroupInvites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACancelGroupInvites)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 invited_steamids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_invited_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_invited_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 invited_groupids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_invited_groupids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_invited_groupids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACancelGroupInvites)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACancelGroupInvites)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTACancelGroupInvites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACancelGroupInvites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  for (int i = 0, n = this->invited_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->invited_steamids(i), output);
  }

  // repeated fixed64 invited_groupids = 2;
  for (int i = 0, n = this->invited_groupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->invited_groupids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACancelGroupInvites)
}

::google::protobuf::uint8* CMsgDOTACancelGroupInvites::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACancelGroupInvites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->invited_steamids_, target);

  // repeated fixed64 invited_groupids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->invited_groupids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACancelGroupInvites)
  return target;
}

size_t CMsgDOTACancelGroupInvites::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACancelGroupInvites)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->invited_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->invited_steamids_size());
    total_size += data_size;
  }

  // repeated fixed64 invited_groupids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->invited_groupids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->invited_groupids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACancelGroupInvites::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACancelGroupInvites* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTACancelGroupInvites>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACancelGroupInvites)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACancelGroupInvites)
    MergeFrom(*source);
  }
}

void CMsgDOTACancelGroupInvites::MergeFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invited_steamids_.MergeFrom(from.invited_steamids_);
  invited_groupids_.MergeFrom(from.invited_groupids_);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACancelGroupInvites::IsInitialized() const {
  return true;
}

void CMsgDOTACancelGroupInvites::Swap(CMsgDOTACancelGroupInvites* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACancelGroupInvites::InternalSwap(CMsgDOTACancelGroupInvites* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invited_steamids_.InternalSwap(&other->invited_steamids_);
  invited_groupids_.InternalSwap(&other->invited_groupids_);
}

::google::protobuf::Metadata CMsgDOTACancelGroupInvites::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASetGroupOpenStatus::InitAsDefaultInstance() {
}
class CMsgDOTASetGroupOpenStatus::HasBitSetters {
 public:
  static void set_has_open(CMsgDOTASetGroupOpenStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASetGroupOpenStatus::kOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASetGroupOpenStatus)
}
CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASetGroupOpenStatus)
}

void CMsgDOTASetGroupOpenStatus::SharedCtor() {
  open_ = false;
}

CMsgDOTASetGroupOpenStatus::~CMsgDOTASetGroupOpenStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASetGroupOpenStatus)
  SharedDtor();
}

void CMsgDOTASetGroupOpenStatus::SharedDtor() {
}

void CMsgDOTASetGroupOpenStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASetGroupOpenStatus& CMsgDOTASetGroupOpenStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASetGroupOpenStatus_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASetGroupOpenStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASetGroupOpenStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASetGroupOpenStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool open = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASetGroupOpenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_open(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASetGroupOpenStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASetGroupOpenStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASetGroupOpenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASetGroupOpenStatus)
}

::google::protobuf::uint8* CMsgDOTASetGroupOpenStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASetGroupOpenStatus)
  return target;
}

size_t CMsgDOTASetGroupOpenStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool open = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASetGroupOpenStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASetGroupOpenStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASetGroupOpenStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASetGroupOpenStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_open()) {
    set_open(from.open());
  }
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupOpenStatus::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupOpenStatus::Swap(CMsgDOTASetGroupOpenStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASetGroupOpenStatus::InternalSwap(CMsgDOTASetGroupOpenStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(open_, other->open_);
}

::google::protobuf::Metadata CMsgDOTASetGroupOpenStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAGroupMergeInvite::InitAsDefaultInstance() {
}
class CMsgDOTAGroupMergeInvite::HasBitSetters {
 public:
  static void set_has_other_group_id(CMsgDOTAGroupMergeInvite* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGroupMergeInvite::kOtherGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGroupMergeInvite)
}
CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  other_group_id_ = from.other_group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGroupMergeInvite)
}

void CMsgDOTAGroupMergeInvite::SharedCtor() {
  other_group_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAGroupMergeInvite::~CMsgDOTAGroupMergeInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGroupMergeInvite)
  SharedDtor();
}

void CMsgDOTAGroupMergeInvite::SharedDtor() {
}

void CMsgDOTAGroupMergeInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAGroupMergeInvite& CMsgDOTAGroupMergeInvite::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAGroupMergeInvite_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAGroupMergeInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGroupMergeInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAGroupMergeInvite::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAGroupMergeInvite*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 other_group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_other_group_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAGroupMergeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGroupMergeInvite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 other_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_other_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &other_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGroupMergeInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGroupMergeInvite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAGroupMergeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGroupMergeInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 other_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->other_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGroupMergeInvite)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeInvite::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGroupMergeInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 other_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->other_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGroupMergeInvite)
  return target;
}

size_t CMsgDOTAGroupMergeInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGroupMergeInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 other_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeInvite* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAGroupMergeInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGroupMergeInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGroupMergeInvite)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_other_group_id()) {
    set_other_group_id(from.other_group_id());
  }
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeInvite::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeInvite::Swap(CMsgDOTAGroupMergeInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGroupMergeInvite::InternalSwap(CMsgDOTAGroupMergeInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(other_group_id_, other->other_group_id_);
}

::google::protobuf::Metadata CMsgDOTAGroupMergeInvite::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAGroupMergeResponse::InitAsDefaultInstance() {
}
class CMsgDOTAGroupMergeResponse::HasBitSetters {
 public:
  static void set_has_initiator_group_id(CMsgDOTAGroupMergeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_accept(CMsgDOTAGroupMergeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGroupMergeResponse::kInitiatorGroupIdFieldNumber;
const int CMsgDOTAGroupMergeResponse::kAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGroupMergeResponse)
}
CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&initiator_group_id_, &from.initiator_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&initiator_group_id_)) + sizeof(accept_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGroupMergeResponse)
}

void CMsgDOTAGroupMergeResponse::SharedCtor() {
  ::memset(&initiator_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accept_) -
      reinterpret_cast<char*>(&initiator_group_id_)) + sizeof(accept_));
}

CMsgDOTAGroupMergeResponse::~CMsgDOTAGroupMergeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGroupMergeResponse)
  SharedDtor();
}

void CMsgDOTAGroupMergeResponse::SharedDtor() {
}

void CMsgDOTAGroupMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAGroupMergeResponse& CMsgDOTAGroupMergeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAGroupMergeResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAGroupMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGroupMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&initiator_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accept_) -
        reinterpret_cast<char*>(&initiator_group_id_)) + sizeof(accept_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAGroupMergeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAGroupMergeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 initiator_group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_initiator_group_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool accept = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_accept(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAGroupMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGroupMergeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 initiator_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_initiator_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &initiator_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_accept(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGroupMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGroupMergeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAGroupMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGroupMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 initiator_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->initiator_group_id(), output);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGroupMergeResponse)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGroupMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 initiator_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->initiator_group_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGroupMergeResponse)
  return target;
}

size_t CMsgDOTAGroupMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGroupMergeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 initiator_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAGroupMergeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGroupMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGroupMergeResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      initiator_group_id_ = from.initiator_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeResponse::Swap(CMsgDOTAGroupMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGroupMergeResponse::InternalSwap(CMsgDOTAGroupMergeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(initiator_group_id_, other->initiator_group_id_);
  swap(accept_, other->accept_);
}

::google::protobuf::Metadata CMsgDOTAGroupMergeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAGroupMergeReply::InitAsDefaultInstance() {
}
class CMsgDOTAGroupMergeReply::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAGroupMergeReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGroupMergeReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGroupMergeReply)
}
CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGroupMergeReply)
}

void CMsgDOTAGroupMergeReply::SharedCtor() {
  result_ = 0;
}

CMsgDOTAGroupMergeReply::~CMsgDOTAGroupMergeReply() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGroupMergeReply)
  SharedDtor();
}

void CMsgDOTAGroupMergeReply::SharedDtor() {
}

void CMsgDOTAGroupMergeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAGroupMergeReply& CMsgDOTAGroupMergeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAGroupMergeReply_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAGroupMergeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGroupMergeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAGroupMergeReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAGroupMergeReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EDOTAGroupMergeResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::EDOTAGroupMergeResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAGroupMergeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGroupMergeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EDOTAGroupMergeResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::EDOTAGroupMergeResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGroupMergeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGroupMergeReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAGroupMergeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGroupMergeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGroupMergeReply)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGroupMergeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGroupMergeReply)
  return target;
}

size_t CMsgDOTAGroupMergeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGroupMergeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAGroupMergeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeReply* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAGroupMergeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGroupMergeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGroupMergeReply)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeReply::MergeFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAGroupMergeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeReply::CopyFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeReply::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeReply::Swap(CMsgDOTAGroupMergeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGroupMergeReply::InternalSwap(CMsgDOTAGroupMergeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAGroupMergeReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectatorLobbyGameDetails_Team::InitAsDefaultInstance() {
}
class CMsgSpectatorLobbyGameDetails_Team::HasBitSetters {
 public:
  static void set_has_team_id(CMsgSpectatorLobbyGameDetails_Team* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_name(CMsgSpectatorLobbyGameDetails_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_logo(CMsgSpectatorLobbyGameDetails_Team* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyGameDetails_Team::kTeamIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails_Team::kTeamNameFieldNumber;
const int CMsgSpectatorLobbyGameDetails_Team::kTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
}
CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
}

void CMsgSpectatorLobbyGameDetails_Team::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
}

CMsgSpectatorLobbyGameDetails_Team::~CMsgSpectatorLobbyGameDetails_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  SharedDtor();
}

void CMsgSpectatorLobbyGameDetails_Team::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSpectatorLobbyGameDetails_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectatorLobbyGameDetails_Team_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectatorLobbyGameDetails_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectatorLobbyGameDetails_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectatorLobbyGameDetails_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 team_logo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectatorLobbyGameDetails_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectatorLobbyGameDetails_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional fixed64 team_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
}

::google::protobuf::uint8* CMsgSpectatorLobbyGameDetails_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional fixed64 team_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectatorLobbyGameDetails_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails_Team::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails_Team::Swap(CMsgSpectatorLobbyGameDetails_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyGameDetails_Team::InternalSwap(CMsgSpectatorLobbyGameDetails_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_logo_, other->team_logo_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyGameDetails_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectatorLobbyGameDetails::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSpectatorLobbyGameDetails_default_instance_._instance.get_mutable()->radiant_team_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails_Team*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::internal_default_instance());
  ::proto::dota::_CMsgSpectatorLobbyGameDetails_default_instance_._instance.get_mutable()->dire_team_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails_Team*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::internal_default_instance());
}
class CMsgSpectatorLobbyGameDetails::HasBitSetters {
 public:
  static void set_has_language(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_match_id(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_server_steam_id(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_stream_url(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stream_name(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_league_id(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_series_type(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_series_game(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::proto::dota::CMsgSpectatorLobbyGameDetails_Team& radiant_team(const CMsgSpectatorLobbyGameDetails* msg);
  static void set_has_radiant_team(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgSpectatorLobbyGameDetails_Team& dire_team(const CMsgSpectatorLobbyGameDetails* msg);
  static void set_has_dire_team(CMsgSpectatorLobbyGameDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::proto::dota::CMsgSpectatorLobbyGameDetails_Team&
CMsgSpectatorLobbyGameDetails::HasBitSetters::radiant_team(const CMsgSpectatorLobbyGameDetails* msg) {
  return *msg->radiant_team_;
}
const ::proto::dota::CMsgSpectatorLobbyGameDetails_Team&
CMsgSpectatorLobbyGameDetails::HasBitSetters::dire_team(const CMsgSpectatorLobbyGameDetails* msg) {
  return *msg->dire_team_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyGameDetails::kLanguageFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kMatchIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kServerSteamIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kStreamUrlFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kStreamNameFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kLeagueIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kSeriesTypeFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kSeriesGameFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kRadiantTeamFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kDireTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyGameDetails)
}
CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_url()) {
    stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
  }
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_name()) {
    stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
  }
  if (from.has_radiant_team()) {
    radiant_team_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails_Team(*from.radiant_team_);
  } else {
    radiant_team_ = nullptr;
  }
  if (from.has_dire_team()) {
    dire_team_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails_Team(*from.dire_team_);
  } else {
    dire_team_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&series_game_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(series_game_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyGameDetails)
}

void CMsgSpectatorLobbyGameDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&radiant_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&series_game_) -
      reinterpret_cast<char*>(&radiant_team_)) + sizeof(series_game_));
}

CMsgSpectatorLobbyGameDetails::~CMsgSpectatorLobbyGameDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyGameDetails)
  SharedDtor();
}

void CMsgSpectatorLobbyGameDetails::SharedDtor() {
  stream_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete radiant_team_;
  if (this != internal_default_instance()) delete dire_team_;
}

void CMsgSpectatorLobbyGameDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyGameDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectatorLobbyGameDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectatorLobbyGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stream_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stream_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radiant_team_ != nullptr);
      radiant_team_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dire_team_ != nullptr);
      dire_team_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&series_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_game_) -
        reinterpret_cast<char*>(&series_type_)) + sizeof(series_game_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectatorLobbyGameDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectatorLobbyGameDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 server_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string stream_url = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
        object = msg->mutable_stream_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string stream_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
        object = msg->mutable_stream_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 league_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_game = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_series_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::_InternalParse;
        object = msg->mutable_radiant_team();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::_InternalParse;
        object = msg->mutable_dire_team();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectatorLobbyGameDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_url().data(), static_cast<int>(this->stream_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), static_cast<int>(this->stream_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_game = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_series_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radiant_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dire_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyGameDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyGameDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectatorLobbyGameDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional fixed64 server_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->server_steam_id(), output);
  }

  // optional string stream_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), static_cast<int>(this->stream_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stream_url(), output);
  }

  // optional string stream_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), static_cast<int>(this->stream_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stream_name(), output);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->league_id(), output);
  }

  // optional uint32 series_type = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_type(), output);
  }

  // optional uint32 series_game = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_game(), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::radiant_team(this), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::dire_team(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyGameDetails)
}

::google::protobuf::uint8* CMsgSpectatorLobbyGameDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional fixed64 server_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->server_steam_id(), target);
  }

  // optional string stream_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), static_cast<int>(this->stream_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stream_url(), target);
  }

  // optional string stream_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), static_cast<int>(this->stream_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stream_name(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->league_id(), target);
  }

  // optional uint32 series_type = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_type(), target);
  }

  // optional uint32 series_game = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_game(), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::radiant_team(this), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::dire_team(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyGameDetails)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stream_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_url());
    }

    // optional string stream_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radiant_team_);
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dire_team_);
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed64 server_steam_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 language = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional uint32 league_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 series_type = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 series_game = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectatorLobbyGameDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyGameDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyGameDetails)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_radiant_team()->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from.radiant_team());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dire_team()->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from.dire_team());
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      series_game_ = from.series_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails::Swap(CMsgSpectatorLobbyGameDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyGameDetails::InternalSwap(CMsgSpectatorLobbyGameDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_url_.Swap(&other->stream_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stream_name_.Swap(&other->stream_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(radiant_team_, other->radiant_team_);
  swap(dire_team_, other->dire_team_);
  swap(match_id_, other->match_id_);
  swap(server_steam_id_, other->server_steam_id_);
  swap(language_, other->language_);
  swap(league_id_, other->league_id_);
  swap(series_type_, other->series_type_);
  swap(series_game_, other->series_game_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyGameDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetSpectatorLobbyDetails::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSetSpectatorLobbyDetails_default_instance_._instance.get_mutable()->game_details_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails::internal_default_instance());
}
class CMsgSetSpectatorLobbyDetails::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgSetSpectatorLobbyDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_lobby_name(CMsgSetSpectatorLobbyDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pass_key(CMsgSetSpectatorLobbyDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgSpectatorLobbyGameDetails& game_details(const CMsgSetSpectatorLobbyDetails* msg);
  static void set_has_game_details(CMsgSetSpectatorLobbyDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgSpectatorLobbyGameDetails&
CMsgSetSpectatorLobbyDetails::HasBitSetters::game_details(const CMsgSetSpectatorLobbyDetails* msg) {
  return *msg->game_details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetSpectatorLobbyDetails::kLobbyIdFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kLobbyNameFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kPassKeyFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kGameDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSetSpectatorLobbyDetails)
}
CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_name()) {
    lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  if (from.has_game_details()) {
    game_details_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails(*from.game_details_);
  } else {
    game_details_ = nullptr;
  }
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSetSpectatorLobbyDetails)
}

void CMsgSetSpectatorLobbyDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_id_) -
      reinterpret_cast<char*>(&game_details_)) + sizeof(lobby_id_));
}

CMsgSetSpectatorLobbyDetails::~CMsgSetSpectatorLobbyDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSetSpectatorLobbyDetails)
  SharedDtor();
}

void CMsgSetSpectatorLobbyDetails::SharedDtor() {
  lobby_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_details_;
}

void CMsgSetSpectatorLobbyDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetSpectatorLobbyDetails& CMsgSetSpectatorLobbyDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetSpectatorLobbyDetails_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetSpectatorLobbyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pass_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(game_details_ != nullptr);
      game_details_->Clear();
    }
  }
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetSpectatorLobbyDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetSpectatorLobbyDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string lobby_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
        object = msg->mutable_lobby_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string pass_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
        object = msg->mutable_pass_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSpectatorLobbyGameDetails::_InternalParse;
        object = msg->mutable_game_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetSpectatorLobbyDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lobby_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby_name().data(), static_cast<int>(this->lobby_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), static_cast<int>(this->pass_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSetSpectatorLobbyDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSetSpectatorLobbyDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetSpectatorLobbyDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string lobby_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), static_cast<int>(this->lobby_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lobby_name(), output);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_key(), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::game_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSetSpectatorLobbyDetails)
}

::google::protobuf::uint8* CMsgSetSpectatorLobbyDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string lobby_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), static_cast<int>(this->lobby_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lobby_name(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), static_cast<int>(this->pass_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_key(), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::game_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSetSpectatorLobbyDetails)
  return target;
}

size_t CMsgSetSpectatorLobbyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string lobby_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }

    // optional string pass_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetSpectatorLobbyDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetSpectatorLobbyDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSetSpectatorLobbyDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSetSpectatorLobbyDetails)
    MergeFrom(*source);
  }
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_game_details()->::proto::dota::CMsgSpectatorLobbyGameDetails::MergeFrom(from.game_details());
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSpectatorLobbyDetails::IsInitialized() const {
  return true;
}

void CMsgSetSpectatorLobbyDetails::Swap(CMsgSetSpectatorLobbyDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetSpectatorLobbyDetails::InternalSwap(CMsgSetSpectatorLobbyDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_name_.Swap(&other->lobby_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pass_key_.Swap(&other->pass_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_details_, other->game_details_);
  swap(lobby_id_, other->lobby_id_);
}

::google::protobuf::Metadata CMsgSetSpectatorLobbyDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCreateSpectatorLobby::InitAsDefaultInstance() {
  ::proto::dota::_CMsgCreateSpectatorLobby_default_instance_._instance.get_mutable()->details_ = const_cast< ::proto::dota::CMsgSetSpectatorLobbyDetails*>(
      ::proto::dota::CMsgSetSpectatorLobbyDetails::internal_default_instance());
}
class CMsgCreateSpectatorLobby::HasBitSetters {
 public:
  static void set_has_client_version(CMsgCreateSpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgSetSpectatorLobbyDetails& details(const CMsgCreateSpectatorLobby* msg);
  static void set_has_details(CMsgCreateSpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgSetSpectatorLobbyDetails&
CMsgCreateSpectatorLobby::HasBitSetters::details(const CMsgCreateSpectatorLobby* msg) {
  return *msg->details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCreateSpectatorLobby::kClientVersionFieldNumber;
const int CMsgCreateSpectatorLobby::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCreateSpectatorLobby)
}
CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::proto::dota::CMsgSetSpectatorLobbyDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCreateSpectatorLobby)
}

void CMsgCreateSpectatorLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgCreateSpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&details_)) + sizeof(client_version_));
}

CMsgCreateSpectatorLobby::~CMsgCreateSpectatorLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCreateSpectatorLobby)
  SharedDtor();
}

void CMsgCreateSpectatorLobby::SharedDtor() {
  if (this != internal_default_instance()) delete details_;
}

void CMsgCreateSpectatorLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCreateSpectatorLobby& CMsgCreateSpectatorLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCreateSpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgCreateSpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCreateSpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(details_ != nullptr);
    details_->Clear();
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCreateSpectatorLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCreateSpectatorLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSetSpectatorLobbyDetails::_InternalParse;
        object = msg->mutable_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCreateSpectatorLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCreateSpectatorLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCreateSpectatorLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCreateSpectatorLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCreateSpectatorLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCreateSpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }

  // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCreateSpectatorLobby)
}

::google::protobuf::uint8* CMsgCreateSpectatorLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCreateSpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }

  // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCreateSpectatorLobby)
  return target;
}

size_t CMsgCreateSpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCreateSpectatorLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *details_);
    }

    // optional uint32 client_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCreateSpectatorLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCreateSpectatorLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCreateSpectatorLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCreateSpectatorLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCreateSpectatorLobby)
    MergeFrom(*source);
  }
}

void CMsgCreateSpectatorLobby::MergeFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_details()->::proto::dota::CMsgSetSpectatorLobbyDetails::MergeFrom(from.details());
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCreateSpectatorLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCreateSpectatorLobby::CopyFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateSpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgCreateSpectatorLobby::Swap(CMsgCreateSpectatorLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCreateSpectatorLobby::InternalSwap(CMsgCreateSpectatorLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(details_, other->details_);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgCreateSpectatorLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectatorLobbyList::InitAsDefaultInstance() {
}
class CMsgSpectatorLobbyList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyList::CMsgSpectatorLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyList)
}
CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyList)
}

void CMsgSpectatorLobbyList::SharedCtor() {
}

CMsgSpectatorLobbyList::~CMsgSpectatorLobbyList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyList)
  SharedDtor();
}

void CMsgSpectatorLobbyList::SharedDtor() {
}

void CMsgSpectatorLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectatorLobbyList& CMsgSpectatorLobbyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectatorLobbyList_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectatorLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectatorLobbyList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectatorLobbyList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectatorLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectatorLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyList)
}

::google::protobuf::uint8* CMsgSpectatorLobbyList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyList)
  return target;
}

size_t CMsgSpectatorLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectatorLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyList)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyList::MergeFrom(const CMsgSpectatorLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgSpectatorLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyList::CopyFrom(const CMsgSpectatorLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyList::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyList::Swap(CMsgSpectatorLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyList::InternalSwap(CMsgSpectatorLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgSpectatorLobbyList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectatorLobbyListResponse_SpectatorLobby::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_._instance.get_mutable()->game_details_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails::internal_default_instance());
}
class CMsgSpectatorLobbyListResponse_SpectatorLobby::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_name(CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_requires_pass_key(CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_leader_account_id(CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_member_count(CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CMsgSpectatorLobbyGameDetails& game_details(const CMsgSpectatorLobbyListResponse_SpectatorLobby* msg);
  static void set_has_game_details(CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgSpectatorLobbyGameDetails&
CMsgSpectatorLobbyListResponse_SpectatorLobby::HasBitSetters::game_details(const CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
  return *msg->game_details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kLobbyIdFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kGameNameFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kRequiresPassKeyFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kLeaderAccountIdFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kMemberCountFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kGameDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
}
CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  if (from.has_game_details()) {
    game_details_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails(*from.game_details_);
  } else {
    game_details_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&game_details_)) + sizeof(member_count_));
}

CMsgSpectatorLobbyListResponse_SpectatorLobby::~CMsgSpectatorLobbyListResponse_SpectatorLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  SharedDtor();
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_details_;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectatorLobbyListResponse_SpectatorLobby_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectatorLobbyListResponse_SpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_details_ != nullptr);
      game_details_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectatorLobbyListResponse_SpectatorLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectatorLobbyListResponse_SpectatorLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
        object = msg->mutable_game_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool requires_pass_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_requires_pass_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leader_account_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_leader_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 member_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_member_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSpectatorLobbyGameDetails::_InternalParse;
        object = msg->mutable_game_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_pass_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_requires_pass_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_leader_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_member_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional bool requires_pass_key = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leader_account_id(), output);
  }

  // optional uint32 member_count = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_count(), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::game_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

::google::protobuf::uint8* CMsgSpectatorLobbyListResponse_SpectatorLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional bool requires_pass_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leader_account_id(), target);
  }

  // optional uint32 member_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->member_count(), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::game_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return target;
}

size_t CMsgSpectatorLobbyListResponse_SpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional bool requires_pass_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 member_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse_SpectatorLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectatorLobbyListResponse_SpectatorLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_game_details()->::proto::dota::CMsgSpectatorLobbyGameDetails::MergeFrom(from.game_details());
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Swap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::InternalSwap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_details_, other->game_details_);
  swap(lobby_id_, other->lobby_id_);
  swap(requires_pass_key_, other->requires_pass_key_);
  swap(leader_account_id_, other->leader_account_id_);
  swap(member_count_, other->member_count_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyListResponse_SpectatorLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectatorLobbyListResponse::InitAsDefaultInstance() {
}
class CMsgSpectatorLobbyListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyListResponse)
}
CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyListResponse)
}

void CMsgSpectatorLobbyListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSpectatorLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
}

CMsgSpectatorLobbyListResponse::~CMsgSpectatorLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyListResponse)
  SharedDtor();
}

void CMsgSpectatorLobbyListResponse::SharedDtor() {
}

void CMsgSpectatorLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectatorLobbyListResponse& CMsgSpectatorLobbyListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectatorLobbyListResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectatorLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectatorLobbyListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectatorLobbyListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby::_InternalParse;
          object = msg->add_lobbies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectatorLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectatorLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lobbies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyListResponse)
}

::google::protobuf::uint8* CMsgSpectatorLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lobbies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lobbies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyListResponse)
  return target;
}

size_t CMsgSpectatorLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lobbies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lobbies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectatorLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse::Swap(CMsgSpectatorLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyListResponse::InternalSwap(CMsgSpectatorLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lobbies_)->InternalSwap(CastToBase(&other->lobbies_));
}

::google::protobuf::Metadata CMsgSpectatorLobbyListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCRequestSteamDatagramTicket::InitAsDefaultInstance() {
}
class CMsgClientToGCRequestSteamDatagramTicket::HasBitSetters {
 public:
  static void set_has_server_steam_id(CMsgClientToGCRequestSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCRequestSteamDatagramTicket::kServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
}
CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_steam_id_ = from.server_steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedCtor() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientToGCRequestSteamDatagramTicket::~CMsgClientToGCRequestSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  SharedDtor();
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedDtor() {
}

void CMsgClientToGCRequestSteamDatagramTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCRequestSteamDatagramTicket& CMsgClientToGCRequestSteamDatagramTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCRequestSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCRequestSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCRequestSteamDatagramTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCRequestSteamDatagramTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCRequestSteamDatagramTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCRequestSteamDatagramTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
}

::google::protobuf::uint8* CMsgClientToGCRequestSteamDatagramTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 server_steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCRequestSteamDatagramTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_steam_id()) {
    set_server_steam_id(from.server_steam_id());
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicket::Swap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRequestSteamDatagramTicket::InternalSwap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_steam_id_, other->server_steam_id_);
}

::google::protobuf::Metadata CMsgClientToGCRequestSteamDatagramTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCRequestSteamDatagramTicketResponse::InitAsDefaultInstance() {
}
class CMsgClientToGCRequestSteamDatagramTicketResponse::HasBitSetters {
 public:
  static void set_has_serialized_ticket(CMsgClientToGCRequestSteamDatagramTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_message(CMsgClientToGCRequestSteamDatagramTicketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCRequestSteamDatagramTicketResponse::kSerializedTicketFieldNumber;
const int CMsgClientToGCRequestSteamDatagramTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
}
CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_ticket()) {
    serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCRequestSteamDatagramTicketResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientToGCRequestSteamDatagramTicketResponse::~CMsgClientToGCRequestSteamDatagramTicketResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  SharedDtor();
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedDtor() {
  serialized_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCRequestSteamDatagramTicketResponse& CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCRequestSteamDatagramTicketResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCRequestSteamDatagramTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCRequestSteamDatagramTicketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCRequestSteamDatagramTicketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCRequestSteamDatagramTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCRequestSteamDatagramTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_ticket(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
}

::google::protobuf::uint8* CMsgClientToGCRequestSteamDatagramTicketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_ticket(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_ticket());
    }

    // optional string message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCRequestSteamDatagramTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Swap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::InternalSwap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_ticket_.Swap(&other->serialized_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgClientToGCRequestSteamDatagramTicketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientSteamDatagramTicket::InitAsDefaultInstance() {
}
class CMsgGCToClientSteamDatagramTicket::HasBitSetters {
 public:
  static void set_has_legacy_time_expiry(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_legacy_authorized_steam_id(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_legacy_authorized_public_ip(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_legacy_gameserver_steam_id(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_legacy_gameserver_net_id(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_legacy_signature(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_legacy_app_id(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_serialized_ticket(CMsgGCToClientSteamDatagramTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientSteamDatagramTicket::kLegacyTimeExpiryFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyAuthorizedSteamIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyAuthorizedPublicIpFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyGameserverSteamIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyGameserverNetIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacySignatureFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyAppIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyExtraFieldsFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kSerializedTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientSteamDatagramTicket)
}
CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      legacy_extra_fields_(from.legacy_extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  legacy_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_legacy_signature()) {
    legacy_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legacy_signature_);
  }
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_ticket()) {
    serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
  }
  ::memcpy(&legacy_authorized_steam_id_, &from.legacy_authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_app_id_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientSteamDatagramTicket)
}

void CMsgGCToClientSteamDatagramTicket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  legacy_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&legacy_authorized_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&legacy_app_id_) -
      reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_app_id_));
}

CMsgGCToClientSteamDatagramTicket::~CMsgGCToClientSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientSteamDatagramTicket)
  SharedDtor();
}

void CMsgGCToClientSteamDatagramTicket::SharedDtor() {
  legacy_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientSteamDatagramTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientSteamDatagramTicket& CMsgGCToClientSteamDatagramTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientSteamDatagramTicket_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacy_extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_ticket_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&legacy_authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legacy_app_id_) -
        reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(legacy_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientSteamDatagramTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientSteamDatagramTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 legacy_time_expiry = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_legacy_time_expiry(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_legacy_authorized_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 legacy_authorized_public_ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_legacy_authorized_public_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_legacy_gameserver_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_legacy_gameserver_net_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes legacy_signature = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_legacy_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 legacy_app_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_legacy_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes legacy_extra_fields = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_legacy_extra_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // optional bytes serialized_ticket = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientSteamDatagramTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 legacy_time_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_legacy_time_expiry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_legacy_authorized_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_authorized_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 legacy_authorized_public_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_legacy_authorized_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_authorized_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_net_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes legacy_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 legacy_app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_legacy_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes legacy_extra_fields = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_legacy_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_ticket = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientSteamDatagramTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientSteamDatagramTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientSteamDatagramTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 legacy_time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->legacy_time_expiry(), output);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->legacy_authorized_steam_id(), output);
  }

  // optional fixed32 legacy_authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->legacy_authorized_public_ip(), output);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_gameserver_steam_id(), output);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->legacy_gameserver_net_id(), output);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->legacy_signature(), output);
  }

  // optional uint32 legacy_app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->legacy_app_id(), output);
  }

  // repeated bytes legacy_extra_fields = 8;
  for (int i = 0, n = this->legacy_extra_fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->legacy_extra_fields(i), output);
  }

  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->serialized_ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientSteamDatagramTicket)
}

::google::protobuf::uint8* CMsgGCToClientSteamDatagramTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 legacy_time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->legacy_time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->legacy_authorized_steam_id(), target);
  }

  // optional fixed32 legacy_authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->legacy_authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->legacy_gameserver_net_id(), target);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->legacy_signature(), target);
  }

  // optional uint32 legacy_app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->legacy_app_id(), target);
  }

  // repeated bytes legacy_extra_fields = 8;
  for (int i = 0, n = this->legacy_extra_fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->legacy_extra_fields(i), target);
  }

  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->serialized_ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientSteamDatagramTicket)
  return target;
}

size_t CMsgGCToClientSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes legacy_extra_fields = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->legacy_extra_fields_size());
  for (int i = 0, n = this->legacy_extra_fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->legacy_extra_fields(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes legacy_signature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_signature());
    }

    // optional bytes serialized_ticket = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_ticket());
    }

    // optional fixed64 legacy_authorized_steam_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 legacy_time_expiry = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 legacy_authorized_public_ip = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_net_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_app_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientSteamDatagramTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientSteamDatagramTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientSteamDatagramTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacy_extra_fields_.MergeFrom(from.legacy_extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      legacy_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legacy_signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_authorized_steam_id_ = from.legacy_authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_time_expiry_ = from.legacy_time_expiry_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_authorized_public_ip_ = from.legacy_authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_gameserver_steam_id_ = from.legacy_gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_gameserver_net_id_ = from.legacy_gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      legacy_app_id_ = from.legacy_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgGCToClientSteamDatagramTicket::Swap(CMsgGCToClientSteamDatagramTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientSteamDatagramTicket::InternalSwap(CMsgGCToClientSteamDatagramTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  legacy_extra_fields_.InternalSwap(CastToBase(&other->legacy_extra_fields_));
  legacy_signature_.Swap(&other->legacy_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_ticket_.Swap(&other->serialized_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(legacy_authorized_steam_id_, other->legacy_authorized_steam_id_);
  swap(legacy_time_expiry_, other->legacy_time_expiry_);
  swap(legacy_authorized_public_ip_, other->legacy_authorized_public_ip_);
  swap(legacy_gameserver_steam_id_, other->legacy_gameserver_steam_id_);
  swap(legacy_gameserver_net_id_, other->legacy_gameserver_net_id_);
  swap(legacy_app_id_, other->legacy_app_id_);
}

::google::protobuf::Metadata CMsgGCToClientSteamDatagramTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientRequestLaneSelection::InitAsDefaultInstance() {
}
class CMsgGCToClientRequestLaneSelection::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientRequestLaneSelection)
}
CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(const CMsgGCToClientRequestLaneSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientRequestLaneSelection)
}

void CMsgGCToClientRequestLaneSelection::SharedCtor() {
}

CMsgGCToClientRequestLaneSelection::~CMsgGCToClientRequestLaneSelection() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientRequestLaneSelection)
  SharedDtor();
}

void CMsgGCToClientRequestLaneSelection::SharedDtor() {
}

void CMsgGCToClientRequestLaneSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientRequestLaneSelection& CMsgGCToClientRequestLaneSelection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientRequestLaneSelection_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientRequestLaneSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientRequestLaneSelection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientRequestLaneSelection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientRequestLaneSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientRequestLaneSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientRequestLaneSelection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientRequestLaneSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientRequestLaneSelection)
}

::google::protobuf::uint8* CMsgGCToClientRequestLaneSelection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientRequestLaneSelection)
  return target;
}

size_t CMsgGCToClientRequestLaneSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientRequestLaneSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientRequestLaneSelection* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientRequestLaneSelection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientRequestLaneSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientRequestLaneSelection)
    MergeFrom(*source);
  }
}

void CMsgGCToClientRequestLaneSelection::MergeFrom(const CMsgGCToClientRequestLaneSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToClientRequestLaneSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientRequestLaneSelection::CopyFrom(const CMsgGCToClientRequestLaneSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientRequestLaneSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestLaneSelection::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestLaneSelection::Swap(CMsgGCToClientRequestLaneSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientRequestLaneSelection::InternalSwap(CMsgGCToClientRequestLaneSelection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCToClientRequestLaneSelection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientRequestLaneSelectionResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientRequestLaneSelectionResponse::HasBitSetters {
 public:
  static void set_has_lane_selection_flags(CMsgGCToClientRequestLaneSelectionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientRequestLaneSelectionResponse::kLaneSelectionFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
}
CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(const CMsgGCToClientRequestLaneSelectionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_selection_flags_ = from.lane_selection_flags_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
}

void CMsgGCToClientRequestLaneSelectionResponse::SharedCtor() {
  lane_selection_flags_ = 0u;
}

CMsgGCToClientRequestLaneSelectionResponse::~CMsgGCToClientRequestLaneSelectionResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  SharedDtor();
}

void CMsgGCToClientRequestLaneSelectionResponse::SharedDtor() {
}

void CMsgGCToClientRequestLaneSelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientRequestLaneSelectionResponse& CMsgGCToClientRequestLaneSelectionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientRequestLaneSelectionResponse_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientRequestLaneSelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_selection_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientRequestLaneSelectionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientRequestLaneSelectionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 lane_selection_flags = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lane_selection_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientRequestLaneSelectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lane_selection_flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lane_selection_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_selection_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientRequestLaneSelectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lane_selection_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lane_selection_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
}

::google::protobuf::uint8* CMsgGCToClientRequestLaneSelectionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lane_selection_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lane_selection_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  return target;
}

size_t CMsgGCToClientRequestLaneSelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 lane_selection_flags = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lane_selection_flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientRequestLaneSelectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientRequestLaneSelectionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientRequestLaneSelectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientRequestLaneSelectionResponse::MergeFrom(const CMsgGCToClientRequestLaneSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lane_selection_flags()) {
    set_lane_selection_flags(from.lane_selection_flags());
  }
}

void CMsgGCToClientRequestLaneSelectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientRequestLaneSelectionResponse::CopyFrom(const CMsgGCToClientRequestLaneSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientRequestLaneSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestLaneSelectionResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestLaneSelectionResponse::Swap(CMsgGCToClientRequestLaneSelectionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientRequestLaneSelectionResponse::InternalSwap(CMsgGCToClientRequestLaneSelectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lane_selection_flags_, other->lane_selection_flags_);
}

::google::protobuf::Metadata CMsgGCToClientRequestLaneSelectionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgStartFindingMatch* Arena::CreateMaybeMessage< ::proto::dota::CMsgStartFindingMatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgStartFindingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgStartFindingMatchResult* Arena::CreateMaybeMessage< ::proto::dota::CMsgStartFindingMatchResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgStartFindingMatchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgStopFindingMatch* Arena::CreateMaybeMessage< ::proto::dota::CMsgStopFindingMatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgStopFindingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPartyBuilderOptions* Arena::CreateMaybeMessage< ::proto::dota::CMsgPartyBuilderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPartyBuilderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgReadyUp* Arena::CreateMaybeMessage< ::proto::dota::CMsgReadyUp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgReadyUp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgReadyUpStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgReadyUpStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgReadyUpStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAbandonCurrentGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgAbandonCurrentGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAbandonCurrentGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbySetDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbySetDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbySetDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyCreate_SaveGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyCreate_SaveGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyCreate_SaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyCreate* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyCreate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbySetTeamSlot* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbySetTeamSlot >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbySetTeamSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbySetCoach* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbySetCoach >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbySetCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyJoinBroadcastChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyCloseBroadcastChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyKick* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyKick >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyKick >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyKickFromTeam* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyKickFromTeam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyKickFromTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyLeave* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyLeave >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyLaunch* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyLaunch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgApplyTeamToPracticeLobby* Arena::CreateMaybeMessage< ::proto::dota::CMsgApplyTeamToPracticeLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgApplyTeamToPracticeLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClearPracticeLobbyTeam* Arena::CreateMaybeMessage< ::proto::dota::CMsgClearPracticeLobbyTeam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClearPracticeLobbyTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyList* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyListResponseEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyListResponseEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyListResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyList* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyJoin* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyJoin >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPracticeLobbyJoinResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgPracticeLobbyJoinResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPracticeLobbyJoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgFriendPracticeLobbyListRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgFriendPracticeLobbyListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgFriendPracticeLobbyListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgFriendPracticeLobbyListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgFriendPracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgFriendPracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGuildmatePracticeLobbyListRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGuildmatePracticeLobbyListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGuildmatePracticeLobbyListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGuildmatePracticeLobbyListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGuildmatePracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGuildmatePracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgJoinableCustomGameModesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgJoinableCustomGameModesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgJoinableCustomGameModesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgJoinableCustomGameModesResponseEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgJoinableCustomGameModesResponseEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgJoinableCustomGameModesResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgJoinableCustomGameModesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgJoinableCustomGameModesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgJoinableCustomGameModesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgJoinableCustomLobbiesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgJoinableCustomLobbiesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgJoinableCustomLobbiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgJoinableCustomLobbiesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgJoinableCustomLobbiesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgJoinableCustomLobbiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing* Arena::CreateMaybeMessage< ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgQuickJoinCustomLobby* Arena::CreateMaybeMessage< ::proto::dota::CMsgQuickJoinCustomLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgQuickJoinCustomLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgQuickJoinCustomLobbyResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgQuickJoinCustomLobbyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgQuickJoinCustomLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgBotGameCreate* Arena::CreateMaybeMessage< ::proto::dota::CMsgBotGameCreate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgBotGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgCustomGameCreate* Arena::CreateMaybeMessage< ::proto::dota::CMsgCustomGameCreate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgCustomGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgEventGameCreate* Arena::CreateMaybeMessage< ::proto::dota::CMsgEventGameCreate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgEventGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPartyMemberSetCoach* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPartyMemberSetCoach >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPartyMemberSetCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASetGroupLeader* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASetGroupLeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASetGroupLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTACancelGroupInvites* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTACancelGroupInvites >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTACancelGroupInvites >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASetGroupOpenStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASetGroupOpenStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASetGroupOpenStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAGroupMergeInvite* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAGroupMergeInvite >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAGroupMergeInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAGroupMergeResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAGroupMergeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAGroupMergeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAGroupMergeReply* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAGroupMergeReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAGroupMergeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectatorLobbyGameDetails_Team* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectatorLobbyGameDetails_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectatorLobbyGameDetails_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectatorLobbyGameDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectatorLobbyGameDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectatorLobbyGameDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSetSpectatorLobbyDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgSetSpectatorLobbyDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSetSpectatorLobbyDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgCreateSpectatorLobby* Arena::CreateMaybeMessage< ::proto::dota::CMsgCreateSpectatorLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgCreateSpectatorLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectatorLobbyList* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectatorLobbyList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectatorLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectatorLobbyListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectatorLobbyListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectatorLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCRequestSteamDatagramTicket* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCRequestSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCRequestSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCRequestSteamDatagramTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientSteamDatagramTicket* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientRequestLaneSelection* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientRequestLaneSelection >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientRequestLaneSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientRequestLaneSelectionResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientRequestLaneSelectionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientRequestLaneSelectionResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
