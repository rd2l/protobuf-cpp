// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#include "dota_gcmessages_client_fantasy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
namespace proto {
namespace dota {
class CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPlayerInfo_Results> _instance;
} _CMsgDOTAPlayerInfo_Results_default_instance_;
class CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPlayerInfo_AuditEntry> _instance;
} _CMsgDOTAPlayerInfo_AuditEntry_default_instance_;
class CMsgDOTAPlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPlayerInfo> _instance;
} _CMsgDOTAPlayerInfo_default_instance_;
class CMsgDOTAPlayerInfoListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPlayerInfoList> _instance;
} _CMsgDOTAPlayerInfoList_default_instance_;
class CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTADPCProfileInfo_PredictionInfo> _instance;
} _CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_;
class CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTADPCProfileInfo_FantasyInfo> _instance;
} _CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_;
class CMsgDOTADPCProfileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTADPCProfileInfo> _instance;
} _CMsgDOTADPCProfileInfo_default_instance_;
class CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaderboards_RegionLeaderboard> _instance;
} _CMsgDOTALeaderboards_RegionLeaderboard_default_instance_;
class CMsgDOTALeaderboardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaderboards> _instance;
} _CMsgDOTALeaderboards_default_instance_;
class CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateFantasyLeagueRequest> _instance;
} _CMsgDOTACreateFantasyLeagueRequest_default_instance_;
class CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateFantasyLeagueResponse> _instance;
} _CMsgDOTACreateFantasyLeagueResponse_default_instance_;
class CMsgFantasyLeagueScoringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFantasyLeagueScoring> _instance;
} _CMsgFantasyLeagueScoring_default_instance_;
class CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfo_OwnerInfo> _instance;
} _CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_;
class CMsgDOTAFantasyLeagueInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfo> _instance;
} _CMsgDOTAFantasyLeagueInfo_default_instance_;
class CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInfoRequest> _instance;
} _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInfoResponse> _instance;
} _CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueFindRequest> _instance;
} _CMsgDOTAFantasyLeagueFindRequest_default_instance_;
class CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueFindResponse> _instance;
} _CMsgDOTAFantasyLeagueFindResponse_default_instance_;
class CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfoRequest> _instance;
} _CMsgDOTAFantasyLeagueInfoRequest_default_instance_;
class CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfoResponse> _instance;
} _CMsgDOTAFantasyLeagueInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsRequest> _instance;
} _CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup> _instance;
} _CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups> _instance;
} _CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsResponse> _instance;
} _CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_;
class CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditFantasyTeamRequest> _instance;
} _CMsgDOTAEditFantasyTeamRequest_default_instance_;
class CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditFantasyTeamResponse> _instance;
} _CMsgDOTAEditFantasyTeamResponse_default_instance_;
class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID> _instance;
} _CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_;
class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID> _instance;
} _CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_;
class CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfoResponse> _instance;
} _CMsgDOTAFantasyTeamInfoResponse_default_instance_;
class CMsgDOTAFantasyTeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfo> _instance;
} _CMsgDOTAFantasyTeamInfo_default_instance_;
class CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamScoreRequest> _instance;
} _CMsgDOTAFantasyTeamScoreRequest_default_instance_;
class CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore> _instance;
} _CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_;
class CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamScoreResponse> _instance;
} _CMsgDOTAFantasyTeamScoreResponse_default_instance_;
class CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamStandingsRequest> _instance;
} _CMsgDOTAFantasyTeamStandingsRequest_default_instance_;
class CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore> _instance;
} _CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_;
class CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamStandingsResponse> _instance;
} _CMsgDOTAFantasyTeamStandingsResponse_default_instance_;
class CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreRequest> _instance;
} _CMsgDOTAFantasyPlayerScoreRequest_default_instance_;
class CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreResponse> _instance;
} _CMsgDOTAFantasyPlayerScoreResponse_default_instance_;
class CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStandingsRequest> _instance;
} _CMsgDOTAFantasyPlayerStandingsRequest_default_instance_;
class CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore> _instance;
} _CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_;
class CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStandingsResponse> _instance;
} _CMsgDOTAFantasyPlayerStandingsResponse_default_instance_;
class CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueCreateRequest> _instance;
} _CMsgDOTAFantasyLeagueCreateRequest_default_instance_;
class CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueCreateResponse> _instance;
} _CMsgDOTAFantasyLeagueCreateResponse_default_instance_;
class CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamCreateRequest> _instance;
} _CMsgDOTAFantasyTeamCreateRequest_default_instance_;
class CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamCreateResponse> _instance;
} _CMsgDOTAFantasyTeamCreateResponse_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange> _instance;
} _CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInvitesRequest> _instance;
} _CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInvitesResponse> _instance;
} _CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_;
class CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftStatusRequest> _instance;
} _CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_;
class CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftStatus> _instance;
} _CMsgDOTAFantasyLeagueDraftStatus_default_instance_;
class CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftPlayerRequest> _instance;
} _CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_;
class CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftPlayerResponse> _instance;
} _CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterSwapRequest> _instance;
} _CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterSwapResponse> _instance;
} _CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterAddDropRequest> _instance;
} _CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterAddDropResponse> _instance;
} _CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_;
class CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradesRequest> _instance;
} _CMsgDOTAFantasyTeamTradesRequest_default_instance_;
class CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradesResponse_Trade> _instance;
} _CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_;
class CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradesResponse> _instance;
} _CMsgDOTAFantasyTeamTradesResponse_default_instance_;
class CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradeCancelRequest> _instance;
} _CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_;
class CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradeCancelResponse> _instance;
} _CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterRequest> _instance;
} _CMsgDOTAFantasyTeamRosterRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterResponse> _instance;
} _CMsgDOTAFantasyTeamRosterResponse_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsRequest> _instance;
} _CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator> _instance;
} _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats> _instance;
} _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsResponse> _instance;
} _CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_;
class CMsgDOTAFantasyMessageAddDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessageAdd> _instance;
} _CMsgDOTAFantasyMessageAdd_default_instance_;
class CMsgDOTAFantasyMessagesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessagesRequest> _instance;
} _CMsgDOTAFantasyMessagesRequest_default_instance_;
class CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessagesResponse_Message> _instance;
} _CMsgDOTAFantasyMessagesResponse_Message_default_instance_;
class CMsgDOTAFantasyMessagesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessagesResponse> _instance;
} _CMsgDOTAFantasyMessagesResponse_default_instance_;
class CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyRemoveOwner> _instance;
} _CMsgDOTAFantasyRemoveOwner_default_instance_;
class CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyRemoveOwnerResponse> _instance;
} _CMsgDOTAFantasyRemoveOwnerResponse_default_instance_;
class CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyScheduledMatchesRequest> _instance;
} _CMsgDOTAFantasyScheduledMatchesRequest_default_instance_;
class CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays> _instance;
} _CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_;
class CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyScheduledMatchesResponse> _instance;
} _CMsgDOTAFantasyScheduledMatchesResponse_default_instance_;
class CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeaveLeagueRequest> _instance;
} _CMsgDOTAFantasyLeaveLeagueRequest_default_instance_;
class CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeaveLeagueResponse> _instance;
} _CMsgDOTAFantasyLeaveLeagueResponse_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreDetailsRequest> _instance;
} _CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData> _instance;
} _CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreDetailsResponse> _instance;
} _CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_;
class CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportVoteTeamGuess> _instance;
} _CMsgDOTAPassportVoteTeamGuess_default_instance_;
class CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportVoteGenericSelection> _instance;
} _CMsgDOTAPassportVoteGenericSelection_default_instance_;
class CMsgDOTAPassportStampedPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportStampedPlayer> _instance;
} _CMsgDOTAPassportStampedPlayer_default_instance_;
class CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportPlayerCardChallenge> _instance;
} _CMsgDOTAPassportPlayerCardChallenge_default_instance_;
class CMsgDOTAPassportVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportVote> _instance;
} _CMsgDOTAPassportVote_default_instance_;
class CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCGetPlayerCardRosterRequest> _instance;
} _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCGetPlayerCardRosterResponse> _instance;
} _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
class CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCSetPlayerCardRosterRequest> _instance;
} _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCSetPlayerCardRosterResponse> _instance;
} _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;
class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo> _instance;
} _CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_;
class CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyDPCLeagueStatus> _instance;
} _CMsgDOTAFantasyDPCLeagueStatus_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPlayerInfo_Results_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPlayerInfo_Results();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPlayerInfo_Results::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPlayerInfo_AuditEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPlayerInfo_AuditEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPlayerInfo_AuditEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPlayerInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPlayerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAPlayerInfoList_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPlayerInfoList_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPlayerInfoList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPlayerInfoList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAPlayerInfoList_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAPlayerInfoList_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTADPCProfileInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTADPCProfileInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTADPCProfileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTADPCProfileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgDOTADPCProfileInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgDOTADPCProfileInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeaderboards_RegionLeaderboard_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTALeaderboards_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeaderboards_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeaderboards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeaderboards::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeaderboards_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeaderboards_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTACreateFantasyLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTACreateFantasyLeagueRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTACreateFantasyLeagueRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTACreateFantasyLeagueRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACreateFantasyLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTACreateFantasyLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTACreateFantasyLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTACreateFantasyLeagueResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTACreateFantasyLeagueResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTACreateFantasyLeagueResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACreateFantasyLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTACreateFantasyLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgFantasyLeagueScoring_default_instance_;
    new (ptr) ::proto::dota::CMsgFantasyLeagueScoring();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgFantasyLeagueScoring::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLeagueEditInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyLeagueEditInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyLeagueEditInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLeagueEditInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueEditInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueEditInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueFindRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueFindRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueFindRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueFindRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueFindRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueFindRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueFindResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueFindResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueFindResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueFindResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueFindResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueFindResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueInfoRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueInfoResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueMatchupsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueMatchupsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueMatchupsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLeagueMatchupsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyLeagueMatchupsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAEditFantasyTeamRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAEditFantasyTeamRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAEditFantasyTeamRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAEditFantasyTeamRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAEditFantasyTeamRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAEditFantasyTeamRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAEditFantasyTeamResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAEditFantasyTeamResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAEditFantasyTeamResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAEditFantasyTeamResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAEditFantasyTeamResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAEditFantasyTeamResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamInfoResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyTeamInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyTeamInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamScoreRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamScoreRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamScoreRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamScoreResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamScoreResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamScoreResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyTeamScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyTeamScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyTeamStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamStandingsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamStandingsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamStandingsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamStandingsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyTeamStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyTeamStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyPlayerScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerScoreRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerScoreRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerScoreRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerScoreResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerStandingsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerStandingsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyPlayerStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyPlayerStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLeagueCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueCreateRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueCreateResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamCreateRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamCreateResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueEditInvitesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyLeagueEditInvitesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLeagueEditInvitesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueEditInvitesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueEditInvitesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueDraftStatusRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueDraftStatusRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueDraftStatusRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueDraftStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueDraftStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueDraftStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueDraftStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueDraftStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueDraftStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueDraftPlayerRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueDraftPlayerRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueDraftPlayerRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeagueDraftPlayerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeagueDraftPlayerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeagueDraftPlayerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamRosterSwapRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamRosterSwapRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamRosterSwapRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamRosterSwapResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamRosterSwapResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamRosterSwapResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamRosterAddDropRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamRosterAddDropRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamRosterAddDropRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamRosterAddDropResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamRosterAddDropResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamRosterAddDropResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamTradesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamTradesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamTradesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamTradesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamTradesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamTradesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamTradesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamTradesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamTradesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamTradesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyTeamTradesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyTeamTradesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyTeamTradeCancelRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamTradeCancelRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamTradeCancelRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamTradeCancelResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamTradeCancelResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamTradeCancelResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamRosterRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamRosterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamRosterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyTeamRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyTeamRosterResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyTeamRosterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyTeamRosterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyTeamRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyTeamRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerHisoricalStatsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyPlayerHisoricalStatsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyMessageAdd_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyMessageAdd_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyMessageAdd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyMessageAdd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyMessageAdd_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyMessageAdd_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyMessagesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyMessagesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyMessagesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyMessagesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyMessagesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyMessagesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyMessagesResponse_Message_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyMessagesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyMessagesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyMessagesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyMessagesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyMessagesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyMessagesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyRemoveOwner_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyRemoveOwner_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyRemoveOwner();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyRemoveOwner::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyRemoveOwner_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyRemoveOwner_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyRemoveOwnerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyRemoveOwnerResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyRemoveOwnerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyRemoveOwnerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyScheduledMatchesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyScheduledMatchesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyScheduledMatchesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyScheduledMatchesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyScheduledMatchesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyScheduledMatchesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyScheduledMatchesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyScheduledMatchesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAFantasyLeaveLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeaveLeagueRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeaveLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeaveLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyLeaveLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyLeaveLeagueResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyLeaveLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyLeaveLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerScoreDetailsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerScoreDetailsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerScoreDetailsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyPlayerScoreDetailsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyPlayerScoreDetailsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPassportVoteTeamGuess_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPassportVoteTeamGuess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPassportVoteTeamGuess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPassportVoteGenericSelection_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPassportVoteGenericSelection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPassportVoteGenericSelection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPassportStampedPlayer_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPassportStampedPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPassportStampedPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPassportPlayerCardChallenge_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPassportPlayerCardChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPassportPlayerCardChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAPassportVote_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAPassportVote_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAPassportVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAPassportVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAPassportVote_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTAPassportVote_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,
      &scc_info_CMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

static void InitDefaultsCMsgClientToGCGetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCGetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCGetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgClientToGCGetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCGetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCGetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgClientToGCSetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCSetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCSetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgClientToGCSetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCSetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCSetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {}};

static void InitDefaultsCMsgDOTAFantasyDPCLeagueStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAFantasyDPCLeagueStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAFantasyDPCLeagueStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAFantasyDPCLeagueStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto}, {
      &scc_info_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base,}};

void InitDefaults_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPlayerInfoList_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTADPCProfileInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeaderboards_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTACreateFantasyLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTACreateFantasyLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueEditInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueEditInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueFindRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueFindResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueMatchupsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAEditFantasyTeamRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAEditFantasyTeamResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueEditInvitesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueDraftStatusRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueDraftStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueDraftPlayerRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeagueDraftPlayerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamRosterSwapRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamRosterSwapResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamRosterAddDropRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamRosterAddDropResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamTradesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamTradesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamTradeCancelRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamTradeCancelResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyTeamRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerHisoricalStatsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyMessageAdd_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyMessagesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyMessagesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyRemoveOwner_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyRemoveOwnerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyScheduledMatchesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyScheduledMatchesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeaveLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyLeaveLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerScoreDetailsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAPassportVote_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCGetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCGetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCSetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCSetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAFantasyDPCLeagueStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[92];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[29];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_Results, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_Results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_Results, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_Results, placement_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_Results, earnings_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry, team_url_logo_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, fantasy_role_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, sponsor_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, is_locked_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, is_pro_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, real_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, birthdate_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, total_earnings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, results_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, team_url_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfo, audit_entries_),
  7,
  0,
  1,
  8,
  9,
  2,
  3,
  4,
  10,
  11,
  5,
  12,
  13,
  ~0u,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfoList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPlayerInfoList, player_infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo, percent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo, shard_winnings_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo, top_90_finishes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo, top_75_finishes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo, top_50_finishes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo, shard_winnings_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo, player_info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo, prediction_info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo, fantasy_info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTADPCProfileInfo, disabled_notifications_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard, division_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard, account_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaderboards, leaderboards_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueRequest, league_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueRequest, league_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueRequest, selection_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueRequest, team_count_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTACreateFantasyLeagueResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, gpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, xppm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, stuns_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, multiplier_premium_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFantasyLeagueScoring, multiplier_professional_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo, left_league_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo, player_account_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, commissioner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, fantasy_league_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, selection_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, team_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, scoring_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, draft_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, draft_pick_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, season_start_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, season_length_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, veto_votes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, acquisitions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, slot_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, slot_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, slot_3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, slot_4_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, slot_5_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, bench_slots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, owner_info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, time_zone_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, season_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfo, password_),
  3,
  4,
  0,
  5,
  6,
  7,
  2,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  ~0u,
  20,
  21,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest, edit_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindRequest, password_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindResponse, fantasy_league_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueFindResponse, commissioner_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfoRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueInfoResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_2_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, matchup_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, end_time_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse, weekly_matchups_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamRequest, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamRequest, team_logo_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAEditFantasyTeamResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, owner_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfoResponse, results_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, fantasy_team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, losses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamInfo, current_roster_),
  1,
  2,
  3,
  0,
  5,
  4,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, fantasy_team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreRequest, include_bench_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse, fantasy_team_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamScoreResponse, fantasy_player_score_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, filter_last_match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest, filter_in_hall_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_against_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, losses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, streak_),
  2,
  3,
  5,
  4,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse, team_scores_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest, filter_last_match_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse, score_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, role_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, filter_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, filter_end_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, filter_match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest, filter_last_match_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, score_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse, role_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse, player_scores_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, season_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, fantasy_league_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, password_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest, ticket_item_id_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse, fantasy_league_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, password_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateRequest, ticket_item_id_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamCreateResponse, fantasy_team_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, invited_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest, password_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest, invite_change_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, draft_order_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, current_pick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, pending_resume_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus, available_players_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest, player_account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, slot_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest, slot_2_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest, add_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest, drop_account_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade, status_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradesResponse, trades_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest, team_index_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest, owner_account_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest, team_index_2_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterRequest, team_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterRequest, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterRequest, timestamp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterResponse, player_account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyTeamRosterResponse, player_locked_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, matches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, levels_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, deaths_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, assists_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, last_hits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, denies_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, gpm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, xppm_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, stuns_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, healing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, weeks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_premium_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_professional_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse, stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessageAdd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessageAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessageAdd, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessageAdd, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesRequest, start_message_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesRequest, end_message_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message, message_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message, message_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message, author_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message, time_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse, messages_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyMessagesResponse, num_total_messages_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwner, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwner, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwner, team_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest, fantasy_league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, team_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, league_ids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse, scheduled_match_days_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest, fantasy_team_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest, end_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_num_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, owned_by_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, benched_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse, data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteTeamGuess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteTeamGuess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteTeamGuess, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteTeamGuess, winner_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteTeamGuess, runnerup_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteGenericSelection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteGenericSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteGenericSelection, selection_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVoteGenericSelection, selection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportStampedPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportStampedPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportStampedPlayer, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportStampedPlayer, stamp_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportPlayerCardChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportPlayerCardChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportPlayerCardChallenge, challenge_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVote, team_votes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVote, generic_selections_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVote, stamped_players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAPassportVote, player_card_challenges_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest, timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, finalized_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse, percentile_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest, event_id_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, league_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, day_timestamps_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, is_qualifier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, phase_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, status_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus, league_infos_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::dota::CMsgDOTAPlayerInfo_Results)},
  { 11, 22, sizeof(::proto::dota::CMsgDOTAPlayerInfo_AuditEntry)},
  { 28, 49, sizeof(::proto::dota::CMsgDOTAPlayerInfo)},
  { 65, 71, sizeof(::proto::dota::CMsgDOTAPlayerInfoList)},
  { 72, 79, sizeof(::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo)},
  { 81, 90, sizeof(::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo)},
  { 94, 103, sizeof(::proto::dota::CMsgDOTADPCProfileInfo)},
  { 107, 114, sizeof(::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard)},
  { 116, 122, sizeof(::proto::dota::CMsgDOTALeaderboards)},
  { 123, 132, sizeof(::proto::dota::CMsgDOTACreateFantasyLeagueRequest)},
  { 136, 142, sizeof(::proto::dota::CMsgDOTACreateFantasyLeagueResponse)},
  { 143, 162, sizeof(::proto::dota::CMsgFantasyLeagueScoring)},
  { 176, 184, sizeof(::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo)},
  { 187, 216, sizeof(::proto::dota::CMsgDOTAFantasyLeagueInfo)},
  { 240, 247, sizeof(::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest)},
  { 249, 255, sizeof(::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse)},
  { 256, 263, sizeof(::proto::dota::CMsgDOTAFantasyLeagueFindRequest)},
  { 265, 273, sizeof(::proto::dota::CMsgDOTAFantasyLeagueFindResponse)},
  { 276, 282, sizeof(::proto::dota::CMsgDOTAFantasyLeagueInfoRequest)},
  { 283, 289, sizeof(::proto::dota::CMsgDOTAFantasyLeagueInfoResponse)},
  { 290, 296, sizeof(::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest)},
  { 297, 306, sizeof(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup)},
  { 310, 318, sizeof(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups)},
  { 321, 329, sizeof(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse)},
  { 332, 341, sizeof(::proto::dota::CMsgDOTAEditFantasyTeamRequest)},
  { 345, 351, sizeof(::proto::dota::CMsgDOTAEditFantasyTeamResponse)},
  { 352, 358, sizeof(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)},
  { 359, 365, sizeof(::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)},
  { 366, 372, sizeof(::proto::dota::CMsgDOTAFantasyTeamInfoResponse)},
  { 373, 386, sizeof(::proto::dota::CMsgDOTAFantasyTeamInfo)},
  { 394, 406, sizeof(::proto::dota::CMsgDOTAFantasyTeamScoreRequest)},
  { 413, 420, sizeof(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore)},
  { 422, 430, sizeof(::proto::dota::CMsgDOTAFantasyTeamScoreResponse)},
  { 433, 445, sizeof(::proto::dota::CMsgDOTAFantasyTeamStandingsRequest)},
  { 452, 468, sizeof(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore)},
  { 479, 486, sizeof(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse)},
  { 488, 499, sizeof(::proto::dota::CMsgDOTAFantasyPlayerScoreRequest)},
  { 505, 515, sizeof(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse)},
  { 520, 532, sizeof(::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest)},
  { 539, 547, sizeof(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore)},
  { 550, 559, sizeof(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse)},
  { 563, 574, sizeof(::proto::dota::CMsgDOTAFantasyLeagueCreateRequest)},
  { 580, 587, sizeof(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse)},
  { 589, 599, sizeof(::proto::dota::CMsgDOTAFantasyTeamCreateRequest)},
  { 604, 611, sizeof(::proto::dota::CMsgDOTAFantasyTeamCreateResponse)},
  { 613, 620, sizeof(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange)},
  { 622, 630, sizeof(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest)},
  { 633, 639, sizeof(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse)},
  { 640, 646, sizeof(::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest)},
  { 647, 659, sizeof(::proto::dota::CMsgDOTAFantasyLeagueDraftStatus)},
  { 666, 674, sizeof(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest)},
  { 677, 683, sizeof(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse)},
  { 684, 694, sizeof(::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest)},
  { 699, 705, sizeof(::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse)},
  { 706, 715, sizeof(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest)},
  { 719, 725, sizeof(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse)},
  { 726, 732, sizeof(::proto::dota::CMsgDOTAFantasyTeamTradesRequest)},
  { 733, 744, sizeof(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade)},
  { 750, 757, sizeof(::proto::dota::CMsgDOTAFantasyTeamTradesResponse)},
  { 759, 768, sizeof(::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest)},
  { 772, 778, sizeof(::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse)},
  { 779, 788, sizeof(::proto::dota::CMsgDOTAFantasyTeamRosterRequest)},
  { 792, 800, sizeof(::proto::dota::CMsgDOTAFantasyTeamRosterResponse)},
  { 803, 809, sizeof(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest)},
  { 810, 829, sizeof(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator)},
  { 843, 852, sizeof(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats)},
  { 856, 863, sizeof(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse)},
  { 865, 872, sizeof(::proto::dota::CMsgDOTAFantasyMessageAdd)},
  { 874, 882, sizeof(::proto::dota::CMsgDOTAFantasyMessagesRequest)},
  { 885, 894, sizeof(::proto::dota::CMsgDOTAFantasyMessagesResponse_Message)},
  { 898, 906, sizeof(::proto::dota::CMsgDOTAFantasyMessagesResponse)},
  { 909, 917, sizeof(::proto::dota::CMsgDOTAFantasyRemoveOwner)},
  { 920, 926, sizeof(::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse)},
  { 927, 933, sizeof(::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest)},
  { 934, 942, sizeof(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays)},
  { 945, 952, sizeof(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse)},
  { 954, 961, sizeof(::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest)},
  { 963, 969, sizeof(::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse)},
  { 970, 979, sizeof(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest)},
  { 983, 999, sizeof(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData)},
  { 1010, 1017, sizeof(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse)},
  { 1019, 1027, sizeof(::proto::dota::CMsgDOTAPassportVoteTeamGuess)},
  { 1030, 1037, sizeof(::proto::dota::CMsgDOTAPassportVoteGenericSelection)},
  { 1039, 1046, sizeof(::proto::dota::CMsgDOTAPassportStampedPlayer)},
  { 1048, 1054, sizeof(::proto::dota::CMsgDOTAPassportPlayerCardChallenge)},
  { 1055, 1064, sizeof(::proto::dota::CMsgDOTAPassportVote)},
  { 1068, 1075, sizeof(::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest)},
  { 1077, 1087, sizeof(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse)},
  { 1092, 1102, sizeof(::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest)},
  { 1107, 1113, sizeof(::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse)},
  { 1114, 1127, sizeof(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo)},
  { 1135, 1141, sizeof(::proto::dota::CMsgDOTAFantasyDPCLeagueStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPlayerInfo_Results_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPlayerInfo_AuditEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPlayerInfoList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTADPCProfileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeaderboards_RegionLeaderboard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeaderboards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTACreateFantasyLeagueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTACreateFantasyLeagueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgFantasyLeagueScoring_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueFindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueFindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAEditFantasyTeamRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAEditFantasyTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamScoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamScoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamStandingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamStandingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerScoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerScoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerStandingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerStandingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueDraftStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamTradesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamTradesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamRosterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyTeamRosterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyMessageAdd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyMessagesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyMessagesResponse_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyMessagesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyRemoveOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyRemoveOwnerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyScheduledMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyScheduledMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeaveLeagueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyLeaveLeagueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPassportVoteTeamGuess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPassportVoteGenericSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPassportStampedPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPassportPlayerCardChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAPassportVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAFantasyDPCLeagueStatus_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto, "dota_gcmessages_client_fantasy.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto, 92, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5ffantasy_2eproto[] =
  "\n$dota_gcmessages_client_fantasy.proto\022\n"
  "proto.dota\032\027dota_shared_enums.proto\"\236\005\n\022"
  "CMsgDOTAPlayerInfo\022\022\n\naccount_id\030\001 \001(\r\022\014"
  "\n\004name\030\002 \001(\t\022\024\n\014country_code\030\003 \001(\t\022G\n\014fa"
  "ntasy_role\030\004 \001(\0162\031.proto.dota.Fantasy_Ro"
  "les:\026FANTASY_ROLE_UNDEFINED\022\017\n\007team_id\030\005"
  " \001(\r\022\021\n\tteam_name\030\006 \001(\t\022\020\n\010team_tag\030\007 \001("
  "\t\022\017\n\007sponsor\030\010 \001(\t\022\021\n\tis_locked\030\t \001(\010\022\016\n"
  "\006is_pro\030\n \001(\010\022\021\n\treal_name\030\013 \001(\t\022\021\n\tbirt"
  "hdate\030\014 \001(\r\022\026\n\016total_earnings\030\r \001(\r\0227\n\007r"
  "esults\030\016 \003(\0132&.proto.dota.CMsgDOTAPlayer"
  "Info.Results\022\025\n\rteam_url_logo\030\017 \001(\t\022@\n\ra"
  "udit_entries\030\020 \003(\0132).proto.dota.CMsgDOTA"
  "PlayerInfo.AuditEntry\032A\n\007Results\022\021\n\tleag"
  "ue_id\030\001 \001(\r\022\021\n\tplacement\030\002 \001(\r\022\020\n\010earnin"
  "gs\030\003 \001(\r\032\211\001\n\nAuditEntry\022\027\n\017start_timesta"
  "mp\030\001 \001(\r\022\025\n\rend_timestamp\030\002 \001(\r\022\017\n\007team_"
  "id\030\003 \001(\r\022\021\n\tteam_name\030\004 \001(\t\022\020\n\010team_tag\030"
  "\005 \001(\t\022\025\n\rteam_url_logo\030\006 \001(\t\"N\n\026CMsgDOTA"
  "PlayerInfoList\0224\n\014player_infos\030\001 \003(\0132\036.p"
  "roto.dota.CMsgDOTAPlayerInfo\"\254\003\n\026CMsgDOT"
  "ADPCProfileInfo\0223\n\013player_info\030\001 \001(\0132\036.p"
  "roto.dota.CMsgDOTAPlayerInfo\022J\n\017predicti"
  "on_info\030\002 \001(\01321.proto.dota.CMsgDOTADPCPr"
  "ofileInfo.PredictionInfo\022D\n\014fantasy_info"
  "\030\003 \001(\0132..proto.dota.CMsgDOTADPCProfileIn"
  "fo.FantasyInfo\022\036\n\026disabled_notifications"
  "\030\004 \003(\r\0329\n\016PredictionInfo\022\017\n\007percent\030\001 \001("
  "\r\022\026\n\016shard_winnings\030\002 \001(\r\032p\n\013FantasyInfo"
  "\022\027\n\017top_90_finishes\030\001 \001(\r\022\027\n\017top_75_fini"
  "shes\030\002 \001(\r\022\027\n\017top_50_finishes\030\003 \001(\r\022\026\n\016s"
  "hard_winnings\030\004 \001(\r\"\234\001\n\024CMsgDOTALeaderbo"
  "ards\022H\n\014leaderboards\030\002 \003(\01322.proto.dota."
  "CMsgDOTALeaderboards.RegionLeaderboard\032:"
  "\n\021RegionLeaderboard\022\020\n\010division\030\001 \001(\r\022\023\n"
  "\013account_ids\030\002 \003(\r\"\271\001\n\"CMsgDOTACreateFan"
  "tasyLeagueRequest\022\023\n\013league_name\030\001 \001(\t\022\023"
  "\n\013league_logo\030\002 \001(\004\022U\n\016selection_mode\030\003 "
  "\001(\0162\".proto.dota.Fantasy_Selection_Mode:"
  "\031FANTASY_SELECTION_INVALID\022\022\n\nteam_count"
  "\030\004 \001(\r\"\376\001\n#CMsgDOTACreateFantasyLeagueRe"
  "sponse\022P\n\006result\030\001 \001(\01627.proto.dota.CMsg"
  "DOTACreateFantasyLeagueResponse.EResult:"
  "\007SUCCESS\"\204\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERR"
  "OR_UNSPECIFIED\020\001\022\032\n\026ERROR_TOO_MANY_LEAGU"
  "ES\020\002\022\034\n\030ERROR_INVALID_TEAM_COUNT\020\003\022\033\n\027ER"
  "ROR_CREATION_DISABLED\020\004\"\237\002\n\030CMsgFantasyL"
  "eagueScoring\022\r\n\005level\030\001 \001(\002\022\r\n\005kills\030\002 \001"
  "(\002\022\016\n\006deaths\030\003 \001(\002\022\017\n\007assists\030\004 \001(\002\022\021\n\tl"
  "ast_hits\030\005 \001(\002\022\016\n\006denies\030\006 \001(\002\022\013\n\003gpm\030\007 "
  "\001(\002\022\014\n\004xppm\030\010 \001(\002\022\r\n\005stuns\030\t \001(\002\022\017\n\007heal"
  "ing\030\n \001(\002\022\023\n\013tower_kills\030\013 \001(\002\022\024\n\014roshan"
  "_kills\030\014 \001(\002\022\032\n\022multiplier_premium\030\r \001(\002"
  "\022\037\n\027multiplier_professional\030\016 \001(\002\"\357\005\n\031CM"
  "sgDOTAFantasyLeagueInfo\022\031\n\021fantasy_leagu"
  "e_id\030\001 \001(\r\022\037\n\027commissioner_account_id\030\002 "
  "\001(\r\022\033\n\023fantasy_league_name\030\003 \001(\t\022U\n\016sele"
  "ction_mode\030\004 \001(\0162\".proto.dota.Fantasy_Se"
  "lection_Mode:\031FANTASY_SELECTION_INVALID\022"
  "\022\n\nteam_count\030\005 \001(\r\022\014\n\004logo\030\006 \001(\004\0225\n\007sco"
  "ring\030\007 \001(\0132$.proto.dota.CMsgFantasyLeagu"
  "eScoring\022\022\n\ndraft_time\030\014 \001(\r\022\027\n\017draft_pi"
  "ck_time\030\r \001(\r\022\024\n\014season_start\030\017 \001(\r\022\025\n\rs"
  "eason_length\030\020 \001(\r\022\022\n\nveto_votes\030\021 \001(\r\022\024"
  "\n\014acquisitions\030\022 \001(\r\022\016\n\006slot_1\030\023 \001(\r\022\016\n\006"
  "slot_2\030\024 \001(\r\022\016\n\006slot_3\030\025 \001(\r\022\016\n\006slot_4\030\026"
  " \001(\r\022\016\n\006slot_5\030\027 \001(\r\022\023\n\013bench_slots\030\030 \001("
  "\r\022C\n\nowner_info\030\031 \003(\0132/.proto.dota.CMsgD"
  "OTAFantasyLeagueInfo.OwnerInfo\022\017\n\007player"
  "s\030\032 \003(\r\022\021\n\ttime_zone\030\033 \001(\r\022\016\n\006season\030\034 \001"
  "(\r\022\020\n\010password\030\035 \001(\t\032U\n\tOwnerInfo\022\030\n\020own"
  "er_account_id\030\001 \001(\r\022\023\n\013left_league\030\002 \001(\010"
  "\022\031\n\021player_account_id\030\003 \003(\r\"{\n$CMsgDOTAF"
  "antasyLeagueEditInfoRequest\022\031\n\021fantasy_l"
  "eague_id\030\001 \001(\r\0228\n\tedit_info\030\002 \001(\0132%.prot"
  "o.dota.CMsgDOTAFantasyLeagueInfo\"\303\001\n%CMs"
  "gDOTAFantasyLeagueEditInfoResponse\022R\n\006re"
  "sult\030\001 \001(\01629.proto.dota.CMsgDOTAFantasyL"
  "eagueEditInfoResponse.EResult:\007SUCCESS\"F"
  "\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIF"
  "IED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"O\n CMsgDO"
  "TAFantasyLeagueFindRequest\022\031\n\021fantasy_le"
  "ague_id\030\001 \001(\r\022\020\n\010password\030\002 \001(\t\"\322\002\n!CMsg"
  "DOTAFantasyLeagueFindResponse\022N\n\006result\030"
  "\001 \001(\01625.proto.dota.CMsgDOTAFantasyLeague"
  "FindResponse.EResult:\007SUCCESS\022\033\n\023fantasy"
  "_league_name\030\002 \001(\t\022\031\n\021commissioner_name\030"
  "\003 \001(\t\"\244\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\032\n\026ERROR_"
  "LEAGUE_NOT_FOUND\020\001\022\026\n\022ERROR_BAD_PASSWORD"
  "\020\002\022\025\n\021ERROR_UNSPECIFIED\020\003\022\016\n\nERROR_FULL\020"
  "\004\022\030\n\024ERROR_ALREADY_MEMBER\020\005\022\027\n\023ERROR_LEA"
  "GUE_LOCKED\020\006\"=\n CMsgDOTAFantasyLeagueInf"
  "oRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\"\273\001\n!"
  "CMsgDOTAFantasyLeagueInfoResponse\022N\n\006res"
  "ult\030\001 \001(\01625.proto.dota.CMsgDOTAFantasyLe"
  "agueInfoResponse.EResult:\007SUCCESS\"F\n\007ERe"
  "sult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001"
  "\022\027\n\023ERROR_BAD_LEAGUE_ID\020\002\"A\n$CMsgDOTAFan"
  "tasyLeagueMatchupsRequest\022\031\n\021fantasy_lea"
  "gue_id\030\001 \001(\r\"\274\004\n%CMsgDOTAFantasyLeagueMa"
  "tchupsResponse\022R\n\006result\030\001 \001(\01629.proto.d"
  "ota.CMsgDOTAFantasyLeagueMatchupsRespons"
  "e.EResult:\007SUCCESS\022\031\n\021fantasy_league_id\030"
  "\002 \001(\r\022Y\n\017weekly_matchups\030\003 \003(\0132@.proto.d"
  "ota.CMsgDOTAFantasyLeagueMatchupsRespons"
  "e.WeeklyMatchups\032c\n\007Matchup\022\032\n\022owner_acc"
  "ount_id_1\030\001 \001(\r\022\032\n\022owner_account_id_2\030\002 "
  "\001(\r\022\017\n\007score_1\030\003 \001(\002\022\017\n\007score_2\030\004 \001(\002\032\202\001"
  "\n\016WeeklyMatchups\022J\n\007matchup\030\001 \003(\01329.prot"
  "o.dota.CMsgDOTAFantasyLeagueMatchupsResp"
  "onse.Matchup\022\022\n\nstart_time\030\002 \001(\r\022\020\n\010end_"
  "time\030\003 \001(\r\"_\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ER"
  "ROR_UNSPECIFIED\020\001\022\027\n\023ERROR_BAD_LEAGUE_ID"
  "\020\002\022\027\n\023ERROR_NO_PERMISSION\020\003\"u\n\036CMsgDOTAE"
  "ditFantasyTeamRequest\022\031\n\021fantasy_league_"
  "id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022\021\n\tteam_nam"
  "e\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\004\"\363\001\n\037CMsgDOTAE"
  "ditFantasyTeamResponse\022L\n\006result\030\001 \001(\01623"
  ".proto.dota.CMsgDOTAEditFantasyTeamRespo"
  "nse.EResult:\007SUCCESS\"\201\001\n\007EResult\022\013\n\007SUCC"
  "ESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERROR_IN"
  "VALID_TEAM_INFO\020\002\022\034\n\030ERROR_NAME_ALREADY_"
  "TAKEN\020\003\022\027\n\023ERROR_NO_PERMISSION\020\004\"L\n/CMsg"
  "DOTAFantasyTeamInfoRequestByFantasyLeagu"
  "eID\022\031\n\021fantasy_league_id\030\001 \001(\r\"J\n.CMsgDO"
  "TAFantasyTeamInfoRequestByOwnerAccountID"
  "\022\030\n\020owner_account_id\030\001 \001(\r\"W\n\037CMsgDOTAFa"
  "ntasyTeamInfoResponse\0224\n\007results\030\001 \003(\0132#"
  ".proto.dota.CMsgDOTAFantasyTeamInfo\"\306\001\n\027"
  "CMsgDOTAFantasyTeamInfo\022\031\n\021fantasy_leagu"
  "e_id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 \001(\r\022\032\n\022"
  "fantasy_team_index\030\003 \001(\r\022\021\n\tteam_name\030\004 "
  "\001(\t\022\021\n\tteam_logo\030\005 \001(\004\022\014\n\004wins\030\006 \001(\r\022\016\n\006"
  "losses\030\007 \001(\r\022\026\n\016current_roster\030\010 \003(\r\"\326\001\n"
  "\037CMsgDOTAFantasyTeamScoreRequest\022\031\n\021fant"
  "asy_league_id\030\001 \001(\r\022\030\n\020owner_account_id\030"
  "\002 \001(\r\022\032\n\022fantasy_team_index\030\003 \001(\r\022\027\n\017fil"
  "ter_match_id\030\004 \001(\004\022\031\n\021filter_start_time\030"
  "\005 \001(\r\022\027\n\017filter_end_time\030\006 \001(\r\022\025\n\rinclud"
  "e_bench\030\007 \001(\010\"\206\003\n CMsgDOTAFantasyTeamSco"
  "reResponse\022M\n\006result\030\001 \001(\01624.proto.dota."
  "CMsgDOTAFantasyTeamScoreResponse.EResult"
  ":\007SUCCESS\022\032\n\022fantasy_team_score\030\002 \001(\002\022Z\n"
  "\024fantasy_player_score\030\003 \003(\0132<.proto.dota"
  ".CMsgDOTAFantasyTeamScoreResponse.CMsgPl"
  "ayerScore\0324\n\017CMsgPlayerScore\022\022\n\naccount_"
  "id\030\001 \001(\r\022\r\n\005score\030\002 \001(\002\"e\n\007EResult\022\013\n\007SU"
  "CCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_"
  "NO_PERMISSION\020\002\022\035\n\031ERROR_OWNER_NOT_IN_LE"
  "AGUE\020\003\"\317\001\n#CMsgDOTAFantasyTeamStandingsR"
  "equest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\r\n\005cou"
  "nt\030\002 \001(\r\022\031\n\021filter_start_time\030\003 \001(\r\022\027\n\017f"
  "ilter_end_time\030\004 \001(\r\022\027\n\017filter_match_id\030"
  "\005 \001(\004\022\031\n\021filter_last_match\030\006 \001(\010\022\026\n\016filt"
  "er_in_hall\030\007 \001(\010\"\227\004\n$CMsgDOTAFantasyTeam"
  "StandingsResponse\022Q\n\006result\030\001 \001(\01628.prot"
  "o.dota.CMsgDOTAFantasyTeamStandingsRespo"
  "nse.EResult:\007SUCCESS\022S\n\013team_scores\030\003 \003("
  "\0132>.proto.dota.CMsgDOTAFantasyTeamStandi"
  "ngsResponse.CMsgTeamScore\032\376\001\n\rCMsgTeamSc"
  "ore\022\031\n\021fantasy_league_id\030\001 \001(\r\022\030\n\020owner_"
  "account_id\030\002 \001(\r\022\032\n\022fantasy_team_index\030\003"
  " \001(\r\022\031\n\021fantasy_team_logo\030\004 \001(\004\022\022\n\nowner"
  "_name\030\005 \001(\t\022\031\n\021fantasy_team_name\030\006 \001(\t\022\r"
  "\n\005score\030\007 \001(\002\022\025\n\rscore_against\030\010 \001(\002\022\014\n\004"
  "wins\030\t \001(\r\022\016\n\006losses\030\n \001(\r\022\016\n\006streak\030\013 \001"
  "(\005\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSP"
  "ECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\301\001\n!C"
  "MsgDOTAFantasyPlayerScoreRequest\022\031\n\021fant"
  "asy_league_id\030\001 \001(\r\022\031\n\021player_account_id"
  "\030\002 \001(\r\022\031\n\021filter_start_time\030\003 \001(\r\022\027\n\017fil"
  "ter_end_time\030\004 \001(\r\022\027\n\017filter_match_id\030\005 "
  "\001(\004\022\031\n\021filter_last_match\030\006 \001(\010\"\227\002\n\"CMsgD"
  "OTAFantasyPlayerScoreResponse\022O\n\006result\030"
  "\001 \001(\01626.proto.dota.CMsgDOTAFantasyPlayer"
  "ScoreResponse.EResult:\007SUCCESS\022\031\n\021fantas"
  "y_league_id\030\002 \001(\r\022\031\n\021player_account_id\030\003"
  " \001(\r\022\023\n\013player_name\030\004 \001(\t\022\r\n\005score\030\005 \001(\002"
  "\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPEC"
  "IFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\307\001\n%CMs"
  "gDOTAFantasyPlayerStandingsRequest\022\031\n\021fa"
  "ntasy_league_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\014\n\004"
  "role\030\003 \001(\r\022\031\n\021filter_start_time\030\004 \001(\r\022\027\n"
  "\017filter_end_time\030\005 \001(\r\022\027\n\017filter_match_i"
  "d\030\006 \001(\004\022\031\n\021filter_last_match\030\007 \001(\010\"\233\003\n&C"
  "MsgDOTAFantasyPlayerStandingsResponse\022S\n"
  "\006result\030\001 \001(\0162:.proto.dota.CMsgDOTAFanta"
  "syPlayerStandingsResponse.EResult:\007SUCCE"
  "SS\022\031\n\021fantasy_league_id\030\002 \001(\r\022\014\n\004role\030\003 "
  "\001(\r\022Y\n\rplayer_scores\030\004 \003(\0132B.proto.dota."
  "CMsgDOTAFantasyPlayerStandingsResponse.C"
  "MsgPlayerScore\032P\n\017CMsgPlayerScore\022\031\n\021pla"
  "yer_account_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001("
  "\t\022\r\n\005score\030\003 \001(\002\"F\n\007EResult\022\013\n\007SUCCESS\020\000"
  "\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERM"
  "ISSION\020\002\"\237\001\n\"CMsgDOTAFantasyLeagueCreate"
  "Request\022\021\n\tseason_id\030\001 \001(\r\022\033\n\023fantasy_le"
  "ague_name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\021\n\ttea"
  "m_name\030\004 \001(\t\022\014\n\004logo\030\005 \001(\004\022\026\n\016ticket_ite"
  "m_id\030\006 \001(\004\"\333\002\n#CMsgDOTAFantasyLeagueCrea"
  "teResponse\022P\n\006result\030\001 \001(\01627.proto.dota."
  "CMsgDOTAFantasyLeagueCreateResponse.ERes"
  "ult:\007SUCCESS\022\031\n\021fantasy_league_id\030\002 \001(\r\""
  "\306\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\027\n\023ERROR_NO_PER"
  "MISSION\020\001\022\027\n\023ERROR_BAD_SEASON_ID\020\002\022\031\n\025ER"
  "ROR_BAD_LEAGUE_NAME\020\003\022\027\n\023ERROR_BAD_TEAM_"
  "NAME\020\004\022\025\n\021ERROR_UNSPECIFIED\020\005\022\034\n\030ERROR_F"
  "AILED_LOGO_UPLOAD\020\006\022\023\n\017ERROR_NO_TICKET\020\007"
  "\"\210\001\n CMsgDOTAFantasyTeamCreateRequest\022\031\n"
  "\021fantasy_league_id\030\001 \001(\r\022\020\n\010password\030\002 \001"
  "(\t\022\021\n\tteam_name\030\003 \001(\t\022\014\n\004logo\030\004 \001(\004\022\026\n\016t"
  "icket_item_id\030\005 \001(\004\"\233\003\n!CMsgDOTAFantasyT"
  "eamCreateResponse\022N\n\006result\030\001 \001(\01625.prot"
  "o.dota.CMsgDOTAFantasyTeamCreateResponse"
  ".EResult:\007SUCCESS\022\032\n\022fantasy_team_index\030"
  "\002 \001(\r\"\211\002\n\007EResult\022\013\n\007SUCCESS\020\000\022\027\n\023ERROR_"
  "NO_PERMISSION\020\001\022\034\n\030ERROR_FAILED_LOGO_UPL"
  "OAD\020\002\022\037\n\033ERROR_BAD_FANTASY_LEAGUE_ID\020\003\022\022"
  "\n\016ERROR_BAD_NAME\020\004\022\016\n\nERROR_FULL\020\005\022\030\n\024ER"
  "ROR_ALREADY_MEMBER\020\006\022\026\n\022ERROR_BAD_PASSWO"
  "RD\020\007\022\025\n\021ERROR_UNSPECIFIED\020\010\022\023\n\017ERROR_NO_"
  "TICKET\020\t\022\027\n\023ERROR_LEAGUE_LOCKED\020\n\"\344\001\n\'CM"
  "sgDOTAFantasyLeagueEditInvitesRequest\022\031\n"
  "\021fantasy_league_id\030\001 \001(\r\022\020\n\010password\030\002 \001"
  "(\t\022W\n\rinvite_change\030\003 \003(\0132@.proto.dota.C"
  "MsgDOTAFantasyLeagueEditInvitesRequest.I"
  "nviteChange\0323\n\014InviteChange\022\022\n\naccount_i"
  "d\030\001 \001(\r\022\017\n\007invited\030\002 \001(\010\"\260\001\n(CMsgDOTAFan"
  "tasyLeagueEditInvitesResponse\022U\n\006result\030"
  "\001 \001(\0162<.proto.dota.CMsgDOTAFantasyLeague"
  "EditInvitesResponse.EResult:\007SUCCESS\"-\n\007"
  "EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIE"
  "D\020\001\"D\n\'CMsgDOTAFantasyLeagueDraftStatusR"
  "equest\022\031\n\021fantasy_league_id\030\001 \001(\r\"\306\001\n CM"
  "sgDOTAFantasyLeagueDraftStatus\022\031\n\021fantas"
  "y_league_id\030\001 \001(\r\022\023\n\013draft_order\030\002 \003(\r\022\024"
  "\n\014current_pick\030\003 \001(\r\022\026\n\016time_remaining\030\004"
  " \001(\r\022\026\n\016pending_resume\030\005 \001(\010\022\021\n\tcomplete"
  "d\030\006 \001(\010\022\031\n\021available_players\030\007 \003(\r\"s\n\'CM"
  "sgDOTAFantasyLeagueDraftPlayerRequest\022\031\n"
  "\021fantasy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002"
  " \001(\r\022\031\n\021player_account_id\030\003 \001(\r\"\215\003\n(CMsg"
  "DOTAFantasyLeagueDraftPlayerResponse\022U\n\006"
  "result\030\001 \001(\0162<.proto.dota.CMsgDOTAFantas"
  "yLeagueDraftPlayerResponse.EResult:\007SUCC"
  "ESS\"\211\002\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UN"
  "SPECIFIED\020\001\022 \n\034ERROR_INVALID_FANTASY_LEA"
  "GUE\020\002\022%\n!ERROR_FANTASY_LEAGUE_NOT_DRAFTI"
  "NG\020\003\022\035\n\031ERROR_OWNER_NOT_IN_LEAGUE\020\004\022\031\n\025E"
  "RROR_NOT_OWNERS_TURN\020\005\022\030\n\024ERROR_PLAYER_I"
  "NVALID\020\006\022\034\n\030ERROR_PLAYER_UNAVAILABLE\020\007\022\037"
  "\n\033ERROR_PLAYER_NO_VALID_SLOTS\020\010\"\210\001\n$CMsg"
  "DOTAFantasyTeamRosterSwapRequest\022\031\n\021fant"
  "asy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022"
  "\021\n\ttimestamp\030\003 \001(\r\022\016\n\006slot_1\030\004 \001(\r\022\016\n\006sl"
  "ot_2\030\005 \001(\r\"\371\001\n%CMsgDOTAFantasyTeamRoster"
  "SwapResponse\022R\n\006result\030\001 \001(\01629.proto.dot"
  "a.CMsgDOTAFantasyTeamRosterSwapResponse."
  "EResult:\007SUCCESS\"|\n\007EResult\022\013\n\007SUCCESS\020\000"
  "\022\025\n\021ERROR_UNSPECIFIED\020\001\022\035\n\031ERROR_OWNER_N"
  "OT_IN_LEAGUE\020\002\022\027\n\023ERROR_SLOTS_INVALID\020\003\022"
  "\025\n\021ERROR_SLOT_LOCKED\020\004\"\211\001\n\'CMsgDOTAFanta"
  "syTeamRosterAddDropRequest\022\031\n\021fantasy_le"
  "ague_id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022\026\n\016add"
  "_account_id\030\005 \001(\r\022\027\n\017drop_account_id\030\006 \001"
  "(\r\"\257\002\n(CMsgDOTAFantasyTeamRosterAddDropR"
  "esponse\022U\n\006result\030\001 \001(\0162<.proto.dota.CMs"
  "gDOTAFantasyTeamRosterAddDropResponse.ER"
  "esult:\007SUCCESS\"\253\001\n\007EResult\022\013\n\007SUCCESS\020\000\022"
  "\025\n\021ERROR_UNSPECIFIED\020\001\022\035\n\031ERROR_OWNER_NO"
  "T_IN_LEAGUE\020\002\022\036\n\032ERROR_PLAYER_NOT_AVAILA"
  "BLE\020\003\022\034\n\030ERROR_PLAYER_NOT_ON_TEAM\020\004\022\037\n\033E"
  "RROR_TRADE_ALREADY_PENDING\020\005\"=\n CMsgDOTA"
  "FantasyTeamTradesRequest\022\031\n\021fantasy_leag"
  "ue_id\030\001 \001(\r\"\237\003\n!CMsgDOTAFantasyTeamTrade"
  "sResponse\022N\n\006result\030\001 \001(\01625.proto.dota.C"
  "MsgDOTAFantasyTeamTradesResponse.EResult"
  ":\007SUCCESS\022C\n\006trades\030\002 \003(\01323.proto.dota.C"
  "MsgDOTAFantasyTeamTradesResponse.Trade\032\234"
  "\001\n\005Trade\022\021\n\ttimestamp\030\001 \001(\r\022\032\n\022owner_acc"
  "ount_id_1\030\002 \001(\r\022\032\n\022owner_account_id_2\030\003 "
  "\001(\r\022\033\n\023player_account_id_1\030\004 \001(\r\022\033\n\023play"
  "er_account_id_2\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\"F\n"
  "\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFI"
  "ED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\212\001\n%CMsgDO"
  "TAFantasyTeamTradeCancelRequest\022\031\n\021fanta"
  "sy_league_id\030\001 \001(\r\022\024\n\014team_index_1\030\003 \001(\r"
  "\022\032\n\022owner_account_id_2\030\004 \001(\r\022\024\n\014team_ind"
  "ex_2\030\005 \001(\r\"\331\001\n&CMsgDOTAFantasyTeamTradeC"
  "ancelResponse\022S\n\006result\030\001 \001(\0162:.proto.do"
  "ta.CMsgDOTAFantasyTeamTradeCancelRespons"
  "e.EResult:\007SUCCESS\"Z\n\007EResult\022\013\n\007SUCCESS"
  "\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PE"
  "RMISSION\020\002\022\022\n\016ERROR_NO_TRADE\020\003\"~\n CMsgDO"
  "TAFantasyTeamRosterRequest\022\031\n\021fantasy_le"
  "ague_id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022\030\n\020own"
  "er_account_id\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\r\"\215"
  "\002\n!CMsgDOTAFantasyTeamRosterResponse\022N\n\006"
  "result\030\001 \001(\01625.proto.dota.CMsgDOTAFantas"
  "yTeamRosterResponse.EResult:\007SUCCESS\022\032\n\022"
  "player_account_ids\030\002 \003(\r\022\025\n\rplayer_locke"
  "d\030\003 \003(\010\"e\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR"
  "_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022"
  "\035\n\031ERROR_OWNER_NOT_IN_LEAGUE\020\003\"G\n*CMsgDO"
  "TAFantasyPlayerHisoricalStatsRequest\022\031\n\021"
  "fantasy_league_id\030\001 \001(\r\"\255\006\n+CMsgDOTAFant"
  "asyPlayerHisoricalStatsResponse\022X\n\006resul"
  "t\030\001 \001(\0162\?.proto.dota.CMsgDOTAFantasyPlay"
  "erHisoricalStatsResponse.EResult:\007SUCCES"
  "S\022R\n\005stats\030\002 \003(\0132C.proto.dota.CMsgDOTAFa"
  "ntasyPlayerHisoricalStatsResponse.Player"
  "Stats\032\201\002\n\026PlayerScoreAccumulator\022\017\n\007matc"
  "hes\030\001 \001(\r\022\016\n\006levels\030\002 \001(\002\022\r\n\005kills\030\003 \001(\002"
  "\022\016\n\006deaths\030\004 \001(\002\022\017\n\007assists\030\005 \001(\002\022\021\n\tlas"
  "t_hits\030\006 \001(\002\022\016\n\006denies\030\007 \001(\002\022\013\n\003gpm\030\010 \001("
  "\002\022\014\n\004xppm\030\t \001(\002\022\r\n\005stuns\030\n \001(\002\022\017\n\007healin"
  "g\030\013 \001(\002\022\023\n\013tower_kills\030\014 \001(\002\022\024\n\014roshan_k"
  "ills\030\r \001(\002\022\r\n\005score\030\016 \001(\002\032\203\002\n\013PlayerStat"
  "s\022\022\n\naccount_id\030\001 \001(\r\022\r\n\005weeks\030\002 \001(\r\022e\n\r"
  "stats_premium\030\004 \001(\0132N.proto.dota.CMsgDOT"
  "AFantasyPlayerHisoricalStatsResponse.Pla"
  "yerScoreAccumulator\022j\n\022stats_professiona"
  "l\030\005 \001(\0132N.proto.dota.CMsgDOTAFantasyPlay"
  "erHisoricalStatsResponse.PlayerScoreAccu"
  "mulator\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR"
  "_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\""
  "G\n\031CMsgDOTAFantasyMessageAdd\022\031\n\021fantasy_"
  "league_id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"g\n\036CMsg"
  "DOTAFantasyMessagesRequest\022\031\n\021fantasy_le"
  "ague_id\030\001 \001(\r\022\025\n\rstart_message\030\002 \001(\r\022\023\n\013"
  "end_message\030\003 \001(\r\"\363\002\n\037CMsgDOTAFantasyMes"
  "sagesResponse\022L\n\006result\030\001 \001(\01623.proto.do"
  "ta.CMsgDOTAFantasyMessagesResponse.EResu"
  "lt:\007SUCCESS\022E\n\010messages\030\002 \003(\01323.proto.do"
  "ta.CMsgDOTAFantasyMessagesResponse.Messa"
  "ge\022\032\n\022num_total_messages\030\003 \001(\r\032W\n\007Messag"
  "e\022\022\n\nmessage_id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\031"
  "\n\021author_account_id\030\003 \001(\r\022\014\n\004time\030\004 \001(\r\""
  "F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECI"
  "FIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"e\n\032CMsgD"
  "OTAFantasyRemoveOwner\022\031\n\021fantasy_league_"
  "id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 \001(\r\022\022\n\nte"
  "am_index\030\003 \001(\r\"\356\001\n\"CMsgDOTAFantasyRemove"
  "OwnerResponse\022O\n\006result\030\001 \001(\01626.proto.do"
  "ta.CMsgDOTAFantasyRemoveOwnerResponse.ER"
  "esult:\007SUCCESS\"w\n\007EResult\022\013\n\007SUCCESS\020\000\022\025"
  "\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMIS"
  "SION\020\002\022\027\n\023ERROR_LEAGUE_LOCKED\020\003\022\026\n\022ERROR"
  "_NOT_A_MEMBER\020\004\"C\n&CMsgDOTAFantasySchedu"
  "ledMatchesRequest\022\031\n\021fantasy_league_id\030\001"
  " \001(\r\"\343\002\n\'CMsgDOTAFantasyScheduledMatches"
  "Response\022T\n\006result\030\001 \001(\0162;.proto.dota.CM"
  "sgDOTAFantasyScheduledMatchesResponse.ER"
  "esult:\007SUCCESS\022d\n\024scheduled_match_days\030\002"
  " \003(\0132F.proto.dota.CMsgDOTAFantasySchedul"
  "edMatchesResponse.ScheduledMatchDays\032M\n\022"
  "ScheduledMatchDays\022\021\n\ttimestamp\030\001 \001(\r\022\020\n"
  "\010team_ids\030\002 \003(\r\022\022\n\nleague_ids\030\003 \003(\r\"-\n\007E"
  "Result\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED"
  "\020\001\"Z\n!CMsgDOTAFantasyLeaveLeagueRequest\022"
  "\031\n\021fantasy_league_id\030\001 \001(\r\022\032\n\022fantasy_te"
  "am_index\030\002 \001(\r\"\356\001\n\"CMsgDOTAFantasyLeaveL"
  "eagueResponse\022O\n\006result\030\001 \001(\01626.proto.do"
  "ta.CMsgDOTAFantasyLeaveLeagueResponse.ER"
  "esult:\007SUCCESS\"w\n\007EResult\022\013\n\007SUCCESS\020\000\022\025"
  "\n\021ERROR_UNSPECIFIED\020\001\022\024\n\020ERROR_NOT_MEMBE"
  "R\020\002\022\032\n\026ERROR_LEAGUE_NOT_FOUND\020\003\022\026\n\022ERROR"
  "_DRAFT_ACTIVE\020\004\"\206\001\n(CMsgDOTAFantasyPlaye"
  "rScoreDetailsRequest\022\031\n\021fantasy_league_i"
  "d\030\001 \001(\r\022\031\n\021player_account_id\030\002 \001(\r\022\022\n\nst"
  "art_time\030\003 \001(\r\022\020\n\010end_time\030\004 \001(\r\"\234\004\n)CMs"
  "gDOTAFantasyPlayerScoreDetailsResponse\022V"
  "\n\006result\030\001 \001(\0162=.proto.dota.CMsgDOTAFant"
  "asyPlayerScoreDetailsResponse.EResult:\007S"
  "UCCESS\022S\n\004data\030\002 \003(\0132E.proto.dota.CMsgDO"
  "TAFantasyPlayerScoreDetailsResponse.Play"
  "erMatchData\032\374\001\n\017PlayerMatchData\022\020\n\010match"
  "_id\030\001 \001(\004\022\021\n\tseries_id\030\002 \001(\r\022\022\n\nseries_n"
  "um\030\003 \001(\r\022\023\n\013series_type\030\004 \001(\r\022\023\n\013league_"
  "tier\030\005 \001(\r\022\021\n\tleague_id\030\006 \001(\r\022\030\n\020opposin"
  "g_team_id\030\007 \001(\r\022\032\n\022opposing_team_logo\030\010 "
  "\001(\004\022\032\n\022opposing_team_name\030\t \001(\t\022\020\n\010owned"
  "_by\030\013 \001(\r\022\017\n\007benched\030\014 \001(\010\"C\n\007EResult\022\013\n"
  "\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\024\n\020ERR"
  "OR_NOT_MEMBER\020\002\"Z\n\035CMsgDOTAPassportVoteT"
  "eamGuess\022\021\n\tleague_id\030\001 \001(\r\022\021\n\twinner_id"
  "\030\002 \001(\r\022\023\n\013runnerup_id\030\003 \001(\r\"\234\001\n$CMsgDOTA"
  "PassportVoteGenericSelection\022a\n\017selectio"
  "n_index\030\001 \001(\0162-.proto.dota.DOTA_2013Pass"
  "portSelectionIndices:\031PP13_SEL_ALLSTAR_P"
  "LAYER_0\022\021\n\tselection\030\002 \001(\r\"F\n\035CMsgDOTAPa"
  "ssportStampedPlayer\022\020\n\010steam_id\030\001 \001(\004\022\023\n"
  "\013stamp_level\030\002 \001(\r\";\n#CMsgDOTAPassportPl"
  "ayerCardChallenge\022\024\n\014challenge_id\030\001 \001(\r\""
  "\270\002\n\024CMsgDOTAPassportVote\022=\n\nteam_votes\030\001"
  " \003(\0132).proto.dota.CMsgDOTAPassportVoteTe"
  "amGuess\022L\n\022generic_selections\030\002 \003(\01320.pr"
  "oto.dota.CMsgDOTAPassportVoteGenericSele"
  "ction\022B\n\017stamped_players\030\003 \003(\0132).proto.d"
  "ota.CMsgDOTAPassportStampedPlayer\022O\n\026pla"
  "yer_card_challenges\030\004 \003(\0132/.proto.dota.C"
  "MsgDOTAPassportPlayerCardChallenge\"P\n(CM"
  "sgClientToGCGetPlayerCardRosterRequest\022\021"
  "\n\tleague_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\"\275\002\n"
  ")CMsgClientToGCGetPlayerCardRosterRespon"
  "se\022U\n\006result\030\001 \001(\0162<.proto.dota.CMsgClie"
  "ntToGCGetPlayerCardRosterResponse.Result"
  ":\007SUCCESS\022\033\n\023player_card_item_id\030\002 \003(\004\022\r"
  "\n\005score\030\003 \001(\002\022\021\n\tfinalized\030\004 \001(\010\022\022\n\nperc"
  "entile\030\005 \001(\002\"f\n\006Result\022\013\n\007SUCCESS\020\000\022\025\n\021E"
  "RROR_UNSPECIFIED\020\001\022\033\n\027ERROR_INVALID_LEAG"
  "UE_ID\020\002\022\033\n\027ERROR_INVALID_TIMESTAMP\020\003\"\215\001\n"
  "(CMsgClientToGCSetPlayerCardRosterReques"
  "t\022\021\n\tleague_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022"
  "\014\n\004slot\030\003 \001(\r\022\033\n\023player_card_item_id\030\004 \001"
  "(\004\022\020\n\010event_id\030\005 \001(\r\"\371\002\n)CMsgClientToGCS"
  "etPlayerCardRosterResponse\022U\n\006result\030\001 \001"
  "(\0162<.proto.dota.CMsgClientToGCSetPlayerC"
  "ardRosterResponse.Result:\007SUCCESS\"\364\001\n\006Re"
  "sult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001"
  "\022\033\n\027ERROR_INVALID_LEAGUE_ID\020\002\022\033\n\027ERROR_I"
  "NVALID_TIMESTAMP\020\003\022\037\n\033ERROR_PLAYER_CARD_"
  "NOT_OWNED\020\004\022\026\n\022ERROR_INVALID_SLOT\020\005\022\032\n\026E"
  "RROR_FAILED_CARD_INFO\020\006\022\033\n\027ERROR_ACCOUNT"
  "_DUPLICATE\020\007\022\032\n\026ERROR_LOCKED_TIMESTAMP\020\010"
  "\"\341\003\n\036CMsgDOTAFantasyDPCLeagueStatus\022K\n\014l"
  "eague_infos\030\001 \003(\01325.proto.dota.CMsgDOTAF"
  "antasyDPCLeagueStatus.LeagueInfo\032\257\002\n\nLea"
  "gueInfo\022\021\n\tleague_id\030\001 \001(\r\022\023\n\013league_nam"
  "e\030\002 \001(\t\022\027\n\017start_timestamp\030\003 \001(\r\022\025\n\rend_"
  "timestamp\030\004 \001(\r\022\026\n\016day_timestamps\030\005 \003(\r\022"
  "\024\n\014is_qualifier\030\006 \001(\010\022J\n\005phase\030\007 \001(\0162\037.p"
  "roto.dota.ELeagueFantasyPhase:\032LEAGUE_FA"
  "NTASY_PHASE_UNSET\022O\n\006status\030\010 \001(\01628.prot"
  "o.dota.CMsgDOTAFantasyDPCLeagueStatus.ER"
  "osterStatus:\005UNSET\"@\n\rERosterStatus\022\t\n\005U"
  "NSET\020\000\022\013\n\007PARTIAL\020\001\022\010\n\004FULL\020\002\022\r\n\tCONCLUD"
  "ED\020\003*\243\025\n!DOTA_2013PassportSelectionIndic"
  "es\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_0\020\000\022\035\n\031PP1"
  "3_SEL_ALLSTAR_PLAYER_1\020\001\022\035\n\031PP13_SEL_ALL"
  "STAR_PLAYER_2\020\002\022\035\n\031PP13_SEL_ALLSTAR_PLAY"
  "ER_3\020\003\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_4\020\004\022\035\n"
  "\031PP13_SEL_ALLSTAR_PLAYER_5\020\005\022\035\n\031PP13_SEL"
  "_ALLSTAR_PLAYER_6\020\006\022\035\n\031PP13_SEL_ALLSTAR_"
  "PLAYER_7\020\007\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_8\020"
  "\010\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_9\020\t\022\034\n\030PP13"
  "_SEL_QUALPRED_WEST_0\020\n\022\034\n\030PP13_SEL_QUALP"
  "RED_WEST_1\020\013\022\034\n\030PP13_SEL_QUALPRED_WEST_2"
  "\020\014\022\034\n\030PP13_SEL_QUALPRED_WEST_3\020\r\022\034\n\030PP13"
  "_SEL_QUALPRED_WEST_4\020\016\022\034\n\030PP13_SEL_QUALP"
  "RED_WEST_5\020\017\022\034\n\030PP13_SEL_QUALPRED_WEST_6"
  "\020\020\022\034\n\030PP13_SEL_QUALPRED_WEST_7\020\021\022\034\n\030PP13"
  "_SEL_QUALPRED_WEST_8\020\022\022\034\n\030PP13_SEL_QUALP"
  "RED_WEST_9\020\023\022\035\n\031PP13_SEL_QUALPRED_WEST_1"
  "0\020\024\022\035\n\031PP13_SEL_QUALPRED_WEST_11\020\025\022\035\n\031PP"
  "13_SEL_QUALPRED_WEST_12\020\026\022\035\n\031PP13_SEL_QU"
  "ALPRED_WEST_13\020\027\022\035\n\031PP13_SEL_QUALPRED_WE"
  "ST_14\020\030\022\034\n\030PP13_SEL_QUALPRED_EAST_0\020\031\022\034\n"
  "\030PP13_SEL_QUALPRED_EAST_1\020\032\022\034\n\030PP13_SEL_"
  "QUALPRED_EAST_2\020\033\022\034\n\030PP13_SEL_QUALPRED_E"
  "AST_3\020\034\022\034\n\030PP13_SEL_QUALPRED_EAST_4\020\035\022\034\n"
  "\030PP13_SEL_QUALPRED_EAST_5\020\036\022\034\n\030PP13_SEL_"
  "QUALPRED_EAST_6\020\037\022\034\n\030PP13_SEL_QUALPRED_E"
  "AST_7\020 \022\034\n\030PP13_SEL_QUALPRED_EAST_8\020!\022\034\n"
  "\030PP13_SEL_QUALPRED_EAST_9\020\"\022\035\n\031PP13_SEL_"
  "QUALPRED_EAST_10\020#\022\035\n\031PP13_SEL_QUALPRED_"
  "EAST_11\020$\022\035\n\031PP13_SEL_QUALPRED_EAST_12\020%"
  "\022\035\n\031PP13_SEL_QUALPRED_EAST_13\020&\022\035\n\031PP13_"
  "SEL_QUALPRED_EAST_14\020\'\022\031\n\025PP13_SEL_TEAMC"
  "UP_TEAM\020(\022\033\n\027PP13_SEL_TEAMCUP_PLAYER\020)\022\036"
  "\n\032PP13_SEL_TEAMCUP_TEAM_LOCK\020*\022 \n\034PP13_S"
  "EL_TEAMCUP_PLAYER_LOCK\020+\022\030\n\024PP13_SEL_EVE"
  "NTPRED_0\020,\022\030\n\024PP13_SEL_EVENTPRED_1\020-\022\030\n\024"
  "PP13_SEL_EVENTPRED_2\020.\022\030\n\024PP13_SEL_EVENT"
  "PRED_3\020/\022\030\n\024PP13_SEL_EVENTPRED_4\0200\022\030\n\024PP"
  "13_SEL_EVENTPRED_5\0201\022\030\n\024PP13_SEL_EVENTPR"
  "ED_6\0202\022\030\n\024PP13_SEL_EVENTPRED_7\0203\022\030\n\024PP13"
  "_SEL_EVENTPRED_8\0204\022\030\n\024PP13_SEL_EVENTPRED"
  "_9\0205\022\031\n\025PP13_SEL_EVENTPRED_10\0206\022\031\n\025PP13_"
  "SEL_EVENTPRED_11\0207\022\031\n\025PP13_SEL_EVENTPRED"
  "_12\0208\022\031\n\025PP13_SEL_EVENTPRED_13\0209\022\031\n\025PP13"
  "_SEL_EVENTPRED_14\020:\022\031\n\025PP13_SEL_EVENTPRE"
  "D_15\020;\022\031\n\025PP13_SEL_EVENTPRED_16\020<\022\031\n\025PP1"
  "3_SEL_EVENTPRED_17\020=\022\031\n\025PP13_SEL_EVENTPR"
  "ED_18\020>\022\031\n\025PP13_SEL_EVENTPRED_19\020\?\022\031\n\025PP"
  "13_SEL_EVENTPRED_20\020@\022\031\n\025PP13_SEL_EVENTP"
  "RED_21\020A\022\031\n\025PP13_SEL_EVENTPRED_22\020B\022\031\n\025P"
  "P13_SEL_EVENTPRED_23\020C\022\031\n\025PP13_SEL_EVENT"
  "PRED_24\020D\022\031\n\025PP13_SEL_EVENTPRED_25\020E\022\031\n\025"
  "PP13_SEL_EVENTPRED_26\020F\022\031\n\025PP13_SEL_EVEN"
  "TPRED_27\020G\022\031\n\025PP13_SEL_EVENTPRED_28\020H\022\031\n"
  "\025PP13_SEL_EVENTPRED_29\020I\022\031\n\025PP13_SEL_EVE"
  "NTPRED_30\020J\022\031\n\025PP13_SEL_EVENTPRED_31\020K\022\031"
  "\n\025PP13_SEL_EVENTPRED_32\020L\022\031\n\025PP13_SEL_EV"
  "ENTPRED_33\020M\022\031\n\025PP13_SEL_EVENTPRED_34\020N\022"
  "\031\n\025PP13_SEL_EVENTPRED_35\020O\022\031\n\025PP13_SEL_E"
  "VENTPRED_36\020P\022\031\n\025PP13_SEL_EVENTPRED_37\020Q"
  "\022\031\n\025PP13_SEL_EVENTPRED_38\020R\022\031\n\025PP13_SEL_"
  "EVENTPRED_39\020S\022\031\n\025PP13_SEL_EVENTPRED_40\020"
  "T\022\031\n\025PP13_SEL_EVENTPRED_41\020U\022\031\n\025PP13_SEL"
  "_EVENTPRED_42\020V\022\031\n\025PP13_SEL_EVENTPRED_43"
  "\020W\022\023\n\017PP13_SEL_SOLO_0\020X\022\023\n\017PP13_SEL_SOLO"
  "_1\020Y\022\023\n\017PP13_SEL_SOLO_2\020Z\022\023\n\017PP13_SEL_SO"
  "LO_3\020[\022\023\n\017PP13_SEL_SOLO_4\020\\\022\023\n\017PP13_SEL_"
  "SOLO_5\020]\022\023\n\017PP13_SEL_SOLO_6\020^\022\023\n\017PP13_SE"
  "L_SOLO_7\020_B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fclient_5ffantasy_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fclient_5ffantasy_2eproto,
  "dota_gcmessages_client_fantasy.proto", &assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto, 20217,
};

void AddDescriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fclient_5ffantasy_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[0];
}
bool CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::SUCCESS;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_UNSPECIFIED;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_TOO_MANY_LEAGUES;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_INVALID_TEAM_COUNT;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_CREATION_DISABLED;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MIN;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MAX;
const int CMsgDOTACreateFantasyLeagueResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[1];
}
bool CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::SUCCESS;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueEditInfoResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[2];
}
bool CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::SUCCESS;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_NOT_FOUND;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_BAD_PASSWORD;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_FULL;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_ALREADY_MEMBER;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueFindResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[3];
}
bool CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::SUCCESS;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_BAD_LEAGUE_ID;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueInfoResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[4];
}
bool CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::SUCCESS;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_BAD_LEAGUE_ID;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueMatchupsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAEditFantasyTeamResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[5];
}
bool CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::SUCCESS;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_UNSPECIFIED;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_INVALID_TEAM_INFO;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NAME_ALREADY_TAKEN;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NO_PERMISSION;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MIN;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MAX;
const int CMsgDOTAEditFantasyTeamResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[6];
}
bool CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::SUCCESS;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MIN;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamScoreResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[7];
}
bool CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::SUCCESS;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MIN;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamStandingsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[8];
}
bool CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::SUCCESS;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerScoreResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[9];
}
bool CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerStandingsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[10];
}
bool CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::SUCCESS;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_SEASON_ID;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_LEAGUE_NAME;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_TEAM_NAME;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_TICKET;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueCreateResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[11];
}
bool CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::SUCCESS;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_FANTASY_LEAGUE_ID;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_NAME;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FULL;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_ALREADY_MEMBER;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_PASSWORD;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_TICKET;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MIN;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamCreateResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[12];
}
bool CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::SUCCESS;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[13];
}
bool CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::SUCCESS;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_INVALID_FANTASY_LEAGUE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_FANTASY_LEAGUE_NOT_DRAFTING;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_NOT_OWNERS_TURN;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_INVALID;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_UNAVAILABLE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_NO_VALID_SLOTS;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[14];
}
bool CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOTS_INVALID;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOT_LOCKED;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterSwapResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[15];
}
bool CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_AVAILABLE;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_ON_TEAM;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_TRADE_ALREADY_PENDING;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[16];
}
bool CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::SUCCESS;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MIN;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamTradesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[17];
}
bool CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::SUCCESS;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_TRADE;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MIN;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamTradeCancelResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[18];
}
bool CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[19];
}
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyMessagesResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[20];
}
bool CMsgDOTAFantasyMessagesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::SUCCESS;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MIN;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MAX;
const int CMsgDOTAFantasyMessagesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[21];
}
bool CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::SUCCESS;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NOT_A_MEMBER;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MIN;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MAX;
const int CMsgDOTAFantasyRemoveOwnerResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[22];
}
bool CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::SUCCESS;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MIN;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MAX;
const int CMsgDOTAFantasyScheduledMatchesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[23];
}
bool CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::SUCCESS;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_NOT_MEMBER;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_LEAGUE_NOT_FOUND;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_DRAFT_ACTIVE;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MIN;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MAX;
const int CMsgDOTAFantasyLeaveLeagueResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[24];
}
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_NOT_MEMBER;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[25];
}
bool CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::SUCCESS;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MIN;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MAX;
const int CMsgClientToGCGetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[26];
}
bool CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::SUCCESS;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_PLAYER_CARD_NOT_OWNED;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_SLOT;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_FAILED_CARD_INFO;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_ACCOUNT_DUPLICATE;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_LOCKED_TIMESTAMP;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MIN;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MAX;
const int CMsgClientToGCSetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[27];
}
bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::UNSET;
const CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::PARTIAL;
const CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::FULL;
const CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::CONCLUDED;
const CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_MIN;
const CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_MAX;
const int CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[28];
}
bool DOTA_2013PassportSelectionIndices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgDOTAPlayerInfo_Results::InitAsDefaultInstance() {
}
class CMsgDOTAPlayerInfo_Results::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTAPlayerInfo_Results* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_placement(CMsgDOTAPlayerInfo_Results* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_earnings(CMsgDOTAPlayerInfo_Results* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPlayerInfo_Results::kLeagueIdFieldNumber;
const int CMsgDOTAPlayerInfo_Results::kPlacementFieldNumber;
const int CMsgDOTAPlayerInfo_Results::kEarningsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPlayerInfo.Results)
}
CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(const CMsgDOTAPlayerInfo_Results& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnings_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(earnings_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPlayerInfo.Results)
}

void CMsgDOTAPlayerInfo_Results::SharedCtor() {
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earnings_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(earnings_));
}

CMsgDOTAPlayerInfo_Results::~CMsgDOTAPlayerInfo_Results() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPlayerInfo.Results)
  SharedDtor();
}

void CMsgDOTAPlayerInfo_Results::SharedDtor() {
}

void CMsgDOTAPlayerInfo_Results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPlayerInfo_Results& CMsgDOTAPlayerInfo_Results::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPlayerInfo_Results_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPlayerInfo_Results::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&earnings_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(earnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPlayerInfo_Results::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPlayerInfo_Results*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 placement = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_placement(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 earnings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_earnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPlayerInfo_Results::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 placement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_placement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 earnings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_earnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &earnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPlayerInfo.Results)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPlayerInfo.Results)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPlayerInfo_Results::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 placement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->placement(), output);
  }

  // optional uint32 earnings = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->earnings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPlayerInfo.Results)
}

::google::protobuf::uint8* CMsgDOTAPlayerInfo_Results::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 placement = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->placement(), target);
  }

  // optional uint32 earnings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->earnings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPlayerInfo.Results)
  return target;
}

size_t CMsgDOTAPlayerInfo_Results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 placement = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placement());
    }

    // optional uint32 earnings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->earnings());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfo_Results::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfo_Results* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPlayerInfo_Results>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPlayerInfo.Results)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPlayerInfo.Results)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfo_Results::MergeFrom(const CMsgDOTAPlayerInfo_Results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      placement_ = from.placement_;
    }
    if (cached_has_bits & 0x00000004u) {
      earnings_ = from.earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPlayerInfo_Results::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfo_Results::CopyFrom(const CMsgDOTAPlayerInfo_Results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPlayerInfo.Results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo_Results::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo_Results::Swap(CMsgDOTAPlayerInfo_Results* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPlayerInfo_Results::InternalSwap(CMsgDOTAPlayerInfo_Results* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
  swap(placement_, other->placement_);
  swap(earnings_, other->earnings_);
}

::google::protobuf::Metadata CMsgDOTAPlayerInfo_Results::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPlayerInfo_AuditEntry::InitAsDefaultInstance() {
}
class CMsgDOTAPlayerInfo_AuditEntry::HasBitSetters {
 public:
  static void set_has_start_timestamp(CMsgDOTAPlayerInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_end_timestamp(CMsgDOTAPlayerInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_id(CMsgDOTAPlayerInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_name(CMsgDOTAPlayerInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_tag(CMsgDOTAPlayerInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_url_logo(CMsgDOTAPlayerInfo_AuditEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPlayerInfo_AuditEntry::kStartTimestampFieldNumber;
const int CMsgDOTAPlayerInfo_AuditEntry::kEndTimestampFieldNumber;
const int CMsgDOTAPlayerInfo_AuditEntry::kTeamIdFieldNumber;
const int CMsgDOTAPlayerInfo_AuditEntry::kTeamNameFieldNumber;
const int CMsgDOTAPlayerInfo_AuditEntry::kTeamTagFieldNumber;
const int CMsgDOTAPlayerInfo_AuditEntry::kTeamUrlLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
}
CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(const CMsgDOTAPlayerInfo_AuditEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  team_url_logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_url_logo()) {
    team_url_logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_url_logo_);
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
}

void CMsgDOTAPlayerInfo_AuditEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_url_logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(team_id_));
}

CMsgDOTAPlayerInfo_AuditEntry::~CMsgDOTAPlayerInfo_AuditEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  SharedDtor();
}

void CMsgDOTAPlayerInfo_AuditEntry::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_url_logo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAPlayerInfo_AuditEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPlayerInfo_AuditEntry& CMsgDOTAPlayerInfo_AuditEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPlayerInfo_AuditEntry_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPlayerInfo_AuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_url_logo_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPlayerInfo_AuditEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPlayerInfo_AuditEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_tag = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_url_logo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
        object = msg->mutable_team_url_logo();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPlayerInfo_AuditEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_start_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_end_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_url_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_url_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_url_logo().data(), static_cast<int>(this->team_url_logo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPlayerInfo_AuditEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_timestamp(), output);
  }

  // optional uint32 end_timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_timestamp(), output);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional string team_tag = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_tag(), output);
  }

  // optional string team_url_logo = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_url_logo().data(), static_cast<int>(this->team_url_logo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->team_url_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
}

::google::protobuf::uint8* CMsgDOTAPlayerInfo_AuditEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_timestamp(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional string team_tag = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_tag(), target);
  }

  // optional string team_url_logo = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_url_logo().data(), static_cast<int>(this->team_url_logo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_url_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  return target;
}

size_t CMsgDOTAPlayerInfo_AuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string team_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_url_logo = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_url_logo());
    }

    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_timestamp());
    }

    // optional uint32 end_timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_timestamp());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfo_AuditEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfo_AuditEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPlayerInfo_AuditEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfo_AuditEntry::MergeFrom(const CMsgDOTAPlayerInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      team_url_logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_url_logo_);
    }
    if (cached_has_bits & 0x00000008u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPlayerInfo_AuditEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfo_AuditEntry::CopyFrom(const CMsgDOTAPlayerInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPlayerInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo_AuditEntry::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo_AuditEntry::Swap(CMsgDOTAPlayerInfo_AuditEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPlayerInfo_AuditEntry::InternalSwap(CMsgDOTAPlayerInfo_AuditEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_url_logo_.Swap(&other->team_url_logo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTAPlayerInfo_AuditEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPlayerInfo::InitAsDefaultInstance() {
}
class CMsgDOTAPlayerInfo::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_name(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_country_code(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fantasy_role(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_team_id(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_team_name(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_tag(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sponsor(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_is_locked(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_is_pro(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_real_name(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_birthdate(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_total_earnings(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_team_url_logo(CMsgDOTAPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPlayerInfo::kAccountIdFieldNumber;
const int CMsgDOTAPlayerInfo::kNameFieldNumber;
const int CMsgDOTAPlayerInfo::kCountryCodeFieldNumber;
const int CMsgDOTAPlayerInfo::kFantasyRoleFieldNumber;
const int CMsgDOTAPlayerInfo::kTeamIdFieldNumber;
const int CMsgDOTAPlayerInfo::kTeamNameFieldNumber;
const int CMsgDOTAPlayerInfo::kTeamTagFieldNumber;
const int CMsgDOTAPlayerInfo::kSponsorFieldNumber;
const int CMsgDOTAPlayerInfo::kIsLockedFieldNumber;
const int CMsgDOTAPlayerInfo::kIsProFieldNumber;
const int CMsgDOTAPlayerInfo::kRealNameFieldNumber;
const int CMsgDOTAPlayerInfo::kBirthdateFieldNumber;
const int CMsgDOTAPlayerInfo::kTotalEarningsFieldNumber;
const int CMsgDOTAPlayerInfo::kResultsFieldNumber;
const int CMsgDOTAPlayerInfo::kTeamUrlLogoFieldNumber;
const int CMsgDOTAPlayerInfo::kAuditEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPlayerInfo)
}
CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(const CMsgDOTAPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_),
      audit_entries_(from.audit_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  sponsor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsor()) {
    sponsor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_);
  }
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_real_name()) {
    real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
  }
  team_url_logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_url_logo()) {
    team_url_logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_url_logo_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_earnings_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(total_earnings_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPlayerInfo)
}

void CMsgDOTAPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_url_logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_earnings_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(total_earnings_));
}

CMsgDOTAPlayerInfo::~CMsgDOTAPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPlayerInfo)
  SharedDtor();
}

void CMsgDOTAPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_url_logo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPlayerInfo& CMsgDOTAPlayerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPlayerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  audit_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      sponsor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      real_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      team_url_logo_.ClearNonDefaultToEmptyNoArena();
    }
  }
  account_id_ = 0u;
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&fantasy_role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_earnings_) -
        reinterpret_cast<char*>(&fantasy_role_)) + sizeof(total_earnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPlayerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPlayerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string country_code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.country_code");
        object = msg->mutable_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::Fantasy_Roles_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_fantasy_role(static_cast<::proto::dota::Fantasy_Roles>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_tag = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string sponsor = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.sponsor");
        object = msg->mutable_sponsor();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_locked = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_is_locked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_pro = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_is_pro(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string real_name = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.real_name");
        object = msg->mutable_real_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 birthdate = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_birthdate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 total_earnings = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_total_earnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAPlayerInfo.Results results = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPlayerInfo_Results::_InternalParse;
          object = msg->add_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // optional string team_url_logo = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAPlayerInfo.team_url_logo");
        object = msg->mutable_team_url_logo();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPlayerInfo_AuditEntry::_InternalParse;
          object = msg->add_audit_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPlayerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::Fantasy_Roles_IsValid(value)) {
            set_fantasy_role(static_cast< ::proto::dota::Fantasy_Roles >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sponsor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsor().data(), static_cast<int>(this->sponsor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.sponsor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_locked = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_is_locked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pro = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_is_pro(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string real_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), static_cast<int>(this->real_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.real_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 birthdate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_birthdate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &birthdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_earnings = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_total_earnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_earnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPlayerInfo.Results results = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_url_logo = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_url_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_url_logo().data(), static_cast<int>(this->team_url_logo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPlayerInfo.team_url_logo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audit_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPlayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country_code(), output);
  }

  // optional .proto.dota.Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->fantasy_role(), output);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional string team_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->team_name(), output);
  }

  // optional string team_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->team_tag(), output);
  }

  // optional string sponsor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsor().data(), static_cast<int>(this->sponsor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.sponsor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sponsor(), output);
  }

  // optional bool is_locked = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_locked(), output);
  }

  // optional bool is_pro = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_pro(), output);
  }

  // optional string real_name = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), static_cast<int>(this->real_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->real_name(), output);
  }

  // optional uint32 birthdate = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->birthdate(), output);
  }

  // optional uint32 total_earnings = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_earnings(), output);
  }

  // repeated .proto.dota.CMsgDOTAPlayerInfo.Results results = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->results(static_cast<int>(i)),
      output);
  }

  // optional string team_url_logo = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_url_logo().data(), static_cast<int>(this->team_url_logo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.team_url_logo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->team_url_logo(), output);
  }

  // repeated .proto.dota.CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->audit_entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPlayerInfo)
}

::google::protobuf::uint8* CMsgDOTAPlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country_code(), target);
  }

  // optional .proto.dota.Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->fantasy_role(), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional string team_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_name(), target);
  }

  // optional string team_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->team_tag(), target);
  }

  // optional string sponsor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsor().data(), static_cast<int>(this->sponsor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.sponsor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sponsor(), target);
  }

  // optional bool is_locked = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_locked(), target);
  }

  // optional bool is_pro = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_pro(), target);
  }

  // optional string real_name = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), static_cast<int>(this->real_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->real_name(), target);
  }

  // optional uint32 birthdate = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->birthdate(), target);
  }

  // optional uint32 total_earnings = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_earnings(), target);
  }

  // repeated .proto.dota.CMsgDOTAPlayerInfo.Results results = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->results(static_cast<int>(i)), target);
  }

  // optional string team_url_logo = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_url_logo().data(), static_cast<int>(this->team_url_logo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPlayerInfo.team_url_logo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->team_url_logo(), target);
  }

  // repeated .proto.dota.CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->audit_entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPlayerInfo)
  return target;
}

size_t CMsgDOTAPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPlayerInfo.Results results = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->audit_entries_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audit_entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string team_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string sponsor = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sponsor());
    }

    // optional string real_name = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional string team_url_logo = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_url_logo());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .proto.dota.Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fantasy_role());
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool is_locked = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_pro = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 birthdate = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->birthdate());
    }

    // optional uint32 total_earnings = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_earnings());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPlayerInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfo::MergeFrom(const CMsgDOTAPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  audit_entries_.MergeFrom(from.audit_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      sponsor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      team_url_logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_url_logo_);
    }
    if (cached_has_bits & 0x00000080u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      fantasy_role_ = from.fantasy_role_;
    }
    if (cached_has_bits & 0x00000200u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_locked_ = from.is_locked_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_pro_ = from.is_pro_;
    }
    if (cached_has_bits & 0x00001000u) {
      birthdate_ = from.birthdate_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_earnings_ = from.total_earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfo::CopyFrom(const CMsgDOTAPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo::Swap(CMsgDOTAPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPlayerInfo::InternalSwap(CMsgDOTAPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  CastToBase(&audit_entries_)->InternalSwap(CastToBase(&other->audit_entries_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sponsor_.Swap(&other->sponsor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  real_name_.Swap(&other->real_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_url_logo_.Swap(&other->team_url_logo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(fantasy_role_, other->fantasy_role_);
  swap(team_id_, other->team_id_);
  swap(is_locked_, other->is_locked_);
  swap(is_pro_, other->is_pro_);
  swap(birthdate_, other->birthdate_);
  swap(total_earnings_, other->total_earnings_);
}

::google::protobuf::Metadata CMsgDOTAPlayerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPlayerInfoList::InitAsDefaultInstance() {
}
class CMsgDOTAPlayerInfoList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPlayerInfoList::kPlayerInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPlayerInfoList)
}
CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(const CMsgDOTAPlayerInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPlayerInfoList)
}

void CMsgDOTAPlayerInfoList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAPlayerInfoList_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
}

CMsgDOTAPlayerInfoList::~CMsgDOTAPlayerInfoList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPlayerInfoList)
  SharedDtor();
}

void CMsgDOTAPlayerInfoList::SharedDtor() {
}

void CMsgDOTAPlayerInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPlayerInfoList& CMsgDOTAPlayerInfoList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPlayerInfoList_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPlayerInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPlayerInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPlayerInfoList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPlayerInfoList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAPlayerInfo player_infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPlayerInfo::_InternalParse;
          object = msg->add_player_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPlayerInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPlayerInfoList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAPlayerInfo player_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPlayerInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPlayerInfoList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPlayerInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPlayerInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPlayerInfo player_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->player_infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPlayerInfoList)
}

::google::protobuf::uint8* CMsgDOTAPlayerInfoList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPlayerInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPlayerInfo player_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->player_infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPlayerInfoList)
  return target;
}

size_t CMsgDOTAPlayerInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPlayerInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPlayerInfo player_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPlayerInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPlayerInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerInfoList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPlayerInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPlayerInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPlayerInfoList)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerInfoList::MergeFrom(const CMsgDOTAPlayerInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPlayerInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
}

void CMsgDOTAPlayerInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPlayerInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerInfoList::CopyFrom(const CMsgDOTAPlayerInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPlayerInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfoList::Swap(CMsgDOTAPlayerInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPlayerInfoList::InternalSwap(CMsgDOTAPlayerInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_infos_)->InternalSwap(CastToBase(&other->player_infos_));
}

::google::protobuf::Metadata CMsgDOTAPlayerInfoList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTADPCProfileInfo_PredictionInfo::InitAsDefaultInstance() {
}
class CMsgDOTADPCProfileInfo_PredictionInfo::HasBitSetters {
 public:
  static void set_has_percent(CMsgDOTADPCProfileInfo_PredictionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_shard_winnings(CMsgDOTADPCProfileInfo_PredictionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTADPCProfileInfo_PredictionInfo::kPercentFieldNumber;
const int CMsgDOTADPCProfileInfo_PredictionInfo::kShardWinningsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
}
CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(const CMsgDOTADPCProfileInfo_PredictionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&percent_, &from.percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_winnings_) -
    reinterpret_cast<char*>(&percent_)) + sizeof(shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
}

void CMsgDOTADPCProfileInfo_PredictionInfo::SharedCtor() {
  ::memset(&percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_winnings_) -
      reinterpret_cast<char*>(&percent_)) + sizeof(shard_winnings_));
}

CMsgDOTADPCProfileInfo_PredictionInfo::~CMsgDOTADPCProfileInfo_PredictionInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  SharedDtor();
}

void CMsgDOTADPCProfileInfo_PredictionInfo::SharedDtor() {
}

void CMsgDOTADPCProfileInfo_PredictionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTADPCProfileInfo_PredictionInfo& CMsgDOTADPCProfileInfo_PredictionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTADPCProfileInfo_PredictionInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTADPCProfileInfo_PredictionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shard_winnings_) -
        reinterpret_cast<char*>(&percent_)) + sizeof(shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTADPCProfileInfo_PredictionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTADPCProfileInfo_PredictionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 percent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_percent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 shard_winnings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_shard_winnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTADPCProfileInfo_PredictionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_percent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shard_winnings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_shard_winnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTADPCProfileInfo_PredictionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->percent(), output);
  }

  // optional uint32 shard_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard_winnings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
}

::google::protobuf::uint8* CMsgDOTADPCProfileInfo_PredictionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->percent(), target);
  }

  // optional uint32 shard_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard_winnings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo_PredictionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 percent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

    // optional uint32 shard_winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard_winnings());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCProfileInfo_PredictionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTADPCProfileInfo_PredictionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      percent_ = from.percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      shard_winnings_ = from.shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCProfileInfo_PredictionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::CopyFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo_PredictionInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo_PredictionInfo::Swap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTADPCProfileInfo_PredictionInfo::InternalSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(percent_, other->percent_);
  swap(shard_winnings_, other->shard_winnings_);
}

::google::protobuf::Metadata CMsgDOTADPCProfileInfo_PredictionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTADPCProfileInfo_FantasyInfo::InitAsDefaultInstance() {
}
class CMsgDOTADPCProfileInfo_FantasyInfo::HasBitSetters {
 public:
  static void set_has_top_90_finishes(CMsgDOTADPCProfileInfo_FantasyInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_top_75_finishes(CMsgDOTADPCProfileInfo_FantasyInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_top_50_finishes(CMsgDOTADPCProfileInfo_FantasyInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_shard_winnings(CMsgDOTADPCProfileInfo_FantasyInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTADPCProfileInfo_FantasyInfo::kTop90FinishesFieldNumber;
const int CMsgDOTADPCProfileInfo_FantasyInfo::kTop75FinishesFieldNumber;
const int CMsgDOTADPCProfileInfo_FantasyInfo::kTop50FinishesFieldNumber;
const int CMsgDOTADPCProfileInfo_FantasyInfo::kShardWinningsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
}
CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(const CMsgDOTADPCProfileInfo_FantasyInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_90_finishes_, &from.top_90_finishes_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_winnings_) -
    reinterpret_cast<char*>(&top_90_finishes_)) + sizeof(shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
}

void CMsgDOTADPCProfileInfo_FantasyInfo::SharedCtor() {
  ::memset(&top_90_finishes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_winnings_) -
      reinterpret_cast<char*>(&top_90_finishes_)) + sizeof(shard_winnings_));
}

CMsgDOTADPCProfileInfo_FantasyInfo::~CMsgDOTADPCProfileInfo_FantasyInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  SharedDtor();
}

void CMsgDOTADPCProfileInfo_FantasyInfo::SharedDtor() {
}

void CMsgDOTADPCProfileInfo_FantasyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTADPCProfileInfo_FantasyInfo& CMsgDOTADPCProfileInfo_FantasyInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTADPCProfileInfo_FantasyInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTADPCProfileInfo_FantasyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&top_90_finishes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shard_winnings_) -
        reinterpret_cast<char*>(&top_90_finishes_)) + sizeof(shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTADPCProfileInfo_FantasyInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTADPCProfileInfo_FantasyInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 top_90_finishes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_top_90_finishes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 top_75_finishes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_top_75_finishes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 top_50_finishes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_top_50_finishes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 shard_winnings = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_shard_winnings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTADPCProfileInfo_FantasyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_90_finishes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_top_90_finishes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_90_finishes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top_75_finishes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_top_75_finishes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_75_finishes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top_50_finishes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_top_50_finishes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_50_finishes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shard_winnings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_shard_winnings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTADPCProfileInfo_FantasyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_90_finishes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_90_finishes(), output);
  }

  // optional uint32 top_75_finishes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_75_finishes(), output);
  }

  // optional uint32 top_50_finishes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top_50_finishes(), output);
  }

  // optional uint32 shard_winnings = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shard_winnings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
}

::google::protobuf::uint8* CMsgDOTADPCProfileInfo_FantasyInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_90_finishes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_90_finishes(), target);
  }

  // optional uint32 top_75_finishes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_75_finishes(), target);
  }

  // optional uint32 top_50_finishes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top_50_finishes(), target);
  }

  // optional uint32 shard_winnings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->shard_winnings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo_FantasyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 top_90_finishes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_90_finishes());
    }

    // optional uint32 top_75_finishes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_75_finishes());
    }

    // optional uint32 top_50_finishes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_50_finishes());
    }

    // optional uint32 shard_winnings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard_winnings());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCProfileInfo_FantasyInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTADPCProfileInfo_FantasyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_90_finishes_ = from.top_90_finishes_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_75_finishes_ = from.top_75_finishes_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_50_finishes_ = from.top_50_finishes_;
    }
    if (cached_has_bits & 0x00000008u) {
      shard_winnings_ = from.shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCProfileInfo_FantasyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::CopyFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo_FantasyInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo_FantasyInfo::Swap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTADPCProfileInfo_FantasyInfo::InternalSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(top_90_finishes_, other->top_90_finishes_);
  swap(top_75_finishes_, other->top_75_finishes_);
  swap(top_50_finishes_, other->top_50_finishes_);
  swap(shard_winnings_, other->shard_winnings_);
}

::google::protobuf::Metadata CMsgDOTADPCProfileInfo_FantasyInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTADPCProfileInfo::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTADPCProfileInfo_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::dota::CMsgDOTAPlayerInfo*>(
      ::proto::dota::CMsgDOTAPlayerInfo::internal_default_instance());
  ::proto::dota::_CMsgDOTADPCProfileInfo_default_instance_._instance.get_mutable()->prediction_info_ = const_cast< ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo*>(
      ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo::internal_default_instance());
  ::proto::dota::_CMsgDOTADPCProfileInfo_default_instance_._instance.get_mutable()->fantasy_info_ = const_cast< ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo*>(
      ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo::internal_default_instance());
}
class CMsgDOTADPCProfileInfo::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTAPlayerInfo& player_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_player_info(CMsgDOTADPCProfileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo& prediction_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_prediction_info(CMsgDOTADPCProfileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo& fantasy_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_fantasy_info(CMsgDOTADPCProfileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgDOTAPlayerInfo&
CMsgDOTADPCProfileInfo::HasBitSetters::player_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->player_info_;
}
const ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo&
CMsgDOTADPCProfileInfo::HasBitSetters::prediction_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->prediction_info_;
}
const ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo&
CMsgDOTADPCProfileInfo::HasBitSetters::fantasy_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->fantasy_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTADPCProfileInfo::kPlayerInfoFieldNumber;
const int CMsgDOTADPCProfileInfo::kPredictionInfoFieldNumber;
const int CMsgDOTADPCProfileInfo::kFantasyInfoFieldNumber;
const int CMsgDOTADPCProfileInfo::kDisabledNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTADPCProfileInfo)
}
CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(const CMsgDOTADPCProfileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disabled_notifications_(from.disabled_notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::dota::CMsgDOTAPlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  if (from.has_prediction_info()) {
    prediction_info_ = new ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo(*from.prediction_info_);
  } else {
    prediction_info_ = nullptr;
  }
  if (from.has_fantasy_info()) {
    fantasy_info_ = new ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo(*from.fantasy_info_);
  } else {
    fantasy_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTADPCProfileInfo)
}

void CMsgDOTADPCProfileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTADPCProfileInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_info_) -
      reinterpret_cast<char*>(&player_info_)) + sizeof(fantasy_info_));
}

CMsgDOTADPCProfileInfo::~CMsgDOTADPCProfileInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTADPCProfileInfo)
  SharedDtor();
}

void CMsgDOTADPCProfileInfo::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
  if (this != internal_default_instance()) delete prediction_info_;
  if (this != internal_default_instance()) delete fantasy_info_;
}

void CMsgDOTADPCProfileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTADPCProfileInfo& CMsgDOTADPCProfileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTADPCProfileInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTADPCProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTADPCProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_notifications_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_info_ != nullptr);
      player_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prediction_info_ != nullptr);
      prediction_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fantasy_info_ != nullptr);
      fantasy_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTADPCProfileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTADPCProfileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAPlayerInfo player_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAPlayerInfo::_InternalParse;
        object = msg->mutable_player_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo::_InternalParse;
        object = msg->mutable_prediction_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo::_InternalParse;
        object = msg->mutable_fantasy_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated uint32 disabled_notifications = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_disabled_notifications(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_disabled_notifications();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTADPCProfileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTADPCProfileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAPlayerInfo player_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prediction_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fantasy_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 disabled_notifications = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_disabled_notifications())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_notifications())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTADPCProfileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTADPCProfileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTADPCProfileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTADPCProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAPlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::player_info(this), output);
  }

  // optional .proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::prediction_info(this), output);
  }

  // optional .proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::fantasy_info(this), output);
  }

  // repeated uint32 disabled_notifications = 4;
  for (int i = 0, n = this->disabled_notifications_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->disabled_notifications(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTADPCProfileInfo)
}

::google::protobuf::uint8* CMsgDOTADPCProfileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTADPCProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAPlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::player_info(this), target);
  }

  // optional .proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::prediction_info(this), target);
  }

  // optional .proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::fantasy_info(this), target);
  }

  // repeated uint32 disabled_notifications = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->disabled_notifications_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTADPCProfileInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTADPCProfileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 disabled_notifications = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->disabled_notifications_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->disabled_notifications_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgDOTAPlayerInfo player_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_info_);
    }

    // optional .proto.dota.CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prediction_info_);
    }

    // optional .proto.dota.CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fantasy_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCProfileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTADPCProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCProfileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTADPCProfileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTADPCProfileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTADPCProfileInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCProfileInfo::MergeFrom(const CMsgDOTADPCProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTADPCProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_notifications_.MergeFrom(from.disabled_notifications_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player_info()->::proto::dota::CMsgDOTAPlayerInfo::MergeFrom(from.player_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_prediction_info()->::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(from.prediction_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fantasy_info()->::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(from.fantasy_info());
    }
  }
}

void CMsgDOTADPCProfileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTADPCProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCProfileInfo::CopyFrom(const CMsgDOTADPCProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTADPCProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo::Swap(CMsgDOTADPCProfileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTADPCProfileInfo::InternalSwap(CMsgDOTADPCProfileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disabled_notifications_.InternalSwap(&other->disabled_notifications_);
  swap(player_info_, other->player_info_);
  swap(prediction_info_, other->prediction_info_);
  swap(fantasy_info_, other->fantasy_info_);
}

::google::protobuf::Metadata CMsgDOTADPCProfileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeaderboards_RegionLeaderboard::InitAsDefaultInstance() {
}
class CMsgDOTALeaderboards_RegionLeaderboard::HasBitSetters {
 public:
  static void set_has_division(CMsgDOTALeaderboards_RegionLeaderboard* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaderboards_RegionLeaderboard::kDivisionFieldNumber;
const int CMsgDOTALeaderboards_RegionLeaderboard::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
}
CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(const CMsgDOTALeaderboards_RegionLeaderboard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  division_ = from.division_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
}

void CMsgDOTALeaderboards_RegionLeaderboard::SharedCtor() {
  division_ = 0u;
}

CMsgDOTALeaderboards_RegionLeaderboard::~CMsgDOTALeaderboards_RegionLeaderboard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  SharedDtor();
}

void CMsgDOTALeaderboards_RegionLeaderboard::SharedDtor() {
}

void CMsgDOTALeaderboards_RegionLeaderboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeaderboards_RegionLeaderboard& CMsgDOTALeaderboards_RegionLeaderboard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeaderboards_RegionLeaderboard_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeaderboards_RegionLeaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  division_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeaderboards_RegionLeaderboard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeaderboards_RegionLeaderboard*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 division = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_division(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 account_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeaderboards_RegionLeaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_division(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeaderboards_RegionLeaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division(), output);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
}

::google::protobuf::uint8* CMsgDOTALeaderboards_RegionLeaderboard::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division(), target);
  }

  // repeated uint32 account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  return target;
}

size_t CMsgDOTALeaderboards_RegionLeaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  // optional uint32 division = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->division());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaderboards_RegionLeaderboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaderboards_RegionLeaderboard* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeaderboards_RegionLeaderboard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaderboards_RegionLeaderboard::MergeFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from.has_division()) {
    set_division(from.division());
  }
}

void CMsgDOTALeaderboards_RegionLeaderboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaderboards_RegionLeaderboard::CopyFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaderboards.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaderboards_RegionLeaderboard::IsInitialized() const {
  return true;
}

void CMsgDOTALeaderboards_RegionLeaderboard::Swap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaderboards_RegionLeaderboard::InternalSwap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  swap(division_, other->division_);
}

::google::protobuf::Metadata CMsgDOTALeaderboards_RegionLeaderboard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeaderboards::InitAsDefaultInstance() {
}
class CMsgDOTALeaderboards::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaderboards::kLeaderboardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaderboards::CMsgDOTALeaderboards()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaderboards)
}
CMsgDOTALeaderboards::CMsgDOTALeaderboards(const CMsgDOTALeaderboards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      leaderboards_(from.leaderboards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaderboards)
}

void CMsgDOTALeaderboards::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeaderboards_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
}

CMsgDOTALeaderboards::~CMsgDOTALeaderboards() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaderboards)
  SharedDtor();
}

void CMsgDOTALeaderboards::SharedDtor() {
}

void CMsgDOTALeaderboards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeaderboards& CMsgDOTALeaderboards::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeaderboards_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeaderboards::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaderboards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeaderboards::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeaderboards*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard::_InternalParse;
          object = msg->add_leaderboards();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeaderboards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaderboards)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_leaderboards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaderboards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaderboards)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeaderboards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaderboards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leaderboards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->leaderboards(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaderboards)
}

::google::protobuf::uint8* CMsgDOTALeaderboards::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaderboards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leaderboards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->leaderboards(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaderboards)
  return target;
}

size_t CMsgDOTALeaderboards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaderboards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->leaderboards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->leaderboards(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaderboards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaderboards)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaderboards* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeaderboards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaderboards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaderboards)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaderboards::MergeFrom(const CMsgDOTALeaderboards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaderboards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leaderboards_.MergeFrom(from.leaderboards_);
}

void CMsgDOTALeaderboards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaderboards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaderboards::CopyFrom(const CMsgDOTALeaderboards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaderboards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaderboards::IsInitialized() const {
  return true;
}

void CMsgDOTALeaderboards::Swap(CMsgDOTALeaderboards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaderboards::InternalSwap(CMsgDOTALeaderboards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&leaderboards_)->InternalSwap(CastToBase(&other->leaderboards_));
}

::google::protobuf::Metadata CMsgDOTALeaderboards::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTACreateFantasyLeagueRequest::InitAsDefaultInstance() {
}
class CMsgDOTACreateFantasyLeagueRequest::HasBitSetters {
 public:
  static void set_has_league_name(CMsgDOTACreateFantasyLeagueRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_logo(CMsgDOTACreateFantasyLeagueRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_selection_mode(CMsgDOTACreateFantasyLeagueRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_count(CMsgDOTACreateFantasyLeagueRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateFantasyLeagueRequest::kLeagueNameFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kLeagueLogoFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kSelectionModeFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kTeamCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
}
CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest(const CMsgDOTACreateFantasyLeagueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_league_name()) {
    league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
  }
  ::memcpy(&league_logo_, &from.league_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_count_) -
    reinterpret_cast<char*>(&league_logo_)) + sizeof(team_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
}

void CMsgDOTACreateFantasyLeagueRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTACreateFantasyLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_count_) -
      reinterpret_cast<char*>(&league_logo_)) + sizeof(team_count_));
}

CMsgDOTACreateFantasyLeagueRequest::~CMsgDOTACreateFantasyLeagueRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  SharedDtor();
}

void CMsgDOTACreateFantasyLeagueRequest::SharedDtor() {
  league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTACreateFantasyLeagueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTACreateFantasyLeagueRequest& CMsgDOTACreateFantasyLeagueRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTACreateFantasyLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTACreateFantasyLeagueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    league_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&league_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_count_) -
        reinterpret_cast<char*>(&league_logo_)) + sizeof(team_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTACreateFantasyLeagueRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTACreateFantasyLeagueRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string league_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
        object = msg->mutable_league_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 league_logo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::Fantasy_Selection_Mode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_selection_mode(static_cast<::proto::dota::Fantasy_Selection_Mode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTACreateFantasyLeagueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string league_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->league_name().data(), static_cast<int>(this->league_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 league_logo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &league_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::Fantasy_Selection_Mode_IsValid(value)) {
            set_selection_mode(static_cast< ::proto::dota::Fantasy_Selection_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTACreateFantasyLeagueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string league_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), static_cast<int>(this->league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->league_name(), output);
  }

  // optional uint64 league_logo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->league_logo(), output);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->selection_mode(), output);
  }

  // optional uint32 team_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
}

::google::protobuf::uint8* CMsgDOTACreateFantasyLeagueRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string league_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), static_cast<int>(this->league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->league_name(), target);
  }

  // optional uint64 league_logo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->league_logo(), target);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->selection_mode(), target);
  }

  // optional uint32 team_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  return target;
}

size_t CMsgDOTACreateFantasyLeagueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string league_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }

    // optional uint64 league_logo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->league_logo());
    }

    // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional uint32 team_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateFantasyLeagueRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTACreateFantasyLeagueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      league_logo_ = from.league_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_count_ = from.team_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueRequest::IsInitialized() const {
  return true;
}

void CMsgDOTACreateFantasyLeagueRequest::Swap(CMsgDOTACreateFantasyLeagueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateFantasyLeagueRequest::InternalSwap(CMsgDOTACreateFantasyLeagueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  league_name_.Swap(&other->league_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(league_logo_, other->league_logo_);
  swap(selection_mode_, other->selection_mode_);
  swap(team_count_, other->team_count_);
}

::google::protobuf::Metadata CMsgDOTACreateFantasyLeagueRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTACreateFantasyLeagueResponse::InitAsDefaultInstance() {
}
class CMsgDOTACreateFantasyLeagueResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTACreateFantasyLeagueResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateFantasyLeagueResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
}
CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse(const CMsgDOTACreateFantasyLeagueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
}

void CMsgDOTACreateFantasyLeagueResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTACreateFantasyLeagueResponse::~CMsgDOTACreateFantasyLeagueResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  SharedDtor();
}

void CMsgDOTACreateFantasyLeagueResponse::SharedDtor() {
}

void CMsgDOTACreateFantasyLeagueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTACreateFantasyLeagueResponse& CMsgDOTACreateFantasyLeagueResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTACreateFantasyLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTACreateFantasyLeagueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTACreateFantasyLeagueResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTACreateFantasyLeagueResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTACreateFantasyLeagueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTACreateFantasyLeagueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
}

::google::protobuf::uint8* CMsgDOTACreateFantasyLeagueResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  return target;
}

size_t CMsgDOTACreateFantasyLeagueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateFantasyLeagueResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTACreateFantasyLeagueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateFantasyLeagueResponse::Swap(CMsgDOTACreateFantasyLeagueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateFantasyLeagueResponse::InternalSwap(CMsgDOTACreateFantasyLeagueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTACreateFantasyLeagueResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFantasyLeagueScoring::InitAsDefaultInstance() {
}
class CMsgFantasyLeagueScoring::HasBitSetters {
 public:
  static void set_has_level(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kills(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_deaths(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_assists(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_last_hits(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_denies(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_gpm(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_xppm(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_stuns(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_healing(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_tower_kills(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_roshan_kills(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_multiplier_premium(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_multiplier_professional(CMsgFantasyLeagueScoring* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFantasyLeagueScoring::kLevelFieldNumber;
const int CMsgFantasyLeagueScoring::kKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kDeathsFieldNumber;
const int CMsgFantasyLeagueScoring::kAssistsFieldNumber;
const int CMsgFantasyLeagueScoring::kLastHitsFieldNumber;
const int CMsgFantasyLeagueScoring::kDeniesFieldNumber;
const int CMsgFantasyLeagueScoring::kGpmFieldNumber;
const int CMsgFantasyLeagueScoring::kXppmFieldNumber;
const int CMsgFantasyLeagueScoring::kStunsFieldNumber;
const int CMsgFantasyLeagueScoring::kHealingFieldNumber;
const int CMsgFantasyLeagueScoring::kTowerKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kRoshanKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kMultiplierPremiumFieldNumber;
const int CMsgFantasyLeagueScoring::kMultiplierProfessionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFantasyLeagueScoring)
}
CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring(const CMsgFantasyLeagueScoring& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplier_professional_) -
    reinterpret_cast<char*>(&level_)) + sizeof(multiplier_professional_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFantasyLeagueScoring)
}

void CMsgFantasyLeagueScoring::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_professional_) -
      reinterpret_cast<char*>(&level_)) + sizeof(multiplier_professional_));
}

CMsgFantasyLeagueScoring::~CMsgFantasyLeagueScoring() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFantasyLeagueScoring)
  SharedDtor();
}

void CMsgFantasyLeagueScoring::SharedDtor() {
}

void CMsgFantasyLeagueScoring::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFantasyLeagueScoring& CMsgFantasyLeagueScoring::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFantasyLeagueScoring_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgFantasyLeagueScoring::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFantasyLeagueScoring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xppm_) -
        reinterpret_cast<char*>(&level_)) + sizeof(xppm_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&stuns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multiplier_professional_) -
        reinterpret_cast<char*>(&stuns_)) + sizeof(multiplier_professional_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFantasyLeagueScoring::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFantasyLeagueScoring*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_level(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float kills = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float deaths = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_deaths(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float assists = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_assists(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float last_hits = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float denies = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_denies(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float gpm = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_gpm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float xppm = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_xppm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float stuns = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_stuns(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float healing = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_healing(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float tower_kills = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_tower_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float roshan_kills = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_roshan_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float multiplier_premium = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_multiplier_premium(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float multiplier_professional = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_multiplier_professional(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFantasyLeagueScoring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFantasyLeagueScoring)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float deaths = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float assists = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_hits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float denies = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_gpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xppm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_xppm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stuns = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_stuns(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float healing = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tower_kills = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_tower_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roshan_kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_roshan_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roshan_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float multiplier_premium = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_multiplier_premium(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_premium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float multiplier_professional = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_multiplier_professional(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_professional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFantasyLeagueScoring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFantasyLeagueScoring)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFantasyLeagueScoring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFantasyLeagueScoring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->level(), output);
  }

  // optional float kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kills(), output);
  }

  // optional float deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->deaths(), output);
  }

  // optional float assists = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->assists(), output);
  }

  // optional float last_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->last_hits(), output);
  }

  // optional float denies = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->denies(), output);
  }

  // optional float gpm = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->gpm(), output);
  }

  // optional float xppm = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xppm(), output);
  }

  // optional float stuns = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->stuns(), output);
  }

  // optional float healing = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->healing(), output);
  }

  // optional float tower_kills = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tower_kills(), output);
  }

  // optional float roshan_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->roshan_kills(), output);
  }

  // optional float multiplier_premium = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->multiplier_premium(), output);
  }

  // optional float multiplier_professional = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->multiplier_professional(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFantasyLeagueScoring)
}

::google::protobuf::uint8* CMsgFantasyLeagueScoring::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFantasyLeagueScoring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->level(), target);
  }

  // optional float kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kills(), target);
  }

  // optional float deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->deaths(), target);
  }

  // optional float assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->assists(), target);
  }

  // optional float last_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->last_hits(), target);
  }

  // optional float denies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->denies(), target);
  }

  // optional float gpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->gpm(), target);
  }

  // optional float xppm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xppm(), target);
  }

  // optional float stuns = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->stuns(), target);
  }

  // optional float healing = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->healing(), target);
  }

  // optional float tower_kills = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tower_kills(), target);
  }

  // optional float roshan_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->roshan_kills(), target);
  }

  // optional float multiplier_premium = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->multiplier_premium(), target);
  }

  // optional float multiplier_professional = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->multiplier_professional(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFantasyLeagueScoring)
  return target;
}

size_t CMsgFantasyLeagueScoring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFantasyLeagueScoring)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float deaths = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float assists = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float denies = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float gpm = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float xppm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float stuns = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float healing = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float multiplier_premium = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float multiplier_professional = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFantasyLeagueScoring::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFantasyLeagueScoring)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFantasyLeagueScoring* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFantasyLeagueScoring>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFantasyLeagueScoring)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFantasyLeagueScoring)
    MergeFrom(*source);
  }
}

void CMsgFantasyLeagueScoring::MergeFrom(const CMsgFantasyLeagueScoring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFantasyLeagueScoring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      xppm_ = from.xppm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      stuns_ = from.stuns_;
    }
    if (cached_has_bits & 0x00000200u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000400u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000800u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      multiplier_premium_ = from.multiplier_premium_;
    }
    if (cached_has_bits & 0x00002000u) {
      multiplier_professional_ = from.multiplier_professional_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFantasyLeagueScoring::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFantasyLeagueScoring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFantasyLeagueScoring::CopyFrom(const CMsgFantasyLeagueScoring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFantasyLeagueScoring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFantasyLeagueScoring::IsInitialized() const {
  return true;
}

void CMsgFantasyLeagueScoring::Swap(CMsgFantasyLeagueScoring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFantasyLeagueScoring::InternalSwap(CMsgFantasyLeagueScoring* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(level_, other->level_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
  swap(gpm_, other->gpm_);
  swap(xppm_, other->xppm_);
  swap(stuns_, other->stuns_);
  swap(healing_, other->healing_);
  swap(tower_kills_, other->tower_kills_);
  swap(roshan_kills_, other->roshan_kills_);
  swap(multiplier_premium_, other->multiplier_premium_);
  swap(multiplier_professional_, other->multiplier_professional_);
}

::google::protobuf::Metadata CMsgFantasyLeagueScoring::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueInfo_OwnerInfo::HasBitSetters {
 public:
  static void set_has_owner_account_id(CMsgDOTAFantasyLeagueInfo_OwnerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_left_league(CMsgDOTAFantasyLeagueInfo_OwnerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kLeftLeagueFieldNumber;
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kPlayerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}
CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_account_id_(from.player_account_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_account_id_, &from.owner_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_league_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(left_league_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedCtor() {
  ::memset(&owner_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_league_) -
      reinterpret_cast<char*>(&owner_account_id_)) + sizeof(left_league_));
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo::~CMsgDOTAFantasyLeagueInfo_OwnerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedDtor() {
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueInfo_OwnerInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_account_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&owner_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_league_) -
        reinterpret_cast<char*>(&owner_account_id_)) + sizeof(left_league_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueInfo_OwnerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueInfo_OwnerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool left_league = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_left_league(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 player_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_player_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_league = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_left_league(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_league_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_player_account_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  // optional bool left_league = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->left_league(), output);
  }

  // repeated uint32 player_account_id = 3;
  for (int i = 0, n = this->player_account_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->player_account_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfo_OwnerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  // optional bool left_league = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->left_league(), target);
  }

  // repeated uint32 player_account_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->player_account_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfo_OwnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_account_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_account_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_account_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 owner_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional bool left_league = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfo_OwnerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfo_OwnerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_id_.MergeFrom(from.player_account_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_league_ = from.left_league_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Swap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_account_id_.InternalSwap(&other->player_account_id_);
  swap(owner_account_id_, other->owner_account_id_);
  swap(left_league_, other->left_league_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfo_OwnerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueInfo::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAFantasyLeagueInfo_default_instance_._instance.get_mutable()->scoring_ = const_cast< ::proto::dota::CMsgFantasyLeagueScoring*>(
      ::proto::dota::CMsgFantasyLeagueScoring::internal_default_instance());
}
class CMsgDOTAFantasyLeagueInfo::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_commissioner_account_id(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_fantasy_league_name(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_selection_mode(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_count(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_logo(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::proto::dota::CMsgFantasyLeagueScoring& scoring(const CMsgDOTAFantasyLeagueInfo* msg);
  static void set_has_scoring(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_draft_time(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_draft_pick_time(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_season_start(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_season_length(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_veto_votes(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_acquisitions(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_slot_1(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_slot_2(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_slot_3(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_slot_4(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_slot_5(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_bench_slots(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_time_zone(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_season(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_password(CMsgDOTAFantasyLeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgFantasyLeagueScoring&
CMsgDOTAFantasyLeagueInfo::HasBitSetters::scoring(const CMsgDOTAFantasyLeagueInfo* msg) {
  return *msg->scoring_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfo::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kCommissionerAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSelectionModeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kTeamCountFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kLogoFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kScoringFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kDraftTimeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kDraftPickTimeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonStartFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonLengthFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kVetoVotesFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kAcquisitionsFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot1FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot2FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot3FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot4FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot5FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kBenchSlotsFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kOwnerInfoFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kPlayersFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kTimeZoneFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfo)
}
CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo(const CMsgDOTAFantasyLeagueInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      owner_info_(from.owner_info_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_league_name()) {
    fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_scoring()) {
    scoring_ = new ::proto::dota::CMsgFantasyLeagueScoring(*from.scoring_);
  } else {
    scoring_ = nullptr;
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfo)
}

void CMsgDOTAFantasyLeagueInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scoring_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&scoring_)) + sizeof(season_));
}

CMsgDOTAFantasyLeagueInfo::~CMsgDOTAFantasyLeagueInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfo)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfo::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scoring_;
}

void CMsgDOTAFantasyLeagueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_info_.Clear();
  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scoring_ != nullptr);
      scoring_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logo_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(logo_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&draft_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_2_) -
        reinterpret_cast<char*>(&draft_time_)) + sizeof(slot_2_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&slot_3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_) -
        reinterpret_cast<char*>(&slot_3_)) + sizeof(season_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 commissioner_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_commissioner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string fantasy_league_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
        object = msg->mutable_fantasy_league_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::Fantasy_Selection_Mode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_selection_mode(static_cast<::proto::dota::Fantasy_Selection_Mode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 logo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgFantasyLeagueScoring::_InternalParse;
        object = msg->mutable_scoring();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 draft_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_draft_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 draft_pick_time = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_draft_pick_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season_start = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_season_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season_length = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_season_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 veto_votes = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_veto_votes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 acquisitions = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_acquisitions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_1 = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_slot_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_2 = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_slot_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_3 = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_slot_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_4 = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_slot_4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_5 = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_slot_5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bench_slots = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_bench_slots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo::_InternalParse;
          object = msg->add_owner_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 458 && (ptr += 2));
        break;
      }
      // repeated uint32 players = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) == 208) {
          do {
            msg->add_players(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 464 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_players();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 time_zone = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_time_zone(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_season(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string password = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueInfo.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 commissioner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_commissioner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commissioner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_league_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::Fantasy_Selection_Mode_IsValid(value)) {
            set_selection_mode(static_cast< ::proto::dota::Fantasy_Selection_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scoring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 draft_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_draft_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 draft_pick_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_draft_pick_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_pick_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_start = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_season_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_season_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 veto_votes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_veto_votes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &veto_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 acquisitions = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_acquisitions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acquisitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_1 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_slot_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_2 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_slot_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_3 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_slot_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_4 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_slot_4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_5 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_slot_5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bench_slots = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_bench_slots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bench_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_owner_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 players = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_zone = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_time_zone(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_zone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_season(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueInfo.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 commissioner_account_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commissioner_account_id(), output);
  }

  // optional string fantasy_league_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fantasy_league_name(), output);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->selection_mode(), output);
  }

  // optional uint32 team_count = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_count(), output);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logo(), output);
  }

  // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::scoring(this), output);
  }

  // optional uint32 draft_time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->draft_time(), output);
  }

  // optional uint32 draft_pick_time = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->draft_pick_time(), output);
  }

  // optional uint32 season_start = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->season_start(), output);
  }

  // optional uint32 season_length = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->season_length(), output);
  }

  // optional uint32 veto_votes = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->veto_votes(), output);
  }

  // optional uint32 acquisitions = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->acquisitions(), output);
  }

  // optional uint32 slot_1 = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->slot_1(), output);
  }

  // optional uint32 slot_2 = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->slot_2(), output);
  }

  // optional uint32 slot_3 = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->slot_3(), output);
  }

  // optional uint32 slot_4 = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->slot_4(), output);
  }

  // optional uint32 slot_5 = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->slot_5(), output);
  }

  // optional uint32 bench_slots = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->bench_slots(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owner_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->owner_info(static_cast<int>(i)),
      output);
  }

  // repeated uint32 players = 26;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->players(i), output);
  }

  // optional uint32 time_zone = 27;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->time_zone(), output);
  }

  // optional uint32 season = 28;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->season(), output);
  }

  // optional string password = 29;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 commissioner_account_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->commissioner_account_id(), target);
  }

  // optional string fantasy_league_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fantasy_league_name(), target);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->selection_mode(), target);
  }

  // optional uint32 team_count = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_count(), target);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logo(), target);
  }

  // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::scoring(this), target);
  }

  // optional uint32 draft_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->draft_time(), target);
  }

  // optional uint32 draft_pick_time = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->draft_pick_time(), target);
  }

  // optional uint32 season_start = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->season_start(), target);
  }

  // optional uint32 season_length = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->season_length(), target);
  }

  // optional uint32 veto_votes = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->veto_votes(), target);
  }

  // optional uint32 acquisitions = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->acquisitions(), target);
  }

  // optional uint32 slot_1 = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->slot_1(), target);
  }

  // optional uint32 slot_2 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->slot_2(), target);
  }

  // optional uint32 slot_3 = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->slot_3(), target);
  }

  // optional uint32 slot_4 = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->slot_4(), target);
  }

  // optional uint32 slot_5 = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->slot_5(), target);
  }

  // optional uint32 bench_slots = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->bench_slots(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owner_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->owner_info(static_cast<int>(i)), target);
  }

  // repeated uint32 players = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->players_, target);

  // optional uint32 time_zone = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->time_zone(), target);
  }

  // optional uint32 season = 28;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->season(), target);
  }

  // optional string password = 29;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfo)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->owner_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->owner_info(static_cast<int>(i)));
    }
  }

  // repeated uint32 players = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->players_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->players_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fantasy_league_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string password = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scoring_);
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 commissioner_account_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commissioner_account_id());
    }

    // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional uint32 team_count = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

    // optional uint64 logo = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 draft_time = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draft_time());
    }

    // optional uint32 draft_pick_time = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draft_pick_time());
    }

    // optional uint32 season_start = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_start());
    }

    // optional uint32 season_length = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_length());
    }

    // optional uint32 veto_votes = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->veto_votes());
    }

    // optional uint32 acquisitions = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acquisitions());
    }

    // optional uint32 slot_1 = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_1());
    }

    // optional uint32 slot_2 = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_2());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 slot_3 = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_3());
    }

    // optional uint32 slot_4 = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_4());
    }

    // optional uint32 slot_5 = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_5());
    }

    // optional uint32 bench_slots = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bench_slots());
    }

    // optional uint32 time_zone = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_zone());
    }

    // optional uint32 season = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_info_.MergeFrom(from.owner_info_);
  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_scoring()->::proto::dota::CMsgFantasyLeagueScoring::MergeFrom(from.scoring());
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      commissioner_account_id_ = from.commissioner_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_count_ = from.team_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      logo_ = from.logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      draft_time_ = from.draft_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      draft_pick_time_ = from.draft_pick_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      season_start_ = from.season_start_;
    }
    if (cached_has_bits & 0x00000800u) {
      season_length_ = from.season_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      veto_votes_ = from.veto_votes_;
    }
    if (cached_has_bits & 0x00002000u) {
      acquisitions_ = from.acquisitions_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_1_ = from.slot_1_;
    }
    if (cached_has_bits & 0x00008000u) {
      slot_2_ = from.slot_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      slot_3_ = from.slot_3_;
    }
    if (cached_has_bits & 0x00020000u) {
      slot_4_ = from.slot_4_;
    }
    if (cached_has_bits & 0x00040000u) {
      slot_5_ = from.slot_5_;
    }
    if (cached_has_bits & 0x00080000u) {
      bench_slots_ = from.bench_slots_;
    }
    if (cached_has_bits & 0x00100000u) {
      time_zone_ = from.time_zone_;
    }
    if (cached_has_bits & 0x00200000u) {
      season_ = from.season_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfo::Swap(CMsgDOTAFantasyLeagueInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&owner_info_)->InternalSwap(CastToBase(&other->owner_info_));
  players_.InternalSwap(&other->players_);
  fantasy_league_name_.Swap(&other->fantasy_league_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scoring_, other->scoring_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(commissioner_account_id_, other->commissioner_account_id_);
  swap(selection_mode_, other->selection_mode_);
  swap(team_count_, other->team_count_);
  swap(logo_, other->logo_);
  swap(draft_time_, other->draft_time_);
  swap(draft_pick_time_, other->draft_pick_time_);
  swap(season_start_, other->season_start_);
  swap(season_length_, other->season_length_);
  swap(veto_votes_, other->veto_votes_);
  swap(acquisitions_, other->acquisitions_);
  swap(slot_1_, other->slot_1_);
  swap(slot_2_, other->slot_2_);
  swap(slot_3_, other->slot_3_);
  swap(slot_4_, other->slot_4_);
  swap(slot_5_, other->slot_5_);
  swap(bench_slots_, other->bench_slots_);
  swap(time_zone_, other->time_zone_);
  swap(season_, other->season_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueEditInfoRequest::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_._instance.get_mutable()->edit_info_ = const_cast< ::proto::dota::CMsgDOTAFantasyLeagueInfo*>(
      ::proto::dota::CMsgDOTAFantasyLeagueInfo::internal_default_instance());
}
class CMsgDOTAFantasyLeagueEditInfoRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueEditInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgDOTAFantasyLeagueInfo& edit_info(const CMsgDOTAFantasyLeagueEditInfoRequest* msg);
  static void set_has_edit_info(CMsgDOTAFantasyLeagueEditInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTAFantasyLeagueInfo&
CMsgDOTAFantasyLeagueEditInfoRequest::HasBitSetters::edit_info(const CMsgDOTAFantasyLeagueEditInfoRequest* msg) {
  return *msg->edit_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInfoRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInfoRequest::kEditInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
}
CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest(const CMsgDOTAFantasyLeagueEditInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_edit_info()) {
    edit_info_ = new ::proto::dota::CMsgDOTAFantasyLeagueInfo(*from.edit_info_);
  } else {
    edit_info_ = nullptr;
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueEditInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&edit_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&edit_info_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueEditInfoRequest::~CMsgDOTAFantasyLeagueEditInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete edit_info_;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueEditInfoRequest& CMsgDOTAFantasyLeagueEditInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueEditInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueEditInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(edit_info_ != nullptr);
    edit_info_->Clear();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueEditInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueEditInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAFantasyLeagueInfo::_InternalParse;
        object = msg->mutable_edit_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueEditInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edit_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueEditInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::edit_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::edit_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *edit_info_);
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_edit_info()->::proto::dota::CMsgDOTAFantasyLeagueInfo::MergeFrom(from.edit_info());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::Swap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(edit_info_, other->edit_info_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueEditInfoResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueEditInfoResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueEditInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInfoResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
}
CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse(const CMsgDOTAFantasyLeagueEditInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyLeagueEditInfoResponse::~CMsgDOTAFantasyLeagueEditInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueEditInfoResponse& CMsgDOTAFantasyLeagueEditInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueEditInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueEditInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueEditInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueEditInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueEditInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueEditInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::Swap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueFindRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueFindRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueFindRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_password(CMsgDOTAFantasyLeagueFindRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueFindRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueFindRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
}
CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest(const CMsgDOTAFantasyLeagueFindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
}

void CMsgDOTAFantasyLeagueFindRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueFindRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueFindRequest::~CMsgDOTAFantasyLeagueFindRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueFindRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueFindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueFindRequest& CMsgDOTAFantasyLeagueFindRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueFindRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueFindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueFindRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueFindRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueFindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueFindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueFindRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueFindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueFindRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueFindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueFindRequest::Swap(CMsgDOTAFantasyLeagueFindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueFindRequest::InternalSwap(CMsgDOTAFantasyLeagueFindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueFindRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueFindResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueFindResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueFindResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_fantasy_league_name(CMsgDOTAFantasyLeagueFindResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_commissioner_name(CMsgDOTAFantasyLeagueFindResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueFindResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueFindResponse::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueFindResponse::kCommissionerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
}
CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse(const CMsgDOTAFantasyLeagueFindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_league_name()) {
    fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
  }
  commissioner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_commissioner_name()) {
    commissioner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commissioner_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
}

void CMsgDOTAFantasyLeagueFindResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueFindResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgDOTAFantasyLeagueFindResponse::~CMsgDOTAFantasyLeagueFindResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueFindResponse::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueFindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueFindResponse& CMsgDOTAFantasyLeagueFindResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueFindResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueFindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      commissioner_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueFindResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueFindResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string fantasy_league_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
        object = msg->mutable_fantasy_league_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string commissioner_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
        object = msg->mutable_commissioner_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueFindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_league_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string commissioner_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissioner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commissioner_name().data(), static_cast<int>(this->commissioner_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueFindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fantasy_league_name(), output);
  }

  // optional string commissioner_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commissioner_name().data(), static_cast<int>(this->commissioner_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->commissioner_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueFindResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fantasy_league_name(), target);
  }

  // optional string commissioner_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commissioner_name().data(), static_cast<int>(this->commissioner_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->commissioner_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueFindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string fantasy_league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string commissioner_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissioner_name());
    }

    // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueFindResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueFindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      commissioner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commissioner_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueFindResponse::Swap(CMsgDOTAFantasyLeagueFindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueFindResponse::InternalSwap(CMsgDOTAFantasyLeagueFindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_league_name_.Swap(&other->fantasy_league_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commissioner_name_.Swap(&other->commissioner_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueFindResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueInfoRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueInfoRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfoRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
}
CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest(const CMsgDOTAFantasyLeagueInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueInfoRequest::~CMsgDOTAFantasyLeagueInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueInfoRequest& CMsgDOTAFantasyLeagueInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueInfoRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfoRequest::Swap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueInfoResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueInfoResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfoResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
}
CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse(const CMsgDOTAFantasyLeagueInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyLeagueInfoResponse::~CMsgDOTAFantasyLeagueInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueInfoResponse& CMsgDOTAFantasyLeagueInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfoResponse::Swap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueMatchupsRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueMatchupsRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueMatchupsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
}
CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest(const CMsgDOTAFantasyLeagueMatchupsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueMatchupsRequest::~CMsgDOTAFantasyLeagueMatchupsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueMatchupsRequest& CMsgDOTAFantasyLeagueMatchupsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueMatchupsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueMatchupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueMatchupsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueMatchupsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueMatchupsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueMatchupsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::Swap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsRequest::InternalSwap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::HasBitSetters {
 public:
  static void set_has_owner_account_id_1(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owner_account_id_2(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_score_1(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_score_2(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kOwnerAccountId1FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kScore1FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kScore2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}
CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_account_id_1_, &from.owner_account_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_2_) -
    reinterpret_cast<char*>(&owner_account_id_1_)) + sizeof(score_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedCtor() {
  ::memset(&owner_account_id_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_2_) -
      reinterpret_cast<char*>(&owner_account_id_1_)) + sizeof(score_2_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::~CMsgDOTAFantasyLeagueMatchupsResponse_Matchup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&owner_account_id_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_2_) -
        reinterpret_cast<char*>(&owner_account_id_1_)) + sizeof(score_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id_1 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_owner_account_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id_2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_owner_account_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float score_1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_score_1(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float score_2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_score_2(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_score_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_score_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id_1(), output);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id_2(), output);
  }

  // optional float score_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score_1(), output);
  }

  // optional float score_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id_2(), target);
  }

  // optional float score_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score_1(), target);
  }

  // optional float score_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 owner_account_id_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional float score_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float score_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_1_ = from.owner_account_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_1_ = from.score_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_2_ = from.score_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Swap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_account_id_1_, other->owner_account_id_1_);
  swap(owner_account_id_2_, other->owner_account_id_2_);
  swap(score_1_, other->score_1_);
  swap(score_2_, other->score_2_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::HasBitSetters {
 public:
  static void set_has_start_time(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_end_time(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kMatchupFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kStartTimeFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matchup_(from.matchup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::~CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_InternalParse;
          object = msg->add_matchup();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 start_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matchup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matchup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matchup(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional uint32 end_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matchup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matchup(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional uint32 end_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matchup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matchup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 start_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchup_.MergeFrom(from.matchup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Swap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matchup_)->InternalSwap(CastToBase(&other->matchup_));
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueMatchupsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueMatchupsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueMatchupsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueMatchupsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse::kWeeklyMatchupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
}
CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse(const CMsgDOTAFantasyLeagueMatchupsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      weekly_matchups_(from.weekly_matchups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueMatchupsResponse::~CMsgDOTAFantasyLeagueMatchupsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueMatchupsResponse& CMsgDOTAFantasyLeagueMatchupsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueMatchupsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueMatchupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weekly_matchups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_league_id_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueMatchupsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueMatchupsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_InternalParse;
          object = msg->add_weekly_matchups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueMatchupsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_weekly_matchups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueMatchupsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weekly_matchups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->weekly_matchups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weekly_matchups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->weekly_matchups(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->weekly_matchups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->weekly_matchups(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueMatchupsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weekly_matchups_.MergeFrom(from.weekly_matchups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::Swap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&weekly_matchups_)->InternalSwap(CastToBase(&other->weekly_matchups_));
  swap(result_, other->result_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAEditFantasyTeamRequest::InitAsDefaultInstance() {
}
class CMsgDOTAEditFantasyTeamRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAEditFantasyTeamRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_index(CMsgDOTAEditFantasyTeamRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_name(CMsgDOTAEditFantasyTeamRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_logo(CMsgDOTAEditFantasyTeamRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditFantasyTeamRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamIndexFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamNameFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditFantasyTeamRequest)
}
CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest(const CMsgDOTAEditFantasyTeamRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditFantasyTeamRequest)
}

void CMsgDOTAEditFantasyTeamRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAEditFantasyTeamRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_logo_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_logo_));
}

CMsgDOTAEditFantasyTeamRequest::~CMsgDOTAEditFantasyTeamRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  SharedDtor();
}

void CMsgDOTAEditFantasyTeamRequest::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAEditFantasyTeamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAEditFantasyTeamRequest& CMsgDOTAEditFantasyTeamRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAEditFantasyTeamRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAEditFantasyTeamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_logo_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAEditFantasyTeamRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAEditFantasyTeamRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAEditFantasyTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAEditFantasyTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditFantasyTeamRequest)
}

::google::protobuf::uint8* CMsgDOTAEditFantasyTeamRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  return target;
}

size_t CMsgDOTAEditFantasyTeamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint64 team_logo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditFantasyTeamRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAEditFantasyTeamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditFantasyTeamRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditFantasyTeamRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_logo_ = from.team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAEditFantasyTeamRequest::Swap(CMsgDOTAEditFantasyTeamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditFantasyTeamRequest::InternalSwap(CMsgDOTAEditFantasyTeamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(team_index_, other->team_index_);
  swap(team_logo_, other->team_logo_);
}

::google::protobuf::Metadata CMsgDOTAEditFantasyTeamRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAEditFantasyTeamResponse::InitAsDefaultInstance() {
}
class CMsgDOTAEditFantasyTeamResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAEditFantasyTeamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditFantasyTeamResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditFantasyTeamResponse)
}
CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse(const CMsgDOTAEditFantasyTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditFantasyTeamResponse)
}

void CMsgDOTAEditFantasyTeamResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAEditFantasyTeamResponse::~CMsgDOTAEditFantasyTeamResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  SharedDtor();
}

void CMsgDOTAEditFantasyTeamResponse::SharedDtor() {
}

void CMsgDOTAEditFantasyTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAEditFantasyTeamResponse& CMsgDOTAEditFantasyTeamResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAEditFantasyTeamResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAEditFantasyTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAEditFantasyTeamResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAEditFantasyTeamResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAEditFantasyTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAEditFantasyTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditFantasyTeamResponse)
}

::google::protobuf::uint8* CMsgDOTAEditFantasyTeamResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  return target;
}

size_t CMsgDOTAEditFantasyTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditFantasyTeamResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAEditFantasyTeamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditFantasyTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditFantasyTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditFantasyTeamResponse::Swap(CMsgDOTAEditFantasyTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditFantasyTeamResponse::InternalSwap(CMsgDOTAEditFantasyTeamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAEditFantasyTeamResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}
CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::~CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedDtor() {
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Swap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::HasBitSetters {
 public:
  static void set_has_owner_account_id(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::kOwnerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}
CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_account_id_ = from.owner_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedCtor() {
  owner_account_id_ = 0u;
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::~CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedDtor() {
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 owner_account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_account_id()) {
    set_owner_account_id(from.owner_account_id());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Swap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_account_id_, other->owner_account_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamInfoResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfoResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
}
CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse(const CMsgDOTAFantasyTeamInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
}

void CMsgDOTAFantasyTeamInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
}

CMsgDOTAFantasyTeamInfoResponse::~CMsgDOTAFantasyTeamInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamInfoResponse& CMsgDOTAFantasyTeamInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamInfoResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyTeamInfo::_InternalParse;
          object = msg->add_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoResponse::Swap(CMsgDOTAFantasyTeamInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoResponse::InternalSwap(CMsgDOTAFantasyTeamInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamInfo::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamInfo::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_owner_account_id(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_fantasy_team_index(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_name(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_logo(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_wins(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_losses(CMsgDOTAFantasyTeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfo::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kTeamLogoFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kWinsFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kLossesFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kCurrentRosterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfo)
}
CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo(const CMsgDOTAFantasyTeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      current_roster_(from.current_roster_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(losses_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfo)
}

void CMsgDOTAFantasyTeamInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&losses_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(losses_));
}

CMsgDOTAFantasyTeamInfo::~CMsgDOTAFantasyTeamInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfo)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfo::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_roster_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&losses_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fantasy_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wins = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losses = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 current_roster = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_current_roster(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_current_roster();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 current_roster = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_current_roster())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_roster())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint32 wins = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wins(), output);
  }

  // optional uint32 losses = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->losses(), output);
  }

  // repeated uint32 current_roster = 8;
  for (int i = 0, n = this->current_roster_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->current_roster(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint32 wins = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wins(), target);
  }

  // optional uint32 losses = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->losses(), target);
  }

  // repeated uint32 current_roster = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->current_roster_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfo)
  return target;
}

size_t CMsgDOTAFantasyTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 current_roster = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->current_roster_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->current_roster_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string team_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional uint32 wins = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint32 losses = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const CMsgDOTAFantasyTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_roster_.MergeFrom(from.current_roster_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      losses_ = from.losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const CMsgDOTAFantasyTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfo::Swap(CMsgDOTAFantasyTeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfo::InternalSwap(CMsgDOTAFantasyTeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_roster_.InternalSwap(&other->current_roster_);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(owner_account_id_, other->owner_account_id_);
  swap(fantasy_team_index_, other->fantasy_team_index_);
  swap(wins_, other->wins_);
  swap(team_logo_, other->team_logo_);
  swap(losses_, other->losses_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamScoreRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamScoreRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owner_account_id(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fantasy_team_index(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_filter_match_id(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filter_start_time(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filter_end_time(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_include_bench(CMsgDOTAFantasyTeamScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamScoreRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kIncludeBenchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
}
CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest(const CMsgDOTAFantasyTeamScoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_bench_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(include_bench_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
}

void CMsgDOTAFantasyTeamScoreRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_bench_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(include_bench_));
}

CMsgDOTAFantasyTeamScoreRequest::~CMsgDOTAFantasyTeamScoreRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamScoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamScoreRequest& CMsgDOTAFantasyTeamScoreRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_bench_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(include_bench_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamScoreRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamScoreRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fantasy_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 filter_match_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_filter_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_start_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_filter_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_end_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_filter_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool include_bench = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_include_bench(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_filter_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_filter_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_filter_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_bench = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_include_bench(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_bench_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional uint64 filter_match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->filter_match_id(), output);
  }

  // optional uint32 filter_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filter_end_time(), output);
  }

  // optional bool include_bench = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->include_bench(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional uint64 filter_match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->filter_match_id(), target);
  }

  // optional uint32 filter_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->filter_end_time(), target);
  }

  // optional bool include_bench = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->include_bench(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 filter_match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional uint32 filter_start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional bool include_bench = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamScoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      include_bench_ = from.include_bench_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreRequest::Swap(CMsgDOTAFantasyTeamScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreRequest::InternalSwap(CMsgDOTAFantasyTeamScoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(owner_account_id_, other->owner_account_id_);
  swap(filter_match_id_, other->filter_match_id_);
  swap(fantasy_team_index_, other->fantasy_team_index_);
  swap(filter_start_time_, other->filter_start_time_);
  swap(filter_end_time_, other->filter_end_time_);
  swap(include_bench_, other->include_bench_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::kAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}
CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::~CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedDtor() {
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Swap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(score_, other->score_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamScoreResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamScoreResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_team_score(CMsgDOTAFantasyTeamScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamScoreResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse::kFantasyTeamScoreFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse::kFantasyPlayerScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
}
CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse(const CMsgDOTAFantasyTeamScoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fantasy_player_score_(from.fantasy_player_score_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
}

void CMsgDOTAFantasyTeamScoreResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_team_score_) -
      reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_score_));
}

CMsgDOTAFantasyTeamScoreResponse::~CMsgDOTAFantasyTeamScoreResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamScoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamScoreResponse& CMsgDOTAFantasyTeamScoreResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_player_score_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_team_score_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamScoreResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamScoreResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fantasy_team_score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_fantasy_team_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_InternalParse;
          object = msg->add_fantasy_player_score();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fantasy_team_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_team_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fantasy_player_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional float fantasy_team_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fantasy_team_score(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantasy_player_score_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->fantasy_player_score(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional float fantasy_team_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fantasy_team_score(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantasy_player_score_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->fantasy_player_score(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fantasy_player_score_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fantasy_player_score(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional float fantasy_team_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamScoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fantasy_player_score_.MergeFrom(from.fantasy_player_score_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_score_ = from.fantasy_team_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreResponse::Swap(CMsgDOTAFantasyTeamScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreResponse::InternalSwap(CMsgDOTAFantasyTeamScoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&fantasy_player_score_)->InternalSwap(CastToBase(&other->fantasy_player_score_));
  swap(result_, other->result_);
  swap(fantasy_team_score_, other->fantasy_team_score_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamStandingsRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamStandingsRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_count(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_filter_start_time(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filter_end_time(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_filter_match_id(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filter_last_match(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_filter_in_hall(CMsgDOTAFantasyTeamStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamStandingsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kCountFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterLastMatchFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterInHallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
}
CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest(const CMsgDOTAFantasyTeamStandingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_in_hall_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_in_hall_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_in_hall_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_in_hall_));
}

CMsgDOTAFantasyTeamStandingsRequest::~CMsgDOTAFantasyTeamStandingsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamStandingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamStandingsRequest& CMsgDOTAFantasyTeamStandingsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamStandingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_in_hall_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_in_hall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamStandingsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamStandingsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_start_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_filter_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_end_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_filter_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 filter_match_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_filter_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool filter_last_match = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_filter_last_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool filter_in_hall = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_filter_in_hall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamStandingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_filter_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_filter_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_filter_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_last_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_filter_last_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_in_hall = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_filter_in_hall(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_in_hall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamStandingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_last_match(), output);
  }

  // optional bool filter_in_hall = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filter_in_hall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_last_match(), target);
  }

  // optional bool filter_in_hall = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filter_in_hall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 filter_start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool filter_in_hall = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamStandingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_last_match_ = from.filter_last_match_;
    }
    if (cached_has_bits & 0x00000040u) {
      filter_in_hall_ = from.filter_in_hall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsRequest::Swap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsRequest::InternalSwap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(count_, other->count_);
  swap(filter_start_time_, other->filter_start_time_);
  swap(filter_end_time_, other->filter_end_time_);
  swap(filter_match_id_, other->filter_match_id_);
  swap(filter_last_match_, other->filter_last_match_);
  swap(filter_in_hall_, other->filter_in_hall_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_owner_account_id(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_fantasy_team_index(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_fantasy_team_logo(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_owner_name(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_team_name(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_score(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_score_against(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_wins(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_losses(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_streak(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamLogoFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kOwnerNameFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kScoreFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kScoreAgainstFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kWinsFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kLossesFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kStreakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}
CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_owner_name()) {
    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  fantasy_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_team_name()) {
    fantasy_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_team_name_);
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&streak_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(streak_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streak_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(streak_));
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::~CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_against_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(score_against_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streak_) -
        reinterpret_cast<char*>(&wins_)) + sizeof(streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fantasy_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 fantasy_team_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_fantasy_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string owner_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
        object = msg->mutable_owner_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string fantasy_team_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
        object = msg->mutable_fantasy_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float score = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float score_against = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_score_against(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 wins = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losses = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 streak = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fantasy_team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string owner_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_name().data(), static_cast<int>(this->owner_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_team_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_team_name().data(), static_cast<int>(this->fantasy_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_against = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_score_against(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_against_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 streak = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fantasy_team_logo(), output);
  }

  // optional string owner_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), static_cast<int>(this->owner_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->owner_name(), output);
  }

  // optional string fantasy_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_team_name().data(), static_cast<int>(this->fantasy_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fantasy_team_name(), output);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // optional float score_against = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->score_against(), output);
  }

  // optional uint32 wins = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wins(), output);
  }

  // optional uint32 losses = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->losses(), output);
  }

  // optional int32 streak = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->streak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fantasy_team_logo(), target);
  }

  // optional string owner_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), static_cast<int>(this->owner_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->owner_name(), target);
  }

  // optional string fantasy_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_team_name().data(), static_cast<int>(this->fantasy_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fantasy_team_name(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->score(), target);
  }

  // optional float score_against = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->score_against(), target);
  }

  // optional uint32 wins = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wins(), target);
  }

  // optional uint32 losses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->losses(), target);
  }

  // optional int32 streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->streak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string owner_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }

    // optional string fantasy_team_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 fantasy_team_logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_team_logo());
    }

    // optional uint32 fantasy_team_index = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional float score = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float score_against = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 wins = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional int32 streak = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streak());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fantasy_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fantasy_team_logo_ = from.fantasy_team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      score_against_ = from.score_against_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000200u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000400u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Swap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  owner_name_.Swap(&other->owner_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fantasy_team_name_.Swap(&other->fantasy_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(owner_account_id_, other->owner_account_id_);
  swap(fantasy_team_logo_, other->fantasy_team_logo_);
  swap(fantasy_team_index_, other->fantasy_team_index_);
  swap(score_, other->score_);
  swap(score_against_, other->score_against_);
  swap(wins_, other->wins_);
  swap(losses_, other->losses_);
  swap(streak_, other->streak_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamStandingsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamStandingsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamStandingsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamStandingsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse::kTeamScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
}
CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse(const CMsgDOTAFantasyTeamStandingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      team_scores_(from.team_scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  result_ = 0;
}

CMsgDOTAFantasyTeamStandingsResponse::~CMsgDOTAFantasyTeamStandingsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamStandingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamStandingsResponse& CMsgDOTAFantasyTeamStandingsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamStandingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_scores_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamStandingsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamStandingsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_InternalParse;
          object = msg->add_team_scores();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamStandingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamStandingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_scores_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->team_scores(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_scores_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->team_scores(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->team_scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_scores(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamStandingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_scores_.MergeFrom(from.team_scores_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse::Swap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsResponse::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&team_scores_)->InternalSwap(CastToBase(&other->team_scores_));
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerScoreRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerScoreRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyPlayerScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_player_account_id(CMsgDOTAFantasyPlayerScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_filter_start_time(CMsgDOTAFantasyPlayerScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filter_end_time(CMsgDOTAFantasyPlayerScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_filter_match_id(CMsgDOTAFantasyPlayerScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filter_last_match(CMsgDOTAFantasyPlayerScoreRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterLastMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
}
CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest(const CMsgDOTAFantasyPlayerScoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_last_match_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
}

CMsgDOTAFantasyPlayerScoreRequest::~CMsgDOTAFantasyPlayerScoreRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerScoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerScoreRequest& CMsgDOTAFantasyPlayerScoreRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerScoreRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_last_match_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerScoreRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerScoreRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_start_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_filter_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_end_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_filter_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 filter_match_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_filter_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool filter_last_match = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_filter_last_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_filter_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_filter_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_filter_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_last_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_filter_last_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 filter_start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_last_match_ = from.filter_last_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreRequest::Swap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(player_account_id_, other->player_account_id_);
  swap(filter_start_time_, other->filter_start_time_);
  swap(filter_end_time_, other->filter_end_time_);
  swap(filter_match_id_, other->filter_match_id_);
  swap(filter_last_match_, other->filter_last_match_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerScoreResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerScoreResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyPlayerScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fantasy_league_id(CMsgDOTAFantasyPlayerScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_player_account_id(CMsgDOTAFantasyPlayerScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_player_name(CMsgDOTAFantasyPlayerScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(CMsgDOTAFantasyPlayerScoreResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kPlayerNameFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
}
CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse(const CMsgDOTAFantasyPlayerScoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&result_)) + sizeof(score_));
}

CMsgDOTAFantasyPlayerScoreResponse::~CMsgDOTAFantasyPlayerScoreResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerScoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerScoreResponse& CMsgDOTAFantasyPlayerScoreResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerScoreResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&result_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerScoreResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerScoreResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float score = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_account_id(), output);
  }

  // optional string player_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_name(), output);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_account_id(), target);
  }

  // optional string player_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_name(), target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string player_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional float score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreResponse::Swap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(player_account_id_, other->player_account_id_);
  swap(score_, other->score_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerStandingsRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerStandingsRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_count(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_role(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filter_start_time(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_filter_end_time(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_filter_match_id(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filter_last_match(CMsgDOTAFantasyPlayerStandingsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStandingsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kCountFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kRoleFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterLastMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
}
CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest(const CMsgDOTAFantasyPlayerStandingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_last_match_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
}

CMsgDOTAFantasyPlayerStandingsRequest::~CMsgDOTAFantasyPlayerStandingsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerStandingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerStandingsRequest& CMsgDOTAFantasyPlayerStandingsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerStandingsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerStandingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_last_match_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(filter_last_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerStandingsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerStandingsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 role = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_role(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_start_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_filter_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 filter_end_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_filter_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 filter_match_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_filter_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool filter_last_match = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_filter_last_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerStandingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_role(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_filter_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_filter_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_filter_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_last_match = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_filter_last_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerStandingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // optional uint32 filter_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filter_last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // optional uint32 filter_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filter_last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 role = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 filter_start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint64 filter_match_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional uint32 filter_end_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional bool filter_last_match = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStandingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      filter_last_match_ = from.filter_last_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsRequest::Swap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsRequest::InternalSwap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(count_, other->count_);
  swap(role_, other->role_);
  swap(filter_start_time_, other->filter_start_time_);
  swap(filter_match_id_, other->filter_match_id_);
  swap(filter_end_time_, other->filter_end_time_);
  swap(filter_last_match_, other->filter_last_match_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::HasBitSetters {
 public:
  static void set_has_player_account_id(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_name(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kPlayerNameFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}
CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&player_account_id_, &from.player_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&player_account_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&player_account_id_)) + sizeof(score_));
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::~CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&player_account_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 player_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional float score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Swap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_account_id_, other->player_account_id_);
  swap(score_, other->score_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerStandingsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerStandingsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyPlayerStandingsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_league_id(CMsgDOTAFantasyPlayerStandingsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_role(CMsgDOTAFantasyPlayerStandingsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStandingsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kRoleFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kPlayerScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
}
CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse(const CMsgDOTAFantasyPlayerStandingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_scores_(from.player_scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&result_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&result_)) + sizeof(role_));
}

CMsgDOTAFantasyPlayerStandingsResponse::~CMsgDOTAFantasyPlayerStandingsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedDtor() {
}

void CMsgDOTAFantasyPlayerStandingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerStandingsResponse& CMsgDOTAFantasyPlayerStandingsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerStandingsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerStandingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_scores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_) -
        reinterpret_cast<char*>(&result_)) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerStandingsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerStandingsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 role = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_role(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_InternalParse;
          object = msg->add_player_scores();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerStandingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_role(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerStandingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_scores_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->player_scores(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_scores_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_scores(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_scores(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 role = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStandingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_scores_.MergeFrom(from.player_scores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse::Swap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsResponse::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_scores_)->InternalSwap(CastToBase(&other->player_scores_));
  swap(result_, other->result_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(role_, other->role_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueCreateRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueCreateRequest::HasBitSetters {
 public:
  static void set_has_season_id(CMsgDOTAFantasyLeagueCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_fantasy_league_name(CMsgDOTAFantasyLeagueCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_password(CMsgDOTAFantasyLeagueCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_name(CMsgDOTAFantasyLeagueCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_logo(CMsgDOTAFantasyLeagueCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ticket_item_id(CMsgDOTAFantasyLeagueCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueCreateRequest::kSeasonIdFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kTeamNameFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kLogoFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kTicketItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
}
CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest(const CMsgDOTAFantasyLeagueCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_league_name()) {
    fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(season_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_id_) -
      reinterpret_cast<char*>(&logo_)) + sizeof(season_id_));
}

CMsgDOTAFantasyLeagueCreateRequest::~CMsgDOTAFantasyLeagueCreateRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueCreateRequest& CMsgDOTAFantasyLeagueCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(season_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 season_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_season_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string fantasy_league_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
        object = msg->mutable_fantasy_league_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string password = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 logo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ticket_item_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_ticket_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_season_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_league_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ticket_item_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ticket_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->season_id(), output);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fantasy_league_name(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logo(), output);
  }

  // optional uint64 ticket_item_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ticket_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->season_id(), target);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), static_cast<int>(this->fantasy_league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fantasy_league_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logo(), target);
  }

  // optional uint64 ticket_item_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ticket_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string fantasy_league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string team_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 logo = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 ticket_item_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket_item_id());
    }

    // optional uint32 season_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      ticket_item_id_ = from.ticket_item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      season_id_ = from.season_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueCreateRequest::Swap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueCreateRequest::InternalSwap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_league_name_.Swap(&other->fantasy_league_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logo_, other->logo_);
  swap(ticket_item_id_, other->ticket_item_id_);
  swap(season_id_, other->season_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueCreateResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueCreateResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueCreateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueCreateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueCreateResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueCreateResponse::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
}
CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse(const CMsgDOTAFantasyLeagueCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueCreateResponse::~CMsgDOTAFantasyLeagueCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueCreateResponse& CMsgDOTAFantasyLeagueCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_league_id_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueCreateResponse::Swap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueCreateResponse::InternalSwap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamCreateRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamCreateRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_password(CMsgDOTAFantasyTeamCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_name(CMsgDOTAFantasyTeamCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_logo(CMsgDOTAFantasyTeamCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ticket_item_id(CMsgDOTAFantasyTeamCreateRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamCreateRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kLogoFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kTicketItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
}
CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest(const CMsgDOTAFantasyTeamCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
}

void CMsgDOTAFantasyTeamCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&logo_)) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyTeamCreateRequest::~CMsgDOTAFantasyTeamCreateRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamCreateRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamCreateRequest& CMsgDOTAFantasyTeamCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamCreateRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_league_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ticket_item_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ticket_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ticket_item_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ticket_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional uint64 ticket_item_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ticket_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional uint64 ticket_item_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ticket_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string team_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 ticket_item_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket_item_id());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      ticket_item_id_ = from.ticket_item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamCreateRequest::Swap(CMsgDOTAFantasyTeamCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamCreateRequest::InternalSwap(CMsgDOTAFantasyTeamCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logo_, other->logo_);
  swap(ticket_item_id_, other->ticket_item_id_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamCreateResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamCreateResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamCreateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_team_index(CMsgDOTAFantasyTeamCreateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamCreateResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamCreateResponse::kFantasyTeamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
}
CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse(const CMsgDOTAFantasyTeamCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
}

void CMsgDOTAFantasyTeamCreateResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_team_index_) -
      reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_index_));
}

CMsgDOTAFantasyTeamCreateResponse::~CMsgDOTAFantasyTeamCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamCreateResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamCreateResponse& CMsgDOTAFantasyTeamCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamCreateResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_team_index_) -
        reinterpret_cast<char*>(&result_)) + sizeof(fantasy_team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fantasy_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamCreateResponse::Swap(CMsgDOTAFantasyTeamCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamCreateResponse::InternalSwap(CMsgDOTAFantasyTeamCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(fantasy_team_index_, other->fantasy_team_index_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_invited(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::kAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::kInvitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}
CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invited_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(invited_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invited_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(invited_));
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::~CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedDtor() {
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invited_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(invited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool invited = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_invited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invited = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_invited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool invited = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->invited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool invited = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->invited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool invited = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      invited_ = from.invited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Swap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(invited_, other->invited_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueEditInvitesRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueEditInvitesRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueEditInvitesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_password(CMsgDOTAFantasyLeagueEditInvitesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kInviteChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
}
CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest(const CMsgDOTAFantasyLeagueEditInvitesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      invite_change_(from.invite_change_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueEditInvitesRequest::~CMsgDOTAFantasyLeagueEditInvitesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueEditInvitesRequest& CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueEditInvitesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueEditInvitesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_change_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueEditInvitesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueEditInvitesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_InternalParse;
          object = msg->add_invite_change();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueEditInvitesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_invite_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueEditInvitesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invite_change_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->invite_change(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invite_change_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->invite_change(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->invite_change_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->invite_change(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInvitesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invite_change_.MergeFrom(from.invite_change_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::Swap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&invite_change_)->InternalSwap(CastToBase(&other->invite_change_));
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueEditInvitesResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueEditInvitesResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueEditInvitesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInvitesResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
}
CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse(const CMsgDOTAFantasyLeagueEditInvitesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyLeagueEditInvitesResponse::~CMsgDOTAFantasyLeagueEditInvitesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueEditInvitesResponse& CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueEditInvitesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueEditInvitesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueEditInvitesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueEditInvitesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueEditInvitesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueEditInvitesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueEditInvitesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::Swap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueDraftStatusRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueDraftStatusRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueDraftStatusRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftStatusRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
}
CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest(const CMsgDOTAFantasyLeagueDraftStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueDraftStatusRequest::~CMsgDOTAFantasyLeagueDraftStatusRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueDraftStatusRequest& CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueDraftStatusRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueDraftStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueDraftStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueDraftStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueDraftStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueDraftStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatusRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::Swap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueDraftStatus::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueDraftStatus::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueDraftStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_current_pick(CMsgDOTAFantasyLeagueDraftStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_remaining(CMsgDOTAFantasyLeagueDraftStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_pending_resume(CMsgDOTAFantasyLeagueDraftStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_completed(CMsgDOTAFantasyLeagueDraftStatus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftStatus::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kDraftOrderFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kCurrentPickFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kTimeRemainingFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kPendingResumeFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kCompletedFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kAvailablePlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
}
CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus(const CMsgDOTAFantasyLeagueDraftStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      draft_order_(from.draft_order_),
      available_players_(from.available_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(completed_));
}

CMsgDOTAFantasyLeagueDraftStatus::~CMsgDOTAFantasyLeagueDraftStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueDraftStatus& CMsgDOTAFantasyLeagueDraftStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueDraftStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueDraftStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  draft_order_.Clear();
  available_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueDraftStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueDraftStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 draft_order = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_draft_order(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_draft_order();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 current_pick = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_current_pick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_remaining = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool pending_resume = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_pending_resume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool completed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 available_players = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_available_players(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_available_players();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueDraftStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 draft_order = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_draft_order())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_draft_order())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_pick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_current_pick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_remaining = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pending_resume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_pending_resume(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_resume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool completed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 available_players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_available_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_available_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueDraftStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // repeated uint32 draft_order = 2;
  for (int i = 0, n = this->draft_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->draft_order(i), output);
  }

  // optional uint32 current_pick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_pick(), output);
  }

  // optional uint32 time_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_remaining(), output);
  }

  // optional bool pending_resume = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pending_resume(), output);
  }

  // optional bool completed = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->completed(), output);
  }

  // repeated uint32 available_players = 7;
  for (int i = 0, n = this->available_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->available_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // repeated uint32 draft_order = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->draft_order_, target);

  // optional uint32 current_pick = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_pick(), target);
  }

  // optional uint32 time_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_remaining(), target);
  }

  // optional bool pending_resume = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pending_resume(), target);
  }

  // optional bool completed = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->completed(), target);
  }

  // repeated uint32 available_players = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->available_players_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 draft_order = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->draft_order_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->draft_order_size());
    total_size += data_size;
  }

  // repeated uint32 available_players = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->available_players_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->available_players_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 current_pick = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_pick());
    }

    // optional uint32 time_remaining = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_remaining());
    }

    // optional bool pending_resume = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool completed = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  draft_order_.MergeFrom(from.draft_order_);
  available_players_.MergeFrom(from.available_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_pick_ = from.current_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_remaining_ = from.time_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      pending_resume_ = from.pending_resume_;
    }
    if (cached_has_bits & 0x00000010u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatus::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftStatus::Swap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftStatus::InternalSwap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  draft_order_.InternalSwap(&other->draft_order_);
  available_players_.InternalSwap(&other->available_players_);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(current_pick_, other->current_pick_);
  swap(time_remaining_, other->time_remaining_);
  swap(pending_resume_, other->pending_resume_);
  swap(completed_, other->completed_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueDraftPlayerRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueDraftPlayerRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeagueDraftPlayerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_index(CMsgDOTAFantasyLeagueDraftPlayerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_account_id(CMsgDOTAFantasyLeagueDraftPlayerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kPlayerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
}
CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(player_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_account_id_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(player_account_id_));
}

CMsgDOTAFantasyLeagueDraftPlayerRequest::~CMsgDOTAFantasyLeagueDraftPlayerRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueDraftPlayerRequest& CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueDraftPlayerRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueDraftPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_account_id_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(player_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueDraftPlayerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueDraftPlayerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftPlayerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 player_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftPlayerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftPlayerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_account_id_ = from.player_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::Swap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(team_index_, other->team_index_);
  swap(player_account_id_, other->player_account_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftPlayerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeagueDraftPlayerResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeagueDraftPlayerResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeagueDraftPlayerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftPlayerResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
}
CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyLeagueDraftPlayerResponse::~CMsgDOTAFantasyLeagueDraftPlayerResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeagueDraftPlayerResponse& CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeagueDraftPlayerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeagueDraftPlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeagueDraftPlayerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeagueDraftPlayerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeagueDraftPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftPlayerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftPlayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftPlayerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeagueDraftPlayerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::Swap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftPlayerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamRosterSwapRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamRosterSwapRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamRosterSwapRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_index(CMsgDOTAFantasyTeamRosterSwapRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgDOTAFantasyTeamRosterSwapRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_slot_1(CMsgDOTAFantasyTeamRosterSwapRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_slot_2(CMsgDOTAFantasyTeamRosterSwapRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterSwapRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kTimestampFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kSlot1FieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kSlot2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
}
CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest(const CMsgDOTAFantasyTeamRosterSwapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(slot_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_2_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(slot_2_));
}

CMsgDOTAFantasyTeamRosterSwapRequest::~CMsgDOTAFantasyTeamRosterSwapRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamRosterSwapRequest& CMsgDOTAFantasyTeamRosterSwapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamRosterSwapRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamRosterSwapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_2_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(slot_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamRosterSwapRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamRosterSwapRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_slot_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot_2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_slot_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamRosterSwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_slot_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_slot_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamRosterSwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional uint32 slot_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_1(), output);
  }

  // optional uint32 slot_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slot_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterSwapRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional uint32 slot_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_1(), target);
  }

  // optional uint32 slot_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slot_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterSwapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 slot_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_1());
    }

    // optional uint32 slot_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterSwapRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterSwapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_1_ = from.slot_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      slot_2_ = from.slot_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::Swap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterSwapRequest::InternalSwap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(team_index_, other->team_index_);
  swap(timestamp_, other->timestamp_);
  swap(slot_1_, other->slot_1_);
  swap(slot_2_, other->slot_2_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterSwapRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamRosterSwapResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamRosterSwapResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamRosterSwapResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterSwapResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
}
CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse(const CMsgDOTAFantasyTeamRosterSwapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyTeamRosterSwapResponse::~CMsgDOTAFantasyTeamRosterSwapResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamRosterSwapResponse& CMsgDOTAFantasyTeamRosterSwapResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamRosterSwapResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamRosterSwapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamRosterSwapResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamRosterSwapResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamRosterSwapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamRosterSwapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterSwapResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterSwapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterSwapResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterSwapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::Swap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterSwapResponse::InternalSwap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterSwapResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamRosterAddDropRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamRosterAddDropRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamRosterAddDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_index(CMsgDOTAFantasyTeamRosterAddDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_add_account_id(CMsgDOTAFantasyTeamRosterAddDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_drop_account_id(CMsgDOTAFantasyTeamRosterAddDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kAddAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kDropAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
}
CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest(const CMsgDOTAFantasyTeamRosterAddDropRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(drop_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_account_id_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(drop_account_id_));
}

CMsgDOTAFantasyTeamRosterAddDropRequest::~CMsgDOTAFantasyTeamRosterAddDropRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamRosterAddDropRequest& CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamRosterAddDropRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamRosterAddDropRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drop_account_id_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(drop_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamRosterAddDropRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamRosterAddDropRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 add_account_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_add_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 drop_account_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_drop_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamRosterAddDropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 add_account_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_add_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drop_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_drop_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamRosterAddDropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 add_account_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_account_id(), output);
  }

  // optional uint32 drop_account_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->drop_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterAddDropRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 add_account_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_account_id(), target);
  }

  // optional uint32 drop_account_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->drop_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterAddDropRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 add_account_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_account_id());
    }

    // optional uint32 drop_account_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterAddDropRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterAddDropRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_account_id_ = from.add_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      drop_account_id_ = from.drop_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::Swap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(team_index_, other->team_index_);
  swap(add_account_id_, other->add_account_id_);
  swap(drop_account_id_, other->drop_account_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterAddDropRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamRosterAddDropResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamRosterAddDropResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamRosterAddDropResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterAddDropResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
}
CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse(const CMsgDOTAFantasyTeamRosterAddDropResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyTeamRosterAddDropResponse::~CMsgDOTAFantasyTeamRosterAddDropResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamRosterAddDropResponse& CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamRosterAddDropResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamRosterAddDropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamRosterAddDropResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamRosterAddDropResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamRosterAddDropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamRosterAddDropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterAddDropResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterAddDropResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterAddDropResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterAddDropResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::Swap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterAddDropResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamTradesRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamTradesRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamTradesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradesRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
}
CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest(const CMsgDOTAFantasyTeamTradesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
}

void CMsgDOTAFantasyTeamTradesRequest::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyTeamTradesRequest::~CMsgDOTAFantasyTeamTradesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamTradesRequest& CMsgDOTAFantasyTeamTradesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamTradesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamTradesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamTradesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamTradesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamTradesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesRequest::Swap(CMsgDOTAFantasyTeamTradesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesRequest::InternalSwap(CMsgDOTAFantasyTeamTradesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamTradesResponse_Trade::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamTradesResponse_Trade::HasBitSetters {
 public:
  static void set_has_timestamp(CMsgDOTAFantasyTeamTradesResponse_Trade* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owner_account_id_1(CMsgDOTAFantasyTeamTradesResponse_Trade* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_owner_account_id_2(CMsgDOTAFantasyTeamTradesResponse_Trade* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_player_account_id_1(CMsgDOTAFantasyTeamTradesResponse_Trade* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_player_account_id_2(CMsgDOTAFantasyTeamTradesResponse_Trade* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_status(CMsgDOTAFantasyTeamTradesResponse_Trade* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kTimestampFieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kOwnerAccountId1FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kPlayerAccountId1FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kPlayerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
}
CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade(const CMsgDOTAFantasyTeamTradesResponse_Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

CMsgDOTAFantasyTeamTradesResponse_Trade::~CMsgDOTAFantasyTeamTradesResponse_Trade() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamTradesResponse_Trade_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamTradesResponse_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamTradesResponse_Trade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamTradesResponse_Trade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id_1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_owner_account_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id_2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_owner_account_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id_1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_player_account_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id_2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_player_account_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamTradesResponse_Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_player_account_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_player_account_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamTradesResponse_Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id_1(), output);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_account_id_2(), output);
  }

  // optional uint32 player_account_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_account_id_1(), output);
  }

  // optional uint32 player_account_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_account_id_2(), output);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesResponse_Trade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_account_id_2(), target);
  }

  // optional uint32 player_account_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_account_id_1(), target);
  }

  // optional uint32 player_account_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_account_id_2(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesResponse_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 owner_account_id_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional uint32 player_account_id_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id_1());
    }

    // optional uint32 player_account_id_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id_2());
    }

    // optional uint32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesResponse_Trade* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradesResponse_Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_1_ = from.owner_account_id_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_account_id_1_ = from.player_account_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_account_id_2_ = from.player_account_id_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse_Trade::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::Swap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::InternalSwap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(owner_account_id_1_, other->owner_account_id_1_);
  swap(owner_account_id_2_, other->owner_account_id_2_);
  swap(player_account_id_1_, other->player_account_id_1_);
  swap(player_account_id_2_, other->player_account_id_2_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesResponse_Trade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamTradesResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamTradesResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamTradesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
}
CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse(const CMsgDOTAFantasyTeamTradesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
}

void CMsgDOTAFantasyTeamTradesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyTeamTradesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  result_ = 0;
}

CMsgDOTAFantasyTeamTradesResponse::~CMsgDOTAFantasyTeamTradesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamTradesResponse& CMsgDOTAFantasyTeamTradesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamTradesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamTradesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamTradesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamTradesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamTradesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesResponse::Swap(CMsgDOTAFantasyTeamTradesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesResponse::InternalSwap(CMsgDOTAFantasyTeamTradesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamTradeCancelRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamTradeCancelRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamTradeCancelRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_index_1(CMsgDOTAFantasyTeamTradeCancelRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_owner_account_id_2(CMsgDOTAFantasyTeamTradeCancelRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_index_2(CMsgDOTAFantasyTeamTradeCancelRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradeCancelRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kTeamIndex1FieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kTeamIndex2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
}
CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest(const CMsgDOTAFantasyTeamTradeCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_index_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_index_2_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_2_));
}

CMsgDOTAFantasyTeamTradeCancelRequest::~CMsgDOTAFantasyTeamTradeCancelRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamTradeCancelRequest& CMsgDOTAFantasyTeamTradeCancelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamTradeCancelRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamTradeCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_index_2_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamTradeCancelRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamTradeCancelRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index_1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_index_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id_2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_owner_account_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index_2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_index_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamTradeCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_index_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_index_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamTradeCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index_1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_index_1(), output);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner_account_id_2(), output);
  }

  // optional uint32 team_index_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_index_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradeCancelRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index_1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_index_1(), target);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner_account_id_2(), target);
  }

  // optional uint32 team_index_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_index_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamTradeCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index_1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index_1());
    }

    // optional uint32 owner_account_id_2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional uint32 team_index_2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradeCancelRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradeCancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_1_ = from.team_index_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_index_2_ = from.team_index_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::Swap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradeCancelRequest::InternalSwap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(team_index_1_, other->team_index_1_);
  swap(owner_account_id_2_, other->owner_account_id_2_);
  swap(team_index_2_, other->team_index_2_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradeCancelRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamTradeCancelResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamTradeCancelResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamTradeCancelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradeCancelResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
}
CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse(const CMsgDOTAFantasyTeamTradeCancelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyTeamTradeCancelResponse::~CMsgDOTAFantasyTeamTradeCancelResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamTradeCancelResponse& CMsgDOTAFantasyTeamTradeCancelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamTradeCancelResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamTradeCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamTradeCancelResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamTradeCancelResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamTradeCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamTradeCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradeCancelResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamTradeCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradeCancelResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamTradeCancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::Swap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradeCancelResponse::InternalSwap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradeCancelResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamRosterRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamRosterRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyTeamRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_index(CMsgDOTAFantasyTeamRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_owner_account_id(CMsgDOTAFantasyTeamRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_timestamp(CMsgDOTAFantasyTeamRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
}
CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest(const CMsgDOTAFantasyTeamRosterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
}

void CMsgDOTAFantasyTeamRosterRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(timestamp_));
}

CMsgDOTAFantasyTeamRosterRequest::~CMsgDOTAFantasyTeamRosterRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamRosterRequest& CMsgDOTAFantasyTeamRosterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamRosterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamRosterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 owner_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_account_id(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 owner_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_account_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 owner_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterRequest::Swap(CMsgDOTAFantasyTeamRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterRequest::InternalSwap(CMsgDOTAFantasyTeamRosterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(team_index_, other->team_index_);
  swap(owner_account_id_, other->owner_account_id_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyTeamRosterResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyTeamRosterResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyTeamRosterResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamRosterResponse::kPlayerAccountIdsFieldNumber;
const int CMsgDOTAFantasyTeamRosterResponse::kPlayerLockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
}
CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse(const CMsgDOTAFantasyTeamRosterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_account_ids_(from.player_account_ids_),
      player_locked_(from.player_locked_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
}

void CMsgDOTAFantasyTeamRosterResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyTeamRosterResponse::~CMsgDOTAFantasyTeamRosterResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyTeamRosterResponse& CMsgDOTAFantasyTeamRosterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyTeamRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyTeamRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_account_ids_.Clear();
  player_locked_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyTeamRosterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyTeamRosterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_player_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_player_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated bool player_locked = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_player_locked(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedBoolParser;
        object = msg->mutable_player_locked();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyTeamRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_player_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool player_locked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24u, input, this->mutable_player_locked())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_player_locked())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyTeamRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0, n = this->player_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_account_ids(i), output);
  }

  // repeated bool player_locked = 3;
  for (int i = 0, n = this->player_locked_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->player_locked(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated uint32 player_account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->player_account_ids_, target);

  // repeated bool player_locked = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(3, this->player_locked_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_account_ids_size());
    total_size += data_size;
  }

  // repeated bool player_locked = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_locked_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_locked_size());
    total_size += data_size;
  }

  // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyTeamRosterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_ids_.MergeFrom(from.player_account_ids_);
  player_locked_.MergeFrom(from.player_locked_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterResponse::Swap(CMsgDOTAFantasyTeamRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterResponse::InternalSwap(CMsgDOTAFantasyTeamRosterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_account_ids_.InternalSwap(&other->player_account_ids_);
  player_locked_.InternalSwap(&other->player_locked_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerHisoricalStatsRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyPlayerHisoricalStatsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}
CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest::~CMsgDOTAFantasyPlayerHisoricalStatsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerHisoricalStatsRequest& CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerHisoricalStatsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerHisoricalStatsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerHisoricalStatsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Swap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::HasBitSetters {
 public:
  static void set_has_matches(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_levels(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_kills(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deaths(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_assists(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_last_hits(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_denies(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_gpm(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_xppm(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_stuns(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_healing(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_tower_kills(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_roshan_kills(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_score(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kMatchesFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kLevelsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kAssistsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kLastHitsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kDeniesFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kXppmFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kStunsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kHealingFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matches_, &from.matches_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&matches_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedCtor() {
  ::memset(&matches_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&matches_)) + sizeof(score_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedDtor() {
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&matches_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpm_) -
        reinterpret_cast<char*>(&matches_)) + sizeof(gpm_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&xppm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&xppm_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_matches(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float levels = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_levels(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float kills = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float deaths = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_deaths(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float assists = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_assists(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float last_hits = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_last_hits(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float denies = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_denies(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float gpm = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_gpm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float xppm = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_xppm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float stuns = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_stuns(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float healing = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_healing(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float tower_kills = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_tower_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float roshan_kills = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_roshan_kills(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float score = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_matches(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float levels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_levels(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_deaths(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_assists(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_hits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_last_hits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float denies = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_denies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_gpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xppm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_xppm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stuns = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_stuns(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float healing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_healing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tower_kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_tower_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roshan_kills = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_roshan_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roshan_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matches = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matches(), output);
  }

  // optional float levels = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->levels(), output);
  }

  // optional float kills = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kills(), output);
  }

  // optional float deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->deaths(), output);
  }

  // optional float assists = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->assists(), output);
  }

  // optional float last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->last_hits(), output);
  }

  // optional float denies = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->denies(), output);
  }

  // optional float gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->gpm(), output);
  }

  // optional float xppm = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->xppm(), output);
  }

  // optional float stuns = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->stuns(), output);
  }

  // optional float healing = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->healing(), output);
  }

  // optional float tower_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tower_kills(), output);
  }

  // optional float roshan_kills = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->roshan_kills(), output);
  }

  // optional float score = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matches = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matches(), target);
  }

  // optional float levels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->levels(), target);
  }

  // optional float kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kills(), target);
  }

  // optional float deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->deaths(), target);
  }

  // optional float assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->assists(), target);
  }

  // optional float last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->last_hits(), target);
  }

  // optional float denies = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->denies(), target);
  }

  // optional float gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->gpm(), target);
  }

  // optional float xppm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->xppm(), target);
  }

  // optional float stuns = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->stuns(), target);
  }

  // optional float healing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->healing(), target);
  }

  // optional float tower_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tower_kills(), target);
  }

  // optional float roshan_kills = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->roshan_kills(), target);
  }

  // optional float score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 matches = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matches());
    }

    // optional float levels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float kills = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float assists = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float denies = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float gpm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float xppm = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float stuns = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float healing = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float score = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      matches_ = from.matches_;
    }
    if (cached_has_bits & 0x00000002u) {
      levels_ = from.levels_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000040u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpm_ = from.gpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      xppm_ = from.xppm_;
    }
    if (cached_has_bits & 0x00000200u) {
      stuns_ = from.stuns_;
    }
    if (cached_has_bits & 0x00000400u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000800u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matches_, other->matches_);
  swap(levels_, other->levels_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(assists_, other->assists_);
  swap(last_hits_, other->last_hits_);
  swap(denies_, other->denies_);
  swap(gpm_, other->gpm_);
  swap(xppm_, other->xppm_);
  swap(stuns_, other->stuns_);
  swap(healing_, other->healing_);
  swap(tower_kills_, other->tower_kills_);
  swap(roshan_kills_, other->roshan_kills_);
  swap(score_, other->score_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_._instance.get_mutable()->stats_premium_ = const_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(
      ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::internal_default_instance());
  ::proto::dota::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_._instance.get_mutable()->stats_professional_ = const_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(
      ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::internal_default_instance());
}
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_weeks(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& stats_premium(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg);
  static void set_has_stats_premium(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& stats_professional(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg);
  static void set_has_stats_professional(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::HasBitSetters::stats_premium(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
  return *msg->stats_premium_;
}
const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::HasBitSetters::stats_professional(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* msg) {
  return *msg->stats_professional_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kWeeksFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kStatsPremiumFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kStatsProfessionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats_premium()) {
    stats_premium_ = new ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(*from.stats_premium_);
  } else {
    stats_premium_ = nullptr;
  }
  if (from.has_stats_professional()) {
    stats_professional_ = new ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(*from.stats_professional_);
  } else {
    stats_professional_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weeks_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(weeks_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&stats_premium_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weeks_) -
      reinterpret_cast<char*>(&stats_premium_)) + sizeof(weeks_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedDtor() {
  if (this != internal_default_instance()) delete stats_premium_;
  if (this != internal_default_instance()) delete stats_professional_;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_premium_ != nullptr);
      stats_premium_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_professional_ != nullptr);
      stats_professional_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weeks_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(weeks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weeks = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_weeks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_InternalParse;
        object = msg->mutable_stats_premium();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_InternalParse;
        object = msg->mutable_stats_professional();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weeks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_weeks(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_premium()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_professional()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 weeks = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weeks(), output);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::stats_premium(this), output);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::stats_professional(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 weeks = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weeks(), target);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::stats_premium(this), target);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::stats_professional(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_premium_);
    }

    // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_professional_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 weeks = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats_premium()->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from.stats_premium());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stats_professional()->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from.stats_professional());
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      weeks_ = from.weeks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stats_premium_, other->stats_premium_);
  swap(stats_professional_, other->stats_professional_);
  swap(account_id_, other->account_id_);
  swap(weeks_, other->weeks_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerHisoricalStatsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyPlayerHisoricalStatsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  result_ = 0;
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse::~CMsgDOTAFantasyPlayerHisoricalStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedDtor() {
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerHisoricalStatsResponse& CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerHisoricalStatsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerHisoricalStatsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerHisoricalStatsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerHisoricalStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyMessageAdd::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyMessageAdd::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyMessageAdd* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CMsgDOTAFantasyMessageAdd* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessageAdd::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyMessageAdd::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessageAdd)
}
CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd(const CMsgDOTAFantasyMessageAdd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessageAdd)
}

void CMsgDOTAFantasyMessageAdd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyMessageAdd_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyMessageAdd::~CMsgDOTAFantasyMessageAdd() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessageAdd)
  SharedDtor();
}

void CMsgDOTAFantasyMessageAdd::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyMessageAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyMessageAdd& CMsgDOTAFantasyMessageAdd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyMessageAdd_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyMessageAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyMessageAdd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyMessageAdd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyMessageAdd.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyMessageAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyMessageAdd.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessageAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessageAdd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyMessageAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessageAdd.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessageAdd)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessageAdd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessageAdd.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessageAdd)
  return target;
}

size_t CMsgDOTAFantasyMessageAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessageAdd* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyMessageAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessageAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessageAdd)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const CMsgDOTAFantasyMessageAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const CMsgDOTAFantasyMessageAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessageAdd::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessageAdd::Swap(CMsgDOTAFantasyMessageAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessageAdd::InternalSwap(CMsgDOTAFantasyMessageAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessageAdd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyMessagesRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyMessagesRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyMessagesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_start_message(CMsgDOTAFantasyMessagesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_end_message(CMsgDOTAFantasyMessagesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessagesRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyMessagesRequest::kStartMessageFieldNumber;
const int CMsgDOTAFantasyMessagesRequest::kEndMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessagesRequest)
}
CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest(const CMsgDOTAFantasyMessagesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_message_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_message_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessagesRequest)
}

void CMsgDOTAFantasyMessagesRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_message_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_message_));
}

CMsgDOTAFantasyMessagesRequest::~CMsgDOTAFantasyMessagesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessagesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesRequest::SharedDtor() {
}

void CMsgDOTAFantasyMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyMessagesRequest& CMsgDOTAFantasyMessagesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyMessagesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_message_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyMessagesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyMessagesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_message(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_end_message(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_start_message(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_end_message(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessagesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 start_message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_message(), output);
  }

  // optional uint32 end_message = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessagesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 start_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_message(), target);
  }

  // optional uint32 end_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessagesRequest)
  return target;
}

size_t CMsgDOTAFantasyMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 start_message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_message());
    }

    // optional uint32 end_message = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_message());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyMessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessagesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const CMsgDOTAFantasyMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_message_ = from.start_message_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_message_ = from.end_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const CMsgDOTAFantasyMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesRequest::Swap(CMsgDOTAFantasyMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesRequest::InternalSwap(CMsgDOTAFantasyMessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(start_message_, other->start_message_);
  swap(end_message_, other->end_message_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyMessagesResponse_Message::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyMessagesResponse_Message::HasBitSetters {
 public:
  static void set_has_message_id(CMsgDOTAFantasyMessagesResponse_Message* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CMsgDOTAFantasyMessagesResponse_Message* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_author_account_id(CMsgDOTAFantasyMessagesResponse_Message* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time(CMsgDOTAFantasyMessagesResponse_Message* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessagesResponse_Message::kMessageIdFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kMessageFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kAuthorAccountIdFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
}
CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message(const CMsgDOTAFantasyMessagesResponse_Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(time_));
}

CMsgDOTAFantasyMessagesResponse_Message::~CMsgDOTAFantasyMessagesResponse_Message() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyMessagesResponse_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse_Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyMessagesResponse_Message_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyMessagesResponse_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyMessagesResponse_Message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyMessagesResponse_Message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 message_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_message_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 author_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_author_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyMessagesResponse_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_message_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 author_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_author_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &author_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyMessagesResponse_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 author_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->author_account_id(), output);
  }

  // optional uint32 time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesResponse_Message::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 author_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->author_account_id(), target);
  }

  // optional uint32 time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  return target;
}

size_t CMsgDOTAFantasyMessagesResponse_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 message_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional uint32 author_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->author_account_id());
    }

    // optional uint32 time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesResponse_Message* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyMessagesResponse_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      author_account_id_ = from.author_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse_Message::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesResponse_Message::Swap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesResponse_Message::InternalSwap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_id_, other->message_id_);
  swap(author_account_id_, other->author_account_id_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesResponse_Message::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyMessagesResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyMessagesResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyMessagesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_total_messages(CMsgDOTAFantasyMessagesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessagesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyMessagesResponse::kMessagesFieldNumber;
const int CMsgDOTAFantasyMessagesResponse::kNumTotalMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessagesResponse)
}
CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse(const CMsgDOTAFantasyMessagesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_total_messages_) -
    reinterpret_cast<char*>(&result_)) + sizeof(num_total_messages_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessagesResponse)
}

void CMsgDOTAFantasyMessagesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyMessagesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_total_messages_) -
      reinterpret_cast<char*>(&result_)) + sizeof(num_total_messages_));
}

CMsgDOTAFantasyMessagesResponse::~CMsgDOTAFantasyMessagesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessagesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesResponse::SharedDtor() {
}

void CMsgDOTAFantasyMessagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyMessagesResponse& CMsgDOTAFantasyMessagesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyMessagesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_total_messages_) -
        reinterpret_cast<char*>(&result_)) + sizeof(num_total_messages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyMessagesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyMessagesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message::_InternalParse;
          object = msg->add_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 num_total_messages = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_total_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyMessagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_total_messages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_total_messages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_total_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessagesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyMessagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->messages(static_cast<int>(i)),
      output);
  }

  // optional uint32 num_total_messages = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_total_messages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessagesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->messages(static_cast<int>(i)), target);
  }

  // optional uint32 num_total_messages = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_total_messages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessagesResponse)
  return target;
}

size_t CMsgDOTAFantasyMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 num_total_messages = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_total_messages());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyMessagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessagesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessagesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const CMsgDOTAFantasyMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_total_messages_ = from.num_total_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const CMsgDOTAFantasyMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesResponse::Swap(CMsgDOTAFantasyMessagesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesResponse::InternalSwap(CMsgDOTAFantasyMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  swap(result_, other->result_);
  swap(num_total_messages_, other->num_total_messages_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyRemoveOwner::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyRemoveOwner::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyRemoveOwner* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owner_account_id(CMsgDOTAFantasyRemoveOwner* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_index(CMsgDOTAFantasyRemoveOwner* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyRemoveOwner::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyRemoveOwner::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyRemoveOwner::kTeamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyRemoveOwner)
}
CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner(const CMsgDOTAFantasyRemoveOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyRemoveOwner)
}

void CMsgDOTAFantasyRemoveOwner::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_index_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_));
}

CMsgDOTAFantasyRemoveOwner::~CMsgDOTAFantasyRemoveOwner() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyRemoveOwner)
  SharedDtor();
}

void CMsgDOTAFantasyRemoveOwner::SharedDtor() {
}

void CMsgDOTAFantasyRemoveOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyRemoveOwner& CMsgDOTAFantasyRemoveOwner::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyRemoveOwner_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyRemoveOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_index_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyRemoveOwner::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyRemoveOwner*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyRemoveOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyRemoveOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyRemoveOwner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyRemoveOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 team_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyRemoveOwner)
}

::google::protobuf::uint8* CMsgDOTAFantasyRemoveOwner::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 team_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyRemoveOwner)
  return target;
}

size_t CMsgDOTAFantasyRemoveOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 team_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyRemoveOwner* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyRemoveOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyRemoveOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyRemoveOwner)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const CMsgDOTAFantasyRemoveOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_index_ = from.team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const CMsgDOTAFantasyRemoveOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwner::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyRemoveOwner::Swap(CMsgDOTAFantasyRemoveOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyRemoveOwner::InternalSwap(CMsgDOTAFantasyRemoveOwner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(owner_account_id_, other->owner_account_id_);
  swap(team_index_, other->team_index_);
}

::google::protobuf::Metadata CMsgDOTAFantasyRemoveOwner::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyRemoveOwnerResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyRemoveOwnerResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyRemoveOwnerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyRemoveOwnerResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
}
CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse(const CMsgDOTAFantasyRemoveOwnerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyRemoveOwnerResponse::~CMsgDOTAFantasyRemoveOwnerResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  SharedDtor();
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedDtor() {
}

void CMsgDOTAFantasyRemoveOwnerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyRemoveOwnerResponse& CMsgDOTAFantasyRemoveOwnerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyRemoveOwnerResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyRemoveOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyRemoveOwnerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyRemoveOwnerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyRemoveOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyRemoveOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyRemoveOwnerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  return target;
}

size_t CMsgDOTAFantasyRemoveOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyRemoveOwnerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyRemoveOwnerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwnerResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyRemoveOwnerResponse::Swap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyRemoveOwnerResponse::InternalSwap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyRemoveOwnerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyScheduledMatchesRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyScheduledMatchesRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyScheduledMatchesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyScheduledMatchesRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
}
CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest(const CMsgDOTAFantasyScheduledMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedCtor() {
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyScheduledMatchesRequest::~CMsgDOTAFantasyScheduledMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedDtor() {
}

void CMsgDOTAFantasyScheduledMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyScheduledMatchesRequest& CMsgDOTAFantasyScheduledMatchesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyScheduledMatchesRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyScheduledMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyScheduledMatchesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyScheduledMatchesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyScheduledMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyScheduledMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 fantasy_league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyScheduledMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesRequest::Swap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesRequest::InternalSwap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::HasBitSetters {
 public:
  static void set_has_timestamp(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kTimestampFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kTeamIdsFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kLeagueIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      team_ids_(from.team_ids_),
      league_ids_(from.league_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedCtor() {
  timestamp_ = 0u;
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::~CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedDtor() {
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ids_.Clear();
  league_ids_.Clear();
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_team_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_team_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 league_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_league_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_league_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_team_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 league_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_league_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_league_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  // repeated uint32 league_ids = 3;
  for (int i = 0, n = this->league_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->league_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // repeated uint32 team_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->team_ids_, target);

  // repeated uint32 league_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->league_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_ids_size());
    total_size += data_size;
  }

  // repeated uint32 league_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->league_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->league_ids_size());
    total_size += data_size;
  }

  // optional uint32 timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  league_ids_.MergeFrom(from.league_ids_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Swap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_ids_.InternalSwap(&other->team_ids_);
  league_ids_.InternalSwap(&other->league_ids_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyScheduledMatchesResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyScheduledMatchesResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyScheduledMatchesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyScheduledMatchesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse::kScheduledMatchDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
}
CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse(const CMsgDOTAFantasyScheduledMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scheduled_match_days_(from.scheduled_match_days_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyScheduledMatchesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  result_ = 0;
}

CMsgDOTAFantasyScheduledMatchesResponse::~CMsgDOTAFantasyScheduledMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedDtor() {
}

void CMsgDOTAFantasyScheduledMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyScheduledMatchesResponse& CMsgDOTAFantasyScheduledMatchesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyScheduledMatchesResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyScheduledMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduled_match_days_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyScheduledMatchesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyScheduledMatchesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_InternalParse;
          object = msg->add_scheduled_match_days();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyScheduledMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_scheduled_match_days()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyScheduledMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduled_match_days_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->scheduled_match_days(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduled_match_days_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->scheduled_match_days(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->scheduled_match_days_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scheduled_match_days(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyScheduledMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduled_match_days_.MergeFrom(from.scheduled_match_days_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse::Swap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesResponse::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&scheduled_match_days_)->InternalSwap(CastToBase(&other->scheduled_match_days_));
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeaveLeagueRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeaveLeagueRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyLeaveLeagueRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fantasy_team_index(CMsgDOTAFantasyLeaveLeagueRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeaveLeagueRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeaveLeagueRequest::kFantasyTeamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
}
CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest(const CMsgDOTAFantasyLeaveLeagueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(fantasy_team_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fantasy_team_index_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(fantasy_team_index_));
}

CMsgDOTAFantasyLeaveLeagueRequest::~CMsgDOTAFantasyLeaveLeagueRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeaveLeagueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeaveLeagueRequest& CMsgDOTAFantasyLeaveLeagueRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeaveLeagueRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeaveLeagueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fantasy_team_index_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(fantasy_team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeaveLeagueRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeaveLeagueRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fantasy_team_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeaveLeagueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fantasy_team_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeaveLeagueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeaveLeagueRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  return target;
}

size_t CMsgDOTAFantasyLeaveLeagueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 fantasy_team_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeaveLeagueRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeaveLeagueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeaveLeagueRequest::Swap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeaveLeagueRequest::InternalSwap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(fantasy_team_index_, other->fantasy_team_index_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeaveLeagueRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyLeaveLeagueResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyLeaveLeagueResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyLeaveLeagueResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeaveLeagueResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
}
CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse(const CMsgDOTAFantasyLeaveLeagueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedCtor() {
  result_ = 0;
}

CMsgDOTAFantasyLeaveLeagueResponse::~CMsgDOTAFantasyLeaveLeagueResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeaveLeagueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyLeaveLeagueResponse& CMsgDOTAFantasyLeaveLeagueResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyLeaveLeagueResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyLeaveLeagueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyLeaveLeagueResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyLeaveLeagueResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyLeaveLeagueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyLeaveLeagueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeaveLeagueResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  return target;
}

size_t CMsgDOTAFantasyLeaveLeagueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeaveLeagueResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyLeaveLeagueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeaveLeagueResponse::Swap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeaveLeagueResponse::InternalSwap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeaveLeagueResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerScoreDetailsRequest::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerScoreDetailsRequest::HasBitSetters {
 public:
  static void set_has_fantasy_league_id(CMsgDOTAFantasyPlayerScoreDetailsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_player_account_id(CMsgDOTAFantasyPlayerScoreDetailsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_start_time(CMsgDOTAFantasyPlayerScoreDetailsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_end_time(CMsgDOTAFantasyPlayerScoreDetailsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
}
CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedCtor() {
  ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_time_));
}

CMsgDOTAFantasyPlayerScoreDetailsRequest::~CMsgDOTAFantasyPlayerScoreDetailsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerScoreDetailsRequest& CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerScoreDetailsRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerScoreDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fantasy_league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&fantasy_league_id_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerScoreDetailsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerScoreDetailsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fantasy_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fantasy_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreDetailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::Swap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fantasy_league_id_, other->fantasy_league_id_);
  swap(player_account_id_, other->player_account_id_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_series_id(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_series_num(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_series_type(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_league_tier(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_league_id(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_opposing_team_id(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_opposing_team_logo(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_opposing_team_name(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_owned_by(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_benched(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesNumFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kLeagueTierFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamLogoFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamNameFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOwnedByFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kBenchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}
CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opposing_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opposing_team_name()) {
    opposing_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opposing_team_name_);
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&benched_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(benched_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  opposing_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&benched_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(benched_));
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::~CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedDtor() {
  opposing_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opposing_team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opposing_team_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(opposing_team_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&opposing_team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&benched_) -
        reinterpret_cast<char*>(&opposing_team_logo_)) + sizeof(benched_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_num = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_series_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_tier = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_league_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 opposing_team_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_opposing_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 opposing_team_logo = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_opposing_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string opposing_team_name = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
        object = msg->mutable_opposing_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 owned_by = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_owned_by(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool benched = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_benched(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_series_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_tier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_league_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 opposing_team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_opposing_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opposing_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 opposing_team_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_opposing_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opposing_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string opposing_team_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opposing_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opposing_team_name().data(), static_cast<int>(this->opposing_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owned_by = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_owned_by(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owned_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool benched = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_benched(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &benched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 series_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->series_id(), output);
  }

  // optional uint32 series_num = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series_num(), output);
  }

  // optional uint32 series_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->series_type(), output);
  }

  // optional uint32 league_tier = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_tier(), output);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->league_id(), output);
  }

  // optional uint32 opposing_team_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opposing_team_id(), output);
  }

  // optional uint64 opposing_team_logo = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->opposing_team_logo(), output);
  }

  // optional string opposing_team_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opposing_team_name().data(), static_cast<int>(this->opposing_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->opposing_team_name(), output);
  }

  // optional uint32 owned_by = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->owned_by(), output);
  }

  // optional bool benched = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->benched(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 series_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->series_id(), target);
  }

  // optional uint32 series_num = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series_num(), target);
  }

  // optional uint32 series_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->series_type(), target);
  }

  // optional uint32 league_tier = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_tier(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->league_id(), target);
  }

  // optional uint32 opposing_team_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opposing_team_id(), target);
  }

  // optional uint64 opposing_team_logo = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->opposing_team_logo(), target);
  }

  // optional string opposing_team_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opposing_team_name().data(), static_cast<int>(this->opposing_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->opposing_team_name(), target);
  }

  // optional uint32 owned_by = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->owned_by(), target);
  }

  // optional bool benched = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->benched(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string opposing_team_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opposing_team_name());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 series_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_num = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_num());
    }

    // optional uint32 series_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 league_tier = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_tier());
    }

    // optional uint32 league_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 opposing_team_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opposing_team_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 opposing_team_logo = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opposing_team_logo());
    }

    // optional uint32 owned_by = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owned_by());
    }

    // optional bool benched = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      opposing_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opposing_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      series_num_ = from.series_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_tier_ = from.league_tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      opposing_team_id_ = from.opposing_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      opposing_team_logo_ = from.opposing_team_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      owned_by_ = from.owned_by_;
    }
    if (cached_has_bits & 0x00000400u) {
      benched_ = from.benched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opposing_team_name_.Swap(&other->opposing_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_id_, other->match_id_);
  swap(series_id_, other->series_id_);
  swap(series_num_, other->series_num_);
  swap(series_type_, other->series_type_);
  swap(league_tier_, other->league_tier_);
  swap(league_id_, other->league_id_);
  swap(opposing_team_id_, other->opposing_team_id_);
  swap(opposing_team_logo_, other->opposing_team_logo_);
  swap(owned_by_, other->owned_by_);
  swap(benched_, other->benched_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyPlayerScoreDetailsResponse::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyPlayerScoreDetailsResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTAFantasyPlayerScoreDetailsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
}
CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  result_ = 0;
}

CMsgDOTAFantasyPlayerScoreDetailsResponse::~CMsgDOTAFantasyPlayerScoreDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedDtor() {
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyPlayerScoreDetailsResponse& CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyPlayerScoreDetailsResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyPlayerScoreDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyPlayerScoreDetailsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyPlayerScoreDetailsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyPlayerScoreDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyPlayerScoreDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPassportVoteTeamGuess::InitAsDefaultInstance() {
}
class CMsgDOTAPassportVoteTeamGuess::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTAPassportVoteTeamGuess* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winner_id(CMsgDOTAPassportVoteTeamGuess* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_runnerup_id(CMsgDOTAPassportVoteTeamGuess* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportVoteTeamGuess::kLeagueIdFieldNumber;
const int CMsgDOTAPassportVoteTeamGuess::kWinnerIdFieldNumber;
const int CMsgDOTAPassportVoteTeamGuess::kRunnerupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportVoteTeamGuess)
}
CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&runnerup_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(runnerup_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportVoteTeamGuess)
}

void CMsgDOTAPassportVoteTeamGuess::SharedCtor() {
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runnerup_id_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(runnerup_id_));
}

CMsgDOTAPassportVoteTeamGuess::~CMsgDOTAPassportVoteTeamGuess() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  SharedDtor();
}

void CMsgDOTAPassportVoteTeamGuess::SharedDtor() {
}

void CMsgDOTAPassportVoteTeamGuess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVoteTeamGuess::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPassportVoteTeamGuess_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPassportVoteTeamGuess::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&runnerup_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(runnerup_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPassportVoteTeamGuess::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPassportVoteTeamGuess*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winner_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winner_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 runnerup_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_runnerup_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPassportVoteTeamGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winner_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 runnerup_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_runnerup_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runnerup_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPassportVoteTeamGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 winner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winner_id(), output);
  }

  // optional uint32 runnerup_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->runnerup_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportVoteTeamGuess)
}

::google::protobuf::uint8* CMsgDOTAPassportVoteTeamGuess::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 winner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winner_id(), target);
  }

  // optional uint32 runnerup_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->runnerup_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  return target;
}

size_t CMsgDOTAPassportVoteTeamGuess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 winner_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_id());
    }

    // optional uint32 runnerup_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runnerup_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVoteTeamGuess* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPassportVoteTeamGuess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportVoteTeamGuess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportVoteTeamGuess)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_id_ = from.winner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      runnerup_id_ = from.runnerup_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteTeamGuess::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteTeamGuess::Swap(CMsgDOTAPassportVoteTeamGuess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVoteTeamGuess::InternalSwap(CMsgDOTAPassportVoteTeamGuess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
  swap(winner_id_, other->winner_id_);
  swap(runnerup_id_, other->runnerup_id_);
}

::google::protobuf::Metadata CMsgDOTAPassportVoteTeamGuess::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPassportVoteGenericSelection::InitAsDefaultInstance() {
}
class CMsgDOTAPassportVoteGenericSelection::HasBitSetters {
 public:
  static void set_has_selection_index(CMsgDOTAPassportVoteGenericSelection* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_selection(CMsgDOTAPassportVoteGenericSelection* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportVoteGenericSelection::kSelectionIndexFieldNumber;
const int CMsgDOTAPassportVoteGenericSelection::kSelectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportVoteGenericSelection)
}
CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&selection_index_, &from.selection_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&selection_) -
    reinterpret_cast<char*>(&selection_index_)) + sizeof(selection_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportVoteGenericSelection)
}

void CMsgDOTAPassportVoteGenericSelection::SharedCtor() {
  ::memset(&selection_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selection_) -
      reinterpret_cast<char*>(&selection_index_)) + sizeof(selection_));
}

CMsgDOTAPassportVoteGenericSelection::~CMsgDOTAPassportVoteGenericSelection() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  SharedDtor();
}

void CMsgDOTAPassportVoteGenericSelection::SharedDtor() {
}

void CMsgDOTAPassportVoteGenericSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVoteGenericSelection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPassportVoteGenericSelection_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPassportVoteGenericSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&selection_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_) -
        reinterpret_cast<char*>(&selection_index_)) + sizeof(selection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPassportVoteGenericSelection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPassportVoteGenericSelection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTA_2013PassportSelectionIndices_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_selection_index(static_cast<::proto::dota::DOTA_2013PassportSelectionIndices>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 selection = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_selection(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPassportVoteGenericSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_2013PassportSelectionIndices_IsValid(value)) {
            set_selection_index(static_cast< ::proto::dota::DOTA_2013PassportSelectionIndices >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_selection(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPassportVoteGenericSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->selection_index(), output);
  }

  // optional uint32 selection = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportVoteGenericSelection)
}

::google::protobuf::uint8* CMsgDOTAPassportVoteGenericSelection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->selection_index(), target);
  }

  // optional uint32 selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selection(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  return target;
}

size_t CMsgDOTAPassportVoteGenericSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_index());
    }

    // optional uint32 selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVoteGenericSelection* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPassportVoteGenericSelection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportVoteGenericSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportVoteGenericSelection)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      selection_index_ = from.selection_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      selection_ = from.selection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteGenericSelection::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteGenericSelection::Swap(CMsgDOTAPassportVoteGenericSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVoteGenericSelection::InternalSwap(CMsgDOTAPassportVoteGenericSelection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(selection_index_, other->selection_index_);
  swap(selection_, other->selection_);
}

::google::protobuf::Metadata CMsgDOTAPassportVoteGenericSelection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPassportStampedPlayer::InitAsDefaultInstance() {
}
class CMsgDOTAPassportStampedPlayer::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgDOTAPassportStampedPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stamp_level(CMsgDOTAPassportStampedPlayer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportStampedPlayer::kSteamIdFieldNumber;
const int CMsgDOTAPassportStampedPlayer::kStampLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportStampedPlayer)
}
CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stamp_level_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(stamp_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportStampedPlayer)
}

void CMsgDOTAPassportStampedPlayer::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stamp_level_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(stamp_level_));
}

CMsgDOTAPassportStampedPlayer::~CMsgDOTAPassportStampedPlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportStampedPlayer)
  SharedDtor();
}

void CMsgDOTAPassportStampedPlayer::SharedDtor() {
}

void CMsgDOTAPassportStampedPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportStampedPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPassportStampedPlayer_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPassportStampedPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stamp_level_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(stamp_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPassportStampedPlayer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPassportStampedPlayer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stamp_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stamp_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPassportStampedPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stamp_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stamp_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportStampedPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportStampedPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPassportStampedPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id(), output);
  }

  // optional uint32 stamp_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportStampedPlayer)
}

::google::protobuf::uint8* CMsgDOTAPassportStampedPlayer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 stamp_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportStampedPlayer)
  return target;
}

size_t CMsgDOTAPassportStampedPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 stamp_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportStampedPlayer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPassportStampedPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportStampedPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportStampedPlayer)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_level_ = from.stamp_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportStampedPlayer::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportStampedPlayer::Swap(CMsgDOTAPassportStampedPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportStampedPlayer::InternalSwap(CMsgDOTAPassportStampedPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(stamp_level_, other->stamp_level_);
}

::google::protobuf::Metadata CMsgDOTAPassportStampedPlayer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPassportPlayerCardChallenge::InitAsDefaultInstance() {
}
class CMsgDOTAPassportPlayerCardChallenge::HasBitSetters {
 public:
  static void set_has_challenge_id(CMsgDOTAPassportPlayerCardChallenge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportPlayerCardChallenge::kChallengeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
}
CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_id_ = from.challenge_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
}

void CMsgDOTAPassportPlayerCardChallenge::SharedCtor() {
  challenge_id_ = 0u;
}

CMsgDOTAPassportPlayerCardChallenge::~CMsgDOTAPassportPlayerCardChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  SharedDtor();
}

void CMsgDOTAPassportPlayerCardChallenge::SharedDtor() {
}

void CMsgDOTAPassportPlayerCardChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportPlayerCardChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPassportPlayerCardChallenge_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPassportPlayerCardChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPassportPlayerCardChallenge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPassportPlayerCardChallenge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 challenge_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_challenge_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPassportPlayerCardChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challenge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_challenge_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPassportPlayerCardChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 challenge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
}

::google::protobuf::uint8* CMsgDOTAPassportPlayerCardChallenge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 challenge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  return target;
}

size_t CMsgDOTAPassportPlayerCardChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 challenge_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportPlayerCardChallenge* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPassportPlayerCardChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challenge_id()) {
    set_challenge_id(from.challenge_id());
  }
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportPlayerCardChallenge::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportPlayerCardChallenge::Swap(CMsgDOTAPassportPlayerCardChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportPlayerCardChallenge::InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(challenge_id_, other->challenge_id_);
}

::google::protobuf::Metadata CMsgDOTAPassportPlayerCardChallenge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAPassportVote::InitAsDefaultInstance() {
}
class CMsgDOTAPassportVote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportVote::kTeamVotesFieldNumber;
const int CMsgDOTAPassportVote::kGenericSelectionsFieldNumber;
const int CMsgDOTAPassportVote::kStampedPlayersFieldNumber;
const int CMsgDOTAPassportVote::kPlayerCardChallengesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportVote::CMsgDOTAPassportVote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportVote)
}
CMsgDOTAPassportVote::CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      team_votes_(from.team_votes_),
      generic_selections_(from.generic_selections_),
      stamped_players_(from.stamped_players_),
      player_card_challenges_(from.player_card_challenges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportVote)
}

void CMsgDOTAPassportVote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAPassportVote_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
}

CMsgDOTAPassportVote::~CMsgDOTAPassportVote() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportVote)
  SharedDtor();
}

void CMsgDOTAPassportVote::SharedDtor() {
}

void CMsgDOTAPassportVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAPassportVote& CMsgDOTAPassportVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAPassportVote_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAPassportVote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_votes_.Clear();
  generic_selections_.Clear();
  stamped_players_.Clear();
  player_card_challenges_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAPassportVote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAPassportVote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPassportVoteTeamGuess::_InternalParse;
          object = msg->add_team_votes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPassportVoteGenericSelection::_InternalParse;
          object = msg->add_generic_selections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPassportStampedPlayer::_InternalParse;
          object = msg->add_stamped_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAPassportPlayerCardChallenge::_InternalParse;
          object = msg->add_player_card_challenges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAPassportVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_generic_selections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stamped_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_card_challenges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAPassportVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_votes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->team_votes(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_selections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->generic_selections(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stamped_players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->stamped_players(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_card_challenges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->player_card_challenges(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportVote)
}

::google::protobuf::uint8* CMsgDOTAPassportVote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_votes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->team_votes(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_selections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->generic_selections(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stamped_players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->stamped_players(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_card_challenges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_card_challenges(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportVote)
  return target;
}

size_t CMsgDOTAPassportVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->team_votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_votes(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_selections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->generic_selections(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stamped_players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stamped_players(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_card_challenges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_card_challenges(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAPassportVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVote* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAPassportVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportVote)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVote::MergeFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_votes_.MergeFrom(from.team_votes_);
  generic_selections_.MergeFrom(from.generic_selections_);
  stamped_players_.MergeFrom(from.stamped_players_);
  player_card_challenges_.MergeFrom(from.player_card_challenges_);
}

void CMsgDOTAPassportVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVote::CopyFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVote::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVote::Swap(CMsgDOTAPassportVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVote::InternalSwap(CMsgDOTAPassportVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&team_votes_)->InternalSwap(CastToBase(&other->team_votes_));
  CastToBase(&generic_selections_)->InternalSwap(CastToBase(&other->generic_selections_));
  CastToBase(&stamped_players_)->InternalSwap(CastToBase(&other->stamped_players_));
  CastToBase(&player_card_challenges_)->InternalSwap(CastToBase(&other->player_card_challenges_));
}

::google::protobuf::Metadata CMsgDOTAPassportVote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCGetPlayerCardRosterRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCGetPlayerCardRosterRequest::HasBitSetters {
 public:
  static void set_has_league_id(CMsgClientToGCGetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgClientToGCGetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCGetPlayerCardRosterRequest::kLeagueIdFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
}
CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(const CMsgClientToGCGetPlayerCardRosterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
}

void CMsgClientToGCGetPlayerCardRosterRequest::SharedCtor() {
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
}

CMsgClientToGCGetPlayerCardRosterRequest::~CMsgClientToGCGetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  SharedDtor();
}

void CMsgClientToGCGetPlayerCardRosterRequest::SharedDtor() {
}

void CMsgClientToGCGetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCGetPlayerCardRosterRequest& CMsgClientToGCGetPlayerCardRosterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCGetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCGetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCGetPlayerCardRosterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCGetPlayerCardRosterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCGetPlayerCardRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCGetPlayerCardRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
}

::google::protobuf::uint8* CMsgClientToGCGetPlayerCardRosterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetPlayerCardRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetPlayerCardRosterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCGetPlayerCardRosterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetPlayerCardRosterRequest::MergeFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterRequest::Swap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCGetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgClientToGCGetPlayerCardRosterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCGetPlayerCardRosterResponse::InitAsDefaultInstance() {
}
class CMsgClientToGCGetPlayerCardRosterResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgClientToGCGetPlayerCardRosterResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(CMsgClientToGCGetPlayerCardRosterResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_finalized(CMsgClientToGCGetPlayerCardRosterResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_percentile(CMsgClientToGCGetPlayerCardRosterResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCGetPlayerCardRosterResponse::kResultFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kPlayerCardItemIdFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kScoreFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kFinalizedFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kPercentileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
}
CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(const CMsgClientToGCGetPlayerCardRosterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_card_item_id_(from.player_card_item_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&result_)) + sizeof(percentile_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
}

void CMsgClientToGCGetPlayerCardRosterResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentile_) -
      reinterpret_cast<char*>(&result_)) + sizeof(percentile_));
}

CMsgClientToGCGetPlayerCardRosterResponse::~CMsgClientToGCGetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  SharedDtor();
}

void CMsgClientToGCGetPlayerCardRosterResponse::SharedDtor() {
}

void CMsgClientToGCGetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCGetPlayerCardRosterResponse& CMsgClientToGCGetPlayerCardRosterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCGetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCGetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_card_item_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&percentile_) -
        reinterpret_cast<char*>(&result_)) + sizeof(percentile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCGetPlayerCardRosterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCGetPlayerCardRosterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 player_card_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_player_card_item_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_player_card_item_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional float score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool finalized = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_finalized(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float percentile = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_percentile(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCGetPlayerCardRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 player_card_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_player_card_item_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_card_item_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool finalized = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_finalized(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float percentile = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_percentile(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCGetPlayerCardRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated uint64 player_card_item_id = 2;
  for (int i = 0, n = this->player_card_item_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_card_item_id(i), output);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // optional bool finalized = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finalized(), output);
  }

  // optional float percentile = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->percentile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
}

::google::protobuf::uint8* CMsgClientToGCGetPlayerCardRosterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated uint64 player_card_item_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->player_card_item_id_, target);

  // optional float score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // optional bool finalized = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finalized(), target);
  }

  // optional float percentile = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->percentile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_card_item_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->player_card_item_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_card_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional float score = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool finalized = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float percentile = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetPlayerCardRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetPlayerCardRosterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCGetPlayerCardRosterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetPlayerCardRosterResponse::MergeFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_item_id_.MergeFrom(from.player_card_item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      finalized_ = from.finalized_;
    }
    if (cached_has_bits & 0x00000008u) {
      percentile_ = from.percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterResponse::Swap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCGetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_card_item_id_.InternalSwap(&other->player_card_item_id_);
  swap(result_, other->result_);
  swap(score_, other->score_);
  swap(finalized_, other->finalized_);
  swap(percentile_, other->percentile_);
}

::google::protobuf::Metadata CMsgClientToGCGetPlayerCardRosterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCSetPlayerCardRosterRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCSetPlayerCardRosterRequest::HasBitSetters {
 public:
  static void set_has_league_id(CMsgClientToGCSetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CMsgClientToGCSetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_slot(CMsgClientToGCSetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_player_card_item_id(CMsgClientToGCSetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_event_id(CMsgClientToGCSetPlayerCardRosterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCSetPlayerCardRosterRequest::kLeagueIdFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kTimestampFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kSlotFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kPlayerCardItemIdFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
}
CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(const CMsgClientToGCSetPlayerCardRosterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
}

void CMsgClientToGCSetPlayerCardRosterRequest::SharedCtor() {
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(event_id_));
}

CMsgClientToGCSetPlayerCardRosterRequest::~CMsgClientToGCSetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  SharedDtor();
}

void CMsgClientToGCSetPlayerCardRosterRequest::SharedDtor() {
}

void CMsgClientToGCSetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCSetPlayerCardRosterRequest& CMsgClientToGCSetPlayerCardRosterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCSetPlayerCardRosterRequest_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCSetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCSetPlayerCardRosterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCSetPlayerCardRosterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 slot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 player_card_item_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_player_card_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCSetPlayerCardRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 player_card_item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_player_card_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_card_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCSetPlayerCardRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot(), output);
  }

  // optional uint64 player_card_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_card_item_id(), output);
  }

  // optional uint32 event_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
}

::google::protobuf::uint8* CMsgClientToGCSetPlayerCardRosterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot(), target);
  }

  // optional uint64 player_card_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_card_item_id(), target);
  }

  // optional uint32 event_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint64 player_card_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_card_item_id());
    }

    // optional uint32 slot = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 event_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetPlayerCardRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetPlayerCardRosterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCSetPlayerCardRosterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetPlayerCardRosterRequest::MergeFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_card_item_id_ = from.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterRequest::Swap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCSetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
  swap(timestamp_, other->timestamp_);
  swap(player_card_item_id_, other->player_card_item_id_);
  swap(slot_, other->slot_);
  swap(event_id_, other->event_id_);
}

::google::protobuf::Metadata CMsgClientToGCSetPlayerCardRosterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCSetPlayerCardRosterResponse::InitAsDefaultInstance() {
}
class CMsgClientToGCSetPlayerCardRosterResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgClientToGCSetPlayerCardRosterResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCSetPlayerCardRosterResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
}
CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(const CMsgClientToGCSetPlayerCardRosterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
}

void CMsgClientToGCSetPlayerCardRosterResponse::SharedCtor() {
  result_ = 0;
}

CMsgClientToGCSetPlayerCardRosterResponse::~CMsgClientToGCSetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  SharedDtor();
}

void CMsgClientToGCSetPlayerCardRosterResponse::SharedDtor() {
}

void CMsgClientToGCSetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCSetPlayerCardRosterResponse& CMsgClientToGCSetPlayerCardRosterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCSetPlayerCardRosterResponse_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCSetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCSetPlayerCardRosterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCSetPlayerCardRosterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCSetPlayerCardRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCSetPlayerCardRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
}

::google::protobuf::uint8* CMsgClientToGCSetPlayerCardRosterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetPlayerCardRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetPlayerCardRosterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCSetPlayerCardRosterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetPlayerCardRosterResponse::MergeFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterResponse::Swap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCSetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgClientToGCSetPlayerCardRosterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_league_name(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_start_timestamp(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_end_timestamp(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_qualifier(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_phase(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_status(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kLeagueNameFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kStartTimestampFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kEndTimestampFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kDayTimestampsFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kIsQualifierFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kPhaseFieldNumber;
const int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      day_timestamps_(from.day_timestamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_league_name()) {
    league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
}

CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  SharedDtor();
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SharedDtor() {
  league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_timestamps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    league_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string league_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
        object = msg->mutable_league_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 start_timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_start_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_end_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 day_timestamps = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_day_timestamps(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_day_timestamps();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool is_qualifier = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_is_qualifier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueFantasyPhase phase = 7 [default = LEAGUE_FANTASY_PHASE_UNSET];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueFantasyPhase_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_phase(static_cast<::proto::dota::ELeagueFantasyPhase>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_status(static_cast<::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string league_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->league_name().data(), static_cast<int>(this->league_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_start_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_end_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 day_timestamps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_day_timestamps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_day_timestamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_qualifier = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_is_qualifier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_qualifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueFantasyPhase phase = 7 [default = LEAGUE_FANTASY_PHASE_UNSET];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueFantasyPhase_IsValid(value)) {
            set_phase(static_cast< ::proto::dota::ELeagueFantasyPhase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(value)) {
            set_status(static_cast< ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional string league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), static_cast<int>(this->league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->league_name(), output);
  }

  // optional uint32 start_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_timestamp(), output);
  }

  // optional uint32 end_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_timestamp(), output);
  }

  // repeated uint32 day_timestamps = 5;
  for (int i = 0, n = this->day_timestamps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->day_timestamps(i), output);
  }

  // optional bool is_qualifier = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_qualifier(), output);
  }

  // optional .proto.dota.ELeagueFantasyPhase phase = 7 [default = LEAGUE_FANTASY_PHASE_UNSET];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->phase(), output);
  }

  // optional .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional string league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), static_cast<int>(this->league_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->league_name(), target);
  }

  // optional uint32 start_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_timestamp(), target);
  }

  // repeated uint32 day_timestamps = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->day_timestamps_, target);

  // optional bool is_qualifier = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_qualifier(), target);
  }

  // optional .proto.dota.ELeagueFantasyPhase phase = 7 [default = LEAGUE_FANTASY_PHASE_UNSET];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->phase(), target);
  }

  // optional .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  return target;
}

size_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 day_timestamps = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->day_timestamps_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->day_timestamps_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 start_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_timestamp());
    }

    // optional uint32 end_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_timestamp());
    }

    // optional bool is_qualifier = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.ELeagueFantasyPhase phase = 7 [default = LEAGUE_FANTASY_PHASE_UNSET];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  day_timestamps_.MergeFrom(from.day_timestamps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_qualifier_ = from.is_qualifier_;
    }
    if (cached_has_bits & 0x00000020u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::Swap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::InternalSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  day_timestamps_.InternalSwap(&other->day_timestamps_);
  league_name_.Swap(&other->league_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(league_id_, other->league_id_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(is_qualifier_, other->is_qualifier_);
  swap(phase_, other->phase_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAFantasyDPCLeagueStatus::InitAsDefaultInstance() {
}
class CMsgDOTAFantasyDPCLeagueStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyDPCLeagueStatus::kLeagueInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
}
CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(const CMsgDOTAFantasyDPCLeagueStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      league_infos_(from.league_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
}

void CMsgDOTAFantasyDPCLeagueStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAFantasyDPCLeagueStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
}

CMsgDOTAFantasyDPCLeagueStatus::~CMsgDOTAFantasyDPCLeagueStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  SharedDtor();
}

void CMsgDOTAFantasyDPCLeagueStatus::SharedDtor() {
}

void CMsgDOTAFantasyDPCLeagueStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAFantasyDPCLeagueStatus& CMsgDOTAFantasyDPCLeagueStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAFantasyDPCLeagueStatus_dota_5fgcmessages_5fclient_5ffantasy_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAFantasyDPCLeagueStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  league_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAFantasyDPCLeagueStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAFantasyDPCLeagueStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_InternalParse;
          object = msg->add_league_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAFantasyDPCLeagueStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_league_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAFantasyDPCLeagueStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->league_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->league_infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
}

::google::protobuf::uint8* CMsgDOTAFantasyDPCLeagueStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->league_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->league_infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  return target;
}

size_t CMsgDOTAFantasyDPCLeagueStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->league_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->league_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyDPCLeagueStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyDPCLeagueStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAFantasyDPCLeagueStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyDPCLeagueStatus::MergeFrom(const CMsgDOTAFantasyDPCLeagueStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  league_infos_.MergeFrom(from.league_infos_);
}

void CMsgDOTAFantasyDPCLeagueStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyDPCLeagueStatus::CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyDPCLeagueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyDPCLeagueStatus::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyDPCLeagueStatus::Swap(CMsgDOTAFantasyDPCLeagueStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyDPCLeagueStatus::InternalSwap(CMsgDOTAFantasyDPCLeagueStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&league_infos_)->InternalSwap(CastToBase(&other->league_infos_));
}

::google::protobuf::Metadata CMsgDOTAFantasyDPCLeagueStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPlayerInfo_Results* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPlayerInfo_Results >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPlayerInfo_Results >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPlayerInfo_AuditEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPlayerInfo_AuditEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPlayerInfo_AuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPlayerInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPlayerInfoList* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPlayerInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPlayerInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTADPCProfileInfo_PredictionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTADPCProfileInfo_FantasyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTADPCProfileInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTADPCProfileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTADPCProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeaderboards_RegionLeaderboard >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeaderboards* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeaderboards >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeaderboards >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTACreateFantasyLeagueRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTACreateFantasyLeagueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTACreateFantasyLeagueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTACreateFantasyLeagueResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTACreateFantasyLeagueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTACreateFantasyLeagueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgFantasyLeagueScoring* Arena::CreateMaybeMessage< ::proto::dota::CMsgFantasyLeagueScoring >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgFantasyLeagueScoring >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueFindRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueFindRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueFindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueFindResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueFindResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueFindResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueInfoRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAEditFantasyTeamRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAEditFantasyTeamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAEditFantasyTeamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAEditFantasyTeamResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAEditFantasyTeamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAEditFantasyTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamInfoResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamScoreRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamScoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamScoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamScoreResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamStandingsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamStandingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamStandingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerScoreRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerScoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerScoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerStandingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueCreateRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamCreateRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamCreateResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueDraftStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueDraftStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueDraftStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueDraftStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamTradesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamTradesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamTradesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamTradesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamRosterRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamRosterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyTeamRosterResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyTeamRosterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyTeamRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyMessageAdd* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyMessageAdd >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyMessageAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyMessagesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyMessagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyMessagesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyMessagesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyRemoveOwner* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyRemoveOwner >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyRemoveOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyScheduledMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeaveLeagueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPassportVoteTeamGuess* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPassportVoteTeamGuess >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPassportVoteTeamGuess >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPassportVoteGenericSelection* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPassportVoteGenericSelection >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPassportVoteGenericSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPassportStampedPlayer* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPassportStampedPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPassportStampedPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPassportPlayerCardChallenge* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPassportPlayerCardChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPassportPlayerCardChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAPassportVote* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAPassportVote >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAPassportVote >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCGetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCSetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAFantasyDPCLeagueStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
