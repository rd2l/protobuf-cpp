// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDemoClassInfo_class_t_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDemoPacket_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDemoStringTables_items_t_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDemoStringTables_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDemoStringTables_table_t_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CGameInfo_demo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_demo_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CGameInfo_CDotaGameInfo_demo_2eproto;
namespace proto {
namespace dota {
class CDemoFileHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoFileHeader> _instance;
} _CDemoFileHeader_default_instance_;
class CGameInfo_CDotaGameInfo_CPlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo_CDotaGameInfo_CPlayerInfo> _instance;
} _CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_;
class CGameInfo_CDotaGameInfo_CHeroSelectEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo_CDotaGameInfo_CHeroSelectEvent> _instance;
} _CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_;
class CGameInfo_CDotaGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo_CDotaGameInfo> _instance;
} _CGameInfo_CDotaGameInfo_default_instance_;
class CGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo> _instance;
} _CGameInfo_default_instance_;
class CDemoFileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoFileInfo> _instance;
} _CDemoFileInfo_default_instance_;
class CDemoPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoPacket> _instance;
} _CDemoPacket_default_instance_;
class CDemoFullPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoFullPacket> _instance;
} _CDemoFullPacket_default_instance_;
class CDemoSaveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoSaveGame> _instance;
} _CDemoSaveGame_default_instance_;
class CDemoSyncTickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoSyncTick> _instance;
} _CDemoSyncTick_default_instance_;
class CDemoConsoleCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoConsoleCmd> _instance;
} _CDemoConsoleCmd_default_instance_;
class CDemoSendTablesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoSendTables> _instance;
} _CDemoSendTables_default_instance_;
class CDemoClassInfo_class_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoClassInfo_class_t> _instance;
} _CDemoClassInfo_class_t_default_instance_;
class CDemoClassInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoClassInfo> _instance;
} _CDemoClassInfo_default_instance_;
class CDemoCustomDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoCustomData> _instance;
} _CDemoCustomData_default_instance_;
class CDemoCustomDataCallbacksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoCustomDataCallbacks> _instance;
} _CDemoCustomDataCallbacks_default_instance_;
class CDemoStringTables_items_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoStringTables_items_t> _instance;
} _CDemoStringTables_items_t_default_instance_;
class CDemoStringTables_table_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoStringTables_table_t> _instance;
} _CDemoStringTables_table_t_default_instance_;
class CDemoStringTablesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoStringTables> _instance;
} _CDemoStringTables_default_instance_;
class CDemoStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoStop> _instance;
} _CDemoStop_default_instance_;
class CDemoUserCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoUserCmd> _instance;
} _CDemoUserCmd_default_instance_;
class CDemoSpawnGroupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDemoSpawnGroups> _instance;
} _CDemoSpawnGroups_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCDemoFileHeader_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoFileHeader_default_instance_;
    new (ptr) ::proto::dota::CDemoFileHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoFileHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoFileHeader_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoFileHeader_demo_2eproto}, {}};

static void InitDefaultsCGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_;
    new (ptr) ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto}, {}};

static void InitDefaultsCGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_;
    new (ptr) ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto}, {}};

static void InitDefaultsCGameInfo_CDotaGameInfo_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGameInfo_CDotaGameInfo_default_instance_;
    new (ptr) ::proto::dota::CGameInfo_CDotaGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGameInfo_CDotaGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CGameInfo_CDotaGameInfo_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCGameInfo_CDotaGameInfo_demo_2eproto}, {
      &scc_info_CGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto.base,
      &scc_info_CGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto.base,}};

static void InitDefaultsCGameInfo_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGameInfo_default_instance_;
    new (ptr) ::proto::dota::CGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameInfo_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameInfo_demo_2eproto}, {
      &scc_info_CGameInfo_CDotaGameInfo_demo_2eproto.base,}};

static void InitDefaultsCDemoFileInfo_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoFileInfo_default_instance_;
    new (ptr) ::proto::dota::CDemoFileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoFileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDemoFileInfo_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDemoFileInfo_demo_2eproto}, {
      &scc_info_CGameInfo_demo_2eproto.base,}};

static void InitDefaultsCDemoPacket_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoPacket_default_instance_;
    new (ptr) ::proto::dota::CDemoPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoPacket_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoPacket_demo_2eproto}, {}};

static void InitDefaultsCDemoFullPacket_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoFullPacket_default_instance_;
    new (ptr) ::proto::dota::CDemoFullPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoFullPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CDemoFullPacket_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCDemoFullPacket_demo_2eproto}, {
      &scc_info_CDemoStringTables_demo_2eproto.base,
      &scc_info_CDemoPacket_demo_2eproto.base,}};

static void InitDefaultsCDemoSaveGame_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoSaveGame_default_instance_;
    new (ptr) ::proto::dota::CDemoSaveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoSaveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoSaveGame_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoSaveGame_demo_2eproto}, {}};

static void InitDefaultsCDemoSyncTick_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoSyncTick_default_instance_;
    new (ptr) ::proto::dota::CDemoSyncTick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoSyncTick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoSyncTick_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoSyncTick_demo_2eproto}, {}};

static void InitDefaultsCDemoConsoleCmd_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoConsoleCmd_default_instance_;
    new (ptr) ::proto::dota::CDemoConsoleCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoConsoleCmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoConsoleCmd_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoConsoleCmd_demo_2eproto}, {}};

static void InitDefaultsCDemoSendTables_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoSendTables_default_instance_;
    new (ptr) ::proto::dota::CDemoSendTables();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoSendTables::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoSendTables_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoSendTables_demo_2eproto}, {}};

static void InitDefaultsCDemoClassInfo_class_t_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoClassInfo_class_t_default_instance_;
    new (ptr) ::proto::dota::CDemoClassInfo_class_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoClassInfo_class_t::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoClassInfo_class_t_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoClassInfo_class_t_demo_2eproto}, {}};

static void InitDefaultsCDemoClassInfo_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoClassInfo_default_instance_;
    new (ptr) ::proto::dota::CDemoClassInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoClassInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDemoClassInfo_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDemoClassInfo_demo_2eproto}, {
      &scc_info_CDemoClassInfo_class_t_demo_2eproto.base,}};

static void InitDefaultsCDemoCustomData_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoCustomData_default_instance_;
    new (ptr) ::proto::dota::CDemoCustomData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoCustomData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoCustomData_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoCustomData_demo_2eproto}, {}};

static void InitDefaultsCDemoCustomDataCallbacks_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoCustomDataCallbacks_default_instance_;
    new (ptr) ::proto::dota::CDemoCustomDataCallbacks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoCustomDataCallbacks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoCustomDataCallbacks_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoCustomDataCallbacks_demo_2eproto}, {}};

static void InitDefaultsCDemoStringTables_items_t_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoStringTables_items_t_default_instance_;
    new (ptr) ::proto::dota::CDemoStringTables_items_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoStringTables_items_t::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoStringTables_items_t_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoStringTables_items_t_demo_2eproto}, {}};

static void InitDefaultsCDemoStringTables_table_t_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoStringTables_table_t_default_instance_;
    new (ptr) ::proto::dota::CDemoStringTables_table_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoStringTables_table_t::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDemoStringTables_table_t_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDemoStringTables_table_t_demo_2eproto}, {
      &scc_info_CDemoStringTables_items_t_demo_2eproto.base,}};

static void InitDefaultsCDemoStringTables_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoStringTables_default_instance_;
    new (ptr) ::proto::dota::CDemoStringTables();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoStringTables::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDemoStringTables_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDemoStringTables_demo_2eproto}, {
      &scc_info_CDemoStringTables_table_t_demo_2eproto.base,}};

static void InitDefaultsCDemoStop_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoStop_default_instance_;
    new (ptr) ::proto::dota::CDemoStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoStop_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoStop_demo_2eproto}, {}};

static void InitDefaultsCDemoUserCmd_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoUserCmd_default_instance_;
    new (ptr) ::proto::dota::CDemoUserCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoUserCmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoUserCmd_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoUserCmd_demo_2eproto}, {}};

static void InitDefaultsCDemoSpawnGroups_demo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDemoSpawnGroups_default_instance_;
    new (ptr) ::proto::dota::CDemoSpawnGroups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDemoSpawnGroups::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDemoSpawnGroups_demo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDemoSpawnGroups_demo_2eproto}, {}};

void InitDefaults_demo_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoFileHeader_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameInfo_CDotaGameInfo_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameInfo_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoFileInfo_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoPacket_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoFullPacket_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoSaveGame_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoSyncTick_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoConsoleCmd_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoSendTables_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoClassInfo_class_t_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoClassInfo_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoCustomData_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoCustomDataCallbacks_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoStringTables_items_t_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoStringTables_table_t_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoStringTables_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoStop_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoUserCmd_demo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDemoSpawnGroups_demo_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_demo_2eproto[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_demo_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_demo_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_demo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, demo_file_stamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, network_protocol_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, server_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, client_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, map_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, game_directory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, fullpackets_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, allow_clientside_entities_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, allow_clientside_particles_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileHeader, addons_),
  0,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, hero_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, is_fake_client_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo, game_team_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent, is_pick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent, team_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, game_winner_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, player_info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, leagueid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, picks_bans_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, radiant_team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, dire_team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo_CDotaGameInfo, end_time_),
  2,
  3,
  4,
  ~0u,
  5,
  ~0u,
  6,
  7,
  0,
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGameInfo, dota_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileInfo, playback_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileInfo, playback_ticks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileInfo, playback_frames_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFileInfo, game_info_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoPacket, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFullPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFullPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFullPacket, string_table_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoFullPacket, packet_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSaveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSaveGame, data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSaveGame, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSaveGame, signature_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSaveGame, version_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSyncTick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSyncTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoConsoleCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoConsoleCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoConsoleCmd, cmdstring_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSendTables, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSendTables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSendTables, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo_class_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo_class_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo_class_t, class_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo_class_t, network_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo_class_t, table_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoClassInfo, classes_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomData, callback_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomData, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomDataCallbacks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomDataCallbacks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoCustomDataCallbacks, save_id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_items_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_items_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_items_t, str_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_items_t, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_table_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_table_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_table_t, table_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_table_t, items_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_table_t, items_clientside_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables_table_t, table_flags_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStringTables, tables_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoUserCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoUserCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoUserCmd, cmd_number_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoUserCmd, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSpawnGroups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSpawnGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDemoSpawnGroups, msgs_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::proto::dota::CDemoFileHeader)},
  { 25, 35, sizeof(::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo)},
  { 40, 48, sizeof(::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent)},
  { 51, 67, sizeof(::proto::dota::CGameInfo_CDotaGameInfo)},
  { 78, 84, sizeof(::proto::dota::CGameInfo)},
  { 85, 94, sizeof(::proto::dota::CDemoFileInfo)},
  { 98, 104, sizeof(::proto::dota::CDemoPacket)},
  { 105, 112, sizeof(::proto::dota::CDemoFullPacket)},
  { 114, 123, sizeof(::proto::dota::CDemoSaveGame)},
  { 127, 132, sizeof(::proto::dota::CDemoSyncTick)},
  { 132, 138, sizeof(::proto::dota::CDemoConsoleCmd)},
  { 139, 145, sizeof(::proto::dota::CDemoSendTables)},
  { 146, 154, sizeof(::proto::dota::CDemoClassInfo_class_t)},
  { 157, 163, sizeof(::proto::dota::CDemoClassInfo)},
  { 164, 171, sizeof(::proto::dota::CDemoCustomData)},
  { 173, 179, sizeof(::proto::dota::CDemoCustomDataCallbacks)},
  { 180, 187, sizeof(::proto::dota::CDemoStringTables_items_t)},
  { 189, 198, sizeof(::proto::dota::CDemoStringTables_table_t)},
  { 202, 208, sizeof(::proto::dota::CDemoStringTables)},
  { 209, 214, sizeof(::proto::dota::CDemoStop)},
  { 214, 221, sizeof(::proto::dota::CDemoUserCmd)},
  { 223, 229, sizeof(::proto::dota::CDemoSpawnGroups)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoFileHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGameInfo_CDotaGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoFullPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoSaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoSyncTick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoConsoleCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoSendTables_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoClassInfo_class_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoClassInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoCustomData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoCustomDataCallbacks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoStringTables_items_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoStringTables_table_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoStringTables_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoUserCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDemoSpawnGroups_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_demo_2eproto = {
  {}, AddDescriptors_demo_2eproto, "demo.proto", schemas,
  file_default_instances, TableStruct_demo_2eproto::offsets,
  file_level_metadata_demo_2eproto, 22, file_level_enum_descriptors_demo_2eproto, file_level_service_descriptors_demo_2eproto,
};

const char descriptor_table_protodef_demo_2eproto[] =
  "\n\ndemo.proto\022\nproto.dota\"\214\002\n\017CDemoFileHe"
  "ader\022\027\n\017demo_file_stamp\030\001 \002(\t\022\030\n\020network"
  "_protocol\030\002 \001(\005\022\023\n\013server_name\030\003 \001(\t\022\023\n\013"
  "client_name\030\004 \001(\t\022\020\n\010map_name\030\005 \001(\t\022\026\n\016g"
  "ame_directory\030\006 \001(\t\022\033\n\023fullpackets_versi"
  "on\030\007 \001(\005\022!\n\031allow_clientside_entities\030\010 "
  "\001(\010\022\"\n\032allow_clientside_particles\030\t \001(\010\022"
  "\016\n\006addons\030\n \001(\t\"\325\004\n\tCGameInfo\0221\n\004dota\030\004 "
  "\001(\0132#.proto.dota.CGameInfo.CDotaGameInfo"
  "\032\224\004\n\rCDotaGameInfo\022\020\n\010match_id\030\001 \001(\004\022\021\n\t"
  "game_mode\030\002 \001(\005\022\023\n\013game_winner\030\003 \001(\005\022D\n\013"
  "player_info\030\004 \003(\0132/.proto.dota.CGameInfo"
  ".CDotaGameInfo.CPlayerInfo\022\020\n\010leagueid\030\005"
  " \001(\r\022H\n\npicks_bans\030\006 \003(\01324.proto.dota.CG"
  "ameInfo.CDotaGameInfo.CHeroSelectEvent\022\027"
  "\n\017radiant_team_id\030\007 \001(\r\022\024\n\014dire_team_id\030"
  "\010 \001(\r\022\030\n\020radiant_team_tag\030\t \001(\t\022\025\n\rdire_"
  "team_tag\030\n \001(\t\022\020\n\010end_time\030\013 \001(\r\032q\n\013CPla"
  "yerInfo\022\021\n\thero_name\030\001 \001(\t\022\023\n\013player_nam"
  "e\030\002 \001(\t\022\026\n\016is_fake_client\030\003 \001(\010\022\017\n\007steam"
  "id\030\004 \001(\004\022\021\n\tgame_team\030\005 \001(\005\032B\n\020CHeroSele"
  "ctEvent\022\017\n\007is_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017"
  "\n\007hero_id\030\003 \001(\r\"\201\001\n\rCDemoFileInfo\022\025\n\rpla"
  "yback_time\030\001 \001(\002\022\026\n\016playback_ticks\030\002 \001(\005"
  "\022\027\n\017playback_frames\030\003 \001(\005\022(\n\tgame_info\030\004"
  " \001(\0132\025.proto.dota.CGameInfo\"\033\n\013CDemoPack"
  "et\022\014\n\004data\030\003 \001(\014\"o\n\017CDemoFullPacket\0223\n\014s"
  "tring_table\030\001 \001(\0132\035.proto.dota.CDemoStri"
  "ngTables\022\'\n\006packet\030\002 \001(\0132\027.proto.dota.CD"
  "emoPacket\"S\n\rCDemoSaveGame\022\014\n\004data\030\001 \001(\014"
  "\022\020\n\010steam_id\030\002 \001(\006\022\021\n\tsignature\030\003 \001(\006\022\017\n"
  "\007version\030\004 \001(\005\"\017\n\rCDemoSyncTick\"$\n\017CDemo"
  "ConsoleCmd\022\021\n\tcmdstring\030\001 \001(\t\"\037\n\017CDemoSe"
  "ndTables\022\014\n\004data\030\001 \001(\014\"\214\001\n\016CDemoClassInf"
  "o\0223\n\007classes\030\001 \003(\0132\".proto.dota.CDemoCla"
  "ssInfo.class_t\032E\n\007class_t\022\020\n\010class_id\030\001 "
  "\001(\005\022\024\n\014network_name\030\002 \001(\t\022\022\n\ntable_name\030"
  "\003 \001(\t\"7\n\017CDemoCustomData\022\026\n\016callback_ind"
  "ex\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"+\n\030CDemoCustomDat"
  "aCallbacks\022\017\n\007save_id\030\001 \003(\t\"\234\002\n\021CDemoStr"
  "ingTables\0225\n\006tables\030\001 \003(\0132%.proto.dota.C"
  "DemoStringTables.table_t\032$\n\007items_t\022\013\n\003s"
  "tr\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\032\251\001\n\007table_t\022\022\n\nta"
  "ble_name\030\001 \001(\t\0224\n\005items\030\002 \003(\0132%.proto.do"
  "ta.CDemoStringTables.items_t\022\?\n\020items_cl"
  "ientside\030\003 \003(\0132%.proto.dota.CDemoStringT"
  "ables.items_t\022\023\n\013table_flags\030\004 \001(\005\"\013\n\tCD"
  "emoStop\"0\n\014CDemoUserCmd\022\022\n\ncmd_number\030\001 "
  "\001(\005\022\014\n\004data\030\002 \001(\014\" \n\020CDemoSpawnGroups\022\014\n"
  "\004msgs\030\003 \003(\014*\204\003\n\rEDemoCommands\022\026\n\tDEM_Err"
  "or\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010DEM_Stop\020\000\022\022\n\016DEM_FileH"
  "eader\020\001\022\020\n\014DEM_FileInfo\020\002\022\020\n\014DEM_SyncTic"
  "k\020\003\022\022\n\016DEM_SendTables\020\004\022\021\n\rDEM_ClassInfo"
  "\020\005\022\024\n\020DEM_StringTables\020\006\022\016\n\nDEM_Packet\020\007"
  "\022\024\n\020DEM_SignonPacket\020\010\022\022\n\016DEM_ConsoleCmd"
  "\020\t\022\022\n\016DEM_CustomData\020\n\022\033\n\027DEM_CustomData"
  "Callbacks\020\013\022\017\n\013DEM_UserCmd\020\014\022\022\n\016DEM_Full"
  "Packet\020\r\022\020\n\014DEM_SaveGame\020\016\022\023\n\017DEM_SpawnG"
  "roups\020\017\022\013\n\007DEM_Max\020\020\022\024\n\020DEM_IsCompressed"
  "\020@B\003\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_demo_2eproto = {
  false, InitDefaults_demo_2eproto, 
  descriptor_table_protodef_demo_2eproto,
  "demo.proto", &assign_descriptors_table_demo_2eproto, 2367,
};

void AddDescriptors_demo_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_demo_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_demo_2eproto = []() { AddDescriptors_demo_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_demo_2eproto);
  return file_level_enum_descriptors_demo_2eproto[0];
}
bool EDemoCommands_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 64:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CDemoFileHeader::InitAsDefaultInstance() {
}
class CDemoFileHeader::HasBitSetters {
 public:
  static void set_has_demo_file_stamp(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_network_protocol(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_server_name(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_name(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_map_name(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_directory(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_fullpackets_version(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_allow_clientside_entities(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_allow_clientside_particles(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_addons(CDemoFileHeader* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoFileHeader::kDemoFileStampFieldNumber;
const int CDemoFileHeader::kNetworkProtocolFieldNumber;
const int CDemoFileHeader::kServerNameFieldNumber;
const int CDemoFileHeader::kClientNameFieldNumber;
const int CDemoFileHeader::kMapNameFieldNumber;
const int CDemoFileHeader::kGameDirectoryFieldNumber;
const int CDemoFileHeader::kFullpacketsVersionFieldNumber;
const int CDemoFileHeader::kAllowClientsideEntitiesFieldNumber;
const int CDemoFileHeader::kAllowClientsideParticlesFieldNumber;
const int CDemoFileHeader::kAddonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoFileHeader::CDemoFileHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoFileHeader)
}
CDemoFileHeader::CDemoFileHeader(const CDemoFileHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  demo_file_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_demo_file_stamp()) {
    demo_file_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.demo_file_stamp_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_name()) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_name()) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  game_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_directory()) {
    game_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_directory_);
  }
  addons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addons()) {
    addons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addons_);
  }
  ::memcpy(&network_protocol_, &from.network_protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_clientside_particles_) -
    reinterpret_cast<char*>(&network_protocol_)) + sizeof(allow_clientside_particles_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoFileHeader)
}

void CDemoFileHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoFileHeader_demo_2eproto.base);
  demo_file_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_clientside_particles_) -
      reinterpret_cast<char*>(&network_protocol_)) + sizeof(allow_clientside_particles_));
}

CDemoFileHeader::~CDemoFileHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoFileHeader)
  SharedDtor();
}

void CDemoFileHeader::SharedDtor() {
  demo_file_stamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addons_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoFileHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoFileHeader& CDemoFileHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoFileHeader_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoFileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      demo_file_stamp_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      server_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      client_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      game_directory_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      addons_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&network_protocol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fullpackets_version_) -
        reinterpret_cast<char*>(&network_protocol_)) + sizeof(fullpackets_version_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&allow_clientside_entities_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_clientside_particles_) -
        reinterpret_cast<char*>(&allow_clientside_entities_)) + sizeof(allow_clientside_particles_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoFileHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoFileHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string demo_file_stamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoFileHeader.demo_file_stamp");
        object = msg->mutable_demo_file_stamp();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 network_protocol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_network_protocol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string server_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoFileHeader.server_name");
        object = msg->mutable_server_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string client_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoFileHeader.client_name");
        object = msg->mutable_client_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string map_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoFileHeader.map_name");
        object = msg->mutable_map_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string game_directory = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoFileHeader.game_directory");
        object = msg->mutable_game_directory();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 fullpackets_version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_fullpackets_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_clientside_entities = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_allow_clientside_entities(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_clientside_particles = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_allow_clientside_particles(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string addons = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoFileHeader.addons");
        object = msg->mutable_addons();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoFileHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string demo_file_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_demo_file_stamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->demo_file_stamp().data(), static_cast<int>(this->demo_file_stamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.demo_file_stamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 network_protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_network_protocol(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.server_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), static_cast<int>(this->client_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.client_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_directory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_directory().data(), static_cast<int>(this->game_directory().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.game_directory");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fullpackets_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_fullpackets_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullpackets_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_clientside_entities = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_allow_clientside_entities(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_entities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_clientside_particles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_allow_clientside_particles(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_particles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string addons = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addons().data(), static_cast<int>(this->addons().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.addons");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoFileHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoFileHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string demo_file_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demo_file_stamp().data(), static_cast<int>(this->demo_file_stamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.demo_file_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->demo_file_stamp(), output);
  }

  // optional int32 network_protocol = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->network_protocol(), output);
  }

  // optional string server_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_name(), output);
  }

  // optional string client_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_name(), output);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_name(), output);
  }

  // optional string game_directory = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_directory().data(), static_cast<int>(this->game_directory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.game_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_directory(), output);
  }

  // optional int32 fullpackets_version = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fullpackets_version(), output);
  }

  // optional bool allow_clientside_entities = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_clientside_entities(), output);
  }

  // optional bool allow_clientside_particles = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->allow_clientside_particles(), output);
  }

  // optional string addons = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addons().data(), static_cast<int>(this->addons().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.addons");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->addons(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoFileHeader)
}

::google::protobuf::uint8* CDemoFileHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string demo_file_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demo_file_stamp().data(), static_cast<int>(this->demo_file_stamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.demo_file_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->demo_file_stamp(), target);
  }

  // optional int32 network_protocol = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->network_protocol(), target);
  }

  // optional string server_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  // optional string client_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_name(), target);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }

  // optional string game_directory = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_directory().data(), static_cast<int>(this->game_directory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.game_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_directory(), target);
  }

  // optional int32 fullpackets_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fullpackets_version(), target);
  }

  // optional bool allow_clientside_entities = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_clientside_entities(), target);
  }

  // optional bool allow_clientside_particles = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->allow_clientside_particles(), target);
  }

  // optional string addons = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addons().data(), static_cast<int>(this->addons().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.addons");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->addons(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoFileHeader)
  return target;
}

size_t CDemoFileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoFileHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->demo_file_stamp());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string server_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string client_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional string map_name = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string game_directory = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_directory());
    }

    // optional string addons = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addons());
    }

    // optional int32 network_protocol = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_protocol());
    }

    // optional int32 fullpackets_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fullpackets_version());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool allow_clientside_entities = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool allow_clientside_particles = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoFileHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoFileHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoFileHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoFileHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoFileHeader)
    MergeFrom(*source);
  }
}

void CDemoFileHeader::MergeFrom(const CDemoFileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      demo_file_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.demo_file_stamp_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      game_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_directory_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      addons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addons_);
    }
    if (cached_has_bits & 0x00000040u) {
      network_protocol_ = from.network_protocol_;
    }
    if (cached_has_bits & 0x00000080u) {
      fullpackets_version_ = from.fullpackets_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      allow_clientside_entities_ = from.allow_clientside_entities_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_clientside_particles_ = from.allow_clientside_particles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoFileHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileHeader::CopyFrom(const CDemoFileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDemoFileHeader::Swap(CDemoFileHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFileHeader::InternalSwap(CDemoFileHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  demo_file_stamp_.Swap(&other->demo_file_stamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_name_.Swap(&other->client_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_directory_.Swap(&other->game_directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  addons_.Swap(&other->addons_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(network_protocol_, other->network_protocol_);
  swap(fullpackets_version_, other->fullpackets_version_);
  swap(allow_clientside_entities_, other->allow_clientside_entities_);
  swap(allow_clientside_particles_, other->allow_clientside_particles_);
}

::google::protobuf::Metadata CDemoFileHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameInfo_CDotaGameInfo_CPlayerInfo::InitAsDefaultInstance() {
}
class CGameInfo_CDotaGameInfo_CPlayerInfo::HasBitSetters {
 public:
  static void set_has_hero_name(CGameInfo_CDotaGameInfo_CPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_player_name(CGameInfo_CDotaGameInfo_CPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_fake_client(CGameInfo_CDotaGameInfo_CPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steamid(CGameInfo_CDotaGameInfo_CPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_team(CGameInfo_CDotaGameInfo_CPlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kHeroNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kPlayerNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kIsFakeClientFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kSteamidFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kGameTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
}
CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo(const CGameInfo_CDotaGameInfo_CPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_team_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(game_team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto.base);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_team_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(game_team_));
}

CGameInfo_CDotaGameInfo_CPlayerInfo::~CGameInfo_CDotaGameInfo_CPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameInfo_CDotaGameInfo_CPlayerInfo_demo_2eproto.base);
  return *internal_default_instance();
}


void CGameInfo_CDotaGameInfo_CPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      player_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_team_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(game_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameInfo_CDotaGameInfo_CPlayerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameInfo_CDotaGameInfo_CPlayerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string hero_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
        object = msg->mutable_hero_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_fake_client = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_fake_client(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 steamid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_steamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_team = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_game_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameInfo_CDotaGameInfo_CPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hero_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), static_cast<int>(this->hero_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fake_client = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_fake_client(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fake_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_game_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameInfo_CDotaGameInfo_CPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hero_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), static_cast<int>(this->hero_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hero_name(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional bool is_fake_client = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_fake_client(), output);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steamid(), output);
  }

  // optional int32 game_team = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CPlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hero_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), static_cast<int>(this->hero_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hero_name(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_fake_client = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_fake_client(), target);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steamid(), target);
  }

  // optional int32 game_team = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  return target;
}

size_t CGameInfo_CDotaGameInfo_CPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hero_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string player_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 steamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional bool is_fake_client = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 game_team = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo_CPlayerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CGameInfo_CDotaGameInfo_CPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_fake_client_ = from.is_fake_client_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_team_ = from.game_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::IsInitialized() const {
  return true;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Swap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::InternalSwap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_name_.Swap(&other->hero_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(is_fake_client_, other->is_fake_client_);
  swap(game_team_, other->game_team_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CPlayerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::InitAsDefaultInstance() {
}
class CGameInfo_CDotaGameInfo_CHeroSelectEvent::HasBitSetters {
 public:
  static void set_has_is_pick(CGameInfo_CDotaGameInfo_CHeroSelectEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team(CGameInfo_CDotaGameInfo_CHeroSelectEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CGameInfo_CDotaGameInfo_CHeroSelectEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kIsPickFieldNumber;
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kTeamFieldNumber;
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo_CDotaGameInfo_CHeroSelectEvent::CGameInfo_CDotaGameInfo_CHeroSelectEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}
CGameInfo_CDotaGameInfo_CHeroSelectEvent::CGameInfo_CDotaGameInfo_CHeroSelectEvent(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_pick_, &from.is_pick_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SharedCtor() {
  ::memset(&is_pick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
}

CGameInfo_CDotaGameInfo_CHeroSelectEvent::~CGameInfo_CDotaGameInfo_CHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SharedDtor() {
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameInfo_CDotaGameInfo_CHeroSelectEvent& CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameInfo_CDotaGameInfo_CHeroSelectEvent_demo_2eproto.base);
  return *internal_default_instance();
}


void CGameInfo_CDotaGameInfo_CHeroSelectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&is_pick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameInfo_CDotaGameInfo_CHeroSelectEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameInfo_CDotaGameInfo_CHeroSelectEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_pick = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_pick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_pick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CHeroSelectEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return target;
}

size_t CGameInfo_CDotaGameInfo_CHeroSelectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool is_pick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo_CHeroSelectEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CGameInfo_CDotaGameInfo_CHeroSelectEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergeFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      is_pick_ = from.is_pick_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::CopyFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::IsInitialized() const {
  return true;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::Swap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::InternalSwap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_pick_, other->is_pick_);
  swap(team_, other->team_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CHeroSelectEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameInfo_CDotaGameInfo::InitAsDefaultInstance() {
}
class CGameInfo_CDotaGameInfo::HasBitSetters {
 public:
  static void set_has_match_id(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_game_mode(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_winner(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_leagueid(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_radiant_team_id(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_dire_team_id(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_radiant_team_tag(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dire_team_tag(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_end_time(CGameInfo_CDotaGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo_CDotaGameInfo::kMatchIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameModeFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameWinnerFieldNumber;
const int CGameInfo_CDotaGameInfo::kPlayerInfoFieldNumber;
const int CGameInfo_CDotaGameInfo::kLeagueidFieldNumber;
const int CGameInfo_CDotaGameInfo::kPicksBansFieldNumber;
const int CGameInfo_CDotaGameInfo::kRadiantTeamIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kDireTeamIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kRadiantTeamTagFieldNumber;
const int CGameInfo_CDotaGameInfo::kDireTeamTagFieldNumber;
const int CGameInfo_CDotaGameInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo.CDotaGameInfo)
}
CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo(const CGameInfo_CDotaGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_info_(from.player_info_),
      picks_bans_(from.picks_bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_tag()) {
    radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
  }
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_tag()) {
    dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo.CDotaGameInfo)
}

void CGameInfo_CDotaGameInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameInfo_CDotaGameInfo_demo_2eproto.base);
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(end_time_));
}

CGameInfo_CDotaGameInfo::~CGameInfo_CDotaGameInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo.CDotaGameInfo)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo::SharedDtor() {
  radiant_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameInfo_CDotaGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameInfo_CDotaGameInfo& CGameInfo_CDotaGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameInfo_CDotaGameInfo_demo_2eproto.base);
  return *internal_default_instance();
}


void CGameInfo_CDotaGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo.CDotaGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_info_.Clear();
  picks_bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_team_tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(dire_team_id_));
  }
  end_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameInfo_CDotaGameInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameInfo_CDotaGameInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_mode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_winner = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_winner(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo::_InternalParse;
          object = msg->add_player_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional uint32 leagueid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_leagueid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent::_InternalParse;
          object = msg->add_picks_bans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional uint32 radiant_team_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_radiant_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_team_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_dire_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_team_tag = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
        object = msg->mutable_radiant_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string dire_team_tag = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
        object = msg->mutable_dire_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 end_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameInfo_CDotaGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo.CDotaGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_winner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_winner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_leagueid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_dire_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_tag().data(), static_cast<int>(this->radiant_team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_tag().data(), static_cast<int>(this->dire_team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo.CDotaGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo.CDotaGameInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameInfo_CDotaGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo.CDotaGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional int32 game_mode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_mode(), output);
  }

  // optional int32 game_winner = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_winner(), output);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->player_info(static_cast<int>(i)),
      output);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->picks_bans(static_cast<int>(i)),
      output);
  }

  // optional uint32 radiant_team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dire_team_id(), output);
  }

  // optional string radiant_team_tag = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), static_cast<int>(this->radiant_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->radiant_team_tag(), output);
  }

  // optional string dire_team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), static_cast<int>(this->dire_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dire_team_tag(), output);
  }

  // optional uint32 end_time = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo.CDotaGameInfo)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo.CDotaGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional int32 game_mode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_mode(), target);
  }

  // optional int32 game_winner = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_winner(), target);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_info(static_cast<int>(i)), target);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->picks_bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->picks_bans(static_cast<int>(i)), target);
  }

  // optional uint32 radiant_team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dire_team_id(), target);
  }

  // optional string radiant_team_tag = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), static_cast<int>(this->radiant_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), static_cast<int>(this->dire_team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dire_team_tag(), target);
  }

  // optional uint32 end_time = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo.CDotaGameInfo)
  return target;
}

size_t CGameInfo_CDotaGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo.CDotaGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_info(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->picks_bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->picks_bans(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_team_tag = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_tag());
    }

    // optional string dire_team_tag = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_tag());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 game_mode = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_mode());
    }

    // optional int32 game_winner = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_winner());
    }

    // optional uint32 leagueid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 radiant_team_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional uint32 dire_team_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

  }
  // optional uint32 end_time = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameInfo_CDotaGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CGameInfo_CDotaGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo.CDotaGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo.CDotaGameInfo)
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo::MergeFrom(const CGameInfo_CDotaGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_info_.MergeFrom(from.player_info_);
  picks_bans_.MergeFrom(from.picks_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_winner_ = from.game_winner_;
    }
    if (cached_has_bits & 0x00000020u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_id_ = from.dire_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_end_time(from.end_time());
  }
}

void CGameInfo_CDotaGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo::CopyFrom(const CGameInfo_CDotaGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo::IsInitialized() const {
  return true;
}

void CGameInfo_CDotaGameInfo::Swap(CGameInfo_CDotaGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo::InternalSwap(CGameInfo_CDotaGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_info_)->InternalSwap(CastToBase(&other->player_info_));
  CastToBase(&picks_bans_)->InternalSwap(CastToBase(&other->picks_bans_));
  radiant_team_tag_.Swap(&other->radiant_team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_team_tag_.Swap(&other->dire_team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_id_, other->match_id_);
  swap(game_mode_, other->game_mode_);
  swap(game_winner_, other->game_winner_);
  swap(leagueid_, other->leagueid_);
  swap(radiant_team_id_, other->radiant_team_id_);
  swap(dire_team_id_, other->dire_team_id_);
  swap(end_time_, other->end_time_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameInfo::InitAsDefaultInstance() {
  ::proto::dota::_CGameInfo_default_instance_._instance.get_mutable()->dota_ = const_cast< ::proto::dota::CGameInfo_CDotaGameInfo*>(
      ::proto::dota::CGameInfo_CDotaGameInfo::internal_default_instance());
}
class CGameInfo::HasBitSetters {
 public:
  static const ::proto::dota::CGameInfo_CDotaGameInfo& dota(const CGameInfo* msg);
  static void set_has_dota(CGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CGameInfo_CDotaGameInfo&
CGameInfo::HasBitSetters::dota(const CGameInfo* msg) {
  return *msg->dota_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo::kDotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo::CGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo)
}
CGameInfo::CGameInfo(const CGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dota()) {
    dota_ = new ::proto::dota::CGameInfo_CDotaGameInfo(*from.dota_);
  } else {
    dota_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo)
}

void CGameInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameInfo_demo_2eproto.base);
  dota_ = nullptr;
}

CGameInfo::~CGameInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo)
  SharedDtor();
}

void CGameInfo::SharedDtor() {
  if (this != internal_default_instance()) delete dota_;
}

void CGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameInfo& CGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameInfo_demo_2eproto.base);
  return *internal_default_instance();
}


void CGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dota_ != nullptr);
    dota_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CGameInfo_CDotaGameInfo::_InternalParse;
        object = msg->mutable_dota();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dota(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo)
}

::google::protobuf::uint8* CGameInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dota(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo)
  return target;
}

size_t CGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dota_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo)
    MergeFrom(*source);
  }
}

void CGameInfo::MergeFrom(const CGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dota()) {
    mutable_dota()->::proto::dota::CGameInfo_CDotaGameInfo::MergeFrom(from.dota());
  }
}

void CGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo::CopyFrom(const CGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo::IsInitialized() const {
  return true;
}

void CGameInfo::Swap(CGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo::InternalSwap(CGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dota_, other->dota_);
}

::google::protobuf::Metadata CGameInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoFileInfo::InitAsDefaultInstance() {
  ::proto::dota::_CDemoFileInfo_default_instance_._instance.get_mutable()->game_info_ = const_cast< ::proto::dota::CGameInfo*>(
      ::proto::dota::CGameInfo::internal_default_instance());
}
class CDemoFileInfo::HasBitSetters {
 public:
  static void set_has_playback_time(CDemoFileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playback_ticks(CDemoFileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_playback_frames(CDemoFileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CGameInfo& game_info(const CDemoFileInfo* msg);
  static void set_has_game_info(CDemoFileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CGameInfo&
CDemoFileInfo::HasBitSetters::game_info(const CDemoFileInfo* msg) {
  return *msg->game_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoFileInfo::kPlaybackTimeFieldNumber;
const int CDemoFileInfo::kPlaybackTicksFieldNumber;
const int CDemoFileInfo::kPlaybackFramesFieldNumber;
const int CDemoFileInfo::kGameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoFileInfo::CDemoFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoFileInfo)
}
CDemoFileInfo::CDemoFileInfo(const CDemoFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_info()) {
    game_info_ = new ::proto::dota::CGameInfo(*from.game_info_);
  } else {
    game_info_ = nullptr;
  }
  ::memcpy(&playback_time_, &from.playback_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&playback_frames_) -
    reinterpret_cast<char*>(&playback_time_)) + sizeof(playback_frames_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoFileInfo)
}

void CDemoFileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoFileInfo_demo_2eproto.base);
  ::memset(&game_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playback_frames_) -
      reinterpret_cast<char*>(&game_info_)) + sizeof(playback_frames_));
}

CDemoFileInfo::~CDemoFileInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoFileInfo)
  SharedDtor();
}

void CDemoFileInfo::SharedDtor() {
  if (this != internal_default_instance()) delete game_info_;
}

void CDemoFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoFileInfo& CDemoFileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoFileInfo_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_info_ != nullptr);
    game_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&playback_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playback_frames_) -
        reinterpret_cast<char*>(&playback_time_)) + sizeof(playback_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoFileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoFileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float playback_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_playback_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 playback_ticks = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playback_ticks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 playback_frames = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_playback_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CGameInfo game_info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CGameInfo::_InternalParse;
        object = msg->mutable_game_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoFileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float playback_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_playback_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playback_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playback_ticks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playback_ticks(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_ticks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playback_frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_playback_frames(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CGameInfo game_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoFileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float playback_time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->playback_time(), output);
  }

  // optional int32 playback_ticks = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playback_ticks(), output);
  }

  // optional int32 playback_frames = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playback_frames(), output);
  }

  // optional .proto.dota.CGameInfo game_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::game_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoFileInfo)
}

::google::protobuf::uint8* CDemoFileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float playback_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->playback_time(), target);
  }

  // optional int32 playback_ticks = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playback_ticks(), target);
  }

  // optional int32 playback_frames = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playback_frames(), target);
  }

  // optional .proto.dota.CGameInfo game_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::game_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoFileInfo)
  return target;
}

size_t CDemoFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CGameInfo game_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_info_);
    }

    // optional float playback_time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 playback_ticks = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_ticks());
    }

    // optional int32 playback_frames = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_frames());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoFileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoFileInfo)
    MergeFrom(*source);
  }
}

void CDemoFileInfo::MergeFrom(const CDemoFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_game_info()->::proto::dota::CGameInfo::MergeFrom(from.game_info());
    }
    if (cached_has_bits & 0x00000002u) {
      playback_time_ = from.playback_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      playback_ticks_ = from.playback_ticks_;
    }
    if (cached_has_bits & 0x00000008u) {
      playback_frames_ = from.playback_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileInfo::CopyFrom(const CDemoFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileInfo::IsInitialized() const {
  return true;
}

void CDemoFileInfo::Swap(CDemoFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFileInfo::InternalSwap(CDemoFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_info_, other->game_info_);
  swap(playback_time_, other->playback_time_);
  swap(playback_ticks_, other->playback_ticks_);
  swap(playback_frames_, other->playback_frames_);
}

::google::protobuf::Metadata CDemoFileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoPacket::InitAsDefaultInstance() {
}
class CDemoPacket::HasBitSetters {
 public:
  static void set_has_data(CDemoPacket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoPacket::CDemoPacket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoPacket)
}
CDemoPacket::CDemoPacket(const CDemoPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoPacket)
}

void CDemoPacket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoPacket_demo_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoPacket::~CDemoPacket() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoPacket)
  SharedDtor();
}

void CDemoPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoPacket& CDemoPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoPacket_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoPacket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoPacket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoPacket)
}

::google::protobuf::uint8* CDemoPacket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoPacket)
  return target;
}

size_t CDemoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoPacket* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoPacket)
    MergeFrom(*source);
  }
}

void CDemoPacket::MergeFrom(const CDemoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _has_bits_[0] |= 0x00000001u;
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CDemoPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoPacket::CopyFrom(const CDemoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoPacket::IsInitialized() const {
  return true;
}

void CDemoPacket::Swap(CDemoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoPacket::InternalSwap(CDemoPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDemoPacket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoFullPacket::InitAsDefaultInstance() {
  ::proto::dota::_CDemoFullPacket_default_instance_._instance.get_mutable()->string_table_ = const_cast< ::proto::dota::CDemoStringTables*>(
      ::proto::dota::CDemoStringTables::internal_default_instance());
  ::proto::dota::_CDemoFullPacket_default_instance_._instance.get_mutable()->packet_ = const_cast< ::proto::dota::CDemoPacket*>(
      ::proto::dota::CDemoPacket::internal_default_instance());
}
class CDemoFullPacket::HasBitSetters {
 public:
  static const ::proto::dota::CDemoStringTables& string_table(const CDemoFullPacket* msg);
  static void set_has_string_table(CDemoFullPacket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CDemoPacket& packet(const CDemoFullPacket* msg);
  static void set_has_packet(CDemoFullPacket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CDemoStringTables&
CDemoFullPacket::HasBitSetters::string_table(const CDemoFullPacket* msg) {
  return *msg->string_table_;
}
const ::proto::dota::CDemoPacket&
CDemoFullPacket::HasBitSetters::packet(const CDemoFullPacket* msg) {
  return *msg->packet_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoFullPacket::kStringTableFieldNumber;
const int CDemoFullPacket::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoFullPacket::CDemoFullPacket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoFullPacket)
}
CDemoFullPacket::CDemoFullPacket(const CDemoFullPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_string_table()) {
    string_table_ = new ::proto::dota::CDemoStringTables(*from.string_table_);
  } else {
    string_table_ = nullptr;
  }
  if (from.has_packet()) {
    packet_ = new ::proto::dota::CDemoPacket(*from.packet_);
  } else {
    packet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoFullPacket)
}

void CDemoFullPacket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoFullPacket_demo_2eproto.base);
  ::memset(&string_table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_) -
      reinterpret_cast<char*>(&string_table_)) + sizeof(packet_));
}

CDemoFullPacket::~CDemoFullPacket() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoFullPacket)
  SharedDtor();
}

void CDemoFullPacket::SharedDtor() {
  if (this != internal_default_instance()) delete string_table_;
  if (this != internal_default_instance()) delete packet_;
}

void CDemoFullPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoFullPacket& CDemoFullPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoFullPacket_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoFullPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoFullPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(string_table_ != nullptr);
      string_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(packet_ != nullptr);
      packet_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoFullPacket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoFullPacket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CDemoStringTables string_table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDemoStringTables::_InternalParse;
        object = msg->mutable_string_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CDemoPacket packet = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CDemoPacket::_InternalParse;
        object = msg->mutable_packet();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoFullPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoFullPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDemoStringTables string_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDemoPacket packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoFullPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoFullPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoFullPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoFullPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDemoStringTables string_table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::string_table(this), output);
  }

  // optional .proto.dota.CDemoPacket packet = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::packet(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoFullPacket)
}

::google::protobuf::uint8* CDemoFullPacket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoFullPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDemoStringTables string_table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::string_table(this), target);
  }

  // optional .proto.dota.CDemoPacket packet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::packet(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoFullPacket)
  return target;
}

size_t CDemoFullPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoFullPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CDemoStringTables string_table = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *string_table_);
    }

    // optional .proto.dota.CDemoPacket packet = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *packet_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoFullPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoFullPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoFullPacket* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoFullPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoFullPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoFullPacket)
    MergeFrom(*source);
  }
}

void CDemoFullPacket::MergeFrom(const CDemoFullPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoFullPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_string_table()->::proto::dota::CDemoStringTables::MergeFrom(from.string_table());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_packet()->::proto::dota::CDemoPacket::MergeFrom(from.packet());
    }
  }
}

void CDemoFullPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoFullPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFullPacket::CopyFrom(const CDemoFullPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoFullPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFullPacket::IsInitialized() const {
  return true;
}

void CDemoFullPacket::Swap(CDemoFullPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFullPacket::InternalSwap(CDemoFullPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(string_table_, other->string_table_);
  swap(packet_, other->packet_);
}

::google::protobuf::Metadata CDemoFullPacket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoSaveGame::InitAsDefaultInstance() {
}
class CDemoSaveGame::HasBitSetters {
 public:
  static void set_has_data(CDemoSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id(CDemoSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_signature(CDemoSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_version(CDemoSaveGame* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoSaveGame::kDataFieldNumber;
const int CDemoSaveGame::kSteamIdFieldNumber;
const int CDemoSaveGame::kSignatureFieldNumber;
const int CDemoSaveGame::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSaveGame::CDemoSaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSaveGame)
}
CDemoSaveGame::CDemoSaveGame(const CDemoSaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSaveGame)
}

void CDemoSaveGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoSaveGame_demo_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
}

CDemoSaveGame::~CDemoSaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSaveGame)
  SharedDtor();
}

void CDemoSaveGame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoSaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoSaveGame& CDemoSaveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoSaveGame_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoSaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoSaveGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoSaveGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 signature = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_signature(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSaveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_signature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSaveGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional fixed64 signature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->signature(), output);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSaveGame)
}

::google::protobuf::uint8* CDemoSaveGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional fixed64 signature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->signature(), target);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSaveGame)
  return target;
}

size_t CDemoSaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSaveGame* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoSaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSaveGame)
    MergeFrom(*source);
  }
}

void CDemoSaveGame::MergeFrom(const CDemoSaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSaveGame::CopyFrom(const CDemoSaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSaveGame::IsInitialized() const {
  return true;
}

void CDemoSaveGame::Swap(CDemoSaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSaveGame::InternalSwap(CDemoSaveGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(signature_, other->signature_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata CDemoSaveGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoSyncTick::InitAsDefaultInstance() {
}
class CDemoSyncTick::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSyncTick::CDemoSyncTick()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSyncTick)
}
CDemoSyncTick::CDemoSyncTick(const CDemoSyncTick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSyncTick)
}

void CDemoSyncTick::SharedCtor() {
}

CDemoSyncTick::~CDemoSyncTick() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSyncTick)
  SharedDtor();
}

void CDemoSyncTick::SharedDtor() {
}

void CDemoSyncTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoSyncTick& CDemoSyncTick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoSyncTick_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoSyncTick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSyncTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoSyncTick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoSyncTick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoSyncTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSyncTick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSyncTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSyncTick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoSyncTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSyncTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSyncTick)
}

::google::protobuf::uint8* CDemoSyncTick::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSyncTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSyncTick)
  return target;
}

size_t CDemoSyncTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSyncTick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoSyncTick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSyncTick)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSyncTick* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoSyncTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSyncTick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSyncTick)
    MergeFrom(*source);
  }
}

void CDemoSyncTick::MergeFrom(const CDemoSyncTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSyncTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDemoSyncTick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSyncTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSyncTick::CopyFrom(const CDemoSyncTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSyncTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSyncTick::IsInitialized() const {
  return true;
}

void CDemoSyncTick::Swap(CDemoSyncTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSyncTick::InternalSwap(CDemoSyncTick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDemoSyncTick::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoConsoleCmd::InitAsDefaultInstance() {
}
class CDemoConsoleCmd::HasBitSetters {
 public:
  static void set_has_cmdstring(CDemoConsoleCmd* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoConsoleCmd::kCmdstringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoConsoleCmd::CDemoConsoleCmd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoConsoleCmd)
}
CDemoConsoleCmd::CDemoConsoleCmd(const CDemoConsoleCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmdstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmdstring()) {
    cmdstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdstring_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoConsoleCmd)
}

void CDemoConsoleCmd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoConsoleCmd_demo_2eproto.base);
  cmdstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoConsoleCmd::~CDemoConsoleCmd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoConsoleCmd)
  SharedDtor();
}

void CDemoConsoleCmd::SharedDtor() {
  cmdstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoConsoleCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoConsoleCmd& CDemoConsoleCmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoConsoleCmd_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoConsoleCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoConsoleCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cmdstring_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoConsoleCmd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoConsoleCmd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string cmdstring = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoConsoleCmd.cmdstring");
        object = msg->mutable_cmdstring();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoConsoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoConsoleCmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmdstring = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdstring().data(), static_cast<int>(this->cmdstring().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoConsoleCmd.cmdstring");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoConsoleCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoConsoleCmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoConsoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoConsoleCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cmdstring = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), static_cast<int>(this->cmdstring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoConsoleCmd.cmdstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmdstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoConsoleCmd)
}

::google::protobuf::uint8* CDemoConsoleCmd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoConsoleCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cmdstring = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), static_cast<int>(this->cmdstring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoConsoleCmd.cmdstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmdstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoConsoleCmd)
  return target;
}

size_t CDemoConsoleCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoConsoleCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string cmdstring = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmdstring());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoConsoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoConsoleCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoConsoleCmd* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoConsoleCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoConsoleCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoConsoleCmd)
    MergeFrom(*source);
  }
}

void CDemoConsoleCmd::MergeFrom(const CDemoConsoleCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoConsoleCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmdstring()) {
    _has_bits_[0] |= 0x00000001u;
    cmdstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdstring_);
  }
}

void CDemoConsoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoConsoleCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoConsoleCmd::CopyFrom(const CDemoConsoleCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoConsoleCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoConsoleCmd::IsInitialized() const {
  return true;
}

void CDemoConsoleCmd::Swap(CDemoConsoleCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoConsoleCmd::InternalSwap(CDemoConsoleCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cmdstring_.Swap(&other->cmdstring_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDemoConsoleCmd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoSendTables::InitAsDefaultInstance() {
}
class CDemoSendTables::HasBitSetters {
 public:
  static void set_has_data(CDemoSendTables* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoSendTables::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSendTables::CDemoSendTables()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSendTables)
}
CDemoSendTables::CDemoSendTables(const CDemoSendTables& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSendTables)
}

void CDemoSendTables::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoSendTables_demo_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoSendTables::~CDemoSendTables() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSendTables)
  SharedDtor();
}

void CDemoSendTables::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoSendTables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoSendTables& CDemoSendTables::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoSendTables_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoSendTables::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSendTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoSendTables::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoSendTables*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoSendTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSendTables)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSendTables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSendTables)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoSendTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSendTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSendTables)
}

::google::protobuf::uint8* CDemoSendTables::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSendTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSendTables)
  return target;
}

size_t CDemoSendTables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSendTables)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoSendTables::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSendTables)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSendTables* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoSendTables>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSendTables)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSendTables)
    MergeFrom(*source);
  }
}

void CDemoSendTables::MergeFrom(const CDemoSendTables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSendTables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _has_bits_[0] |= 0x00000001u;
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CDemoSendTables::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSendTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSendTables::CopyFrom(const CDemoSendTables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSendTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSendTables::IsInitialized() const {
  return true;
}

void CDemoSendTables::Swap(CDemoSendTables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSendTables::InternalSwap(CDemoSendTables* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDemoSendTables::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoClassInfo_class_t::InitAsDefaultInstance() {
}
class CDemoClassInfo_class_t::HasBitSetters {
 public:
  static void set_has_class_id(CDemoClassInfo_class_t* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_network_name(CDemoClassInfo_class_t* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_table_name(CDemoClassInfo_class_t* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoClassInfo_class_t::kClassIdFieldNumber;
const int CDemoClassInfo_class_t::kNetworkNameFieldNumber;
const int CDemoClassInfo_class_t::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoClassInfo_class_t::CDemoClassInfo_class_t()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoClassInfo.class_t)
}
CDemoClassInfo_class_t::CDemoClassInfo_class_t(const CDemoClassInfo_class_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_name()) {
    network_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  class_id_ = from.class_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoClassInfo.class_t)
}

void CDemoClassInfo_class_t::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoClassInfo_class_t_demo_2eproto.base);
  network_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_ = 0;
}

CDemoClassInfo_class_t::~CDemoClassInfo_class_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoClassInfo.class_t)
  SharedDtor();
}

void CDemoClassInfo_class_t::SharedDtor() {
  network_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoClassInfo_class_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoClassInfo_class_t& CDemoClassInfo_class_t::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoClassInfo_class_t_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoClassInfo_class_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      network_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  class_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoClassInfo_class_t::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoClassInfo_class_t*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 class_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_class_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string network_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoClassInfo.class_t.network_name");
        object = msg->mutable_network_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string table_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoClassInfo.class_t.table_name");
        object = msg->mutable_table_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoClassInfo_class_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoClassInfo.class_t)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_class_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_name().data(), static_cast<int>(this->network_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoClassInfo.class_t.network_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoClassInfo.class_t.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoClassInfo.class_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoClassInfo.class_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoClassInfo_class_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional string network_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_name().data(), static_cast<int>(this->network_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.network_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network_name(), output);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoClassInfo.class_t)
}

::google::protobuf::uint8* CDemoClassInfo_class_t::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional string network_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_name().data(), static_cast<int>(this->network_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.network_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoClassInfo.class_t)
  return target;
}

size_t CDemoClassInfo_class_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoClassInfo.class_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string network_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

    // optional string table_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional int32 class_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoClassInfo_class_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoClassInfo_class_t* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoClassInfo_class_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoClassInfo.class_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoClassInfo.class_t)
    MergeFrom(*source);
  }
}

void CDemoClassInfo_class_t::MergeFrom(const CDemoClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      network_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      class_id_ = from.class_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoClassInfo_class_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo_class_t::CopyFrom(const CDemoClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo_class_t::IsInitialized() const {
  return true;
}

void CDemoClassInfo_class_t::Swap(CDemoClassInfo_class_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoClassInfo_class_t::InternalSwap(CDemoClassInfo_class_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  network_name_.Swap(&other->network_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(class_id_, other->class_id_);
}

::google::protobuf::Metadata CDemoClassInfo_class_t::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoClassInfo::InitAsDefaultInstance() {
}
class CDemoClassInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoClassInfo::kClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoClassInfo::CDemoClassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoClassInfo)
}
CDemoClassInfo::CDemoClassInfo(const CDemoClassInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoClassInfo)
}

void CDemoClassInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoClassInfo_demo_2eproto.base);
}

CDemoClassInfo::~CDemoClassInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoClassInfo)
  SharedDtor();
}

void CDemoClassInfo::SharedDtor() {
}

void CDemoClassInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoClassInfo& CDemoClassInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoClassInfo_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoClassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoClassInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoClassInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDemoClassInfo_class_t::_InternalParse;
          object = msg->add_classes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoClassInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoClassInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->classes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoClassInfo)
}

::google::protobuf::uint8* CDemoClassInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->classes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoClassInfo)
  return target;
}

size_t CDemoClassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoClassInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->classes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->classes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoClassInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoClassInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoClassInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoClassInfo)
    MergeFrom(*source);
  }
}

void CDemoClassInfo::MergeFrom(const CDemoClassInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
}

void CDemoClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo::CopyFrom(const CDemoClassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo::IsInitialized() const {
  return true;
}

void CDemoClassInfo::Swap(CDemoClassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoClassInfo::InternalSwap(CDemoClassInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&classes_)->InternalSwap(CastToBase(&other->classes_));
}

::google::protobuf::Metadata CDemoClassInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoCustomData::InitAsDefaultInstance() {
}
class CDemoCustomData::HasBitSetters {
 public:
  static void set_has_callback_index(CDemoCustomData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(CDemoCustomData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoCustomData::kCallbackIndexFieldNumber;
const int CDemoCustomData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoCustomData::CDemoCustomData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoCustomData)
}
CDemoCustomData::CDemoCustomData(const CDemoCustomData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  callback_index_ = from.callback_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoCustomData)
}

void CDemoCustomData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoCustomData_demo_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_index_ = 0;
}

CDemoCustomData::~CDemoCustomData() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoCustomData)
  SharedDtor();
}

void CDemoCustomData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoCustomData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoCustomData& CDemoCustomData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoCustomData_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoCustomData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  callback_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoCustomData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoCustomData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 callback_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_callback_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoCustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoCustomData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_callback_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoCustomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoCustomData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoCustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 callback_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_index(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoCustomData)
}

::google::protobuf::uint8* CDemoCustomData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 callback_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_index(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoCustomData)
  return target;
}

size_t CDemoCustomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoCustomData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 callback_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoCustomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoCustomData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoCustomData* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoCustomData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoCustomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoCustomData)
    MergeFrom(*source);
  }
}

void CDemoCustomData::MergeFrom(const CDemoCustomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoCustomData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      callback_index_ = from.callback_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoCustomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoCustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomData::CopyFrom(const CDemoCustomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoCustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomData::IsInitialized() const {
  return true;
}

void CDemoCustomData::Swap(CDemoCustomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoCustomData::InternalSwap(CDemoCustomData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(callback_index_, other->callback_index_);
}

::google::protobuf::Metadata CDemoCustomData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoCustomDataCallbacks::InitAsDefaultInstance() {
}
class CDemoCustomDataCallbacks::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoCustomDataCallbacks::kSaveIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoCustomDataCallbacks::CDemoCustomDataCallbacks()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoCustomDataCallbacks)
}
CDemoCustomDataCallbacks::CDemoCustomDataCallbacks(const CDemoCustomDataCallbacks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      save_id_(from.save_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoCustomDataCallbacks)
}

void CDemoCustomDataCallbacks::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoCustomDataCallbacks_demo_2eproto.base);
}

CDemoCustomDataCallbacks::~CDemoCustomDataCallbacks() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoCustomDataCallbacks)
  SharedDtor();
}

void CDemoCustomDataCallbacks::SharedDtor() {
}

void CDemoCustomDataCallbacks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoCustomDataCallbacks& CDemoCustomDataCallbacks::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoCustomDataCallbacks_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoCustomDataCallbacks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoCustomDataCallbacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  save_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoCustomDataCallbacks::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoCustomDataCallbacks*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string save_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CDemoCustomDataCallbacks.save_id");
          object = msg->add_save_id();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoCustomDataCallbacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoCustomDataCallbacks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string save_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_save_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_id(this->save_id_size() - 1).data(),
            static_cast<int>(this->save_id(this->save_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoCustomDataCallbacks.save_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoCustomDataCallbacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoCustomDataCallbacks)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoCustomDataCallbacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoCustomDataCallbacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string save_id = 1;
  for (int i = 0, n = this->save_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_id(i).data(), static_cast<int>(this->save_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoCustomDataCallbacks.save_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->save_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoCustomDataCallbacks)
}

::google::protobuf::uint8* CDemoCustomDataCallbacks::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoCustomDataCallbacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string save_id = 1;
  for (int i = 0, n = this->save_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_id(i).data(), static_cast<int>(this->save_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoCustomDataCallbacks.save_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->save_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoCustomDataCallbacks)
  return target;
}

size_t CDemoCustomDataCallbacks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoCustomDataCallbacks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string save_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->save_id_size());
  for (int i = 0, n = this->save_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->save_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoCustomDataCallbacks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoCustomDataCallbacks)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoCustomDataCallbacks* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoCustomDataCallbacks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoCustomDataCallbacks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoCustomDataCallbacks)
    MergeFrom(*source);
  }
}

void CDemoCustomDataCallbacks::MergeFrom(const CDemoCustomDataCallbacks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoCustomDataCallbacks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  save_id_.MergeFrom(from.save_id_);
}

void CDemoCustomDataCallbacks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoCustomDataCallbacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomDataCallbacks::CopyFrom(const CDemoCustomDataCallbacks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoCustomDataCallbacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomDataCallbacks::IsInitialized() const {
  return true;
}

void CDemoCustomDataCallbacks::Swap(CDemoCustomDataCallbacks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoCustomDataCallbacks::InternalSwap(CDemoCustomDataCallbacks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  save_id_.InternalSwap(CastToBase(&other->save_id_));
}

::google::protobuf::Metadata CDemoCustomDataCallbacks::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoStringTables_items_t::InitAsDefaultInstance() {
}
class CDemoStringTables_items_t::HasBitSetters {
 public:
  static void set_has_str(CDemoStringTables_items_t* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data(CDemoStringTables_items_t* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoStringTables_items_t::kStrFieldNumber;
const int CDemoStringTables_items_t::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStringTables_items_t::CDemoStringTables_items_t()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStringTables.items_t)
}
CDemoStringTables_items_t::CDemoStringTables_items_t(const CDemoStringTables_items_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStringTables.items_t)
}

void CDemoStringTables_items_t::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoStringTables_items_t_demo_2eproto.base);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoStringTables_items_t::~CDemoStringTables_items_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStringTables.items_t)
  SharedDtor();
}

void CDemoStringTables_items_t::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoStringTables_items_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoStringTables_items_t& CDemoStringTables_items_t::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoStringTables_items_t_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoStringTables_items_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStringTables.items_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      str_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoStringTables_items_t::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoStringTables_items_t*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string str = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoStringTables.items_t.str");
        object = msg->mutable_str();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoStringTables_items_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStringTables.items_t)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoStringTables.items_t.str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStringTables.items_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStringTables.items_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoStringTables_items_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStringTables.items_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.items_t.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStringTables.items_t)
}

::google::protobuf::uint8* CDemoStringTables_items_t::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStringTables.items_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.items_t.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStringTables.items_t)
  return target;
}

size_t CDemoStringTables_items_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStringTables.items_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string str = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoStringTables_items_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStringTables.items_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStringTables_items_t* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoStringTables_items_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStringTables.items_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStringTables.items_t)
    MergeFrom(*source);
  }
}

void CDemoStringTables_items_t::MergeFrom(const CDemoStringTables_items_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStringTables.items_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CDemoStringTables_items_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStringTables.items_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_items_t::CopyFrom(const CDemoStringTables_items_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStringTables.items_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_items_t::IsInitialized() const {
  return true;
}

void CDemoStringTables_items_t::Swap(CDemoStringTables_items_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables_items_t::InternalSwap(CDemoStringTables_items_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_.Swap(&other->str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CDemoStringTables_items_t::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoStringTables_table_t::InitAsDefaultInstance() {
}
class CDemoStringTables_table_t::HasBitSetters {
 public:
  static void set_has_table_name(CDemoStringTables_table_t* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_table_flags(CDemoStringTables_table_t* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoStringTables_table_t::kTableNameFieldNumber;
const int CDemoStringTables_table_t::kItemsFieldNumber;
const int CDemoStringTables_table_t::kItemsClientsideFieldNumber;
const int CDemoStringTables_table_t::kTableFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStringTables_table_t::CDemoStringTables_table_t()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStringTables.table_t)
}
CDemoStringTables_table_t::CDemoStringTables_table_t(const CDemoStringTables_table_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_),
      items_clientside_(from.items_clientside_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  table_flags_ = from.table_flags_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStringTables.table_t)
}

void CDemoStringTables_table_t::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoStringTables_table_t_demo_2eproto.base);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_flags_ = 0;
}

CDemoStringTables_table_t::~CDemoStringTables_table_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStringTables.table_t)
  SharedDtor();
}

void CDemoStringTables_table_t::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoStringTables_table_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoStringTables_table_t& CDemoStringTables_table_t::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoStringTables_table_t_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoStringTables_table_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStringTables.table_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  items_clientside_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    table_name_.ClearNonDefaultToEmptyNoArena();
  }
  table_flags_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoStringTables_table_t::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoStringTables_table_t*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string table_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDemoStringTables.table_t.table_name");
        object = msg->mutable_table_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CDemoStringTables.items_t items = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDemoStringTables_items_t::_InternalParse;
          object = msg->add_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDemoStringTables_items_t::_InternalParse;
          object = msg->add_items_clientside();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional int32 table_flags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_table_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoStringTables_table_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStringTables.table_t)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoStringTables.table_t.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDemoStringTables.items_t items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items_clientside()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_table_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStringTables.table_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStringTables.table_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoStringTables_table_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStringTables.table_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.table_t.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_clientside_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->items_clientside(static_cast<int>(i)),
      output);
  }

  // optional int32 table_flags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStringTables.table_t)
}

::google::protobuf::uint8* CDemoStringTables_table_t::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStringTables.table_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.table_t.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_clientside_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->items_clientside(static_cast<int>(i)), target);
  }

  // optional int32 table_flags = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStringTables.table_t)
  return target;
}

size_t CDemoStringTables_table_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStringTables.table_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->items_clientside_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items_clientside(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string table_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional int32 table_flags = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoStringTables_table_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStringTables.table_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStringTables_table_t* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoStringTables_table_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStringTables.table_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStringTables.table_t)
    MergeFrom(*source);
  }
}

void CDemoStringTables_table_t::MergeFrom(const CDemoStringTables_table_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStringTables.table_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  items_clientside_.MergeFrom(from.items_clientside_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      table_flags_ = from.table_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoStringTables_table_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStringTables.table_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_table_t::CopyFrom(const CDemoStringTables_table_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStringTables.table_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_table_t::IsInitialized() const {
  return true;
}

void CDemoStringTables_table_t::Swap(CDemoStringTables_table_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables_table_t::InternalSwap(CDemoStringTables_table_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  CastToBase(&items_clientside_)->InternalSwap(CastToBase(&other->items_clientside_));
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(table_flags_, other->table_flags_);
}

::google::protobuf::Metadata CDemoStringTables_table_t::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoStringTables::InitAsDefaultInstance() {
}
class CDemoStringTables::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoStringTables::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStringTables::CDemoStringTables()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStringTables)
}
CDemoStringTables::CDemoStringTables(const CDemoStringTables& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStringTables)
}

void CDemoStringTables::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoStringTables_demo_2eproto.base);
}

CDemoStringTables::~CDemoStringTables() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStringTables)
  SharedDtor();
}

void CDemoStringTables::SharedDtor() {
}

void CDemoStringTables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoStringTables& CDemoStringTables::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoStringTables_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoStringTables::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStringTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoStringTables::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoStringTables*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CDemoStringTables_table_t::_InternalParse;
          object = msg->add_tables();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoStringTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStringTables)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStringTables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStringTables)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoStringTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStringTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStringTables)
}

::google::protobuf::uint8* CDemoStringTables::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStringTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStringTables)
  return target;
}

size_t CDemoStringTables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStringTables)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tables(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoStringTables::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStringTables)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStringTables* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoStringTables>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStringTables)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStringTables)
    MergeFrom(*source);
  }
}

void CDemoStringTables::MergeFrom(const CDemoStringTables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStringTables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
}

void CDemoStringTables::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStringTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables::CopyFrom(const CDemoStringTables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStringTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables::IsInitialized() const {
  return true;
}

void CDemoStringTables::Swap(CDemoStringTables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables::InternalSwap(CDemoStringTables* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tables_)->InternalSwap(CastToBase(&other->tables_));
}

::google::protobuf::Metadata CDemoStringTables::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoStop::InitAsDefaultInstance() {
}
class CDemoStop::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStop::CDemoStop()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStop)
}
CDemoStop::CDemoStop(const CDemoStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStop)
}

void CDemoStop::SharedCtor() {
}

CDemoStop::~CDemoStop() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStop)
  SharedDtor();
}

void CDemoStop::SharedDtor() {
}

void CDemoStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoStop& CDemoStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoStop_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoStop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoStop*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStop)
}

::google::protobuf::uint8* CDemoStop::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStop)
  return target;
}

size_t CDemoStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStop* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStop)
    MergeFrom(*source);
  }
}

void CDemoStop::MergeFrom(const CDemoStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDemoStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStop::CopyFrom(const CDemoStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStop::IsInitialized() const {
  return true;
}

void CDemoStop::Swap(CDemoStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStop::InternalSwap(CDemoStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CDemoStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoUserCmd::InitAsDefaultInstance() {
}
class CDemoUserCmd::HasBitSetters {
 public:
  static void set_has_cmd_number(CDemoUserCmd* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(CDemoUserCmd* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoUserCmd::kCmdNumberFieldNumber;
const int CDemoUserCmd::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoUserCmd::CDemoUserCmd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoUserCmd)
}
CDemoUserCmd::CDemoUserCmd(const CDemoUserCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  cmd_number_ = from.cmd_number_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoUserCmd)
}

void CDemoUserCmd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoUserCmd_demo_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_number_ = 0;
}

CDemoUserCmd::~CDemoUserCmd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoUserCmd)
  SharedDtor();
}

void CDemoUserCmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoUserCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoUserCmd& CDemoUserCmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoUserCmd_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoUserCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoUserCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  cmd_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoUserCmd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoUserCmd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 cmd_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cmd_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoUserCmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cmd_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoUserCmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoUserCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmd_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_number(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoUserCmd)
}

::google::protobuf::uint8* CDemoUserCmd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoUserCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmd_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_number(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoUserCmd)
  return target;
}

size_t CDemoUserCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoUserCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 cmd_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoUserCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoUserCmd* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoUserCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoUserCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoUserCmd)
    MergeFrom(*source);
  }
}

void CDemoUserCmd::MergeFrom(const CDemoUserCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoUserCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_number_ = from.cmd_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoUserCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoUserCmd::CopyFrom(const CDemoUserCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoUserCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoUserCmd::IsInitialized() const {
  return true;
}

void CDemoUserCmd::Swap(CDemoUserCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoUserCmd::InternalSwap(CDemoUserCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmd_number_, other->cmd_number_);
}

::google::protobuf::Metadata CDemoUserCmd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDemoSpawnGroups::InitAsDefaultInstance() {
}
class CDemoSpawnGroups::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoSpawnGroups::kMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSpawnGroups::CDemoSpawnGroups()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSpawnGroups)
}
CDemoSpawnGroups::CDemoSpawnGroups(const CDemoSpawnGroups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSpawnGroups)
}

void CDemoSpawnGroups::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDemoSpawnGroups_demo_2eproto.base);
}

CDemoSpawnGroups::~CDemoSpawnGroups() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSpawnGroups)
  SharedDtor();
}

void CDemoSpawnGroups::SharedDtor() {
}

void CDemoSpawnGroups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDemoSpawnGroups& CDemoSpawnGroups::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDemoSpawnGroups_demo_2eproto.base);
  return *internal_default_instance();
}


void CDemoSpawnGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSpawnGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDemoSpawnGroups::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDemoSpawnGroups*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes msgs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_msgs();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDemoSpawnGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSpawnGroups)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes msgs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSpawnGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSpawnGroups)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDemoSpawnGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSpawnGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgs = 3;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msgs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSpawnGroups)
}

::google::protobuf::uint8* CDemoSpawnGroups::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSpawnGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgs = 3;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->msgs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSpawnGroups)
  return target;
}

size_t CDemoSpawnGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSpawnGroups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msgs_size());
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDemoSpawnGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSpawnGroups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSpawnGroups* source =
      ::google::protobuf::DynamicCastToGenerated<CDemoSpawnGroups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSpawnGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSpawnGroups)
    MergeFrom(*source);
  }
}

void CDemoSpawnGroups::MergeFrom(const CDemoSpawnGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSpawnGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void CDemoSpawnGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSpawnGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSpawnGroups::CopyFrom(const CDemoSpawnGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSpawnGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSpawnGroups::IsInitialized() const {
  return true;
}

void CDemoSpawnGroups::Swap(CDemoSpawnGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSpawnGroups::InternalSwap(CDemoSpawnGroups* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msgs_.InternalSwap(CastToBase(&other->msgs_));
}

::google::protobuf::Metadata CDemoSpawnGroups::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_demo_2eproto);
  return ::file_level_metadata_demo_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoFileHeader* Arena::CreateMaybeMessage< ::proto::dota::CDemoFileHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoFileHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* Arena::CreateMaybeMessage< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* Arena::CreateMaybeMessage< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGameInfo_CDotaGameInfo* Arena::CreateMaybeMessage< ::proto::dota::CGameInfo_CDotaGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGameInfo_CDotaGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGameInfo* Arena::CreateMaybeMessage< ::proto::dota::CGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoFileInfo* Arena::CreateMaybeMessage< ::proto::dota::CDemoFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoPacket* Arena::CreateMaybeMessage< ::proto::dota::CDemoPacket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoFullPacket* Arena::CreateMaybeMessage< ::proto::dota::CDemoFullPacket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoFullPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoSaveGame* Arena::CreateMaybeMessage< ::proto::dota::CDemoSaveGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoSaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoSyncTick* Arena::CreateMaybeMessage< ::proto::dota::CDemoSyncTick >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoSyncTick >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoConsoleCmd* Arena::CreateMaybeMessage< ::proto::dota::CDemoConsoleCmd >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoConsoleCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoSendTables* Arena::CreateMaybeMessage< ::proto::dota::CDemoSendTables >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoSendTables >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoClassInfo_class_t* Arena::CreateMaybeMessage< ::proto::dota::CDemoClassInfo_class_t >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoClassInfo_class_t >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoClassInfo* Arena::CreateMaybeMessage< ::proto::dota::CDemoClassInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoClassInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoCustomData* Arena::CreateMaybeMessage< ::proto::dota::CDemoCustomData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoCustomData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoCustomDataCallbacks* Arena::CreateMaybeMessage< ::proto::dota::CDemoCustomDataCallbacks >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoCustomDataCallbacks >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoStringTables_items_t* Arena::CreateMaybeMessage< ::proto::dota::CDemoStringTables_items_t >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoStringTables_items_t >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoStringTables_table_t* Arena::CreateMaybeMessage< ::proto::dota::CDemoStringTables_table_t >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoStringTables_table_t >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoStringTables* Arena::CreateMaybeMessage< ::proto::dota::CDemoStringTables >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoStringTables >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoStop* Arena::CreateMaybeMessage< ::proto::dota::CDemoStop >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoStop >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoUserCmd* Arena::CreateMaybeMessage< ::proto::dota::CDemoUserCmd >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoUserCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDemoSpawnGroups* Arena::CreateMaybeMessage< ::proto::dota::CDemoSpawnGroups >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDemoSpawnGroups >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
