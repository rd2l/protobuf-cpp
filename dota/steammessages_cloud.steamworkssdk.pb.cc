// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamworkssdk.proto

#include "steammessages_cloud.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto;
namespace proto {
namespace dota {
class CCloud_GetUploadServerInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Request> _instance;
} _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Response> _instance;
} _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_GetFileDetails_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Request> _instance;
} _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_UserFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_UserFile> _instance;
} _CCloud_UserFile_default_instance_;
class CCloud_GetFileDetails_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Response> _instance;
} _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_EnumerateUserFiles_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Request> _instance;
} _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Response> _instance;
} _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_Delete_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Request> _instance;
} _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Response> _instance;
} _CCloud_Delete_Response_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_GetUploadServerInfo_Request_default_instance_;
    new (ptr) ::proto::dota::CCloud_GetUploadServerInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_GetUploadServerInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_GetUploadServerInfo_Response_default_instance_;
    new (ptr) ::proto::dota::CCloud_GetUploadServerInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_GetUploadServerInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_GetFileDetails_Request_default_instance_;
    new (ptr) ::proto::dota::CCloud_GetFileDetails_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_GetFileDetails_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_UserFile_default_instance_;
    new (ptr) ::proto::dota::CCloud_UserFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_UserFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_GetFileDetails_Response_default_instance_;
    new (ptr) ::proto::dota::CCloud_GetFileDetails_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_GetFileDetails_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamworkssdk_2eproto}, {
      &scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto.base,}};

static void InitDefaultsCCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_EnumerateUserFiles_Request_default_instance_;
    new (ptr) ::proto::dota::CCloud_EnumerateUserFiles_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_EnumerateUserFiles_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_EnumerateUserFiles_Response_default_instance_;
    new (ptr) ::proto::dota::CCloud_EnumerateUserFiles_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_EnumerateUserFiles_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamworkssdk_2eproto}, {
      &scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto.base,}};

static void InitDefaultsCCloud_Delete_Request_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_Delete_Request_default_instance_;
    new (ptr) ::proto::dota::CCloud_Delete_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_Delete_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_Delete_Request_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCCloud_Delete_Response_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CCloud_Delete_Response_default_instance_;
    new (ptr) ::proto::dota::CCloud_Delete_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CCloud_Delete_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCloud_Delete_Response_steammessages_5fcloud_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCloud_Delete_Response_steammessages_5fcloud_2esteamworkssdk_2eproto}, {}};

void InitDefaults_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCloud_Delete_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[9];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetUploadServerInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetUploadServerInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetUploadServerInfo_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetUploadServerInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetUploadServerInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetUploadServerInfo_Response, server_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Request, ugcid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, ugcid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_UserFile, steamid_creator_),
  3,
  2,
  0,
  5,
  4,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_GetFileDetails_Response, details_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Request, extended_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Request, count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Request, start_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Response, files_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_EnumerateUserFiles_Response, total_files_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_Delete_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_Delete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_Delete_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_Delete_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_Delete_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CCloud_Delete_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::dota::CCloud_GetUploadServerInfo_Request)},
  { 7, 13, sizeof(::proto::dota::CCloud_GetUploadServerInfo_Response)},
  { 14, 21, sizeof(::proto::dota::CCloud_GetFileDetails_Request)},
  { 23, 35, sizeof(::proto::dota::CCloud_UserFile)},
  { 42, 48, sizeof(::proto::dota::CCloud_GetFileDetails_Response)},
  { 49, 58, sizeof(::proto::dota::CCloud_EnumerateUserFiles_Request)},
  { 62, 69, sizeof(::proto::dota::CCloud_EnumerateUserFiles_Response)},
  { 71, 78, sizeof(::proto::dota::CCloud_Delete_Request)},
  { 80, 85, sizeof(::proto::dota::CCloud_Delete_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_GetUploadServerInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_GetUploadServerInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_GetFileDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_UserFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_GetFileDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_EnumerateUserFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_EnumerateUserFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_Delete_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CCloud_Delete_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto = {
  {}, AddDescriptors_steammessages_5fcloud_2esteamworkssdk_2eproto, "steammessages_cloud.steamworkssdk.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto::offsets,
  file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto, 9, file_level_enum_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto, file_level_service_descriptors_steammessages_5fcloud_2esteamworkssdk_2eproto,
};

const char descriptor_table_protodef_steammessages_5fcloud_2esteamworkssdk_2eproto[] =
  "\n\'steammessages_cloud.steamworkssdk.prot"
  "o\022\nproto.dota\032.steammessages_unified_bas"
  "e.steamworkssdk.proto\"d\n\"CCloud_GetUploa"
  "dServerInfo_Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+"
  "App ID to which a file will be uploaded "
  "to.\"9\n#CCloud_GetUploadServerInfo_Respon"
  "se\022\022\n\nserver_url\030\001 \001(\t\"\214\001\n\035CCloud_GetFil"
  "eDetails_Request\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID "
  "of the Cloud file to get details for.\022.\n"
  "\005appid\030\002 \001(\rB\037\202\265\030\033App ID the file belong"
  "s to.\"\215\001\n\017CCloud_UserFile\022\r\n\005appid\030\001 \001(\r"
  "\022\r\n\005ugcid\030\002 \001(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttim"
  "estamp\030\004 \001(\004\022\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006"
  " \001(\t\022\027\n\017steamid_creator\030\007 \001(\006\"N\n\036CCloud_"
  "GetFileDetails_Response\022,\n\007details\030\001 \001(\013"
  "2\033.proto.dota.CCloud_UserFile\"\351\003\n!CCloud"
  "_EnumerateUserFiles_Request\0224\n\005appid\030\001 \001"
  "(\rB%\202\265\030!App ID to enumerate the files of"
  ".\022\233\001\n\020extended_details\030\002 \001(\010B\200\001\202\265\030|(Opti"
  "onal) Get extended details back on the f"
  "iles found. Defaults to only returned th"
  "e app Id and UGC Id of the files found.\022"
  "|\n\005count\030\003 \001(\rBm\202\265\030i(Optional) Maximum n"
  "umber of results to return on this call."
  " Defaults to a maximum of 500 files retu"
  "rned.\022r\n\013start_index\030\004 \001(\rB]\202\265\030Y(Optiona"
  "l) Starting index to begin enumeration a"
  "t. Defaults to the beginning of the list"
  ".\"e\n\"CCloud_EnumerateUserFiles_Response\022"
  "*\n\005files\030\001 \003(\0132\033.proto.dota.CCloud_UserF"
  "ile\022\023\n\013total_files\030\002 \001(\r\"Y\n\025CCloud_Delet"
  "e_Request\022\020\n\010filename\030\001 \001(\t\022.\n\005appid\030\002 \001"
  "(\rB\037\202\265\030\033App ID the file belongs to.\"\030\n\026C"
  "Cloud_Delete_Response2\306\005\n\005Cloud\022\262\001\n\023GetU"
  "ploadServerInfo\022..proto.dota.CCloud_GetU"
  "ploadServerInfo_Request\032/.proto.dota.CCl"
  "oud_GetUploadServerInfo_Response\":\202\265\0306Re"
  "turns the URL of the proper cloud server"
  " for a user.\022\215\001\n\016GetFileDetails\022).proto."
  "dota.CCloud_GetFileDetails_Request\032*.pro"
  "to.dota.CCloud_GetFileDetails_Response\"$"
  "\202\265\030 Returns details on a Cloud file.\022\320\001\n"
  "\022EnumerateUserFiles\022-.proto.dota.CCloud_"
  "EnumerateUserFiles_Request\032..proto.dota."
  "CCloud_EnumerateUserFiles_Response\"[\202\265\030W"
  "Enumerates Cloud files for a user of a g"
  "iven app ID. Returns up to 500 files at "
  "a time.\022z\n\006Delete\022!.proto.dota.CCloud_De"
  "lete_Request\032\".proto.dota.CCloud_Delete_"
  "Response\")\202\265\030%Deletes a file from the us"
  "er\'s cloud.\032)\202\265\030%A service for Steam Clo"
  "ud operations."
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto = {
  false, InitDefaults_steammessages_5fcloud_2esteamworkssdk_2eproto, 
  descriptor_table_protodef_steammessages_5fcloud_2esteamworkssdk_2eproto,
  "steammessages_cloud.steamworkssdk.proto", &assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto, 2054,
};

void AddDescriptors_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamworkssdk_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fcloud_2esteamworkssdk_2eproto = []() { AddDescriptors_steammessages_5fcloud_2esteamworkssdk_2eproto(); return true; }();
namespace proto {
namespace dota {

// ===================================================================

void CCloud_GetUploadServerInfo_Request::InitAsDefaultInstance() {
}
class CCloud_GetUploadServerInfo_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_GetUploadServerInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetUploadServerInfo_Request)
}
CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetUploadServerInfo_Request)
}

void CCloud_GetUploadServerInfo_Request::SharedCtor() {
  appid_ = 0u;
}

CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetUploadServerInfo_Request)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Request::SharedDtor() {
}

void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetUploadServerInfo_Request& CCloud_GetUploadServerInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetUploadServerInfo_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetUploadServerInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetUploadServerInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetUploadServerInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetUploadServerInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetUploadServerInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetUploadServerInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetUploadServerInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetUploadServerInfo_Request)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetUploadServerInfo_Request)
  return target;
}

size_t CCloud_GetUploadServerInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetUploadServerInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetUploadServerInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetUploadServerInfo_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Request::Swap(CCloud_GetUploadServerInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Request::InternalSwap(CCloud_GetUploadServerInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetUploadServerInfo_Response::InitAsDefaultInstance() {
}
class CCloud_GetUploadServerInfo_Response::HasBitSetters {
 public:
  static void set_has_server_url(CCloud_GetUploadServerInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Response::kServerUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetUploadServerInfo_Response)
}
CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_url()) {
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetUploadServerInfo_Response)
}

void CCloud_GetUploadServerInfo_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetUploadServerInfo_Response)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  server_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetUploadServerInfo_Response& CCloud_GetUploadServerInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetUploadServerInfo_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetUploadServerInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetUploadServerInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetUploadServerInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string server_url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
        object = msg->mutable_server_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetUploadServerInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_url().data(), static_cast<int>(this->server_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetUploadServerInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetUploadServerInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetUploadServerInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), static_cast<int>(this->server_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetUploadServerInfo_Response)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), static_cast<int>(this->server_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetUploadServerInfo_Response)
  return target;
}

size_t CCloud_GetUploadServerInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string server_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetUploadServerInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetUploadServerInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetUploadServerInfo_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_url()) {
    _has_bits_[0] |= 0x00000001u;
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Response::Swap(CCloud_GetUploadServerInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Response::InternalSwap(CCloud_GetUploadServerInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_url_.Swap(&other->server_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetFileDetails_Request::InitAsDefaultInstance() {
}
class CCloud_GetFileDetails_Request::HasBitSetters {
 public:
  static void set_has_ugcid(CCloud_GetFileDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CCloud_GetFileDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Request::kUgcidFieldNumber;
const int CCloud_GetFileDetails_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetFileDetails_Request)
}
CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetFileDetails_Request)
}

void CCloud_GetFileDetails_Request::SharedCtor() {
  ::memset(&ugcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
}

CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetFileDetails_Request)
  SharedDtor();
}

void CCloud_GetFileDetails_Request::SharedDtor() {
}

void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetFileDetails_Request& CCloud_GetFileDetails_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetFileDetails_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetFileDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetFileDetails_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetFileDetails_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ugcid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetFileDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetFileDetails_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ugcid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetFileDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetFileDetails_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetFileDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ugcid(), output);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetFileDetails_Request)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ugcid(), target);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetFileDetails_Request)
  return target;
}

size_t CCloud_GetFileDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetFileDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetFileDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetFileDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetFileDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetFileDetails_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Request::MergeFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_GetFileDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Request::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Request::Swap(CCloud_GetFileDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Request::InternalSwap(CCloud_GetFileDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ugcid_, other->ugcid_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_UserFile::InitAsDefaultInstance() {
}
class CCloud_UserFile::HasBitSetters {
 public:
  static void set_has_appid(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ugcid(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_filename(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_file_size(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_url(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid_creator(CCloud_UserFile* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_UserFile::kAppidFieldNumber;
const int CCloud_UserFile::kUgcidFieldNumber;
const int CCloud_UserFile::kFilenameFieldNumber;
const int CCloud_UserFile::kTimestampFieldNumber;
const int CCloud_UserFile::kFileSizeFieldNumber;
const int CCloud_UserFile::kUrlFieldNumber;
const int CCloud_UserFile::kSteamidCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_UserFile::CCloud_UserFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_UserFile)
}
CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_creator_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(steamid_creator_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_UserFile)
}

void CCloud_UserFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ugcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_creator_) -
      reinterpret_cast<char*>(&ugcid_)) + sizeof(steamid_creator_));
}

CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_UserFile)
  SharedDtor();
}

void CCloud_UserFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_UserFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_UserFile& CCloud_UserFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_UserFile_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_UserFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_creator_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(steamid_creator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_UserFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_UserFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ugcid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ugcid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CCloud_UserFile.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CCloud_UserFile.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_steamid_creator(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_UserFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_UserFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugcid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ugcid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_UserFile.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_UserFile.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_steamid_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_UserFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_UserFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_UserFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ugcid(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steamid_creator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_UserFile)
}

::google::protobuf::uint8* CCloud_UserFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ugcid(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steamid_creator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_UserFile)
  return target;
}

size_t CCloud_UserFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_UserFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string url = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 ugcid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional fixed64 steamid_creator = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_UserFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_UserFile* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_UserFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_UserFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_UserFile)
    MergeFrom(*source);
  }
}

void CCloud_UserFile::MergeFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_UserFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_UserFile::IsInitialized() const {
  return true;
}

void CCloud_UserFile::Swap(CCloud_UserFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_UserFile::InternalSwap(CCloud_UserFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ugcid_, other->ugcid_);
  swap(appid_, other->appid_);
  swap(file_size_, other->file_size_);
  swap(timestamp_, other->timestamp_);
  swap(steamid_creator_, other->steamid_creator_);
}

::google::protobuf::Metadata CCloud_UserFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_GetFileDetails_Response::InitAsDefaultInstance() {
  ::proto::dota::_CCloud_GetFileDetails_Response_default_instance_._instance.get_mutable()->details_ = const_cast< ::proto::dota::CCloud_UserFile*>(
      ::proto::dota::CCloud_UserFile::internal_default_instance());
}
class CCloud_GetFileDetails_Response::HasBitSetters {
 public:
  static const ::proto::dota::CCloud_UserFile& details(const CCloud_GetFileDetails_Response* msg);
  static void set_has_details(CCloud_GetFileDetails_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CCloud_UserFile&
CCloud_GetFileDetails_Response::HasBitSetters::details(const CCloud_GetFileDetails_Response* msg) {
  return *msg->details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Response::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetFileDetails_Response)
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::proto::dota::CCloud_UserFile(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetFileDetails_Response)
}

void CCloud_GetFileDetails_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  details_ = nullptr;
}

CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetFileDetails_Response)
  SharedDtor();
}

void CCloud_GetFileDetails_Response::SharedDtor() {
  if (this != internal_default_instance()) delete details_;
}

void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_GetFileDetails_Response& CCloud_GetFileDetails_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_GetFileDetails_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_GetFileDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(details_ != nullptr);
    details_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_GetFileDetails_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_GetFileDetails_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CCloud_UserFile details = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CCloud_UserFile::_InternalParse;
        object = msg->mutable_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_GetFileDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetFileDetails_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CCloud_UserFile details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetFileDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetFileDetails_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_GetFileDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetFileDetails_Response)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetFileDetails_Response)
  return target;
}

size_t CCloud_GetFileDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetFileDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CCloud_UserFile details = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_GetFileDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_GetFileDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetFileDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetFileDetails_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Response::MergeFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    mutable_details()->::proto::dota::CCloud_UserFile::MergeFrom(from.details());
  }
}

void CCloud_GetFileDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Response::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Response::Swap(CCloud_GetFileDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Response::InternalSwap(CCloud_GetFileDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(details_, other->details_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserFiles_Request::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserFiles_Request::HasBitSetters {
 public:
  static void set_has_appid(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_extended_details(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_count(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start_index(CCloud_EnumerateUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Request::kAppidFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kExtendedDetailsFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kCountFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kStartIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_EnumerateUserFiles_Request)
}
CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_EnumerateUserFiles_Request)
}

void CCloud_EnumerateUserFiles_Request::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_index_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
}

CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_EnumerateUserFiles_Request)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Request::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserFiles_Request& CCloud_EnumerateUserFiles_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserFiles_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_index_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserFiles_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserFiles_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_extended_details(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_extended_details(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extended_details_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_start_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_EnumerateUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_EnumerateUserFiles_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extended_details(), output);
  }

  // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_EnumerateUserFiles_Request)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extended_details(), target);
  }

  // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_EnumerateUserFiles_Request)
  return target;
}

size_t CCloud_EnumerateUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserFiles_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_EnumerateUserFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_EnumerateUserFiles_Request)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_details_ = from.extended_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_index_ = from.start_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Request::Swap(CCloud_EnumerateUserFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Request::InternalSwap(CCloud_EnumerateUserFiles_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(extended_details_, other->extended_details_);
  swap(count_, other->count_);
  swap(start_index_, other->start_index_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_EnumerateUserFiles_Response::InitAsDefaultInstance() {
}
class CCloud_EnumerateUserFiles_Response::HasBitSetters {
 public:
  static void set_has_total_files(CCloud_EnumerateUserFiles_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Response::kFilesFieldNumber;
const int CCloud_EnumerateUserFiles_Response::kTotalFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_EnumerateUserFiles_Response)
}
CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_files_ = from.total_files_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_EnumerateUserFiles_Response)
}

void CCloud_EnumerateUserFiles_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  total_files_ = 0u;
}

CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_EnumerateUserFiles_Response)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Response::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_EnumerateUserFiles_Response& CCloud_EnumerateUserFiles_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_EnumerateUserFiles_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_EnumerateUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  total_files_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_EnumerateUserFiles_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_EnumerateUserFiles_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CCloud_UserFile files = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CCloud_UserFile::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint32 total_files = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_total_files(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_EnumerateUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CCloud_UserFile files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_total_files(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_EnumerateUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_EnumerateUserFiles_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_EnumerateUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCloud_UserFile files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->files(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_files(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_EnumerateUserFiles_Response)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCloud_UserFile files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->files(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_files(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_EnumerateUserFiles_Response)
  return target;
}

size_t CCloud_EnumerateUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CCloud_UserFile files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  // optional uint32 total_files = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_files());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_EnumerateUserFiles_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_EnumerateUserFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_EnumerateUserFiles_Response)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_total_files()) {
    set_total_files(from.total_files());
  }
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Response::Swap(CCloud_EnumerateUserFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Response::InternalSwap(CCloud_EnumerateUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  swap(total_files_, other->total_files_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_Delete_Request::InitAsDefaultInstance() {
}
class CCloud_Delete_Request::HasBitSetters {
 public:
  static void set_has_filename(CCloud_Delete_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appid(CCloud_Delete_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_Delete_Request::kFilenameFieldNumber;
const int CCloud_Delete_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Request::CCloud_Delete_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_Delete_Request)
}
CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_Delete_Request)
}

void CCloud_Delete_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_Delete_Request)
  SharedDtor();
}

void CCloud_Delete_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_Delete_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_Delete_Request& CCloud_Delete_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_Delete_Request_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_Delete_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_Delete_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CCloud_Delete_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_Delete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_Delete_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_Delete_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_Delete_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_Delete_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_Delete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_Delete_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_Delete_Request)
}

::google::protobuf::uint8* CCloud_Delete_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_Delete_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_Delete_Request)
  return target;
}

size_t CCloud_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_Delete_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_Delete_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_Delete_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_Delete_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_Delete_Request)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Request::MergeFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_Delete_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Request::IsInitialized() const {
  return true;
}

void CCloud_Delete_Request::Swap(CCloud_Delete_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Request::InternalSwap(CCloud_Delete_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CCloud_Delete_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCloud_Delete_Response::InitAsDefaultInstance() {
}
class CCloud_Delete_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Response::CCloud_Delete_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_Delete_Response)
}
CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_Delete_Response)
}

void CCloud_Delete_Response::SharedCtor() {
}

CCloud_Delete_Response::~CCloud_Delete_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_Delete_Response)
  SharedDtor();
}

void CCloud_Delete_Response::SharedDtor() {
}

void CCloud_Delete_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCloud_Delete_Response& CCloud_Delete_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCloud_Delete_Response_steammessages_5fcloud_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CCloud_Delete_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCloud_Delete_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCloud_Delete_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCloud_Delete_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_Delete_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_Delete_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_Delete_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCloud_Delete_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_Delete_Response)
}

::google::protobuf::uint8* CCloud_Delete_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_Delete_Response)
  return target;
}

size_t CCloud_Delete_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_Delete_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCloud_Delete_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CCloud_Delete_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_Delete_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_Delete_Response)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Response::MergeFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_Delete_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Response::CopyFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Response::IsInitialized() const {
  return true;
}

void CCloud_Delete_Response::Swap(CCloud_Delete_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Response::InternalSwap(CCloud_Delete_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CCloud_Delete_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fcloud_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fcloud_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_GetUploadServerInfo_Request* Arena::CreateMaybeMessage< ::proto::dota::CCloud_GetUploadServerInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_GetUploadServerInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_GetUploadServerInfo_Response* Arena::CreateMaybeMessage< ::proto::dota::CCloud_GetUploadServerInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_GetUploadServerInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_GetFileDetails_Request* Arena::CreateMaybeMessage< ::proto::dota::CCloud_GetFileDetails_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_GetFileDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_UserFile* Arena::CreateMaybeMessage< ::proto::dota::CCloud_UserFile >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_UserFile >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_GetFileDetails_Response* Arena::CreateMaybeMessage< ::proto::dota::CCloud_GetFileDetails_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_GetFileDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_EnumerateUserFiles_Request* Arena::CreateMaybeMessage< ::proto::dota::CCloud_EnumerateUserFiles_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_EnumerateUserFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_EnumerateUserFiles_Response* Arena::CreateMaybeMessage< ::proto::dota::CCloud_EnumerateUserFiles_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_EnumerateUserFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_Delete_Request* Arena::CreateMaybeMessage< ::proto::dota::CCloud_Delete_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_Delete_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CCloud_Delete_Response* Arena::CreateMaybeMessage< ::proto::dota::CCloud_Delete_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CCloud_Delete_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
