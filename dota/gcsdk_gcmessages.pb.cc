// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto;
namespace proto {
namespace dota {
class CMsgSHA1DigestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSHA1Digest> _instance;
} _CMsgSHA1Digest_default_instance_;
class CMsgSOIDOwnerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOIDOwner> _instance;
} _CMsgSOIDOwner_default_instance_;
class CMsgSOSingleObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOSingleObject> _instance;
} _CMsgSOSingleObject_default_instance_;
class CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOMultipleObjects_SingleObject> _instance;
} _CMsgSOMultipleObjects_SingleObject_default_instance_;
class CMsgSOMultipleObjectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOMultipleObjects> _instance;
} _CMsgSOMultipleObjects_default_instance_;
class CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribed_SubscribedType> _instance;
} _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
class CMsgSOCacheSubscribedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribed> _instance;
} _CMsgSOCacheSubscribed_default_instance_;
class CMsgSOCacheSubscribedUpToDateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribedUpToDate> _instance;
} _CMsgSOCacheSubscribedUpToDate_default_instance_;
class CMsgSOCacheUnsubscribedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheUnsubscribed> _instance;
} _CMsgSOCacheUnsubscribed_default_instance_;
class CMsgSOCacheSubscriptionCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscriptionCheck> _instance;
} _CMsgSOCacheSubscriptionCheck_default_instance_;
class CMsgSOCacheSubscriptionRefreshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscriptionRefresh> _instance;
} _CMsgSOCacheSubscriptionRefresh_default_instance_;
class CMsgSOCacheVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheVersion> _instance;
} _CMsgSOCacheVersion_default_instance_;
class CMsgGCMultiplexMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMultiplexMessage> _instance;
} _CMsgGCMultiplexMessage_default_instance_;
class CMsgGCToGCSubGCStartingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSubGCStarting> _instance;
} _CMsgGCToGCSubGCStarting_default_instance_;
class CGCToGCMsgMasterAck_ProcessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck_Process> _instance;
} _CGCToGCMsgMasterAck_Process_default_instance_;
class CGCToGCMsgMasterAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck> _instance;
} _CGCToGCMsgMasterAck_default_instance_;
class CGCToGCMsgMasterAck_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck_Response> _instance;
} _CGCToGCMsgMasterAck_Response_default_instance_;
class CMsgGCToGCUniverseStartupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUniverseStartup> _instance;
} _CMsgGCToGCUniverseStartup_default_instance_;
class CMsgGCToGCUniverseStartupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUniverseStartupResponse> _instance;
} _CMsgGCToGCUniverseStartupResponse_default_instance_;
class CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterStartupComplete_GCInfo> _instance;
} _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
class CGCToGCMsgMasterStartupCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterStartupComplete> _instance;
} _CGCToGCMsgMasterStartupComplete_default_instance_;
class CGCToGCMsgRoutedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgRouted> _instance;
} _CGCToGCMsgRouted_default_instance_;
class CGCToGCMsgRoutedReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgRoutedReply> _instance;
} _CGCToGCMsgRoutedReply_default_instance_;
class CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate> _instance;
} _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
class CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCUpdateSubGCSessionInfo> _instance;
} _CMsgGCUpdateSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestSubGCSessionInfo> _instance;
} _CMsgGCRequestSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestSubGCSessionInfoResponse> _instance;
} _CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
class CMsgSOCacheHaveVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheHaveVersion> _instance;
} _CMsgSOCacheHaveVersion_default_instance_;
class CMsgClientHelloDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientHello> _instance;
} _CMsgClientHello_default_instance_;
class CMsgClientWelcome_LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientWelcome_Location> _instance;
} _CMsgClientWelcome_Location_default_instance_;
class CMsgClientWelcomeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientWelcome> _instance;
} _CMsgClientWelcome_default_instance_;
class CMsgConnectionStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectionStatus> _instance;
} _CMsgConnectionStatus_default_instance_;
class CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions> _instance;
} _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
class CMsgGCToGCSOCacheSubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheSubscribe> _instance;
} _CMsgGCToGCSOCacheSubscribe_default_instance_;
class CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheUnsubscribe> _instance;
} _CMsgGCToGCSOCacheUnsubscribe_default_instance_;
class CMsgGCClientPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientPing> _instance;
} _CMsgGCClientPing_default_instance_;
class CMsgGCToGCForwardAccountDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCForwardAccountDetails> _instance;
} _CMsgGCToGCForwardAccountDetails_default_instance_;
class CMsgGCToGCLoadSessionSOCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCLoadSessionSOCache> _instance;
} _CMsgGCToGCLoadSessionSOCache_default_instance_;
class CMsgGCToGCLoadSessionSOCacheResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCLoadSessionSOCacheResponse> _instance;
} _CMsgGCToGCLoadSessionSOCacheResponse_default_instance_;
class CMsgGCToGCUpdateSessionStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUpdateSessionStats> _instance;
} _CMsgGCToGCUpdateSessionStats_default_instance_;
class CWorkshop_PopulateItemDescriptions_Request_SingleItemDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription> _instance;
} _CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_;
class CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock> _instance;
} _CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_;
class CWorkshop_PopulateItemDescriptions_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_PopulateItemDescriptions_Request> _instance;
} _CWorkshop_PopulateItemDescriptions_Request_default_instance_;
class CWorkshop_GetContributors_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_GetContributors_Request> _instance;
} _CWorkshop_GetContributors_Request_default_instance_;
class CWorkshop_GetContributors_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_GetContributors_Response> _instance;
} _CWorkshop_GetContributors_Response_default_instance_;
class CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule> _instance;
} _CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_;
class CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule> _instance;
} _CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_;
class CWorkshop_SetItemPaymentRules_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Request> _instance;
} _CWorkshop_SetItemPaymentRules_Request_default_instance_;
class CWorkshop_SetItemPaymentRules_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Response> _instance;
} _CWorkshop_SetItemPaymentRules_Response_default_instance_;
class CBroadcast_PostGameDataFrame_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostGameDataFrame_Request> _instance;
} _CBroadcast_PostGameDataFrame_Request_default_instance_;
class CMsgSerializedSOCache_TypeCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache_TypeCache> _instance;
} _CMsgSerializedSOCache_TypeCache_default_instance_;
class CMsgSerializedSOCache_Cache_VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache_Cache_Version> _instance;
} _CMsgSerializedSOCache_Cache_Version_default_instance_;
class CMsgSerializedSOCache_CacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache_Cache> _instance;
} _CMsgSerializedSOCache_Cache_default_instance_;
class CMsgSerializedSOCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache> _instance;
} _CMsgSerializedSOCache_default_instance_;
class CMsgGCToClientPollConvarRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollConvarRequest> _instance;
} _CMsgGCToClientPollConvarRequest_default_instance_;
class CMsgGCToClientPollConvarResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollConvarResponse> _instance;
} _CMsgGCToClientPollConvarResponse_default_instance_;
class CGCMsgCompressedMsgToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgCompressedMsgToClient> _instance;
} _CGCMsgCompressedMsgToClient_default_instance_;
class CMsgGCToGCMasterBroadcastMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCMasterBroadcastMessage> _instance;
} _CMsgGCToGCMasterBroadcastMessage_default_instance_;
class CMsgGCToGCMasterSubscribeToCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCMasterSubscribeToCache> _instance;
} _CMsgGCToGCMasterSubscribeToCache_default_instance_;
class CMsgGCToGCMasterSubscribeToCacheResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCMasterSubscribeToCacheResponse> _instance;
} _CMsgGCToGCMasterSubscribeToCacheResponse_default_instance_;
class CMsgGCToGCMasterSubscribeToCacheAsyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCMasterSubscribeToCacheAsync> _instance;
} _CMsgGCToGCMasterSubscribeToCacheAsync_default_instance_;
class CMsgGCToGCMasterUnsubscribeFromCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCMasterUnsubscribeFromCache> _instance;
} _CMsgGCToGCMasterUnsubscribeFromCache_default_instance_;
class CMsgGCToGCMasterDestroyCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCMasterDestroyCache> _instance;
} _CMsgGCToGCMasterDestroyCache_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgSHA1Digest_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSHA1Digest_default_instance_;
    new (ptr) ::proto::dota::CMsgSHA1Digest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSHA1Digest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSHA1Digest_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSHA1Digest_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSOIDOwner_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOIDOwner_default_instance_;
    new (ptr) ::proto::dota::CMsgSOIDOwner();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOIDOwner::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSOIDOwner_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSOSingleObject_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOSingleObject_default_instance_;
    new (ptr) ::proto::dota::CMsgSOSingleObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOSingleObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOSingleObject_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSOSingleObject_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOMultipleObjects_SingleObject_default_instance_;
    new (ptr) ::proto::dota::CMsgSOMultipleObjects_SingleObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSOMultipleObjects_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOMultipleObjects_default_instance_;
    new (ptr) ::proto::dota::CMsgSOMultipleObjects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOMultipleObjects::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSOMultipleObjects_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSOMultipleObjects_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto.base,
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheSubscribed_SubscribedType_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheSubscribed_SubscribedType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheSubscribed_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheSubscribed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheSubscribed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto.base,
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOCacheSubscribedUpToDate_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheSubscribedUpToDate_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheSubscribedUpToDate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheSubscribedUpToDate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheSubscribedUpToDate_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSOCacheSubscribedUpToDate_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOCacheUnsubscribed_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheUnsubscribed_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheUnsubscribed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheUnsubscribed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheUnsubscribed_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSOCacheUnsubscribed_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheSubscriptionCheck_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheSubscriptionCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOCacheSubscriptionRefresh_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheSubscriptionRefresh_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheSubscriptionRefresh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheSubscriptionRefresh_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSOCacheSubscriptionRefresh_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSOCacheVersion_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheVersion_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSOCacheVersion_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSOCacheVersion_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCMultiplexMessage_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCMultiplexMessage_default_instance_;
    new (ptr) ::proto::dota::CMsgGCMultiplexMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCMultiplexMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCMultiplexMessage_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCMultiplexMessage_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCSubGCStarting_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCSubGCStarting_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCSubGCStarting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCSubGCStarting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCSubGCStarting_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCSubGCStarting_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgMasterAck_Process_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgMasterAck_Process();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgMasterAck_Process::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCGCToGCMsgMasterAck_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgMasterAck_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgMasterAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgMasterAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGCToGCMsgMasterAck_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGCToGCMsgMasterAck_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCGCToGCMsgMasterAck_Response_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgMasterAck_Response_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgMasterAck_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgMasterAck_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgMasterAck_Response_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCToGCMsgMasterAck_Response_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCUniverseStartup_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCUniverseStartup_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCUniverseStartup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCUniverseStartup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCUniverseStartup_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCUniverseStartup_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCUniverseStartupResponse_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCUniverseStartupResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCUniverseStartupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCUniverseStartupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCUniverseStartupResponse_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCUniverseStartupResponse_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCGCToGCMsgMasterStartupComplete_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgMasterStartupComplete_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgMasterStartupComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgMasterStartupComplete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGCToGCMsgMasterStartupComplete_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGCToGCMsgMasterStartupComplete_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCGCToGCMsgRouted_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgRouted_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgRouted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgRouted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgRouted_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCToGCMsgRouted_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCGCToGCMsgRoutedReply_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCToGCMsgRoutedReply_default_instance_;
    new (ptr) ::proto::dota::CGCToGCMsgRoutedReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCToGCMsgRoutedReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCToGCMsgRoutedReply_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCToGCMsgRoutedReply_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
    new (ptr) ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCUpdateSubGCSessionInfo_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCUpdateSubGCSessionInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgGCUpdateSubGCSessionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCUpdateSubGCSessionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCUpdateSubGCSessionInfo_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCUpdateSubGCSessionInfo_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCRequestSubGCSessionInfo_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCRequestSubGCSessionInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgGCRequestSubGCSessionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCRequestSubGCSessionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCRequestSubGCSessionInfo_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCRequestSubGCSessionInfo_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCRequestSubGCSessionInfoResponse_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCRequestSubGCSessionInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCRequestSubGCSessionInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCRequestSubGCSessionInfoResponse_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCRequestSubGCSessionInfoResponse_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSOCacheHaveVersion_default_instance_;
    new (ptr) ::proto::dota::CMsgSOCacheHaveVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSOCacheHaveVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgClientHello_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientHello_default_instance_;
    new (ptr) ::proto::dota::CMsgClientHello();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientHello::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientHello_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientHello_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientWelcome_Location_default_instance_;
    new (ptr) ::proto::dota::CMsgClientWelcome_Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientWelcome_Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgClientWelcome_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientWelcome_default_instance_;
    new (ptr) ::proto::dota::CMsgClientWelcome();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientWelcome::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgClientWelcome_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgClientWelcome_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto.base,
      &scc_info_CMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto.base,
      &scc_info_CMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgConnectionStatus_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgConnectionStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgConnectionStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgConnectionStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgConnectionStatus_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgConnectionStatus_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCSOCacheSubscribe_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCSOCacheSubscribe_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCSOCacheSubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCSOCacheSubscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToGCSOCacheSubscribe_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToGCSOCacheSubscribe_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCToGCSOCacheUnsubscribe_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCSOCacheUnsubscribe_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCSOCacheUnsubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCSOCacheUnsubscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCSOCacheUnsubscribe_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCSOCacheUnsubscribe_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCClientPing_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCClientPing_default_instance_;
    new (ptr) ::proto::dota::CMsgGCClientPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCClientPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCClientPing_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCClientPing_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCForwardAccountDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCForwardAccountDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCForwardAccountDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CGCSystemMsg_GetAccountDetails_Response_steammessages_2eproto.base,}};

static void InitDefaultsCMsgGCToGCLoadSessionSOCache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCLoadSessionSOCache_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCLoadSessionSOCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCLoadSessionSOCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToGCLoadSessionSOCache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToGCLoadSessionSOCache_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCToGCLoadSessionSOCacheResponse_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCLoadSessionSOCacheResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCLoadSessionSOCacheResponse_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCLoadSessionSOCacheResponse_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCUpdateSessionStats_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCUpdateSessionStats_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCUpdateSessionStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCUpdateSessionStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCUpdateSessionStats_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCUpdateSessionStats_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCWorkshop_PopulateItemDescriptions_Request_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_PopulateItemDescriptions_Request_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_PopulateItemDescriptions_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_PopulateItemDescriptions_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CWorkshop_PopulateItemDescriptions_Request_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCWorkshop_PopulateItemDescriptions_Request_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCWorkshop_GetContributors_Request_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_GetContributors_Request_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_GetContributors_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_GetContributors_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_GetContributors_Request_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCWorkshop_GetContributors_Request_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCWorkshop_GetContributors_Response_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_GetContributors_Response_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_GetContributors_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_GetContributors_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_GetContributors_Response_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCWorkshop_GetContributors_Response_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCWorkshop_SetItemPaymentRules_Request_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_SetItemPaymentRules_Request_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_SetItemPaymentRules_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_SetItemPaymentRules_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CWorkshop_SetItemPaymentRules_Request_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCWorkshop_SetItemPaymentRules_Request_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto.base,
      &scc_info_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCWorkshop_SetItemPaymentRules_Response_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CWorkshop_SetItemPaymentRules_Response_default_instance_;
    new (ptr) ::proto::dota::CWorkshop_SetItemPaymentRules_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CWorkshop_SetItemPaymentRules_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CWorkshop_SetItemPaymentRules_Response_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCWorkshop_SetItemPaymentRules_Response_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCBroadcast_PostGameDataFrame_Request_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CBroadcast_PostGameDataFrame_Request_default_instance_;
    new (ptr) ::proto::dota::CBroadcast_PostGameDataFrame_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CBroadcast_PostGameDataFrame_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CBroadcast_PostGameDataFrame_Request_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCBroadcast_PostGameDataFrame_Request_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSerializedSOCache_TypeCache_default_instance_;
    new (ptr) ::proto::dota::CMsgSerializedSOCache_TypeCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSerializedSOCache_TypeCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSerializedSOCache_Cache_Version_default_instance_;
    new (ptr) ::proto::dota::CMsgSerializedSOCache_Cache_Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSerializedSOCache_Cache_Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSerializedSOCache_Cache_default_instance_;
    new (ptr) ::proto::dota::CMsgSerializedSOCache_Cache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSerializedSOCache_Cache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto.base,
      &scc_info_CMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSerializedSOCache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSerializedSOCache_default_instance_;
    new (ptr) ::proto::dota::CMsgSerializedSOCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSerializedSOCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSerializedSOCache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSerializedSOCache_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCToClientPollConvarRequest_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPollConvarRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPollConvarRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPollConvarRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPollConvarRequest_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientPollConvarRequest_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToClientPollConvarResponse_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPollConvarResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPollConvarResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPollConvarResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPollConvarResponse_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientPollConvarResponse_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCGCMsgCompressedMsgToClient_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCMsgCompressedMsgToClient_default_instance_;
    new (ptr) ::proto::dota::CGCMsgCompressedMsgToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCMsgCompressedMsgToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCMsgCompressedMsgToClient_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCMsgCompressedMsgToClient_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCMasterBroadcastMessage_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCMasterBroadcastMessage_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCMasterBroadcastMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCMasterBroadcastMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCMasterBroadcastMessage_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCMasterBroadcastMessage_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCMasterSubscribeToCache_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCMasterSubscribeToCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCMasterSubscribeToCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCMasterSubscribeToCacheResponse_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCMasterSubscribeToCacheResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCMasterSubscribeToCacheResponse_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCMasterSubscribeToCacheResponse_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCMasterSubscribeToCacheAsync_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCMasterSubscribeToCacheAsync_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToGCMasterSubscribeToCacheAsync_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToGCMasterSubscribeToCacheAsync_gcsdk_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCToGCMasterUnsubscribeFromCache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCMasterUnsubscribeFromCache_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCMasterUnsubscribeFromCache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCMasterUnsubscribeFromCache_gcsdk_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCMasterDestroyCache_gcsdk_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCMasterDestroyCache_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCMasterDestroyCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCMasterDestroyCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCMasterDestroyCache_gcsdk_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCMasterDestroyCache_gcsdk_5fgcmessages_2eproto}, {}};

void InitDefaults_gcsdk_5fgcmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSHA1Digest_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOSingleObject_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOMultipleObjects_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheSubscribedUpToDate_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheUnsubscribed_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheSubscriptionRefresh_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheVersion_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCMultiplexMessage_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCSubGCStarting_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgMasterAck_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgMasterAck_Response_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCUniverseStartup_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCUniverseStartupResponse_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgMasterStartupComplete_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgRouted_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCToGCMsgRoutedReply_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCUpdateSubGCSessionInfo_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCRequestSubGCSessionInfo_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCRequestSubGCSessionInfoResponse_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientHello_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientWelcome_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgConnectionStatus_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCSOCacheSubscribe_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCSOCacheUnsubscribe_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCClientPing_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCLoadSessionSOCache_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCLoadSessionSOCacheResponse_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCUpdateSessionStats_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_PopulateItemDescriptions_Request_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_GetContributors_Request_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_GetContributors_Response_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_SetItemPaymentRules_Request_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CWorkshop_SetItemPaymentRules_Response_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CBroadcast_PostGameDataFrame_Request_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSerializedSOCache_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPollConvarRequest_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPollConvarResponse_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGCMsgCompressedMsgToClient_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCMasterBroadcastMessage_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCMasterSubscribeToCacheResponse_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCMasterSubscribeToCacheAsync_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCMasterUnsubscribeFromCache_gcsdk_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCMasterDestroyCache_gcsdk_5fgcmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_gcsdk_5fgcmessages_2eproto[63];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_gcsdk_5fgcmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_gcsdk_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSHA1Digest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSHA1Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSHA1Digest, block1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSHA1Digest, block2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSHA1Digest, block3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOIDOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOIDOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOIDOwner, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOIDOwner, id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, type_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, object_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOSingleObject, service_id_),
  3,
  0,
  2,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects_SingleObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects_SingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects_SingleObject, type_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects_SingleObject, object_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, objects_modified_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, objects_added_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, objects_removed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOMultipleObjects, service_id_),
  ~0u,
  1,
  ~0u,
  ~0u,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed_SubscribedType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed_SubscribedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed_SubscribedType, type_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed_SubscribedType, object_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, objects_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, service_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, service_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribed, sync_version_),
  ~0u,
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, service_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, service_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscribedUpToDate, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheUnsubscribed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheUnsubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheUnsubscribed, owner_soid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, service_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, service_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionCheck, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionRefresh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheSubscriptionRefresh, owner_soid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheVersion, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMultiplexMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMultiplexMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMultiplexMessage, msgtype_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMultiplexMessage, payload_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCMultiplexMessage, steamids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSubGCStarting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSubGCStarting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSubGCStarting, dir_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Process, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Process, dir_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Process, type_instances_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck, dir_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck, machine_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck, process_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck, directory_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterAck_Response, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUniverseStartup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUniverseStartup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUniverseStartup, is_initial_startup_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUniverseStartupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUniverseStartupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUniverseStartupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo, dir_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo, machine_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgMasterStartupComplete, gc_info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRouted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRouted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRouted, msg_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRouted, sender_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRouted, net_message_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRoutedReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRoutedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRoutedReply, msg_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCToGCMsgRoutedReply, net_message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, trusted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCUpdateSubGCSessionInfo, updates_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfo, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse, trusted_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse, port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse, success_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheHaveVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheHaveVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheHaveVersion, soid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheHaveVersion, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheHaveVersion, service_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSOCacheHaveVersion, cached_file_version_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, socache_have_versions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, client_session_need_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, client_launcher_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, secret_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, client_language_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientHello, engine_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome_Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome_Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome_Location, country_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, game_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, outofdate_subscribed_caches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, uptodate_subscribed_caches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, location_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, save_game_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, item_schema_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, items_game_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, gc_socache_file_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientWelcome, txn_country_code_),
  5,
  0,
  ~0u,
  ~0u,
  4,
  1,
  6,
  2,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, client_session_need_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, queue_position_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, queue_size_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, wait_seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConnectionStatus, estimated_wait_seconds_remaining_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, service_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, version_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, subscriber_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, subscribe_to_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, sync_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, have_versions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheSubscribe, subscribe_to_type_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheUnsubscribe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheUnsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheUnsubscribe, subscriber_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCForwardAccountDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCForwardAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCForwardAccountDetails, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCForwardAccountDetails, account_details_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCForwardAccountDetails, age_seconds_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCLoadSessionSOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCLoadSessionSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCLoadSessionSOCache, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCLoadSessionSOCache, forward_account_details_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSessionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSessionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSessionStats, user_sessions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSessionStats, server_sessions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSessionStats, in_logon_surge_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, gameitemid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, item_description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, language_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, descriptions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_PopulateItemDescriptions_Request, languages_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Request, gameitemid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_GetContributors_Response, contributors_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, rule_description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request, gameitemid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request, associated_workshop_files_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Request, partner_accounts_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CWorkshop_SetItemPaymentRules_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CBroadcast_PostGameDataFrame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CBroadcast_PostGameDataFrame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CBroadcast_PostGameDataFrame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CBroadcast_PostGameDataFrame_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CBroadcast_PostGameDataFrame_Request, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CBroadcast_PostGameDataFrame_Request, frame_data_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_TypeCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_TypeCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_TypeCache, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_TypeCache, objects_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_TypeCache, service_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache_Version, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache_Version, service_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache_Version, version_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache, versions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache_Cache, type_caches_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache, file_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache, caches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSerializedSOCache, gc_socache_file_version_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarRequest, convar_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarRequest, poll_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarResponse, poll_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollConvarResponse, convar_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgCompressedMsgToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgCompressedMsgToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgCompressedMsgToClient, msg_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCMsgCompressedMsgToClient, compressed_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, users_per_second_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, send_to_users_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, send_to_servers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, msg_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterBroadcastMessage, msg_data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCache, soid_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCache, soid_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCache, account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCache, steam_ids_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync, subscribe_msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache, soid_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache, soid_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache, account_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache, steam_ids_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterDestroyCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterDestroyCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterDestroyCache, soid_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCMasterDestroyCache, soid_id_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::dota::CMsgSHA1Digest)},
  { 11, 18, sizeof(::proto::dota::CMsgSOIDOwner)},
  { 20, 30, sizeof(::proto::dota::CMsgSOSingleObject)},
  { 35, 42, sizeof(::proto::dota::CMsgSOMultipleObjects_SingleObject)},
  { 44, 55, sizeof(::proto::dota::CMsgSOMultipleObjects)},
  { 61, 68, sizeof(::proto::dota::CMsgSOCacheSubscribed_SubscribedType)},
  { 70, 81, sizeof(::proto::dota::CMsgSOCacheSubscribed)},
  { 87, 97, sizeof(::proto::dota::CMsgSOCacheSubscribedUpToDate)},
  { 102, 108, sizeof(::proto::dota::CMsgSOCacheUnsubscribed)},
  { 109, 119, sizeof(::proto::dota::CMsgSOCacheSubscriptionCheck)},
  { 124, 130, sizeof(::proto::dota::CMsgSOCacheSubscriptionRefresh)},
  { 131, 137, sizeof(::proto::dota::CMsgSOCacheVersion)},
  { 138, 146, sizeof(::proto::dota::CMsgGCMultiplexMessage)},
  { 149, 155, sizeof(::proto::dota::CMsgGCToGCSubGCStarting)},
  { 156, 163, sizeof(::proto::dota::CGCToGCMsgMasterAck_Process)},
  { 165, 174, sizeof(::proto::dota::CGCToGCMsgMasterAck)},
  { 178, 184, sizeof(::proto::dota::CGCToGCMsgMasterAck_Response)},
  { 185, 191, sizeof(::proto::dota::CMsgGCToGCUniverseStartup)},
  { 192, 198, sizeof(::proto::dota::CMsgGCToGCUniverseStartupResponse)},
  { 199, 206, sizeof(::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo)},
  { 208, 214, sizeof(::proto::dota::CGCToGCMsgMasterStartupComplete)},
  { 215, 223, sizeof(::proto::dota::CGCToGCMsgRouted)},
  { 226, 233, sizeof(::proto::dota::CGCToGCMsgRoutedReply)},
  { 235, 243, sizeof(::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate)},
  { 246, 252, sizeof(::proto::dota::CMsgGCUpdateSubGCSessionInfo)},
  { 253, 259, sizeof(::proto::dota::CMsgGCRequestSubGCSessionInfo)},
  { 260, 269, sizeof(::proto::dota::CMsgGCRequestSubGCSessionInfoResponse)},
  { 273, 282, sizeof(::proto::dota::CMsgSOCacheHaveVersion)},
  { 286, 298, sizeof(::proto::dota::CMsgClientHello)},
  { 305, 313, sizeof(::proto::dota::CMsgClientWelcome_Location)},
  { 316, 331, sizeof(::proto::dota::CMsgClientWelcome)},
  { 341, 352, sizeof(::proto::dota::CMsgConnectionStatus)},
  { 358, 365, sizeof(::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions)},
  { 367, 377, sizeof(::proto::dota::CMsgGCToGCSOCacheSubscribe)},
  { 382, 390, sizeof(::proto::dota::CMsgGCToGCSOCacheUnsubscribe)},
  { 393, 398, sizeof(::proto::dota::CMsgGCClientPing)},
  { 398, 406, sizeof(::proto::dota::CMsgGCToGCForwardAccountDetails)},
  { 409, 416, sizeof(::proto::dota::CMsgGCToGCLoadSessionSOCache)},
  { 418, 423, sizeof(::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse)},
  { 423, 431, sizeof(::proto::dota::CMsgGCToGCUpdateSessionStats)},
  { 434, 441, sizeof(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription)},
  { 443, 450, sizeof(::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock)},
  { 452, 459, sizeof(::proto::dota::CWorkshop_PopulateItemDescriptions_Request)},
  { 461, 468, sizeof(::proto::dota::CWorkshop_GetContributors_Request)},
  { 470, 476, sizeof(::proto::dota::CWorkshop_GetContributors_Response)},
  { 477, 485, sizeof(::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule)},
  { 488, 496, sizeof(::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule)},
  { 499, 508, sizeof(::proto::dota::CWorkshop_SetItemPaymentRules_Request)},
  { 512, 517, sizeof(::proto::dota::CWorkshop_SetItemPaymentRules_Response)},
  { 517, 526, sizeof(::proto::dota::CBroadcast_PostGameDataFrame_Request)},
  { 530, 538, sizeof(::proto::dota::CMsgSerializedSOCache_TypeCache)},
  { 541, 548, sizeof(::proto::dota::CMsgSerializedSOCache_Cache_Version)},
  { 550, 559, sizeof(::proto::dota::CMsgSerializedSOCache_Cache)},
  { 563, 571, sizeof(::proto::dota::CMsgSerializedSOCache)},
  { 574, 581, sizeof(::proto::dota::CMsgGCToClientPollConvarRequest)},
  { 583, 590, sizeof(::proto::dota::CMsgGCToClientPollConvarResponse)},
  { 592, 599, sizeof(::proto::dota::CGCMsgCompressedMsgToClient)},
  { 601, 611, sizeof(::proto::dota::CMsgGCToGCMasterBroadcastMessage)},
  { 616, 625, sizeof(::proto::dota::CMsgGCToGCMasterSubscribeToCache)},
  { 629, 634, sizeof(::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse)},
  { 634, 640, sizeof(::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync)},
  { 641, 650, sizeof(::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache)},
  { 654, 661, sizeof(::proto::dota::CMsgGCToGCMasterDestroyCache)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSHA1Digest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOIDOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOSingleObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOMultipleObjects_SingleObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOMultipleObjects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheSubscribed_SubscribedType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheSubscribed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheSubscribedUpToDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheUnsubscribed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheSubscriptionCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheSubscriptionRefresh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCMultiplexMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCSubGCStarting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgMasterAck_Process_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgMasterAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgMasterAck_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCUniverseStartup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCUniverseStartupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgMasterStartupComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgRouted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCToGCMsgRoutedReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCUpdateSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCRequestSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCRequestSubGCSessionInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSOCacheHaveVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientHello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientWelcome_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientWelcome_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgConnectionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCSOCacheSubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCSOCacheUnsubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCClientPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCForwardAccountDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCLoadSessionSOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCLoadSessionSOCacheResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCUpdateSessionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_PopulateItemDescriptions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_GetContributors_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_GetContributors_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_SetItemPaymentRules_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CWorkshop_SetItemPaymentRules_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CBroadcast_PostGameDataFrame_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSerializedSOCache_TypeCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSerializedSOCache_Cache_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSerializedSOCache_Cache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSerializedSOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPollConvarRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPollConvarResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCMsgCompressedMsgToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCMasterBroadcastMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCMasterSubscribeToCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCMasterSubscribeToCacheResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCMasterSubscribeToCacheAsync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCMasterUnsubscribeFromCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCMasterDestroyCache_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_gcsdk_5fgcmessages_2eproto = {
  {}, AddDescriptors_gcsdk_5fgcmessages_2eproto, "gcsdk_gcmessages.proto", schemas,
  file_default_instances, TableStruct_gcsdk_5fgcmessages_2eproto::offsets,
  file_level_metadata_gcsdk_5fgcmessages_2eproto, 63, file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto, file_level_service_descriptors_gcsdk_5fgcmessages_2eproto,
};

const char descriptor_table_protodef_gcsdk_5fgcmessages_2eproto[] =
  "\n\026gcsdk_gcmessages.proto\022\nproto.dota\032\023st"
  "eammessages.proto\"@\n\016CMsgSHA1Digest\022\016\n\006b"
  "lock1\030\001 \002(\006\022\016\n\006block2\030\002 \002(\006\022\016\n\006block3\030\003 "
  "\002(\007\")\n\rCMsgSOIDOwner\022\014\n\004type\030\001 \001(\r\022\n\n\002id"
  "\030\002 \001(\004\"\216\001\n\022CMsgSOSingleObject\022\017\n\007type_id"
  "\030\002 \001(\005\022\023\n\013object_data\030\003 \001(\014\022\017\n\007version\030\004"
  " \001(\006\022-\n\nowner_soid\030\005 \001(\0132\031.proto.dota.CM"
  "sgSOIDOwner\022\022\n\nservice_id\030\006 \001(\r\"\207\003\n\025CMsg"
  "SOMultipleObjects\022H\n\020objects_modified\030\002 "
  "\003(\0132..proto.dota.CMsgSOMultipleObjects.S"
  "ingleObject\022\017\n\007version\030\003 \001(\006\022E\n\robjects_"
  "added\030\004 \003(\0132..proto.dota.CMsgSOMultipleO"
  "bjects.SingleObject\022G\n\017objects_removed\030\005"
  " \003(\0132..proto.dota.CMsgSOMultipleObjects."
  "SingleObject\022-\n\nowner_soid\030\006 \001(\0132\031.proto"
  ".dota.CMsgSOIDOwner\022\022\n\nservice_id\030\007 \001(\r\032"
  "@\n\014SingleObject\022\017\n\007type_id\030\001 \001(\005\022\023\n\013obje"
  "ct_data\030\002 \001(\014:\n\200\246\035\200\002\210\246\035\200\010\"\222\002\n\025CMsgSOCach"
  "eSubscribed\022A\n\007objects\030\002 \003(\01320.proto.dot"
  "a.CMsgSOCacheSubscribed.SubscribedType\022\017"
  "\n\007version\030\003 \001(\006\022-\n\nowner_soid\030\004 \001(\0132\031.pr"
  "oto.dota.CMsgSOIDOwner\022\022\n\nservice_id\030\005 \001"
  "(\r\022\024\n\014service_list\030\006 \003(\r\022\024\n\014sync_version"
  "\030\007 \001(\006\0326\n\016SubscribedType\022\017\n\007type_id\030\001 \001("
  "\005\022\023\n\013object_data\030\002 \003(\014\"\237\001\n\035CMsgSOCacheSu"
  "bscribedUpToDate\022\017\n\007version\030\001 \001(\006\022-\n\nown"
  "er_soid\030\002 \001(\0132\031.proto.dota.CMsgSOIDOwner"
  "\022\022\n\nservice_id\030\003 \001(\r\022\024\n\014service_list\030\004 \003"
  "(\r\022\024\n\014sync_version\030\005 \001(\006\"H\n\027CMsgSOCacheU"
  "nsubscribed\022-\n\nowner_soid\030\002 \001(\0132\031.proto."
  "dota.CMsgSOIDOwner\"\236\001\n\034CMsgSOCacheSubscr"
  "iptionCheck\022\017\n\007version\030\002 \001(\006\022-\n\nowner_so"
  "id\030\003 \001(\0132\031.proto.dota.CMsgSOIDOwner\022\022\n\ns"
  "ervice_id\030\004 \001(\r\022\024\n\014service_list\030\005 \003(\r\022\024\n"
  "\014sync_version\030\006 \001(\006\"O\n\036CMsgSOCacheSubscr"
  "iptionRefresh\022-\n\nowner_soid\030\002 \001(\0132\031.prot"
  "o.dota.CMsgSOIDOwner\"%\n\022CMsgSOCacheVersi"
  "on\022\017\n\007version\030\001 \001(\006\"L\n\026CMsgGCMultiplexMe"
  "ssage\022\017\n\007msgtype\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\022"
  "\020\n\010steamids\030\003 \003(\006\",\n\027CMsgGCToGCSubGCStar"
  "ting\022\021\n\tdir_index\030\001 \001(\r\"\306\001\n\023CGCToGCMsgMa"
  "sterAck\022\021\n\tdir_index\030\001 \001(\r\022\024\n\014machine_na"
  "me\030\003 \001(\t\022\024\n\014process_name\030\004 \001(\t\022:\n\tdirect"
  "ory\030\006 \003(\0132\'.proto.dota.CGCToGCMsgMasterA"
  "ck.Process\0324\n\007Process\022\021\n\tdir_index\030\001 \001(\r"
  "\022\026\n\016type_instances\030\002 \003(\r\"2\n\034CGCToGCMsgMa"
  "sterAck_Response\022\022\n\007eresult\030\001 \001(\005:\0012\"7\n\031"
  "CMsgGCToGCUniverseStartup\022\032\n\022is_initial_"
  "startup\030\001 \001(\010\"4\n!CMsgGCToGCUniverseStart"
  "upResponse\022\017\n\007eresult\030\001 \001(\005\"\231\001\n\037CGCToGCM"
  "sgMasterStartupComplete\022C\n\007gc_info\030\001 \003(\013"
  "22.proto.dota.CGCToGCMsgMasterStartupCom"
  "plete.GCInfo\0321\n\006GCInfo\022\021\n\tdir_index\030\001 \001("
  "\r\022\024\n\014machine_name\030\002 \001(\t\"L\n\020CGCToGCMsgRou"
  "ted\022\020\n\010msg_type\030\001 \001(\r\022\021\n\tsender_id\030\002 \001(\006"
  "\022\023\n\013net_message\030\003 \001(\014\">\n\025CGCToGCMsgRoute"
  "dReply\022\020\n\010msg_type\030\001 \001(\r\022\023\n\013net_message\030"
  "\002 \001(\014\"\240\001\n\034CMsgGCUpdateSubGCSessionInfo\022D"
  "\n\007updates\030\001 \003(\01323.proto.dota.CMsgGCUpdat"
  "eSubGCSessionInfo.CMsgUpdate\032:\n\nCMsgUpda"
  "te\022\017\n\007steamid\030\001 \001(\006\022\n\n\002ip\030\002 \001(\007\022\017\n\007trust"
  "ed\030\003 \001(\010\"0\n\035CMsgGCRequestSubGCSessionInf"
  "o\022\017\n\007steamid\030\001 \001(\006\"c\n%CMsgGCRequestSubGC"
  "SessionInfoResponse\022\n\n\002ip\030\001 \001(\007\022\017\n\007trust"
  "ed\030\002 \001(\010\022\014\n\004port\030\003 \001(\r\022\017\n\007success\030\004 \001(\010\""
  "\203\001\n\026CMsgSOCacheHaveVersion\022\'\n\004soid\030\001 \001(\013"
  "2\031.proto.dota.CMsgSOIDOwner\022\017\n\007version\030\002"
  " \001(\006\022\022\n\nservice_id\030\003 \001(\r\022\033\n\023cached_file_"
  "version\030\004 \001(\r\"\260\002\n\017CMsgClientHello\022\017\n\007ver"
  "sion\030\001 \001(\r\022A\n\025socache_have_versions\030\002 \003("
  "\0132\".proto.dota.CMsgSOCacheHaveVersion\022\033\n"
  "\023client_session_need\030\003 \001(\r\022E\n\017client_lau"
  "ncher\030\004 \001(\0162\036.proto.dota.PartnerAccountT"
  "ype:\014PARTNER_NONE\022\022\n\nsecret_key\030\005 \001(\t\022\027\n"
  "\017client_language\030\006 \001(\r\0228\n\006engine\030\007 \001(\0162\031"
  ".proto.dota.ESourceEngine:\rk_ESE_Source1"
  "\"\314\003\n\021CMsgClientWelcome\022\017\n\007version\030\001 \001(\r\022"
  "\021\n\tgame_data\030\002 \001(\014\022F\n\033outofdate_subscrib"
  "ed_caches\030\003 \003(\0132!.proto.dota.CMsgSOCache"
  "Subscribed\022L\n\032uptodate_subscribed_caches"
  "\030\004 \003(\0132(.proto.dota.CMsgSOCacheSubscript"
  "ionCheck\0228\n\010location\030\005 \001(\0132&.proto.dota."
  "CMsgClientWelcome.Location\022\025\n\rsave_game_"
  "key\030\006 \001(\014\022\027\n\017item_schema_crc\030\007 \001(\007\022\026\n\016it"
  "ems_game_url\030\010 \001(\t\022\037\n\027gc_socache_file_ve"
  "rsion\030\t \001(\r\022\030\n\020txn_country_code\030\n \001(\t\032@\n"
  "\010Location\022\020\n\010latitude\030\001 \001(\002\022\021\n\tlongitude"
  "\030\002 \001(\002\022\017\n\007country\030\003 \001(\t\"\360\001\n\024CMsgConnecti"
  "onStatus\022O\n\006status\030\001 \001(\0162\036.proto.dota.GC"
  "ConnectionStatus:\037GCConnectionStatus_HAV"
  "E_SESSION\022\033\n\023client_session_need\030\002 \001(\r\022\026"
  "\n\016queue_position\030\003 \001(\005\022\022\n\nqueue_size\030\004 \001"
  "(\005\022\024\n\014wait_seconds\030\005 \001(\005\022(\n estimated_wa"
  "it_seconds_remaining\030\006 \001(\005\"\203\002\n\032CMsgGCToG"
  "CSOCacheSubscribe\022\022\n\nsubscriber\030\001 \001(\006\022\027\n"
  "\017subscribe_to_id\030\002 \001(\006\022\024\n\014sync_version\030\003"
  " \001(\006\022N\n\rhave_versions\030\004 \003(\01327.proto.dota"
  ".CMsgGCToGCSOCacheSubscribe.CMsgHaveVers"
  "ions\022\031\n\021subscribe_to_type\030\005 \001(\r\0327\n\020CMsgH"
  "aveVersions\022\022\n\nservice_id\030\001 \001(\r\022\017\n\007versi"
  "on\030\002 \001(\004\"n\n\034CMsgGCToGCSOCacheUnsubscribe"
  "\022\022\n\nsubscriber\030\001 \001(\006\022\033\n\023unsubscribe_from"
  "_id\030\002 \001(\006\022\035\n\025unsubscribe_from_type\030\003 \001(\r"
  "\"\022\n\020CMsgGCClientPing\"\225\001\n\037CMsgGCToGCForwa"
  "rdAccountDetails\022\017\n\007steamid\030\001 \001(\006\022L\n\017acc"
  "ount_details\030\002 \001(\01323.proto.dota.CGCSyste"
  "mMsg_GetAccountDetails_Response\022\023\n\013age_s"
  "econds\030\003 \001(\r\"\200\001\n\034CMsgGCToGCLoadSessionSO"
  "Cache\022\022\n\naccount_id\030\001 \001(\r\022L\n\027forward_acc"
  "ount_details\030\002 \001(\0132+.proto.dota.CMsgGCTo"
  "GCForwardAccountDetails\"&\n$CMsgGCToGCLoa"
  "dSessionSOCacheResponse\"f\n\034CMsgGCToGCUpd"
  "ateSessionStats\022\025\n\ruser_sessions\030\001 \001(\r\022\027"
  "\n\017server_sessions\030\002 \001(\r\022\026\n\016in_logon_surg"
  "e\030\003 \001(\010\"\203\003\n*CWorkshop_PopulateItemDescri"
  "ptions_Request\022\r\n\005appid\030\001 \001(\r\022g\n\tlanguag"
  "es\030\002 \003(\0132T.proto.dota.CWorkshop_Populate"
  "ItemDescriptions_Request.ItemDescription"
  "sLanguageBlock\032E\n\025SingleItemDescription\022"
  "\022\n\ngameitemid\030\001 \001(\r\022\030\n\020item_description\030"
  "\002 \001(\t\032\225\001\n\035ItemDescriptionsLanguageBlock\022"
  "\020\n\010language\030\001 \001(\t\022b\n\014descriptions\030\002 \003(\0132"
  "L.proto.dota.CWorkshop_PopulateItemDescr"
  "iptions_Request.SingleItemDescription\"F\n"
  "!CWorkshop_GetContributors_Request\022\r\n\005ap"
  "pid\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\":\n\"CWorksh"
  "op_GetContributors_Response\022\024\n\014contribut"
  "ors\030\001 \003(\006\"\353\003\n%CWorkshop_SetItemPaymentRu"
  "les_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\ngameitemid"
  "\030\002 \001(\r\022l\n\031associated_workshop_files\030\003 \003("
  "\0132I.proto.dota.CWorkshop_SetItemPaymentR"
  "ules_Request.WorkshopItemPaymentRule\022b\n\020"
  "partner_accounts\030\004 \003(\0132H.proto.dota.CWor"
  "kshop_SetItemPaymentRules_Request.Partne"
  "rItemPaymentRule\032i\n\027WorkshopItemPaymentR"
  "ule\022\030\n\020workshop_file_id\030\001 \001(\004\022\032\n\022revenue"
  "_percentage\030\002 \001(\002\022\030\n\020rule_description\030\003 "
  "\001(\t\032b\n\026PartnerItemPaymentRule\022\022\n\naccount"
  "_id\030\001 \001(\r\022\032\n\022revenue_percentage\030\002 \001(\002\022\030\n"
  "\020rule_description\030\003 \001(\t\"(\n&CWorkshop_Set"
  "ItemPaymentRules_Response\"p\n$CBroadcast_"
  "PostGameDataFrame_Request\022\r\n\005appid\030\001 \001(\r"
  "\022\017\n\007steamid\030\002 \001(\006\022\024\n\014broadcast_id\030\003 \001(\006\022"
  "\022\n\nframe_data\030\004 \001(\014\"\235\003\n\025CMsgSerializedSO"
  "Cache\022\024\n\014file_version\030\001 \001(\r\0227\n\006caches\030\002 "
  "\003(\0132\'.proto.dota.CMsgSerializedSOCache.C"
  "ache\022\037\n\027gc_socache_file_version\030\003 \001(\r\032>\n"
  "\tTypeCache\022\014\n\004type\030\001 \001(\r\022\017\n\007objects\030\002 \003("
  "\014\022\022\n\nservice_id\030\003 \001(\r\032\323\001\n\005Cache\022\014\n\004type\030"
  "\001 \001(\r\022\n\n\002id\030\002 \001(\004\022A\n\010versions\030\003 \003(\0132/.pr"
  "oto.dota.CMsgSerializedSOCache.Cache.Ver"
  "sion\022@\n\013type_caches\030\004 \003(\0132+.proto.dota.C"
  "MsgSerializedSOCache.TypeCache\032+\n\007Versio"
  "n\022\017\n\007service\030\001 \001(\r\022\017\n\007version\030\002 \001(\004\"G\n\037C"
  "MsgGCToClientPollConvarRequest\022\023\n\013convar"
  "_name\030\001 \001(\t\022\017\n\007poll_id\030\002 \001(\r\"I\n CMsgGCTo"
  "ClientPollConvarResponse\022\017\n\007poll_id\030\001 \001("
  "\r\022\024\n\014convar_value\030\002 \001(\t\"E\n\033CGCMsgCompres"
  "sedMsgToClient\022\016\n\006msg_id\030\001 \001(\r\022\026\n\016compre"
  "ssed_msg\030\002 \001(\014\"\216\001\n CMsgGCToGCMasterBroad"
  "castMessage\022\030\n\020users_per_second\030\001 \001(\r\022\025\n"
  "\rsend_to_users\030\002 \001(\010\022\027\n\017send_to_servers\030"
  "\003 \001(\010\022\016\n\006msg_id\030\004 \001(\r\022\020\n\010msg_data\030\005 \001(\014\""
  "n\n CMsgGCToGCMasterSubscribeToCache\022\021\n\ts"
  "oid_type\030\001 \001(\r\022\017\n\007soid_id\030\002 \001(\006\022\023\n\013accou"
  "nt_ids\030\003 \003(\r\022\021\n\tsteam_ids\030\004 \003(\006\"*\n(CMsgG"
  "CToGCMasterSubscribeToCacheResponse\"l\n%C"
  "MsgGCToGCMasterSubscribeToCacheAsync\022C\n\r"
  "subscribe_msg\030\001 \001(\0132,.proto.dota.CMsgGCT"
  "oGCMasterSubscribeToCache\"r\n$CMsgGCToGCM"
  "asterUnsubscribeFromCache\022\021\n\tsoid_type\030\001"
  " \001(\r\022\017\n\007soid_id\030\002 \001(\006\022\023\n\013account_ids\030\003 \003"
  "(\r\022\021\n\tsteam_ids\030\004 \003(\006\"B\n\034CMsgGCToGCMaste"
  "rDestroyCache\022\021\n\tsoid_type\030\001 \001(\r\022\017\n\007soid"
  "_id\030\002 \001(\006*5\n\rESourceEngine\022\021\n\rk_ESE_Sour"
  "ce1\020\000\022\021\n\rk_ESE_Source2\020\001*V\n\022PartnerAccou"
  "ntType\022\020\n\014PARTNER_NONE\020\000\022\031\n\025PARTNER_PERF"
  "ECT_WORLD\020\001\022\023\n\017PARTNER_INVALID\020\003*\240\002\n\022GCC"
  "onnectionStatus\022#\n\037GCConnectionStatus_HA"
  "VE_SESSION\020\000\022$\n GCConnectionStatus_GC_GO"
  "ING_DOWN\020\001\022!\n\035GCConnectionStatus_NO_SESS"
  "ION\020\002\0220\n,GCConnectionStatus_NO_SESSION_I"
  "N_LOGON_QUEUE\020\003\022\037\n\033GCConnectionStatus_NO"
  "_STEAM\020\004\022 \n\034GCConnectionStatus_SUSPENDED"
  "\020\005\022\'\n#GCConnectionStatus_STEAM_GOING_DOW"
  "N\020\006B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_gcsdk_5fgcmessages_2eproto = {
  false, InitDefaults_gcsdk_5fgcmessages_2eproto, 
  descriptor_table_protodef_gcsdk_5fgcmessages_2eproto,
  "gcsdk_gcmessages.proto", &assign_descriptors_table_gcsdk_5fgcmessages_2eproto, 7410,
};

void AddDescriptors_gcsdk_5fgcmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_gcsdk_5fgcmessages_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gcsdk_5fgcmessages_2eproto = []() { AddDescriptors_gcsdk_5fgcmessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* ESourceEngine_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[0];
}
bool ESourceEngine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartnerAccountType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[1];
}
bool PartnerAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[2];
}
bool GCConnectionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSHA1Digest::InitAsDefaultInstance() {
}
class CMsgSHA1Digest::HasBitSetters {
 public:
  static void set_has_block1(CMsgSHA1Digest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_block2(CMsgSHA1Digest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_block3(CMsgSHA1Digest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSHA1Digest::kBlock1FieldNumber;
const int CMsgSHA1Digest::kBlock2FieldNumber;
const int CMsgSHA1Digest::kBlock3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSHA1Digest::CMsgSHA1Digest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSHA1Digest)
}
CMsgSHA1Digest::CMsgSHA1Digest(const CMsgSHA1Digest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block1_, &from.block1_,
    static_cast<size_t>(reinterpret_cast<char*>(&block3_) -
    reinterpret_cast<char*>(&block1_)) + sizeof(block3_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSHA1Digest)
}

void CMsgSHA1Digest::SharedCtor() {
  ::memset(&block1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block3_) -
      reinterpret_cast<char*>(&block1_)) + sizeof(block3_));
}

CMsgSHA1Digest::~CMsgSHA1Digest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSHA1Digest)
  SharedDtor();
}

void CMsgSHA1Digest::SharedDtor() {
}

void CMsgSHA1Digest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSHA1Digest& CMsgSHA1Digest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSHA1Digest_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSHA1Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSHA1Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&block1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block3_) -
        reinterpret_cast<char*>(&block1_)) + sizeof(block3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSHA1Digest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSHA1Digest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required fixed64 block1 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_block1(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // required fixed64 block2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_block2(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // required fixed32 block3 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_block3(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSHA1Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSHA1Digest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 block1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_block1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &block1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 block2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_block2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &block2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed32 block3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_block3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &block3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSHA1Digest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSHA1Digest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSHA1Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSHA1Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 block1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->block1(), output);
  }

  // required fixed64 block2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->block2(), output);
  }

  // required fixed32 block3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->block3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSHA1Digest)
}

::google::protobuf::uint8* CMsgSHA1Digest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSHA1Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 block1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->block1(), target);
  }

  // required fixed64 block2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->block2(), target);
  }

  // required fixed32 block3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->block3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSHA1Digest)
  return target;
}

size_t CMsgSHA1Digest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CMsgSHA1Digest)
  size_t total_size = 0;

  if (has_block1()) {
    // required fixed64 block1 = 1;
    total_size += 1 + 8;
  }

  if (has_block2()) {
    // required fixed64 block2 = 2;
    total_size += 1 + 8;
  }

  if (has_block3()) {
    // required fixed32 block3 = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgSHA1Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSHA1Digest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 block1 = 1;
    total_size += 1 + 8;

    // required fixed64 block2 = 2;
    total_size += 1 + 8;

    // required fixed32 block3 = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSHA1Digest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSHA1Digest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSHA1Digest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSHA1Digest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSHA1Digest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSHA1Digest)
    MergeFrom(*source);
  }
}

void CMsgSHA1Digest::MergeFrom(const CMsgSHA1Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSHA1Digest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      block1_ = from.block1_;
    }
    if (cached_has_bits & 0x00000002u) {
      block2_ = from.block2_;
    }
    if (cached_has_bits & 0x00000004u) {
      block3_ = from.block3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSHA1Digest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSHA1Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSHA1Digest::CopyFrom(const CMsgSHA1Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSHA1Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSHA1Digest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CMsgSHA1Digest::Swap(CMsgSHA1Digest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSHA1Digest::InternalSwap(CMsgSHA1Digest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block1_, other->block1_);
  swap(block2_, other->block2_);
  swap(block3_, other->block3_);
}

::google::protobuf::Metadata CMsgSHA1Digest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOIDOwner::InitAsDefaultInstance() {
}
class CMsgSOIDOwner::HasBitSetters {
 public:
  static void set_has_type(CMsgSOIDOwner* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_id(CMsgSOIDOwner* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOIDOwner::kTypeFieldNumber;
const int CMsgSOIDOwner::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOIDOwner::CMsgSOIDOwner()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOIDOwner)
}
CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOIDOwner)
}

void CMsgSOIDOwner::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOIDOwner)
  SharedDtor();
}

void CMsgSOIDOwner::SharedDtor() {
}

void CMsgSOIDOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOIDOwner& CMsgSOIDOwner::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOIDOwner_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOIDOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOIDOwner::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOIDOwner*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOIDOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOIDOwner)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOIDOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOIDOwner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOIDOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOIDOwner)
}

::google::protobuf::uint8* CMsgSOIDOwner::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOIDOwner)
  return target;
}

size_t CMsgSOIDOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOIDOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOIDOwner* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOIDOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOIDOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOIDOwner)
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOIDOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {
  return true;
}

void CMsgSOIDOwner::Swap(CMsgSOIDOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOIDOwner::InternalSwap(CMsgSOIDOwner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata CMsgSOIDOwner::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOSingleObject::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOSingleObject_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOSingleObject::HasBitSetters {
 public:
  static void set_has_type_id(CMsgSOSingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_object_data(CMsgSOSingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(CMsgSOSingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOSingleObject* msg);
  static void set_has_owner_soid(CMsgSOSingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_service_id(CMsgSOSingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOSingleObject::HasBitSetters::owner_soid(const CMsgSOSingleObject* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOSingleObject::kTypeIdFieldNumber;
const int CMsgSOSingleObject::kObjectDataFieldNumber;
const int CMsgSOSingleObject::kVersionFieldNumber;
const int CMsgSOSingleObject::kOwnerSoidFieldNumber;
const int CMsgSOSingleObject::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOSingleObject::CMsgSOSingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOSingleObject)
}
CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_data()) {
    object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
  }
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOSingleObject)
}

void CMsgSOSingleObject::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOSingleObject_gcsdk_5fgcmessages_2eproto.base);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOSingleObject)
  SharedDtor();
}

void CMsgSOSingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOSingleObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOSingleObject& CMsgSOSingleObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOSingleObject_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOSingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      object_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(owner_soid_ != nullptr);
      owner_soid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOSingleObject::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOSingleObject*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 type_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes object_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_object_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 service_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOSingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOSingleObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes object_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOSingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOSingleObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOSingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->object_data(), output);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::owner_soid(this), output);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOSingleObject)
}

::google::protobuf::uint8* CMsgSOSingleObject::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->object_data(), target);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::owner_soid(this), target);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOSingleObject)
  return target;
}

size_t CMsgSOSingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOSingleObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes object_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 type_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional uint32 service_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOSingleObject* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOSingleObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOSingleObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOSingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOSingleObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {
  return true;
}

void CMsgSOSingleObject::Swap(CMsgSOSingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOSingleObject::InternalSwap(CMsgSOSingleObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.Swap(&other->object_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(owner_soid_, other->owner_soid_);
  swap(version_, other->version_);
  swap(type_id_, other->type_id_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgSOSingleObject::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance() {
}
class CMsgSOMultipleObjects_SingleObject::HasBitSetters {
 public:
  static void set_has_type_id(CMsgSOMultipleObjects_SingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_object_data(CMsgSOMultipleObjects_SingleObject* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOMultipleObjects_SingleObject::kTypeIdFieldNumber;
const int CMsgSOMultipleObjects_SingleObject::kObjectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOMultipleObjects.SingleObject)
}
CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_data()) {
    object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOMultipleObjects.SingleObject)
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto.base);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_id_ = 0;
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOMultipleObjects.SingleObject)
  SharedDtor();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects_SingleObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOMultipleObjects_SingleObject_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOMultipleObjects_SingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    object_data_.ClearNonDefaultToEmptyNoArena();
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOMultipleObjects_SingleObject::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOMultipleObjects_SingleObject*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes object_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_object_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOMultipleObjects_SingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes object_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOMultipleObjects.SingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOMultipleObjects.SingleObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOMultipleObjects.SingleObject)
}

::google::protobuf::uint8* CMsgSOMultipleObjects_SingleObject::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOMultipleObjects.SingleObject)
  return target;
}

size_t CMsgSOMultipleObjects_SingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes object_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional int32 type_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects_SingleObject* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOMultipleObjects_SingleObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOMultipleObjects.SingleObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOMultipleObjects.SingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects_SingleObject::Swap(CMsgSOMultipleObjects_SingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects_SingleObject::InternalSwap(CMsgSOMultipleObjects_SingleObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.Swap(&other->object_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_id_, other->type_id_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOMultipleObjects::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOMultipleObjects_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOMultipleObjects::HasBitSetters {
 public:
  static void set_has_version(CMsgSOMultipleObjects* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOMultipleObjects* msg);
  static void set_has_owner_soid(CMsgSOMultipleObjects* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(CMsgSOMultipleObjects* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOMultipleObjects::HasBitSetters::owner_soid(const CMsgSOMultipleObjects* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOMultipleObjects::kObjectsModifiedFieldNumber;
const int CMsgSOMultipleObjects::kVersionFieldNumber;
const int CMsgSOMultipleObjects::kObjectsAddedFieldNumber;
const int CMsgSOMultipleObjects::kObjectsRemovedFieldNumber;
const int CMsgSOMultipleObjects::kOwnerSoidFieldNumber;
const int CMsgSOMultipleObjects::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOMultipleObjects::CMsgSOMultipleObjects()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOMultipleObjects)
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objects_modified_(from.objects_modified_),
      objects_added_(from.objects_added_),
      objects_removed_(from.objects_removed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOMultipleObjects)
}

void CMsgSOMultipleObjects::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOMultipleObjects_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOMultipleObjects)
  SharedDtor();
}

void CMsgSOMultipleObjects::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOMultipleObjects& CMsgSOMultipleObjects::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOMultipleObjects_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOMultipleObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_modified_.Clear();
  objects_added_.Clear();
  objects_removed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOMultipleObjects::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOMultipleObjects*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOMultipleObjects_SingleObject::_InternalParse;
          object = msg->add_objects_modified();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional fixed64 version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOMultipleObjects_SingleObject::_InternalParse;
          object = msg->add_objects_added();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOMultipleObjects_SingleObject::_InternalParse;
          object = msg->add_objects_removed();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 service_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOMultipleObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOMultipleObjects)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects_modified()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects_added()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects_removed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOMultipleObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOMultipleObjects)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOMultipleObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_modified_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->objects_modified(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_added_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->objects_added(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_removed_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->objects_removed(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::owner_soid(this), output);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOMultipleObjects)
}

::google::protobuf::uint8* CMsgSOMultipleObjects::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_modified_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects_modified(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_added_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->objects_added(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_removed_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->objects_removed(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::owner_soid(this), target);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOMultipleObjects)
  return target;
}

size_t CMsgSOMultipleObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOMultipleObjects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_modified_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects_modified(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_added_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects_added(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_removed_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects_removed(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOMultipleObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOMultipleObjects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOMultipleObjects)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_modified_.MergeFrom(from.objects_modified_);
  objects_added_.MergeFrom(from.objects_added_);
  objects_removed_.MergeFrom(from.objects_removed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects::Swap(CMsgSOMultipleObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects::InternalSwap(CMsgSOMultipleObjects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&objects_modified_)->InternalSwap(CastToBase(&other->objects_modified_));
  CastToBase(&objects_added_)->InternalSwap(CastToBase(&other->objects_added_));
  CastToBase(&objects_removed_)->InternalSwap(CastToBase(&other->objects_removed_));
  swap(owner_soid_, other->owner_soid_);
  swap(version_, other->version_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance() {
}
class CMsgSOCacheSubscribed_SubscribedType::HasBitSetters {
 public:
  static void set_has_type_id(CMsgSOCacheSubscribed_SubscribedType* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribed_SubscribedType::kTypeIdFieldNumber;
const int CMsgSOCacheSubscribed_SubscribedType::kObjectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
}
CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      object_data_(from.object_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto.base);
  type_id_ = 0;
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  SharedDtor();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
}

void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed_SubscribedType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheSubscribed_SubscribedType_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheSubscribed_SubscribedType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_data_.Clear();
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheSubscribed_SubscribedType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheSubscribed_SubscribedType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes object_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_object_data();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheSubscribed_SubscribedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes object_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed_SubscribedType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->object_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  return target;
}

size_t CMsgSOCacheSubscribed_SubscribedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes object_data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->object_data_size());
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object_data(i));
  }

  // optional int32 type_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed_SubscribedType* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheSubscribed_SubscribedType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_data_.MergeFrom(from.object_data_);
  if (from.has_type_id()) {
    set_type_id(from.type_id());
  }
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed_SubscribedType::InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.InternalSwap(CastToBase(&other->object_data_));
  swap(type_id_, other->type_id_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscribed::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOCacheSubscribed_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOCacheSubscribed::HasBitSetters {
 public:
  static void set_has_version(CMsgSOCacheSubscribed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscribed* msg);
  static void set_has_owner_soid(CMsgSOCacheSubscribed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(CMsgSOCacheSubscribed* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sync_version(CMsgSOCacheSubscribed* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOCacheSubscribed::HasBitSetters::owner_soid(const CMsgSOCacheSubscribed* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribed::kObjectsFieldNumber;
const int CMsgSOCacheSubscribed::kVersionFieldNumber;
const int CMsgSOCacheSubscribed::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribed::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribed::kServiceListFieldNumber;
const int CMsgSOCacheSubscribed::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscribed)
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objects_(from.objects_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscribed)
}

void CMsgSOCacheSubscribed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscribed)
  SharedDtor();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheSubscribed& CMsgSOCacheSubscribed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheSubscribed_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheSubscribed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheSubscribed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOCacheSubscribed_SubscribedType::_InternalParse;
          object = msg->add_objects();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional fixed64 version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 service_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 service_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_service_list(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_service_list();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional fixed64 sync_version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_sync_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscribed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_service_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_sync_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscribed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->objects(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::owner_soid(this), output);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service_id(), output);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscribed)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::owner_soid(this), target);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service_id(), target);
  }

  // repeated uint32 service_list = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->service_list_, target);

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscribed)
  return target;
}

size_t CMsgSOCacheSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscribed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // repeated uint32 service_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheSubscribed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscribed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed::Swap(CMsgSOCacheSubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed::InternalSwap(CMsgSOCacheSubscribed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  service_list_.InternalSwap(&other->service_list_);
  swap(owner_soid_, other->owner_soid_);
  swap(version_, other->version_);
  swap(sync_version_, other->sync_version_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscribedUpToDate::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOCacheSubscribedUpToDate_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOCacheSubscribedUpToDate::HasBitSetters {
 public:
  static void set_has_version(CMsgSOCacheSubscribedUpToDate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscribedUpToDate* msg);
  static void set_has_owner_soid(CMsgSOCacheSubscribedUpToDate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(CMsgSOCacheSubscribedUpToDate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sync_version(CMsgSOCacheSubscribedUpToDate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOCacheSubscribedUpToDate::HasBitSetters::owner_soid(const CMsgSOCacheSubscribedUpToDate* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribedUpToDate::kVersionFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceListFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscribedUpToDate)
}
CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(const CMsgSOCacheSubscribedUpToDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscribedUpToDate)
}

void CMsgSOCacheSubscribedUpToDate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheSubscribedUpToDate_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribedUpToDate::~CMsgSOCacheSubscribedUpToDate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscribedUpToDate)
  SharedDtor();
}

void CMsgSOCacheSubscribedUpToDate::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribedUpToDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheSubscribedUpToDate& CMsgSOCacheSubscribedUpToDate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheSubscribedUpToDate_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheSubscribedUpToDate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheSubscribedUpToDate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheSubscribedUpToDate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 service_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_service_list(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_service_list();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional fixed64 sync_version = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_sync_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheSubscribedUpToDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_service_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_sync_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscribedUpToDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscribedUpToDate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheSubscribedUpToDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::owner_soid(this), output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // repeated uint32 service_list = 4;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscribedUpToDate)
}

::google::protobuf::uint8* CMsgSOCacheSubscribedUpToDate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::owner_soid(this), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // repeated uint32 service_list = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->service_list_, target);

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscribedUpToDate)
  return target;
}

size_t CMsgSOCacheSubscribedUpToDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribedUpToDate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheSubscribedUpToDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscribedUpToDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscribedUpToDate)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribedUpToDate::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribedUpToDate::Swap(CMsgSOCacheSubscribedUpToDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribedUpToDate::InternalSwap(CMsgSOCacheSubscribedUpToDate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_list_.InternalSwap(&other->service_list_);
  swap(owner_soid_, other->owner_soid_);
  swap(version_, other->version_);
  swap(sync_version_, other->sync_version_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribedUpToDate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheUnsubscribed::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOCacheUnsubscribed_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOCacheUnsubscribed::HasBitSetters {
 public:
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOCacheUnsubscribed* msg);
  static void set_has_owner_soid(CMsgSOCacheUnsubscribed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOCacheUnsubscribed::HasBitSetters::owner_soid(const CMsgSOCacheUnsubscribed* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheUnsubscribed::kOwnerSoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheUnsubscribed)
}
CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheUnsubscribed)
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheUnsubscribed_gcsdk_5fgcmessages_2eproto.base);
  owner_soid_ = nullptr;
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheUnsubscribed)
  SharedDtor();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheUnsubscribed& CMsgSOCacheUnsubscribed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheUnsubscribed_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheUnsubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheUnsubscribed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheUnsubscribed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheUnsubscribed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheUnsubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheUnsubscribed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::owner_soid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheUnsubscribed)
}

::google::protobuf::uint8* CMsgSOCacheUnsubscribed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::owner_soid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheUnsubscribed)
  return target;
}

size_t CMsgSOCacheUnsubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheUnsubscribed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_soid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheUnsubscribed* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheUnsubscribed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheUnsubscribed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheUnsubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_soid()) {
    mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
  }
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheUnsubscribed::Swap(CMsgSOCacheUnsubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheUnsubscribed::InternalSwap(CMsgSOCacheUnsubscribed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_soid_, other->owner_soid_);
}

::google::protobuf::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOCacheSubscriptionCheck_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOCacheSubscriptionCheck::HasBitSetters {
 public:
  static void set_has_version(CMsgSOCacheSubscriptionCheck* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscriptionCheck* msg);
  static void set_has_owner_soid(CMsgSOCacheSubscriptionCheck* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(CMsgSOCacheSubscriptionCheck* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sync_version(CMsgSOCacheSubscriptionCheck* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOCacheSubscriptionCheck::HasBitSetters::owner_soid(const CMsgSOCacheSubscriptionCheck* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscriptionCheck::kVersionFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceIdFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceListFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscriptionCheck)
}
CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscriptionCheck)
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscriptionCheck)
  SharedDtor();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheSubscriptionCheck& CMsgSOCacheSubscriptionCheck::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheSubscriptionCheck_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheSubscriptionCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheSubscriptionCheck::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheSubscriptionCheck*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 service_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 service_list = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_service_list(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_service_list();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional fixed64 sync_version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_sync_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheSubscriptionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_service_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_sync_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscriptionCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscriptionCheck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::owner_soid(this), output);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->service_id(), output);
  }

  // repeated uint32 service_list = 5;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscriptionCheck)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionCheck::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::owner_soid(this), target);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->service_id(), target);
  }

  // repeated uint32 service_list = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->service_list_, target);

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscriptionCheck)
  return target;
}

size_t CMsgSOCacheSubscriptionCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionCheck* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheSubscriptionCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscriptionCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscriptionCheck)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionCheck::Swap(CMsgSOCacheSubscriptionCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionCheck::InternalSwap(CMsgSOCacheSubscriptionCheck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_list_.InternalSwap(&other->service_list_);
  swap(owner_soid_, other->owner_soid_);
  swap(version_, other->version_);
  swap(sync_version_, other->sync_version_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOCacheSubscriptionRefresh_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOCacheSubscriptionRefresh::HasBitSetters {
 public:
  static const ::proto::dota::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscriptionRefresh* msg);
  static void set_has_owner_soid(CMsgSOCacheSubscriptionRefresh* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOCacheSubscriptionRefresh::HasBitSetters::owner_soid(const CMsgSOCacheSubscriptionRefresh* msg) {
  return *msg->owner_soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscriptionRefresh::kOwnerSoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscriptionRefresh)
}
CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscriptionRefresh)
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheSubscriptionRefresh_gcsdk_5fgcmessages_2eproto.base);
  owner_soid_ = nullptr;
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscriptionRefresh)
  SharedDtor();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheSubscriptionRefresh& CMsgSOCacheSubscriptionRefresh::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheSubscriptionRefresh_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheSubscriptionRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheSubscriptionRefresh::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheSubscriptionRefresh*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_owner_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheSubscriptionRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscriptionRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscriptionRefresh)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::owner_soid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscriptionRefresh)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionRefresh::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::owner_soid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscriptionRefresh)
  return target;
}

size_t CMsgSOCacheSubscriptionRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_soid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionRefresh* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheSubscriptionRefresh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscriptionRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscriptionRefresh)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_soid()) {
    mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
  }
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionRefresh::Swap(CMsgSOCacheSubscriptionRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionRefresh::InternalSwap(CMsgSOCacheSubscriptionRefresh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_soid_, other->owner_soid_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheVersion::InitAsDefaultInstance() {
}
class CMsgSOCacheVersion::HasBitSetters {
 public:
  static void set_has_version(CMsgSOCacheVersion* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheVersion::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheVersion::CMsgSOCacheVersion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheVersion)
}
CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheVersion)
}

void CMsgSOCacheVersion::SharedCtor() {
  version_ = PROTOBUF_ULONGLONG(0);
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheVersion)
  SharedDtor();
}

void CMsgSOCacheVersion::SharedDtor() {
}

void CMsgSOCacheVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheVersion& CMsgSOCacheVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheVersion_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheVersion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheVersion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheVersion)
}

::google::protobuf::uint8* CMsgSOCacheVersion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheVersion)
  return target;
}

size_t CMsgSOCacheVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheVersion* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
}

void CMsgSOCacheVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheVersion::Swap(CMsgSOCacheVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheVersion::InternalSwap(CMsgSOCacheVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::google::protobuf::Metadata CMsgSOCacheVersion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMultiplexMessage::InitAsDefaultInstance() {
}
class CMsgGCMultiplexMessage::HasBitSetters {
 public:
  static void set_has_msgtype(CMsgGCMultiplexMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_payload(CMsgGCMultiplexMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMultiplexMessage::kMsgtypeFieldNumber;
const int CMsgGCMultiplexMessage::kPayloadFieldNumber;
const int CMsgGCMultiplexMessage::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMultiplexMessage)
}
CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMultiplexMessage)
}

void CMsgGCMultiplexMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCMultiplexMessage_gcsdk_5fgcmessages_2eproto.base);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0u;
}

CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMultiplexMessage)
  SharedDtor();
}

void CMsgGCMultiplexMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMultiplexMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCMultiplexMessage& CMsgGCMultiplexMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCMultiplexMessage_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCMultiplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  msgtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCMultiplexMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCMultiplexMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_msgtype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes payload = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated fixed64 steamids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 25) {
          do {
            msg->add_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCMultiplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMultiplexMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_msgtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMultiplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMultiplexMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCMultiplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMultiplexMessage)
}

::google::protobuf::uint8* CMsgGCMultiplexMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgtype(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // repeated fixed64 steamids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMultiplexMessage)
  return target;
}

size_t CMsgGCMultiplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMultiplexMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional uint32 msgtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMultiplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMultiplexMessage* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCMultiplexMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMultiplexMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMultiplexMessage)
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage::MergeFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMultiplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::CopyFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage::IsInitialized() const {
  return true;
}

void CMsgGCMultiplexMessage::Swap(CMsgGCMultiplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMultiplexMessage::InternalSwap(CMsgGCMultiplexMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_.InternalSwap(&other->steamids_);
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgtype_, other->msgtype_);
}

::google::protobuf::Metadata CMsgGCMultiplexMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSubGCStarting::InitAsDefaultInstance() {
}
class CMsgGCToGCSubGCStarting::HasBitSetters {
 public:
  static void set_has_dir_index(CMsgGCToGCSubGCStarting* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSubGCStarting::kDirIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSubGCStarting::CMsgGCToGCSubGCStarting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSubGCStarting)
}
CMsgGCToGCSubGCStarting::CMsgGCToGCSubGCStarting(const CMsgGCToGCSubGCStarting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSubGCStarting)
}

void CMsgGCToGCSubGCStarting::SharedCtor() {
  dir_index_ = 0u;
}

CMsgGCToGCSubGCStarting::~CMsgGCToGCSubGCStarting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSubGCStarting)
  SharedDtor();
}

void CMsgGCToGCSubGCStarting::SharedDtor() {
}

void CMsgGCToGCSubGCStarting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCSubGCStarting& CMsgGCToGCSubGCStarting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCSubGCStarting_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCSubGCStarting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSubGCStarting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCSubGCStarting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCSubGCStarting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCSubGCStarting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSubGCStarting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSubGCStarting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSubGCStarting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCSubGCStarting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSubGCStarting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSubGCStarting)
}

::google::protobuf::uint8* CMsgGCToGCSubGCStarting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSubGCStarting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSubGCStarting)
  return target;
}

size_t CMsgGCToGCSubGCStarting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSubGCStarting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSubGCStarting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSubGCStarting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSubGCStarting* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCSubGCStarting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSubGCStarting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSubGCStarting)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSubGCStarting::MergeFrom(const CMsgGCToGCSubGCStarting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSubGCStarting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dir_index()) {
    set_dir_index(from.dir_index());
  }
}

void CMsgGCToGCSubGCStarting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSubGCStarting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSubGCStarting::CopyFrom(const CMsgGCToGCSubGCStarting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSubGCStarting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSubGCStarting::IsInitialized() const {
  return true;
}

void CMsgGCToGCSubGCStarting::Swap(CMsgGCToGCSubGCStarting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSubGCStarting::InternalSwap(CMsgGCToGCSubGCStarting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dir_index_, other->dir_index_);
}

::google::protobuf::Metadata CMsgGCToGCSubGCStarting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterAck_Process::InitAsDefaultInstance() {
}
class CGCToGCMsgMasterAck_Process::HasBitSetters {
 public:
  static void set_has_dir_index(CGCToGCMsgMasterAck_Process* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck_Process::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck_Process::kTypeInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterAck.Process)
}
CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process(const CGCToGCMsgMasterAck_Process& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      type_instances_(from.type_instances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterAck.Process)
}

void CGCToGCMsgMasterAck_Process::SharedCtor() {
  dir_index_ = 0u;
}

CGCToGCMsgMasterAck_Process::~CGCToGCMsgMasterAck_Process() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterAck.Process)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Process::SharedDtor() {
}

void CGCToGCMsgMasterAck_Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgMasterAck_Process& CGCToGCMsgMasterAck_Process::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgMasterAck_Process_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgMasterAck_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterAck.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_instances_.Clear();
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgMasterAck_Process::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgMasterAck_Process*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 type_instances = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_type_instances(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_type_instances();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgMasterAck_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterAck.Process)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 type_instances = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_type_instances())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_type_instances())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterAck.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterAck.Process)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgMasterAck_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterAck.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // repeated uint32 type_instances = 2;
  for (int i = 0, n = this->type_instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->type_instances(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterAck.Process)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Process::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterAck.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // repeated uint32 type_instances = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->type_instances_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterAck.Process)
  return target;
}

size_t CGCToGCMsgMasterAck_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterAck.Process)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 type_instances = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->type_instances_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->type_instances_size());
    total_size += data_size;
  }

  // optional uint32 dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Process* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgMasterAck_Process>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterAck.Process)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterAck.Process)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const CGCToGCMsgMasterAck_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_instances_.MergeFrom(from.type_instances_);
  if (from.has_dir_index()) {
    set_dir_index(from.dir_index());
  }
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const CGCToGCMsgMasterAck_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Process::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Process::Swap(CGCToGCMsgMasterAck_Process* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Process::InternalSwap(CGCToGCMsgMasterAck_Process* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_instances_.InternalSwap(&other->type_instances_);
  swap(dir_index_, other->dir_index_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Process::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterAck::InitAsDefaultInstance() {
}
class CGCToGCMsgMasterAck::HasBitSetters {
 public:
  static void set_has_dir_index(CGCToGCMsgMasterAck* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_machine_name(CGCToGCMsgMasterAck* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_process_name(CGCToGCMsgMasterAck* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck::kMachineNameFieldNumber;
const int CGCToGCMsgMasterAck::kProcessNameFieldNumber;
const int CGCToGCMsgMasterAck::kDirectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterAck)
}
CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      directory_(from.directory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterAck)
}

void CGCToGCMsgMasterAck::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCToGCMsgMasterAck_gcsdk_5fgcmessages_2eproto.base);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterAck)
  SharedDtor();
}

void CGCToGCMsgMasterAck::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgMasterAck& CGCToGCMsgMasterAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgMasterAck_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgMasterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      process_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgMasterAck::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgMasterAck*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string machine_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCToGCMsgMasterAck.machine_name");
        object = msg->mutable_machine_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string process_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCToGCMsgMasterAck.process_name");
        object = msg->mutable_process_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGCToGCMsgMasterAck_Process::_InternalParse;
          object = msg->add_directory();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgMasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCToGCMsgMasterAck.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCToGCMsgMasterAck.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_directory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgMasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_name(), output);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_name(), output);
  }

  // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->directory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->directory(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterAck)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_name(), target);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->process_name(), target);
  }

  // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->directory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->directory(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterAck)
  return target;
}

size_t CGCToGCMsgMasterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->directory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->directory(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string machine_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string process_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional uint32 dir_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgMasterAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterAck)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck::MergeFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directory_.MergeFrom(from.directory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::CopyFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck::Swap(CGCToGCMsgMasterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck::InternalSwap(CGCToGCMsgMasterAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&directory_)->InternalSwap(CastToBase(&other->directory_));
  machine_name_.Swap(&other->machine_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  process_name_.Swap(&other->process_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dir_index_, other->dir_index_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterAck_Response::InitAsDefaultInstance() {
}
class CGCToGCMsgMasterAck_Response::HasBitSetters {
 public:
  static void set_has_eresult(CGCToGCMsgMasterAck_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterAck_Response)
}
CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterAck_Response)
}

void CGCToGCMsgMasterAck_Response::SharedCtor() {
  eresult_ = 2;
}

CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterAck_Response)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Response::SharedDtor() {
}

void CGCToGCMsgMasterAck_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgMasterAck_Response& CGCToGCMsgMasterAck_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgMasterAck_Response_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgMasterAck_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgMasterAck_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgMasterAck_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgMasterAck_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterAck_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterAck_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterAck_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgMasterAck_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterAck_Response)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterAck_Response)
  return target;
}

size_t CGCToGCMsgMasterAck_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterAck_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgMasterAck_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterAck_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterAck_Response)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Response::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Response::Swap(CGCToGCMsgMasterAck_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Response::InternalSwap(CGCToGCMsgMasterAck_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCUniverseStartup::InitAsDefaultInstance() {
}
class CMsgGCToGCUniverseStartup::HasBitSetters {
 public:
  static void set_has_is_initial_startup(CMsgGCToGCUniverseStartup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUniverseStartup::kIsInitialStartupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUniverseStartup)
}
CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup(const CMsgGCToGCUniverseStartup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_initial_startup_ = from.is_initial_startup_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUniverseStartup)
}

void CMsgGCToGCUniverseStartup::SharedCtor() {
  is_initial_startup_ = false;
}

CMsgGCToGCUniverseStartup::~CMsgGCToGCUniverseStartup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUniverseStartup)
  SharedDtor();
}

void CMsgGCToGCUniverseStartup::SharedDtor() {
}

void CMsgGCToGCUniverseStartup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCUniverseStartup& CMsgGCToGCUniverseStartup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCUniverseStartup_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCUniverseStartup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUniverseStartup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_initial_startup_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCUniverseStartup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCUniverseStartup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_initial_startup = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_initial_startup(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCUniverseStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUniverseStartup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_initial_startup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_initial_startup(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_initial_startup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUniverseStartup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUniverseStartup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCUniverseStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUniverseStartup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_initial_startup = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_initial_startup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUniverseStartup)
}

::google::protobuf::uint8* CMsgGCToGCUniverseStartup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUniverseStartup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_initial_startup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_initial_startup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUniverseStartup)
  return target;
}

size_t CMsgGCToGCUniverseStartup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUniverseStartup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_initial_startup = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUniverseStartup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUniverseStartup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCUniverseStartup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUniverseStartup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUniverseStartup)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUniverseStartup::MergeFrom(const CMsgGCToGCUniverseStartup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_initial_startup()) {
    set_is_initial_startup(from.is_initial_startup());
  }
}

void CMsgGCToGCUniverseStartup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUniverseStartup::CopyFrom(const CMsgGCToGCUniverseStartup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUniverseStartup::IsInitialized() const {
  return true;
}

void CMsgGCToGCUniverseStartup::Swap(CMsgGCToGCUniverseStartup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUniverseStartup::InternalSwap(CMsgGCToGCUniverseStartup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_initial_startup_, other->is_initial_startup_);
}

::google::protobuf::Metadata CMsgGCToGCUniverseStartup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCUniverseStartupResponse::InitAsDefaultInstance() {
}
class CMsgGCToGCUniverseStartupResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgGCToGCUniverseStartupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUniverseStartupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUniverseStartupResponse)
}
CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse(const CMsgGCToGCUniverseStartupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUniverseStartupResponse)
}

void CMsgGCToGCUniverseStartupResponse::SharedCtor() {
  eresult_ = 0;
}

CMsgGCToGCUniverseStartupResponse::~CMsgGCToGCUniverseStartupResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUniverseStartupResponse)
  SharedDtor();
}

void CMsgGCToGCUniverseStartupResponse::SharedDtor() {
}

void CMsgGCToGCUniverseStartupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCUniverseStartupResponse& CMsgGCToGCUniverseStartupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCUniverseStartupResponse_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCUniverseStartupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCUniverseStartupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCUniverseStartupResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCUniverseStartupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUniverseStartupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUniverseStartupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCUniverseStartupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUniverseStartupResponse)
}

::google::protobuf::uint8* CMsgGCToGCUniverseStartupResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUniverseStartupResponse)
  return target;
}

size_t CMsgGCToGCUniverseStartupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUniverseStartupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUniverseStartupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCUniverseStartupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUniverseStartupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUniverseStartupResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUniverseStartupResponse::MergeFrom(const CMsgGCToGCUniverseStartupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgGCToGCUniverseStartupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUniverseStartupResponse::CopyFrom(const CMsgGCToGCUniverseStartupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUniverseStartupResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCUniverseStartupResponse::Swap(CMsgGCToGCUniverseStartupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUniverseStartupResponse::InternalSwap(CMsgGCToGCUniverseStartupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgGCToGCUniverseStartupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterStartupComplete_GCInfo::InitAsDefaultInstance() {
}
class CGCToGCMsgMasterStartupComplete_GCInfo::HasBitSetters {
 public:
  static void set_has_dir_index(CGCToGCMsgMasterStartupComplete_GCInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_machine_name(CGCToGCMsgMasterStartupComplete_GCInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterStartupComplete_GCInfo::kDirIndexFieldNumber;
const int CGCToGCMsgMasterStartupComplete_GCInfo::kMachineNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
}
CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(const CGCToGCMsgMasterStartupComplete_GCInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto.base);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CGCToGCMsgMasterStartupComplete_GCInfo::~CGCToGCMsgMasterStartupComplete_GCInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete_GCInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgMasterStartupComplete_GCInfo_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgMasterStartupComplete_GCInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmptyNoArena();
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgMasterStartupComplete_GCInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgMasterStartupComplete_GCInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dir_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string machine_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
        object = msg->mutable_machine_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgMasterStartupComplete_GCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dir_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgMasterStartupComplete_GCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete_GCInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete_GCInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string machine_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional uint32 dir_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete_GCInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgMasterStartupComplete_GCInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Swap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete_GCInfo::InternalSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_name_.Swap(&other->machine_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dir_index_, other->dir_index_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete_GCInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterStartupComplete::InitAsDefaultInstance() {
}
class CGCToGCMsgMasterStartupComplete::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterStartupComplete::kGcInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterStartupComplete)
}
CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gc_info_(from.gc_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterStartupComplete)
}

void CGCToGCMsgMasterStartupComplete::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCToGCMsgMasterStartupComplete_gcsdk_5fgcmessages_2eproto.base);
}

CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterStartupComplete)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete::SharedDtor() {
}

void CGCToGCMsgMasterStartupComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgMasterStartupComplete& CGCToGCMsgMasterStartupComplete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgMasterStartupComplete_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgMasterStartupComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gc_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgMasterStartupComplete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgMasterStartupComplete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo::_InternalParse;
          object = msg->add_gc_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgMasterStartupComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gc_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterStartupComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterStartupComplete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gc_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gc_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterStartupComplete)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gc_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gc_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterStartupComplete)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gc_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gc_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgMasterStartupComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterStartupComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterStartupComplete)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gc_info_.MergeFrom(from.gc_info_);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete::Swap(CGCToGCMsgMasterStartupComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete::InternalSwap(CGCToGCMsgMasterStartupComplete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&gc_info_)->InternalSwap(CastToBase(&other->gc_info_));
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgRouted::InitAsDefaultInstance() {
}
class CGCToGCMsgRouted::HasBitSetters {
 public:
  static void set_has_msg_type(CGCToGCMsgRouted* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sender_id(CGCToGCMsgRouted* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_net_message(CGCToGCMsgRouted* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgRouted::kMsgTypeFieldNumber;
const int CGCToGCMsgRouted::kSenderIdFieldNumber;
const int CGCToGCMsgRouted::kNetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgRouted::CGCToGCMsgRouted()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgRouted)
}
CGCToGCMsgRouted::CGCToGCMsgRouted(const CGCToGCMsgRouted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_message()) {
    net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgRouted)
}

void CGCToGCMsgRouted::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCToGCMsgRouted_gcsdk_5fgcmessages_2eproto.base);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
}

CGCToGCMsgRouted::~CGCToGCMsgRouted() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgRouted)
  SharedDtor();
}

void CGCToGCMsgRouted::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRouted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgRouted& CGCToGCMsgRouted::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgRouted_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgRouted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    net_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_type_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgRouted::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgRouted*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_msg_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_sender_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes net_message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_net_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgRouted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgRouted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_msg_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_sender_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes net_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgRouted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgRouted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgRouted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgRouted)
}

::google::protobuf::uint8* CGCToGCMsgRouted::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgRouted)
  return target;
}

size_t CGCToGCMsgRouted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgRouted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes net_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgRouted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRouted* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgRouted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgRouted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgRouted)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRouted::MergeFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRouted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRouted::CopyFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRouted::IsInitialized() const {
  return true;
}

void CGCToGCMsgRouted::Swap(CGCToGCMsgRouted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRouted::InternalSwap(CGCToGCMsgRouted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  net_message_.Swap(&other->net_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_id_, other->sender_id_);
  swap(msg_type_, other->msg_type_);
}

::google::protobuf::Metadata CGCToGCMsgRouted::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgRoutedReply::InitAsDefaultInstance() {
}
class CGCToGCMsgRoutedReply::HasBitSetters {
 public:
  static void set_has_msg_type(CGCToGCMsgRoutedReply* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_net_message(CGCToGCMsgRoutedReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgRoutedReply::kMsgTypeFieldNumber;
const int CGCToGCMsgRoutedReply::kNetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgRoutedReply)
}
CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_message()) {
    net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgRoutedReply)
}

void CGCToGCMsgRoutedReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCToGCMsgRoutedReply_gcsdk_5fgcmessages_2eproto.base);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 0u;
}

CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgRoutedReply)
  SharedDtor();
}

void CGCToGCMsgRoutedReply::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRoutedReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCToGCMsgRoutedReply& CGCToGCMsgRoutedReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCToGCMsgRoutedReply_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCToGCMsgRoutedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    net_message_.ClearNonDefaultToEmptyNoArena();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCToGCMsgRoutedReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCToGCMsgRoutedReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_msg_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes net_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_net_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCToGCMsgRoutedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgRoutedReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_msg_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes net_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgRoutedReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgRoutedReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCToGCMsgRoutedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgRoutedReply)
}

::google::protobuf::uint8* CGCToGCMsgRoutedReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgRoutedReply)
  return target;
}

size_t CGCToGCMsgRoutedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgRoutedReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes net_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgRoutedReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRoutedReply* source =
      ::google::protobuf::DynamicCastToGenerated<CGCToGCMsgRoutedReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgRoutedReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgRoutedReply)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRoutedReply::MergeFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRoutedReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::CopyFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRoutedReply::IsInitialized() const {
  return true;
}

void CGCToGCMsgRoutedReply::Swap(CGCToGCMsgRoutedReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRoutedReply::InternalSwap(CGCToGCMsgRoutedReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  net_message_.Swap(&other->net_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_type_, other->msg_type_);
}

::google::protobuf::Metadata CGCToGCMsgRoutedReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InitAsDefaultInstance() {
}
class CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ip(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_trusted(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kSteamidFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kIpFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kTrustedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}
CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trusted_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedDtor() {
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trusted_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool trusted = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_trusted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_trusted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed32 ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Swap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(ip_, other->ip_);
  swap(trusted_, other->trusted_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCUpdateSubGCSessionInfo::InitAsDefaultInstance() {
}
class CMsgGCUpdateSubGCSessionInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCUpdateSubGCSessionInfo::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo)
}
CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(const CMsgGCUpdateSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo)
}

void CMsgGCUpdateSubGCSessionInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCUpdateSubGCSessionInfo_gcsdk_5fgcmessages_2eproto.base);
}

CMsgGCUpdateSubGCSessionInfo::~CMsgGCUpdateSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo::SharedDtor() {
}

void CMsgGCUpdateSubGCSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCUpdateSubGCSessionInfo& CMsgGCUpdateSubGCSessionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCUpdateSubGCSessionInfo_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCUpdateSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCUpdateSubGCSessionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCUpdateSubGCSessionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_InternalParse;
          object = msg->add_updates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCUpdateSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCUpdateSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->updates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCUpdateSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->updates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCUpdateSubGCSessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCUpdateSubGCSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCUpdateSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo::Swap(CMsgGCUpdateSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo::InternalSwap(CMsgGCUpdateSubGCSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&updates_)->InternalSwap(CastToBase(&other->updates_));
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRequestSubGCSessionInfo::InitAsDefaultInstance() {
}
class CMsgGCRequestSubGCSessionInfo::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCRequestSubGCSessionInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRequestSubGCSessionInfo::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRequestSubGCSessionInfo)
}
CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(const CMsgGCRequestSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRequestSubGCSessionInfo)
}

void CMsgGCRequestSubGCSessionInfo::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCRequestSubGCSessionInfo::~CMsgGCRequestSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRequestSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfo::SharedDtor() {
}

void CMsgGCRequestSubGCSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCRequestSubGCSessionInfo& CMsgGCRequestSubGCSessionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCRequestSubGCSessionInfo_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCRequestSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCRequestSubGCSessionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCRequestSubGCSessionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCRequestSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRequestSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRequestSubGCSessionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCRequestSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRequestSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRequestSubGCSessionInfo)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCRequestSubGCSessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRequestSubGCSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRequestSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfo::Swap(CMsgGCRequestSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfo::InternalSwap(CMsgGCRequestSubGCSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRequestSubGCSessionInfoResponse::InitAsDefaultInstance() {
}
class CMsgGCRequestSubGCSessionInfoResponse::HasBitSetters {
 public:
  static void set_has_ip(CMsgGCRequestSubGCSessionInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_trusted(CMsgGCRequestSubGCSessionInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_port(CMsgGCRequestSubGCSessionInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_success(CMsgGCRequestSubGCSessionInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRequestSubGCSessionInfoResponse::kIpFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kTrustedFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kPortFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
}
CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(const CMsgGCRequestSubGCSessionInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(success_));
}

CMsgGCRequestSubGCSessionInfoResponse::~CMsgGCRequestSubGCSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedDtor() {
}

void CMsgGCRequestSubGCSessionInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCRequestSubGCSessionInfoResponse& CMsgGCRequestSubGCSessionInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCRequestSubGCSessionInfoResponse_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCRequestSubGCSessionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCRequestSubGCSessionInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCRequestSubGCSessionInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool trusted = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_trusted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool success = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCRequestSubGCSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_trusted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCRequestSubGCSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trusted(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trusted(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 port = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bool trusted = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCRequestSubGCSessionInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfoResponse::Swap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfoResponse::InternalSwap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ip_, other->ip_);
  swap(port_, other->port_);
  swap(trusted_, other->trusted_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheHaveVersion::InitAsDefaultInstance() {
  ::proto::dota::_CMsgSOCacheHaveVersion_default_instance_._instance.get_mutable()->soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
}
class CMsgSOCacheHaveVersion::HasBitSetters {
 public:
  static const ::proto::dota::CMsgSOIDOwner& soid(const CMsgSOCacheHaveVersion* msg);
  static void set_has_soid(CMsgSOCacheHaveVersion* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(CMsgSOCacheHaveVersion* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_service_id(CMsgSOCacheHaveVersion* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cached_file_version(CMsgSOCacheHaveVersion* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::proto::dota::CMsgSOIDOwner&
CMsgSOCacheHaveVersion::HasBitSetters::soid(const CMsgSOCacheHaveVersion* msg) {
  return *msg->soid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheHaveVersion::kSoidFieldNumber;
const int CMsgSOCacheHaveVersion::kVersionFieldNumber;
const int CMsgSOCacheHaveVersion::kServiceIdFieldNumber;
const int CMsgSOCacheHaveVersion::kCachedFileVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheHaveVersion)
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_soid()) {
    soid_ = new ::proto::dota::CMsgSOIDOwner(*from.soid_);
  } else {
    soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&version_)) + sizeof(cached_file_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheHaveVersion)
}

void CMsgSOCacheHaveVersion::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cached_file_version_) -
      reinterpret_cast<char*>(&soid_)) + sizeof(cached_file_version_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheHaveVersion)
  SharedDtor();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  if (this != internal_default_instance()) delete soid_;
}

void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSOCacheHaveVersion& CMsgSOCacheHaveVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSOCacheHaveVersion_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSOCacheHaveVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(soid_ != nullptr);
    soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cached_file_version_) -
        reinterpret_cast<char*>(&version_)) + sizeof(cached_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSOCacheHaveVersion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSOCacheHaveVersion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgSOIDOwner soid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgSOIDOwner::_InternalParse;
        object = msg->mutable_soid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional fixed64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cached_file_version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cached_file_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSOCacheHaveVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheHaveVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgSOIDOwner soid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cached_file_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cached_file_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cached_file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheHaveVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheHaveVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSOCacheHaveVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::soid(this), output);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // optional uint32 cached_file_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cached_file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheHaveVersion)
}

::google::protobuf::uint8* CMsgSOCacheHaveVersion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::soid(this), target);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // optional uint32 cached_file_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cached_file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheHaveVersion)
  return target;
}

size_t CMsgSOCacheHaveVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheHaveVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgSOIDOwner soid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *soid_);
    }

    // optional fixed64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 cached_file_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cached_file_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheHaveVersion* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSOCacheHaveVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheHaveVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheHaveVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cached_file_version_ = from.cached_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheHaveVersion::Swap(CMsgSOCacheHaveVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheHaveVersion::InternalSwap(CMsgSOCacheHaveVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(soid_, other->soid_);
  swap(version_, other->version_);
  swap(service_id_, other->service_id_);
  swap(cached_file_version_, other->cached_file_version_);
}

::google::protobuf::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientHello::InitAsDefaultInstance() {
}
class CMsgClientHello::HasBitSetters {
 public:
  static void set_has_version(CMsgClientHello* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_session_need(CMsgClientHello* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_launcher(CMsgClientHello* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secret_key(CMsgClientHello* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_language(CMsgClientHello* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_engine(CMsgClientHello* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientHello::kVersionFieldNumber;
const int CMsgClientHello::kSocacheHaveVersionsFieldNumber;
const int CMsgClientHello::kClientSessionNeedFieldNumber;
const int CMsgClientHello::kClientLauncherFieldNumber;
const int CMsgClientHello::kSecretKeyFieldNumber;
const int CMsgClientHello::kClientLanguageFieldNumber;
const int CMsgClientHello::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientHello)
}
CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      socache_have_versions_(from.socache_have_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret_key()) {
    secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&version_)) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientHello)
}

void CMsgClientHello::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientHello_gcsdk_5fgcmessages_2eproto.base);
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&version_)) + sizeof(engine_));
}

CMsgClientHello::~CMsgClientHello() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientHello)
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientHello& CMsgClientHello::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientHello_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socache_have_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secret_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&version_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientHello::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientHello*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOCacheHaveVersion::_InternalParse;
          object = msg->add_socache_have_versions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 client_session_need = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_session_need(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::PartnerAccountType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_client_launcher(static_cast<::proto::dota::PartnerAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string secret_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientHello.secret_key");
        object = msg->mutable_secret_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_language = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_client_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ESourceEngine_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_engine(static_cast<::proto::dota::ESourceEngine>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientHello)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_socache_have_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_need = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_session_need(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_client_launcher(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string secret_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret_key().data(), static_cast<int>(this->secret_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientHello.secret_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_client_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ESourceEngine_IsValid(value)) {
            set_engine(static_cast< ::proto::dota::ESourceEngine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientHello)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socache_have_versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->socache_have_versions(static_cast<int>(i)),
      output);
  }

  // optional uint32 client_session_need = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_session_need(), output);
  }

  // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_launcher(), output);
  }

  // optional string secret_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), static_cast<int>(this->secret_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientHello.secret_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secret_key(), output);
  }

  // optional uint32 client_language = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_language(), output);
  }

  // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientHello)
}

::google::protobuf::uint8* CMsgClientHello::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socache_have_versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->socache_have_versions(static_cast<int>(i)), target);
  }

  // optional uint32 client_session_need = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_session_need(), target);
  }

  // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->client_launcher(), target);
  }

  // optional string secret_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), static_cast<int>(this->secret_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientHello.secret_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secret_key(), target);
  }

  // optional uint32 client_language = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_language(), target);
  }

  // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientHello)
  return target;
}

size_t CMsgClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientHello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->socache_have_versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->socache_have_versions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string secret_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret_key());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 client_session_need = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_launcher());
    }

    // optional uint32 client_language = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_language());
    }

    // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHello* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientHello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientHello)
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_launcher_ = from.client_launcher_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_language_ = from.client_language_;
    }
    if (cached_has_bits & 0x00000020u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {
  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHello::InternalSwap(CMsgClientHello* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&socache_have_versions_)->InternalSwap(CastToBase(&other->socache_have_versions_));
  secret_key_.Swap(&other->secret_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(client_session_need_, other->client_session_need_);
  swap(client_launcher_, other->client_launcher_);
  swap(client_language_, other->client_language_);
  swap(engine_, other->engine_);
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientWelcome_Location::InitAsDefaultInstance() {
}
class CMsgClientWelcome_Location::HasBitSetters {
 public:
  static void set_has_latitude(CMsgClientWelcome_Location* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_longitude(CMsgClientWelcome_Location* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_country(CMsgClientWelcome_Location* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientWelcome_Location::kLatitudeFieldNumber;
const int CMsgClientWelcome_Location::kLongitudeFieldNumber;
const int CMsgClientWelcome_Location::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientWelcome_Location::CMsgClientWelcome_Location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientWelcome.Location)
}
CMsgClientWelcome_Location::CMsgClientWelcome_Location(const CMsgClientWelcome_Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientWelcome.Location)
}

void CMsgClientWelcome_Location::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto.base);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

CMsgClientWelcome_Location::~CMsgClientWelcome_Location() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientWelcome.Location)
  SharedDtor();
}

void CMsgClientWelcome_Location::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientWelcome_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientWelcome_Location& CMsgClientWelcome_Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientWelcome_Location_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientWelcome_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientWelcome.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientWelcome_Location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientWelcome_Location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float latitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float longitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string country = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientWelcome.Location.country");
        object = msg->mutable_country();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientWelcome_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientWelcome.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_latitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_longitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientWelcome.Location.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientWelcome.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientWelcome.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientWelcome_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientWelcome.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float latitude = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.Location.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientWelcome.Location)
}

::google::protobuf::uint8* CMsgClientWelcome_Location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientWelcome.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float latitude = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.Location.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientWelcome.Location)
  return target;
}

size_t CMsgClientWelcome_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientWelcome.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional float latitude = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientWelcome_Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWelcome_Location* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientWelcome_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientWelcome.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientWelcome.Location)
    MergeFrom(*source);
  }
}

void CMsgClientWelcome_Location::MergeFrom(const CMsgClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWelcome_Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome_Location::CopyFrom(const CMsgClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome_Location::IsInitialized() const {
  return true;
}

void CMsgClientWelcome_Location::Swap(CMsgClientWelcome_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWelcome_Location::InternalSwap(CMsgClientWelcome_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_.Swap(&other->country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::google::protobuf::Metadata CMsgClientWelcome_Location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientWelcome::InitAsDefaultInstance() {
  ::proto::dota::_CMsgClientWelcome_default_instance_._instance.get_mutable()->location_ = const_cast< ::proto::dota::CMsgClientWelcome_Location*>(
      ::proto::dota::CMsgClientWelcome_Location::internal_default_instance());
}
class CMsgClientWelcome::HasBitSetters {
 public:
  static void set_has_version(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_game_data(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgClientWelcome_Location& location(const CMsgClientWelcome* msg);
  static void set_has_location(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_save_game_key(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_schema_crc(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_items_game_url(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gc_socache_file_version(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_txn_country_code(CMsgClientWelcome* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::proto::dota::CMsgClientWelcome_Location&
CMsgClientWelcome::HasBitSetters::location(const CMsgClientWelcome* msg) {
  return *msg->location_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientWelcome::kVersionFieldNumber;
const int CMsgClientWelcome::kGameDataFieldNumber;
const int CMsgClientWelcome::kOutofdateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kUptodateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kLocationFieldNumber;
const int CMsgClientWelcome::kSaveGameKeyFieldNumber;
const int CMsgClientWelcome::kItemSchemaCrcFieldNumber;
const int CMsgClientWelcome::kItemsGameUrlFieldNumber;
const int CMsgClientWelcome::kGcSocacheFileVersionFieldNumber;
const int CMsgClientWelcome::kTxnCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientWelcome::CMsgClientWelcome()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientWelcome)
}
CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      outofdate_subscribed_caches_(from.outofdate_subscribed_caches_),
      uptodate_subscribed_caches_(from.uptodate_subscribed_caches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data()) {
    game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_);
  }
  save_game_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_game_key()) {
    save_game_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_key_);
  }
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items_game_url()) {
    items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
  }
  txn_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txn_country_code()) {
    txn_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_country_code_);
  }
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgClientWelcome_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&version_)) + sizeof(gc_socache_file_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientWelcome)
}

void CMsgClientWelcome::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientWelcome_gcsdk_5fgcmessages_2eproto.base);
  game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_game_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gc_socache_file_version_) -
      reinterpret_cast<char*>(&location_)) + sizeof(gc_socache_file_version_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientWelcome)
  SharedDtor();
}

void CMsgClientWelcome::SharedDtor() {
  game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_game_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void CMsgClientWelcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientWelcome& CMsgClientWelcome::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientWelcome_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientWelcome::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientWelcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outofdate_subscribed_caches_.Clear();
  uptodate_subscribed_caches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      save_game_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      items_game_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      txn_country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_socache_file_version_) -
        reinterpret_cast<char*>(&version_)) + sizeof(gc_socache_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientWelcome::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientWelcome*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes game_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_game_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOCacheSubscribed::_InternalParse;
          object = msg->add_outofdate_subscribed_caches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSOCacheSubscriptionCheck::_InternalParse;
          object = msg->add_uptodate_subscribed_caches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgClientWelcome.Location location = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgClientWelcome_Location::_InternalParse;
        object = msg->mutable_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes save_game_key = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_save_game_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 item_schema_crc = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_item_schema_crc(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string items_game_url = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientWelcome.items_game_url");
        object = msg->mutable_items_game_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 gc_socache_file_version = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_gc_socache_file_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string txn_country_code = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientWelcome.txn_country_code");
        object = msg->mutable_txn_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientWelcome)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes game_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outofdate_subscribed_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_uptodate_subscribed_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientWelcome.Location location = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes save_game_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 item_schema_crc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_item_schema_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string items_game_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items_game_url().data(), static_cast<int>(this->items_game_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientWelcome.items_game_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gc_socache_file_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_gc_socache_file_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_socache_file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string txn_country_code = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txn_country_code().data(), static_cast<int>(this->txn_country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientWelcome.txn_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientWelcome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientWelcome)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientWelcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->game_data(), output);
  }

  // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outofdate_subscribed_caches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->outofdate_subscribed_caches(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uptodate_subscribed_caches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->uptodate_subscribed_caches(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgClientWelcome.Location location = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::location(this), output);
  }

  // optional bytes save_game_key = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->save_game_key(), output);
  }

  // optional fixed32 item_schema_crc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->item_schema_crc(), output);
  }

  // optional string items_game_url = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), static_cast<int>(this->items_game_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.items_game_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->items_game_url(), output);
  }

  // optional uint32 gc_socache_file_version = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gc_socache_file_version(), output);
  }

  // optional string txn_country_code = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_country_code().data(), static_cast<int>(this->txn_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.txn_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->txn_country_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientWelcome)
}

::google::protobuf::uint8* CMsgClientWelcome::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientWelcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->game_data(), target);
  }

  // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outofdate_subscribed_caches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->outofdate_subscribed_caches(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uptodate_subscribed_caches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->uptodate_subscribed_caches(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgClientWelcome.Location location = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::location(this), target);
  }

  // optional bytes save_game_key = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->save_game_key(), target);
  }

  // optional fixed32 item_schema_crc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->item_schema_crc(), target);
  }

  // optional string items_game_url = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), static_cast<int>(this->items_game_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.items_game_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->items_game_url(), target);
  }

  // optional uint32 gc_socache_file_version = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gc_socache_file_version(), target);
  }

  // optional string txn_country_code = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_country_code().data(), static_cast<int>(this->txn_country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.txn_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->txn_country_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientWelcome)
  return target;
}

size_t CMsgClientWelcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientWelcome)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->outofdate_subscribed_caches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outofdate_subscribed_caches(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->uptodate_subscribed_caches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->uptodate_subscribed_caches(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes game_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data());
    }

    // optional bytes save_game_key = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_key());
    }

    // optional string items_game_url = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }

    // optional string txn_country_code = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txn_country_code());
    }

    // optional .proto.dota.CMsgClientWelcome.Location location = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional fixed32 item_schema_crc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 gc_socache_file_version = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_socache_file_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientWelcome)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWelcome* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientWelcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientWelcome)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientWelcome)
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientWelcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outofdate_subscribed_caches_.MergeFrom(from.outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.MergeFrom(from.uptodate_subscribed_caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      save_game_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      txn_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_country_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_location()->::proto::dota::CMsgClientWelcome_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_schema_crc_ = from.item_schema_crc_;
    }
    if (cached_has_bits & 0x00000080u) {
      gc_socache_file_version_ = from.gc_socache_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWelcome::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {
  return true;
}

void CMsgClientWelcome::Swap(CMsgClientWelcome* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWelcome::InternalSwap(CMsgClientWelcome* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&outofdate_subscribed_caches_)->InternalSwap(CastToBase(&other->outofdate_subscribed_caches_));
  CastToBase(&uptodate_subscribed_caches_)->InternalSwap(CastToBase(&other->uptodate_subscribed_caches_));
  game_data_.Swap(&other->game_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  save_game_key_.Swap(&other->save_game_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  items_game_url_.Swap(&other->items_game_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txn_country_code_.Swap(&other->txn_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(version_, other->version_);
  swap(item_schema_crc_, other->item_schema_crc_);
  swap(gc_socache_file_version_, other->gc_socache_file_version_);
}

::google::protobuf::Metadata CMsgClientWelcome::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgConnectionStatus::InitAsDefaultInstance() {
}
class CMsgConnectionStatus::HasBitSetters {
 public:
  static void set_has_status(CMsgConnectionStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_session_need(CMsgConnectionStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_queue_position(CMsgConnectionStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_queue_size(CMsgConnectionStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_wait_seconds(CMsgConnectionStatus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_estimated_wait_seconds_remaining(CMsgConnectionStatus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectionStatus::kStatusFieldNumber;
const int CMsgConnectionStatus::kClientSessionNeedFieldNumber;
const int CMsgConnectionStatus::kQueuePositionFieldNumber;
const int CMsgConnectionStatus::kQueueSizeFieldNumber;
const int CMsgConnectionStatus::kWaitSecondsFieldNumber;
const int CMsgConnectionStatus::kEstimatedWaitSecondsRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectionStatus::CMsgConnectionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConnectionStatus)
}
CMsgConnectionStatus::CMsgConnectionStatus(const CMsgConnectionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
    reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConnectionStatus)
}

void CMsgConnectionStatus::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
      reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
}

CMsgConnectionStatus::~CMsgConnectionStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConnectionStatus)
  SharedDtor();
}

void CMsgConnectionStatus::SharedDtor() {
}

void CMsgConnectionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgConnectionStatus& CMsgConnectionStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgConnectionStatus_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
        reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgConnectionStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgConnectionStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::GCConnectionStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_status(static_cast<::proto::dota::GCConnectionStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_session_need = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_session_need(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 queue_position = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_queue_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 queue_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_queue_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 wait_seconds = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_wait_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_estimated_wait_seconds_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgConnectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConnectionStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::GCConnectionStatus_IsValid(value)) {
            set_status(static_cast< ::proto::dota::GCConnectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_need = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_session_need(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 queue_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_queue_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 queue_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_queue_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wait_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_wait_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_estimated_wait_seconds_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_wait_seconds_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConnectionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConnectionStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgConnectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_need(), output);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_position(), output);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queue_size(), output);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wait_seconds(), output);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_wait_seconds_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConnectionStatus)
}

::google::protobuf::uint8* CMsgConnectionStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_need(), target);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_position(), target);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queue_size(), target);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wait_seconds(), target);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_wait_seconds_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConnectionStatus)
  return target;
}

size_t CMsgConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConnectionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 client_session_need = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional int32 queue_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_position());
    }

    // optional int32 queue_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_size());
    }

    // optional int32 wait_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_seconds());
    }

    // optional int32 estimated_wait_seconds_remaining = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_wait_seconds_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConnectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectionStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgConnectionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConnectionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConnectionStatus)
    MergeFrom(*source);
  }
}

void CMsgConnectionStatus::MergeFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000004u) {
      queue_position_ = from.queue_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      queue_size_ = from.queue_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      wait_seconds_ = from.wait_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      estimated_wait_seconds_remaining_ = from.estimated_wait_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectionStatus::CopyFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectionStatus::IsInitialized() const {
  return true;
}

void CMsgConnectionStatus::Swap(CMsgConnectionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectionStatus::InternalSwap(CMsgConnectionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(client_session_need_, other->client_session_need_);
  swap(queue_position_, other->queue_position_);
  swap(queue_size_, other->queue_size_);
  swap(wait_seconds_, other->wait_seconds_);
  swap(estimated_wait_seconds_remaining_, other->estimated_wait_seconds_remaining_);
}

::google::protobuf::Metadata CMsgConnectionStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InitAsDefaultInstance() {
}
class CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::HasBitSetters {
 public:
  static void set_has_service_id(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kServiceIdFieldNumber;
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}
CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedDtor() {
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 service_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint32 service_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Swap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSOCacheSubscribe::InitAsDefaultInstance() {
}
class CMsgGCToGCSOCacheSubscribe::HasBitSetters {
 public:
  static void set_has_subscriber(CMsgGCToGCSOCacheSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_subscribe_to_id(CMsgGCToGCSOCacheSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sync_version(CMsgGCToGCSOCacheSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_subscribe_to_type(CMsgGCToGCSOCacheSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheSubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSubscribeToIdFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSyncVersionFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kHaveVersionsFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSubscribeToTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSOCacheSubscribe)
}
CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(const CMsgGCToGCSOCacheSubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      have_versions_(from.have_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscribe_to_type_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(subscribe_to_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSOCacheSubscribe)
}

void CMsgGCToGCSOCacheSubscribe::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCSOCacheSubscribe_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&subscriber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscribe_to_type_) -
      reinterpret_cast<char*>(&subscriber_)) + sizeof(subscribe_to_type_));
}

CMsgGCToGCSOCacheSubscribe::~CMsgGCToGCSOCacheSubscribe() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSOCacheSubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe::SharedDtor() {
}

void CMsgGCToGCSOCacheSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCSOCacheSubscribe& CMsgGCToGCSOCacheSubscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCSOCacheSubscribe_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCSOCacheSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  have_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscribe_to_type_) -
        reinterpret_cast<char*>(&subscriber_)) + sizeof(subscribe_to_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCSOCacheSubscribe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCSOCacheSubscribe*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_subscriber(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 subscribe_to_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_subscribe_to_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 sync_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_sync_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_InternalParse;
          object = msg->add_have_versions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional uint32 subscribe_to_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_subscribe_to_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCSOCacheSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_subscriber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 subscribe_to_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_subscribe_to_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscribe_to_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_sync_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_have_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subscribe_to_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_subscribe_to_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscribe_to_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSOCacheSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSOCacheSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCSOCacheSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 subscribe_to_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->subscribe_to_id(), output);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->sync_version(), output);
  }

  // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->have_versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->have_versions(static_cast<int>(i)),
      output);
  }

  // optional uint32 subscribe_to_type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subscribe_to_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSOCacheSubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 subscribe_to_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->subscribe_to_id(), target);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->sync_version(), target);
  }

  // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->have_versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->have_versions(static_cast<int>(i)), target);
  }

  // optional uint32 subscribe_to_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subscribe_to_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSOCacheSubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->have_versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->have_versions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 subscriber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 subscribe_to_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 subscribe_to_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscribe_to_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCSOCacheSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSOCacheSubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSOCacheSubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  have_versions_.MergeFrom(from.have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      subscribe_to_id_ = from.subscribe_to_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscribe_to_type_ = from.subscribe_to_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe::Swap(CMsgGCToGCSOCacheSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe::InternalSwap(CMsgGCToGCSOCacheSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&have_versions_)->InternalSwap(CastToBase(&other->have_versions_));
  swap(subscriber_, other->subscriber_);
  swap(subscribe_to_id_, other->subscribe_to_id_);
  swap(sync_version_, other->sync_version_);
  swap(subscribe_to_type_, other->subscribe_to_type_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSOCacheUnsubscribe::InitAsDefaultInstance() {
}
class CMsgGCToGCSOCacheUnsubscribe::HasBitSetters {
 public:
  static void set_has_subscriber(CMsgGCToGCSOCacheUnsubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_unsubscribe_from_id(CMsgGCToGCSOCacheUnsubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_unsubscribe_from_type(CMsgGCToGCSOCacheUnsubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheUnsubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheUnsubscribe::kUnsubscribeFromIdFieldNumber;
const int CMsgGCToGCSOCacheUnsubscribe::kUnsubscribeFromTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
}
CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(const CMsgGCToGCSOCacheUnsubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsubscribe_from_type_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
}

void CMsgGCToGCSOCacheUnsubscribe::SharedCtor() {
  ::memset(&subscriber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsubscribe_from_type_) -
      reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_type_));
}

CMsgGCToGCSOCacheUnsubscribe::~CMsgGCToGCSOCacheUnsubscribe() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheUnsubscribe::SharedDtor() {
}

void CMsgGCToGCSOCacheUnsubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCSOCacheUnsubscribe& CMsgGCToGCSOCacheUnsubscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCSOCacheUnsubscribe_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCSOCacheUnsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unsubscribe_from_type_) -
        reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCSOCacheUnsubscribe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCSOCacheUnsubscribe*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_subscriber(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 unsubscribe_from_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_unsubscribe_from_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 unsubscribe_from_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_unsubscribe_from_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCSOCacheUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_subscriber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 unsubscribe_from_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_unsubscribe_from_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &unsubscribe_from_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unsubscribe_from_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_unsubscribe_from_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsubscribe_from_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCSOCacheUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 unsubscribe_from_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->unsubscribe_from_id(), output);
  }

  // optional uint32 unsubscribe_from_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unsubscribe_from_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheUnsubscribe::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 unsubscribe_from_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->unsubscribe_from_id(), target);
  }

  // optional uint32 unsubscribe_from_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unsubscribe_from_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheUnsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 subscriber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 unsubscribe_from_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 unsubscribe_from_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unsubscribe_from_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheUnsubscribe* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCSOCacheUnsubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      unsubscribe_from_id_ = from.unsubscribe_from_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unsubscribe_from_type_ = from.unsubscribe_from_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheUnsubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheUnsubscribe::Swap(CMsgGCToGCSOCacheUnsubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheUnsubscribe::InternalSwap(CMsgGCToGCSOCacheUnsubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subscriber_, other->subscriber_);
  swap(unsubscribe_from_id_, other->unsubscribe_from_id_);
  swap(unsubscribe_from_type_, other->unsubscribe_from_type_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheUnsubscribe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientPing::InitAsDefaultInstance() {
}
class CMsgGCClientPing::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientPing::CMsgGCClientPing()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientPing)
}
CMsgGCClientPing::CMsgGCClientPing(const CMsgGCClientPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientPing)
}

void CMsgGCClientPing::SharedCtor() {
}

CMsgGCClientPing::~CMsgGCClientPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientPing)
  SharedDtor();
}

void CMsgGCClientPing::SharedDtor() {
}

void CMsgGCClientPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCClientPing& CMsgGCClientPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCClientPing_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCClientPing::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCClientPing*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCClientPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientPing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCClientPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientPing)
}

::google::protobuf::uint8* CMsgGCClientPing::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientPing)
  return target;
}

size_t CMsgGCClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientPing* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCClientPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientPing)
    MergeFrom(*source);
  }
}

void CMsgGCClientPing::MergeFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCClientPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientPing::CopyFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientPing::IsInitialized() const {
  return true;
}

void CMsgGCClientPing::Swap(CMsgGCClientPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientPing::InternalSwap(CMsgGCClientPing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCClientPing::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCForwardAccountDetails::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCToGCForwardAccountDetails_default_instance_._instance.get_mutable()->account_details_ = const_cast< ::proto::dota::CGCSystemMsg_GetAccountDetails_Response*>(
      ::proto::dota::CGCSystemMsg_GetAccountDetails_Response::internal_default_instance());
}
class CMsgGCToGCForwardAccountDetails::HasBitSetters {
 public:
  static void set_has_steamid(CMsgGCToGCForwardAccountDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CGCSystemMsg_GetAccountDetails_Response& account_details(const CMsgGCToGCForwardAccountDetails* msg);
  static void set_has_account_details(CMsgGCToGCForwardAccountDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_age_seconds(CMsgGCToGCForwardAccountDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CGCSystemMsg_GetAccountDetails_Response&
CMsgGCToGCForwardAccountDetails::HasBitSetters::account_details(const CMsgGCToGCForwardAccountDetails* msg) {
  return *msg->account_details_;
}
void CMsgGCToGCForwardAccountDetails::clear_account_details() {
  if (account_details_ != nullptr) account_details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCForwardAccountDetails::kSteamidFieldNumber;
const int CMsgGCToGCForwardAccountDetails::kAccountDetailsFieldNumber;
const int CMsgGCToGCForwardAccountDetails::kAgeSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCForwardAccountDetails)
}
CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails(const CMsgGCToGCForwardAccountDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_details()) {
    account_details_ = new ::proto::dota::CGCSystemMsg_GetAccountDetails_Response(*from.account_details_);
  } else {
    account_details_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_seconds_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(age_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCForwardAccountDetails)
}

void CMsgGCToGCForwardAccountDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&account_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_seconds_) -
      reinterpret_cast<char*>(&account_details_)) + sizeof(age_seconds_));
}

CMsgGCToGCForwardAccountDetails::~CMsgGCToGCForwardAccountDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCForwardAccountDetails)
  SharedDtor();
}

void CMsgGCToGCForwardAccountDetails::SharedDtor() {
  if (this != internal_default_instance()) delete account_details_;
}

void CMsgGCToGCForwardAccountDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCForwardAccountDetails& CMsgGCToGCForwardAccountDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCForwardAccountDetails_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCForwardAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(account_details_ != nullptr);
    account_details_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_seconds_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(age_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCForwardAccountDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCForwardAccountDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CGCSystemMsg_GetAccountDetails_Response::_InternalParse;
        object = msg->mutable_account_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 age_seconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_age_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCForwardAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_age_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCForwardAccountDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCForwardAccountDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCForwardAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::account_details(this), output);
  }

  // optional uint32 age_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->age_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCForwardAccountDetails)
}

::google::protobuf::uint8* CMsgGCToGCForwardAccountDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::account_details(this), target);
  }

  // optional uint32 age_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->age_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCForwardAccountDetails)
  return target;
}

size_t CMsgGCToGCForwardAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *account_details_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 age_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCForwardAccountDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCForwardAccountDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCForwardAccountDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCForwardAccountDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCForwardAccountDetails)
    MergeFrom(*source);
  }
}

void CMsgGCToGCForwardAccountDetails::MergeFrom(const CMsgGCToGCForwardAccountDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_account_details()->::proto::dota::CGCSystemMsg_GetAccountDetails_Response::MergeFrom(from.account_details());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_seconds_ = from.age_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCForwardAccountDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCForwardAccountDetails::CopyFrom(const CMsgGCToGCForwardAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCForwardAccountDetails::IsInitialized() const {
  return true;
}

void CMsgGCToGCForwardAccountDetails::Swap(CMsgGCToGCForwardAccountDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCForwardAccountDetails::InternalSwap(CMsgGCToGCForwardAccountDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_details_, other->account_details_);
  swap(steamid_, other->steamid_);
  swap(age_seconds_, other->age_seconds_);
}

::google::protobuf::Metadata CMsgGCToGCForwardAccountDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCLoadSessionSOCache::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCToGCLoadSessionSOCache_default_instance_._instance.get_mutable()->forward_account_details_ = const_cast< ::proto::dota::CMsgGCToGCForwardAccountDetails*>(
      ::proto::dota::CMsgGCToGCForwardAccountDetails::internal_default_instance());
}
class CMsgGCToGCLoadSessionSOCache::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGCToGCLoadSessionSOCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgGCToGCForwardAccountDetails& forward_account_details(const CMsgGCToGCLoadSessionSOCache* msg);
  static void set_has_forward_account_details(CMsgGCToGCLoadSessionSOCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgGCToGCForwardAccountDetails&
CMsgGCToGCLoadSessionSOCache::HasBitSetters::forward_account_details(const CMsgGCToGCLoadSessionSOCache* msg) {
  return *msg->forward_account_details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCLoadSessionSOCache::kAccountIdFieldNumber;
const int CMsgGCToGCLoadSessionSOCache::kForwardAccountDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCLoadSessionSOCache)
}
CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache(const CMsgGCToGCLoadSessionSOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward_account_details()) {
    forward_account_details_ = new ::proto::dota::CMsgGCToGCForwardAccountDetails(*from.forward_account_details_);
  } else {
    forward_account_details_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCLoadSessionSOCache)
}

void CMsgGCToGCLoadSessionSOCache::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCLoadSessionSOCache_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&forward_account_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&forward_account_details_)) + sizeof(account_id_));
}

CMsgGCToGCLoadSessionSOCache::~CMsgGCToGCLoadSessionSOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCLoadSessionSOCache)
  SharedDtor();
}

void CMsgGCToGCLoadSessionSOCache::SharedDtor() {
  if (this != internal_default_instance()) delete forward_account_details_;
}

void CMsgGCToGCLoadSessionSOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCLoadSessionSOCache& CMsgGCToGCLoadSessionSOCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCLoadSessionSOCache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCLoadSessionSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(forward_account_details_ != nullptr);
    forward_account_details_->Clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCLoadSessionSOCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCLoadSessionSOCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgGCToGCForwardAccountDetails::_InternalParse;
        object = msg->mutable_forward_account_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCLoadSessionSOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forward_account_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCLoadSessionSOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCLoadSessionSOCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCLoadSessionSOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::forward_account_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCLoadSessionSOCache)
}

::google::protobuf::uint8* CMsgGCToGCLoadSessionSOCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::forward_account_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCLoadSessionSOCache)
  return target;
}

size_t CMsgGCToGCLoadSessionSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *forward_account_details_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCLoadSessionSOCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCLoadSessionSOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCLoadSessionSOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCLoadSessionSOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const CMsgGCToGCLoadSessionSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward_account_details()->::proto::dota::CMsgGCToGCForwardAccountDetails::MergeFrom(from.forward_account_details());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const CMsgGCToGCLoadSessionSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCLoadSessionSOCache::Swap(CMsgGCToGCLoadSessionSOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCLoadSessionSOCache::InternalSwap(CMsgGCToGCLoadSessionSOCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(forward_account_details_, other->forward_account_details_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgGCToGCLoadSessionSOCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCLoadSessionSOCacheResponse::InitAsDefaultInstance() {
}
class CMsgGCToGCLoadSessionSOCacheResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
}
CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse(const CMsgGCToGCLoadSessionSOCacheResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedCtor() {
}

CMsgGCToGCLoadSessionSOCacheResponse::~CMsgGCToGCLoadSessionSOCacheResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  SharedDtor();
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedDtor() {
}

void CMsgGCToGCLoadSessionSOCacheResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCLoadSessionSOCacheResponse& CMsgGCToGCLoadSessionSOCacheResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCLoadSessionSOCacheResponse_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCLoadSessionSOCacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCLoadSessionSOCacheResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCLoadSessionSOCacheResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCLoadSessionSOCacheResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCLoadSessionSOCacheResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
}

::google::protobuf::uint8* CMsgGCToGCLoadSessionSOCacheResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  return target;
}

size_t CMsgGCToGCLoadSessionSOCacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCLoadSessionSOCacheResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCLoadSessionSOCacheResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCacheResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCLoadSessionSOCacheResponse::Swap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCLoadSessionSOCacheResponse::InternalSwap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCToGCLoadSessionSOCacheResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCUpdateSessionStats::InitAsDefaultInstance() {
}
class CMsgGCToGCUpdateSessionStats::HasBitSetters {
 public:
  static void set_has_user_sessions(CMsgGCToGCUpdateSessionStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_sessions(CMsgGCToGCUpdateSessionStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_in_logon_surge(CMsgGCToGCUpdateSessionStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUpdateSessionStats::kUserSessionsFieldNumber;
const int CMsgGCToGCUpdateSessionStats::kServerSessionsFieldNumber;
const int CMsgGCToGCUpdateSessionStats::kInLogonSurgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUpdateSessionStats)
}
CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats(const CMsgGCToGCUpdateSessionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_sessions_, &from.user_sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_logon_surge_) -
    reinterpret_cast<char*>(&user_sessions_)) + sizeof(in_logon_surge_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUpdateSessionStats)
}

void CMsgGCToGCUpdateSessionStats::SharedCtor() {
  ::memset(&user_sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_logon_surge_) -
      reinterpret_cast<char*>(&user_sessions_)) + sizeof(in_logon_surge_));
}

CMsgGCToGCUpdateSessionStats::~CMsgGCToGCUpdateSessionStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUpdateSessionStats)
  SharedDtor();
}

void CMsgGCToGCUpdateSessionStats::SharedDtor() {
}

void CMsgGCToGCUpdateSessionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCUpdateSessionStats& CMsgGCToGCUpdateSessionStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCUpdateSessionStats_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCUpdateSessionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&user_sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_logon_surge_) -
        reinterpret_cast<char*>(&user_sessions_)) + sizeof(in_logon_surge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCUpdateSessionStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCUpdateSessionStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 user_sessions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_sessions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 server_sessions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_server_sessions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool in_logon_surge = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_in_logon_surge(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCUpdateSessionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_user_sessions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_server_sessions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_logon_surge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_in_logon_surge(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_logon_surge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUpdateSessionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUpdateSessionStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCUpdateSessionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_sessions(), output);
  }

  // optional uint32 server_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_sessions(), output);
  }

  // optional bool in_logon_surge = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_logon_surge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUpdateSessionStats)
}

::google::protobuf::uint8* CMsgGCToGCUpdateSessionStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_sessions(), target);
  }

  // optional uint32 server_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_sessions(), target);
  }

  // optional bool in_logon_surge = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_logon_surge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUpdateSessionStats)
  return target;
}

size_t CMsgGCToGCUpdateSessionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 user_sessions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sessions());
    }

    // optional uint32 server_sessions = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_sessions());
    }

    // optional bool in_logon_surge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSessionStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCUpdateSessionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUpdateSessionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUpdateSessionStats)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const CMsgGCToGCUpdateSessionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_sessions_ = from.user_sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_sessions_ = from.server_sessions_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_logon_surge_ = from.in_logon_surge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const CMsgGCToGCUpdateSessionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSessionStats::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSessionStats::Swap(CMsgGCToGCUpdateSessionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUpdateSessionStats::InternalSwap(CMsgGCToGCUpdateSessionStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_sessions_, other->user_sessions_);
  swap(server_sessions_, other->server_sessions_);
  swap(in_logon_surge_, other->in_logon_surge_);
}

::google::protobuf::Metadata CMsgGCToGCUpdateSessionStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InitAsDefaultInstance() {
}
class CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::HasBitSetters {
 public:
  static void set_has_gameitemid(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_description(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kGameitemidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kItemDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}
CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_description()) {
    item_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_description_);
  }
  gameitemid_ = from.gameitemid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto.base);
  item_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameitemid_ = 0u;
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedDtor() {
  item_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_description_.ClearNonDefaultToEmptyNoArena();
  }
  gameitemid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 gameitemid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameitemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string item_description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
        object = msg->mutable_item_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameitemid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameitemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_description().data(), static_cast<int>(this->item_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gameitemid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameitemid(), output);
  }

  // optional string item_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_description().data(), static_cast<int>(this->item_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gameitemid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameitemid(), target);
  }

  // optional string item_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_description().data(), static_cast<int>(this->item_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string item_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_description());
    }

    // optional uint32 gameitemid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      item_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Swap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_description_.Swap(&other->item_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameitemid_, other->gameitemid_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InitAsDefaultInstance() {
}
class CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::HasBitSetters {
 public:
  static void set_has_language(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kLanguageFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kDescriptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      descriptions_(from.descriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto.base);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_InternalParse;
          object = msg->add_descriptions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_descriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->descriptions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->descriptions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->descriptions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->descriptions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->descriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->descriptions(static_cast<int>(i)));
    }
  }

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptions_.MergeFrom(from.descriptions_);
  if (from.has_language()) {
    _has_bits_[0] |= 0x00000001u;
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Swap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&descriptions_)->InternalSwap(CastToBase(&other->descriptions_));
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_PopulateItemDescriptions_Request::InitAsDefaultInstance() {
}
class CWorkshop_PopulateItemDescriptions_Request::HasBitSetters {
 public:
  static void set_has_appid(CWorkshop_PopulateItemDescriptions_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_PopulateItemDescriptions_Request::kAppidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request::kLanguagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
}
CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(const CWorkshop_PopulateItemDescriptions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
}

void CWorkshop_PopulateItemDescriptions_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CWorkshop_PopulateItemDescriptions_Request_gcsdk_5fgcmessages_2eproto.base);
  appid_ = 0u;
}

CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request::SharedDtor() {
}

void CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_PopulateItemDescriptions_Request& CWorkshop_PopulateItemDescriptions_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_PopulateItemDescriptions_Request_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_PopulateItemDescriptions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languages_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_PopulateItemDescriptions_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_PopulateItemDescriptions_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_InternalParse;
          object = msg->add_languages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_PopulateItemDescriptions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_languages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->languages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->languages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->languages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->languages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->languages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->languages(static_cast<int>(i)));
    }
  }

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_PopulateItemDescriptions_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request::Swap(CWorkshop_PopulateItemDescriptions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request::InternalSwap(CWorkshop_PopulateItemDescriptions_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&languages_)->InternalSwap(CastToBase(&other->languages_));
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_GetContributors_Request::InitAsDefaultInstance() {
}
class CWorkshop_GetContributors_Request::HasBitSetters {
 public:
  static void set_has_appid(CWorkshop_GetContributors_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gameitemid(CWorkshop_GetContributors_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_GetContributors_Request::kAppidFieldNumber;
const int CWorkshop_GetContributors_Request::kGameitemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_GetContributors_Request)
}
CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(const CWorkshop_GetContributors_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_GetContributors_Request)
}

void CWorkshop_GetContributors_Request::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameitemid_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
}

CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_GetContributors_Request)
  SharedDtor();
}

void CWorkshop_GetContributors_Request::SharedDtor() {
}

void CWorkshop_GetContributors_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_GetContributors_Request& CWorkshop_GetContributors_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_GetContributors_Request_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_GetContributors_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_GetContributors_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameitemid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_GetContributors_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_GetContributors_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gameitemid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameitemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_GetContributors_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_GetContributors_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameitemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_GetContributors_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_GetContributors_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_GetContributors_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_GetContributors_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_GetContributors_Request)
}

::google::protobuf::uint8* CWorkshop_GetContributors_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_GetContributors_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_GetContributors_Request)
  return target;
}

size_t CWorkshop_GetContributors_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_GetContributors_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetContributors_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_GetContributors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetContributors_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_GetContributors_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_GetContributors_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_GetContributors_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Request::MergeFrom(const CWorkshop_GetContributors_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_GetContributors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetContributors_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_GetContributors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::CopyFrom(const CWorkshop_GetContributors_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_GetContributors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetContributors_Request::Swap(CWorkshop_GetContributors_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_GetContributors_Request::InternalSwap(CWorkshop_GetContributors_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(gameitemid_, other->gameitemid_);
}

::google::protobuf::Metadata CWorkshop_GetContributors_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_GetContributors_Response::InitAsDefaultInstance() {
}
class CWorkshop_GetContributors_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_GetContributors_Response::kContributorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_GetContributors_Response)
}
CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(const CWorkshop_GetContributors_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      contributors_(from.contributors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_GetContributors_Response)
}

void CWorkshop_GetContributors_Response::SharedCtor() {
}

CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_GetContributors_Response)
  SharedDtor();
}

void CWorkshop_GetContributors_Response::SharedDtor() {
}

void CWorkshop_GetContributors_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_GetContributors_Response& CWorkshop_GetContributors_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_GetContributors_Response_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_GetContributors_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_GetContributors_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_GetContributors_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_GetContributors_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 contributors = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_contributors(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_contributors();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_GetContributors_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_GetContributors_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 contributors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_contributors())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contributors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_GetContributors_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_GetContributors_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_GetContributors_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_GetContributors_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  for (int i = 0, n = this->contributors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->contributors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_GetContributors_Response)
}

::google::protobuf::uint8* CWorkshop_GetContributors_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_GetContributors_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->contributors_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_GetContributors_Response)
  return target;
}

size_t CWorkshop_GetContributors_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_GetContributors_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->contributors_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->contributors_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetContributors_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_GetContributors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetContributors_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_GetContributors_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_GetContributors_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_GetContributors_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Response::MergeFrom(const CWorkshop_GetContributors_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_GetContributors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributors_.MergeFrom(from.contributors_);
}

void CWorkshop_GetContributors_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_GetContributors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::CopyFrom(const CWorkshop_GetContributors_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_GetContributors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetContributors_Response::Swap(CWorkshop_GetContributors_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_GetContributors_Response::InternalSwap(CWorkshop_GetContributors_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contributors_.InternalSwap(&other->contributors_);
}

::google::protobuf::Metadata CWorkshop_GetContributors_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InitAsDefaultInstance() {
}
class CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::HasBitSetters {
 public:
  static void set_has_workshop_file_id(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_revenue_percentage(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rule_description(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kWorkshopFileIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_description()) {
    rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
  }
  ::memcpy(&workshop_file_id_, &from.workshop_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&workshop_file_id_)) + sizeof(revenue_percentage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto.base);
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workshop_file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenue_percentage_) -
      reinterpret_cast<char*>(&workshop_file_id_)) + sizeof(revenue_percentage_));
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedDtor() {
  rule_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rule_description_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&workshop_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revenue_percentage_) -
        reinterpret_cast<char*>(&workshop_file_id_)) + sizeof(revenue_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 workshop_file_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_workshop_file_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float revenue_percentage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_revenue_percentage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string rule_description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
        object = msg->mutable_rule_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 workshop_file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_workshop_file_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workshop_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_revenue_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_description().data(), static_cast<int>(this->rule_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 workshop_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->workshop_file_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), static_cast<int>(this->rule_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 workshop_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->workshop_file_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), static_cast<int>(this->rule_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rule_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

    // optional uint64 workshop_file_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workshop_file_id());
    }

    // optional float revenue_percentage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      workshop_file_id_ = from.workshop_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_percentage_ = from.revenue_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rule_description_.Swap(&other->rule_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(workshop_file_id_, other->workshop_file_id_);
  swap(revenue_percentage_, other->revenue_percentage_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InitAsDefaultInstance() {
}
class CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::HasBitSetters {
 public:
  static void set_has_account_id(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_revenue_percentage(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rule_description(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kAccountIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_description()) {
    rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(revenue_percentage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto.base);
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenue_percentage_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(revenue_percentage_));
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedDtor() {
  rule_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rule_description_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revenue_percentage_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(revenue_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float revenue_percentage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_revenue_percentage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string rule_description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
        object = msg->mutable_rule_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_revenue_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_description().data(), static_cast<int>(this->rule_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), static_cast<int>(this->rule_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), static_cast<int>(this->rule_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rule_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float revenue_percentage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_percentage_ = from.revenue_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rule_description_.Swap(&other->rule_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(revenue_percentage_, other->revenue_percentage_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_SetItemPaymentRules_Request::InitAsDefaultInstance() {
}
class CWorkshop_SetItemPaymentRules_Request::HasBitSetters {
 public:
  static void set_has_appid(CWorkshop_SetItemPaymentRules_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gameitemid(CWorkshop_SetItemPaymentRules_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_SetItemPaymentRules_Request::kAppidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kGameitemidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kAssociatedWorkshopFilesFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kPartnerAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request)
}
CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(const CWorkshop_SetItemPaymentRules_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      associated_workshop_files_(from.associated_workshop_files_),
      partner_accounts_(from.partner_accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request)
}

void CWorkshop_SetItemPaymentRules_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CWorkshop_SetItemPaymentRules_Request_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameitemid_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
}

CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request::SharedDtor() {
}

void CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_SetItemPaymentRules_Request& CWorkshop_SetItemPaymentRules_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_SetItemPaymentRules_Request_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_SetItemPaymentRules_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_workshop_files_.Clear();
  partner_accounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameitemid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_SetItemPaymentRules_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_SetItemPaymentRules_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gameitemid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameitemid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_InternalParse;
          object = msg->add_associated_workshop_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_InternalParse;
          object = msg->add_partner_accounts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_SetItemPaymentRules_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameitemid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_associated_workshop_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_partner_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->associated_workshop_files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->associated_workshop_files(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partner_accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->partner_accounts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Request)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->associated_workshop_files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->associated_workshop_files(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partner_accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->partner_accounts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->associated_workshop_files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->associated_workshop_files(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->partner_accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partner_accounts(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_workshop_files_.MergeFrom(from.associated_workshop_files_);
  partner_accounts_.MergeFrom(from.partner_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request::Swap(CWorkshop_SetItemPaymentRules_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request::InternalSwap(CWorkshop_SetItemPaymentRules_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&associated_workshop_files_)->InternalSwap(CastToBase(&other->associated_workshop_files_));
  CastToBase(&partner_accounts_)->InternalSwap(CastToBase(&other->partner_accounts_));
  swap(appid_, other->appid_);
  swap(gameitemid_, other->gameitemid_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CWorkshop_SetItemPaymentRules_Response::InitAsDefaultInstance() {
}
class CWorkshop_SetItemPaymentRules_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Response)
}
CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(const CWorkshop_SetItemPaymentRules_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Response)
}

void CWorkshop_SetItemPaymentRules_Response::SharedCtor() {
}

CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Response::SharedDtor() {
}

void CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CWorkshop_SetItemPaymentRules_Response& CWorkshop_SetItemPaymentRules_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CWorkshop_SetItemPaymentRules_Response_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CWorkshop_SetItemPaymentRules_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CWorkshop_SetItemPaymentRules_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CWorkshop_SetItemPaymentRules_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CWorkshop_SetItemPaymentRules_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Response)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Response::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Response::Swap(CWorkshop_SetItemPaymentRules_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Response::InternalSwap(CWorkshop_SetItemPaymentRules_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CBroadcast_PostGameDataFrame_Request::InitAsDefaultInstance() {
}
class CBroadcast_PostGameDataFrame_Request::HasBitSetters {
 public:
  static void set_has_appid(CBroadcast_PostGameDataFrame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steamid(CBroadcast_PostGameDataFrame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_broadcast_id(CBroadcast_PostGameDataFrame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_frame_data(CBroadcast_PostGameDataFrame_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostGameDataFrame_Request::kAppidFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kSteamidFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kBroadcastIdFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kFrameDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CBroadcast_PostGameDataFrame_Request)
}
CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request(const CBroadcast_PostGameDataFrame_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_data()) {
    frame_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_data_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CBroadcast_PostGameDataFrame_Request)
}

void CBroadcast_PostGameDataFrame_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CBroadcast_PostGameDataFrame_Request_gcsdk_5fgcmessages_2eproto.base);
  frame_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CBroadcast_PostGameDataFrame_Request::~CBroadcast_PostGameDataFrame_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CBroadcast_PostGameDataFrame_Request)
  SharedDtor();
}

void CBroadcast_PostGameDataFrame_Request::SharedDtor() {
  frame_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostGameDataFrame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBroadcast_PostGameDataFrame_Request& CBroadcast_PostGameDataFrame_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CBroadcast_PostGameDataFrame_Request_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CBroadcast_PostGameDataFrame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    frame_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CBroadcast_PostGameDataFrame_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CBroadcast_PostGameDataFrame_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes frame_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_frame_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CBroadcast_PostGameDataFrame_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes frame_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CBroadcast_PostGameDataFrame_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CBroadcast_PostGameDataFrame_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CBroadcast_PostGameDataFrame_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->broadcast_id(), output);
  }

  // optional bytes frame_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->frame_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CBroadcast_PostGameDataFrame_Request)
}

::google::protobuf::uint8* CBroadcast_PostGameDataFrame_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->broadcast_id(), target);
  }

  // optional bytes frame_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->frame_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CBroadcast_PostGameDataFrame_Request)
  return target;
}

size_t CBroadcast_PostGameDataFrame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes frame_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame_data());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostGameDataFrame_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CBroadcast_PostGameDataFrame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CBroadcast_PostGameDataFrame_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CBroadcast_PostGameDataFrame_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const CBroadcast_PostGameDataFrame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      frame_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const CBroadcast_PostGameDataFrame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostGameDataFrame_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostGameDataFrame_Request::Swap(CBroadcast_PostGameDataFrame_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostGameDataFrame_Request::InternalSwap(CBroadcast_PostGameDataFrame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frame_data_.Swap(&other->frame_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CBroadcast_PostGameDataFrame_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSerializedSOCache_TypeCache::InitAsDefaultInstance() {
}
class CMsgSerializedSOCache_TypeCache::HasBitSetters {
 public:
  static void set_has_type(CMsgSerializedSOCache_TypeCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(CMsgSerializedSOCache_TypeCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache_TypeCache::kTypeFieldNumber;
const int CMsgSerializedSOCache_TypeCache::kObjectsFieldNumber;
const int CMsgSerializedSOCache_TypeCache::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache.TypeCache)
}
CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache(const CMsgSerializedSOCache_TypeCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache.TypeCache)
}

void CMsgSerializedSOCache_TypeCache::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
}

CMsgSerializedSOCache_TypeCache::~CMsgSerializedSOCache_TypeCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache.TypeCache)
  SharedDtor();
}

void CMsgSerializedSOCache_TypeCache::SharedDtor() {
}

void CMsgSerializedSOCache_TypeCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSerializedSOCache_TypeCache& CMsgSerializedSOCache_TypeCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSerializedSOCache_TypeCache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSerializedSOCache_TypeCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSerializedSOCache_TypeCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSerializedSOCache_TypeCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes objects = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_objects();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_service_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSerializedSOCache_TypeCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache.TypeCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache.TypeCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSerializedSOCache_TypeCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated bytes objects = 2;
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->objects(i), output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache.TypeCache)
}

::google::protobuf::uint8* CMsgSerializedSOCache_TypeCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated bytes objects = 2;
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->objects(i), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache.TypeCache)
  return target;
}

size_t CMsgSerializedSOCache_TypeCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes objects = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->objects_size());
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->objects(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache_TypeCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_TypeCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSerializedSOCache_TypeCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache.TypeCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache.TypeCache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_TypeCache::MergeFrom(const CMsgSerializedSOCache_TypeCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_TypeCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_TypeCache::CopyFrom(const CMsgSerializedSOCache_TypeCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_TypeCache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_TypeCache::Swap(CMsgSerializedSOCache_TypeCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache_TypeCache::InternalSwap(CMsgSerializedSOCache_TypeCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(CastToBase(&other->objects_));
  swap(type_, other->type_);
  swap(service_id_, other->service_id_);
}

::google::protobuf::Metadata CMsgSerializedSOCache_TypeCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSerializedSOCache_Cache_Version::InitAsDefaultInstance() {
}
class CMsgSerializedSOCache_Cache_Version::HasBitSetters {
 public:
  static void set_has_service(CMsgSerializedSOCache_Cache_Version* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(CMsgSerializedSOCache_Cache_Version* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache_Cache_Version::kServiceFieldNumber;
const int CMsgSerializedSOCache_Cache_Version::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache.Cache.Version)
}
CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version(const CMsgSerializedSOCache_Cache_Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache.Cache.Version)
}

void CMsgSerializedSOCache_Cache_Version::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_) -
      reinterpret_cast<char*>(&version_)) + sizeof(service_));
}

CMsgSerializedSOCache_Cache_Version::~CMsgSerializedSOCache_Cache_Version() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache.Cache.Version)
  SharedDtor();
}

void CMsgSerializedSOCache_Cache_Version::SharedDtor() {
}

void CMsgSerializedSOCache_Cache_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSerializedSOCache_Cache_Version& CMsgSerializedSOCache_Cache_Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSerializedSOCache_Cache_Version_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSerializedSOCache_Cache_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSerializedSOCache_Cache_Version::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSerializedSOCache_Cache_Version*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 service = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_service(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSerializedSOCache_Cache_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_service(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache.Cache.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache.Cache.Version)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSerializedSOCache_Cache_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service(), output);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache.Cache.Version)
}

::google::protobuf::uint8* CMsgSerializedSOCache_Cache_Version::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache.Cache.Version)
  return target;
}

size_t CMsgSerializedSOCache_Cache_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint32 service = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache_Cache_Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_Cache_Version* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSerializedSOCache_Cache_Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache.Cache.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache.Cache.Version)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_Cache_Version::MergeFrom(const CMsgSerializedSOCache_Cache_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_ = from.service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_Cache_Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_Cache_Version::CopyFrom(const CMsgSerializedSOCache_Cache_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_Cache_Version::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_Cache_Version::Swap(CMsgSerializedSOCache_Cache_Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache_Cache_Version::InternalSwap(CMsgSerializedSOCache_Cache_Version* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
  swap(service_, other->service_);
}

::google::protobuf::Metadata CMsgSerializedSOCache_Cache_Version::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSerializedSOCache_Cache::InitAsDefaultInstance() {
}
class CMsgSerializedSOCache_Cache::HasBitSetters {
 public:
  static void set_has_type(CMsgSerializedSOCache_Cache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_id(CMsgSerializedSOCache_Cache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache_Cache::kTypeFieldNumber;
const int CMsgSerializedSOCache_Cache::kIdFieldNumber;
const int CMsgSerializedSOCache_Cache::kVersionsFieldNumber;
const int CMsgSerializedSOCache_Cache::kTypeCachesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache.Cache)
}
CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache(const CMsgSerializedSOCache_Cache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      versions_(from.versions_),
      type_caches_(from.type_caches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache.Cache)
}

void CMsgSerializedSOCache_Cache::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgSerializedSOCache_Cache::~CMsgSerializedSOCache_Cache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache.Cache)
  SharedDtor();
}

void CMsgSerializedSOCache_Cache::SharedDtor() {
}

void CMsgSerializedSOCache_Cache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSerializedSOCache_Cache& CMsgSerializedSOCache_Cache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSerializedSOCache_Cache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSerializedSOCache_Cache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  type_caches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSerializedSOCache_Cache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSerializedSOCache_Cache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSerializedSOCache_Cache_Version::_InternalParse;
          object = msg->add_versions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSerializedSOCache_TypeCache::_InternalParse;
          object = msg->add_type_caches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSerializedSOCache_Cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache.Cache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_type_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache.Cache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache.Cache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSerializedSOCache_Cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->versions(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_caches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->type_caches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache.Cache)
}

::google::protobuf::uint8* CMsgSerializedSOCache_Cache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->versions(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_caches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->type_caches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache.Cache)
  return target;
}

size_t CMsgSerializedSOCache_Cache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache.Cache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->versions(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->type_caches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->type_caches(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache_Cache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_Cache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSerializedSOCache_Cache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache.Cache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache.Cache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_Cache::MergeFrom(const CMsgSerializedSOCache_Cache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  type_caches_.MergeFrom(from.type_caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_Cache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_Cache::CopyFrom(const CMsgSerializedSOCache_Cache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_Cache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_Cache::Swap(CMsgSerializedSOCache_Cache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache_Cache::InternalSwap(CMsgSerializedSOCache_Cache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&versions_)->InternalSwap(CastToBase(&other->versions_));
  CastToBase(&type_caches_)->InternalSwap(CastToBase(&other->type_caches_));
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata CMsgSerializedSOCache_Cache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSerializedSOCache::InitAsDefaultInstance() {
}
class CMsgSerializedSOCache::HasBitSetters {
 public:
  static void set_has_file_version(CMsgSerializedSOCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gc_socache_file_version(CMsgSerializedSOCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache::kFileVersionFieldNumber;
const int CMsgSerializedSOCache::kCachesFieldNumber;
const int CMsgSerializedSOCache::kGcSocacheFileVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache::CMsgSerializedSOCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache)
}
CMsgSerializedSOCache::CMsgSerializedSOCache(const CMsgSerializedSOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      caches_(from.caches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_version_, &from.file_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&file_version_)) + sizeof(gc_socache_file_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache)
}

void CMsgSerializedSOCache::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSerializedSOCache_gcsdk_5fgcmessages_2eproto.base);
  ::memset(&file_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gc_socache_file_version_) -
      reinterpret_cast<char*>(&file_version_)) + sizeof(gc_socache_file_version_));
}

CMsgSerializedSOCache::~CMsgSerializedSOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache)
  SharedDtor();
}

void CMsgSerializedSOCache::SharedDtor() {
}

void CMsgSerializedSOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSerializedSOCache& CMsgSerializedSOCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSerializedSOCache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSerializedSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&file_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_socache_file_version_) -
        reinterpret_cast<char*>(&file_version_)) + sizeof(gc_socache_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSerializedSOCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSerializedSOCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 file_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_file_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSerializedSOCache_Cache::_InternalParse;
          object = msg->add_caches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 gc_socache_file_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_gc_socache_file_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSerializedSOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 file_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_file_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gc_socache_file_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_gc_socache_file_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_socache_file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSerializedSOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 file_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_version(), output);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->caches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->caches(static_cast<int>(i)),
      output);
  }

  // optional uint32 gc_socache_file_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gc_socache_file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache)
}

::google::protobuf::uint8* CMsgSerializedSOCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 file_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_version(), target);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->caches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->caches(static_cast<int>(i)), target);
  }

  // optional uint32 gc_socache_file_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gc_socache_file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache)
  return target;
}

size_t CMsgSerializedSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->caches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->caches(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 file_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_version());
    }

    // optional uint32 gc_socache_file_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_socache_file_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSerializedSOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache::MergeFrom(const CMsgSerializedSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caches_.MergeFrom(from.caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_version_ = from.file_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      gc_socache_file_version_ = from.gc_socache_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache::CopyFrom(const CMsgSerializedSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache::Swap(CMsgSerializedSOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache::InternalSwap(CMsgSerializedSOCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&caches_)->InternalSwap(CastToBase(&other->caches_));
  swap(file_version_, other->file_version_);
  swap(gc_socache_file_version_, other->gc_socache_file_version_);
}

::google::protobuf::Metadata CMsgSerializedSOCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPollConvarRequest::InitAsDefaultInstance() {
}
class CMsgGCToClientPollConvarRequest::HasBitSetters {
 public:
  static void set_has_convar_name(CMsgGCToClientPollConvarRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_poll_id(CMsgGCToClientPollConvarRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollConvarRequest::kConvarNameFieldNumber;
const int CMsgGCToClientPollConvarRequest::kPollIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollConvarRequest)
}
CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest(const CMsgGCToClientPollConvarRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  convar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_convar_name()) {
    convar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_name_);
  }
  poll_id_ = from.poll_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollConvarRequest)
}

void CMsgGCToClientPollConvarRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientPollConvarRequest_gcsdk_5fgcmessages_2eproto.base);
  convar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poll_id_ = 0u;
}

CMsgGCToClientPollConvarRequest::~CMsgGCToClientPollConvarRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollConvarRequest)
  SharedDtor();
}

void CMsgGCToClientPollConvarRequest::SharedDtor() {
  convar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollConvarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPollConvarRequest& CMsgGCToClientPollConvarRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPollConvarRequest_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPollConvarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollConvarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    convar_name_.ClearNonDefaultToEmptyNoArena();
  }
  poll_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPollConvarRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPollConvarRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string convar_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
        object = msg->mutable_convar_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 poll_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_poll_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPollConvarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollConvarRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string convar_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convar_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->convar_name().data(), static_cast<int>(this->convar_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 poll_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_poll_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollConvarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollConvarRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPollConvarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollConvarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string convar_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_name().data(), static_cast<int>(this->convar_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->convar_name(), output);
  }

  // optional uint32 poll_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->poll_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollConvarRequest)
}

::google::protobuf::uint8* CMsgGCToClientPollConvarRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollConvarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string convar_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_name().data(), static_cast<int>(this->convar_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->convar_name(), target);
  }

  // optional uint32 poll_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->poll_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollConvarRequest)
  return target;
}

size_t CMsgGCToClientPollConvarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollConvarRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string convar_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->convar_name());
    }

    // optional uint32 poll_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollConvarRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollConvarRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPollConvarRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollConvarRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollConvarRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollConvarRequest::MergeFrom(const CMsgGCToClientPollConvarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      convar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollConvarRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollConvarRequest::CopyFrom(const CMsgGCToClientPollConvarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollConvarRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollConvarRequest::Swap(CMsgGCToClientPollConvarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollConvarRequest::InternalSwap(CMsgGCToClientPollConvarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  convar_name_.Swap(&other->convar_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(poll_id_, other->poll_id_);
}

::google::protobuf::Metadata CMsgGCToClientPollConvarRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPollConvarResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientPollConvarResponse::HasBitSetters {
 public:
  static void set_has_poll_id(CMsgGCToClientPollConvarResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_convar_value(CMsgGCToClientPollConvarResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollConvarResponse::kPollIdFieldNumber;
const int CMsgGCToClientPollConvarResponse::kConvarValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollConvarResponse)
}
CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse(const CMsgGCToClientPollConvarResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  convar_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_convar_value()) {
    convar_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_value_);
  }
  poll_id_ = from.poll_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollConvarResponse)
}

void CMsgGCToClientPollConvarResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientPollConvarResponse_gcsdk_5fgcmessages_2eproto.base);
  convar_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poll_id_ = 0u;
}

CMsgGCToClientPollConvarResponse::~CMsgGCToClientPollConvarResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollConvarResponse)
  SharedDtor();
}

void CMsgGCToClientPollConvarResponse::SharedDtor() {
  convar_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollConvarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPollConvarResponse& CMsgGCToClientPollConvarResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPollConvarResponse_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPollConvarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollConvarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    convar_value_.ClearNonDefaultToEmptyNoArena();
  }
  poll_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPollConvarResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPollConvarResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 poll_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_poll_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string convar_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
        object = msg->mutable_convar_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPollConvarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollConvarResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poll_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_poll_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string convar_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convar_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->convar_value().data(), static_cast<int>(this->convar_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollConvarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollConvarResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPollConvarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollConvarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poll_id(), output);
  }

  // optional string convar_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_value().data(), static_cast<int>(this->convar_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->convar_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollConvarResponse)
}

::google::protobuf::uint8* CMsgGCToClientPollConvarResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollConvarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poll_id(), target);
  }

  // optional string convar_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_value().data(), static_cast<int>(this->convar_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->convar_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollConvarResponse)
  return target;
}

size_t CMsgGCToClientPollConvarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollConvarResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string convar_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->convar_value());
    }

    // optional uint32 poll_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollConvarResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollConvarResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPollConvarResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollConvarResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollConvarResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollConvarResponse::MergeFrom(const CMsgGCToClientPollConvarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      convar_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollConvarResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollConvarResponse::CopyFrom(const CMsgGCToClientPollConvarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollConvarResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollConvarResponse::Swap(CMsgGCToClientPollConvarResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollConvarResponse::InternalSwap(CMsgGCToClientPollConvarResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  convar_value_.Swap(&other->convar_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(poll_id_, other->poll_id_);
}

::google::protobuf::Metadata CMsgGCToClientPollConvarResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgCompressedMsgToClient::InitAsDefaultInstance() {
}
class CGCMsgCompressedMsgToClient::HasBitSetters {
 public:
  static void set_has_msg_id(CGCMsgCompressedMsgToClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_compressed_msg(CGCMsgCompressedMsgToClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgCompressedMsgToClient::kMsgIdFieldNumber;
const int CGCMsgCompressedMsgToClient::kCompressedMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgCompressedMsgToClient::CGCMsgCompressedMsgToClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgCompressedMsgToClient)
}
CGCMsgCompressedMsgToClient::CGCMsgCompressedMsgToClient(const CGCMsgCompressedMsgToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compressed_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_compressed_msg()) {
    compressed_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compressed_msg_);
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgCompressedMsgToClient)
}

void CGCMsgCompressedMsgToClient::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGCMsgCompressedMsgToClient_gcsdk_5fgcmessages_2eproto.base);
  compressed_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
}

CGCMsgCompressedMsgToClient::~CGCMsgCompressedMsgToClient() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgCompressedMsgToClient)
  SharedDtor();
}

void CGCMsgCompressedMsgToClient::SharedDtor() {
  compressed_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgCompressedMsgToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCMsgCompressedMsgToClient& CGCMsgCompressedMsgToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCMsgCompressedMsgToClient_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCMsgCompressedMsgToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgCompressedMsgToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    compressed_msg_.ClearNonDefaultToEmptyNoArena();
  }
  msg_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCMsgCompressedMsgToClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCMsgCompressedMsgToClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_msg_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes compressed_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_compressed_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCMsgCompressedMsgToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgCompressedMsgToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_msg_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes compressed_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compressed_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgCompressedMsgToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgCompressedMsgToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCMsgCompressedMsgToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgCompressedMsgToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // optional bytes compressed_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->compressed_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgCompressedMsgToClient)
}

::google::protobuf::uint8* CGCMsgCompressedMsgToClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgCompressedMsgToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // optional bytes compressed_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->compressed_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgCompressedMsgToClient)
  return target;
}

size_t CGCMsgCompressedMsgToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgCompressedMsgToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes compressed_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->compressed_msg());
    }

    // optional uint32 msg_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgCompressedMsgToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgCompressedMsgToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgCompressedMsgToClient* source =
      ::google::protobuf::DynamicCastToGenerated<CGCMsgCompressedMsgToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgCompressedMsgToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgCompressedMsgToClient)
    MergeFrom(*source);
  }
}

void CGCMsgCompressedMsgToClient::MergeFrom(const CGCMsgCompressedMsgToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgCompressedMsgToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      compressed_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compressed_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgCompressedMsgToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgCompressedMsgToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgCompressedMsgToClient::CopyFrom(const CGCMsgCompressedMsgToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgCompressedMsgToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgCompressedMsgToClient::IsInitialized() const {
  return true;
}

void CGCMsgCompressedMsgToClient::Swap(CGCMsgCompressedMsgToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgCompressedMsgToClient::InternalSwap(CGCMsgCompressedMsgToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  compressed_msg_.Swap(&other->compressed_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata CGCMsgCompressedMsgToClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCMasterBroadcastMessage::InitAsDefaultInstance() {
}
class CMsgGCToGCMasterBroadcastMessage::HasBitSetters {
 public:
  static void set_has_users_per_second(CMsgGCToGCMasterBroadcastMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_send_to_users(CMsgGCToGCMasterBroadcastMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_send_to_servers(CMsgGCToGCMasterBroadcastMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_msg_id(CMsgGCToGCMasterBroadcastMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_msg_data(CMsgGCToGCMasterBroadcastMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCMasterBroadcastMessage::kUsersPerSecondFieldNumber;
const int CMsgGCToGCMasterBroadcastMessage::kSendToUsersFieldNumber;
const int CMsgGCToGCMasterBroadcastMessage::kSendToServersFieldNumber;
const int CMsgGCToGCMasterBroadcastMessage::kMsgIdFieldNumber;
const int CMsgGCToGCMasterBroadcastMessage::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCMasterBroadcastMessage::CMsgGCToGCMasterBroadcastMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCMasterBroadcastMessage)
}
CMsgGCToGCMasterBroadcastMessage::CMsgGCToGCMasterBroadcastMessage(const CMsgGCToGCMasterBroadcastMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_data()) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  ::memcpy(&users_per_second_, &from.users_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&users_per_second_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCMasterBroadcastMessage)
}

void CMsgGCToGCMasterBroadcastMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCMasterBroadcastMessage_gcsdk_5fgcmessages_2eproto.base);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&users_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&users_per_second_)) + sizeof(msg_id_));
}

CMsgGCToGCMasterBroadcastMessage::~CMsgGCToGCMasterBroadcastMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  SharedDtor();
}

void CMsgGCToGCMasterBroadcastMessage::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCMasterBroadcastMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCMasterBroadcastMessage& CMsgGCToGCMasterBroadcastMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCMasterBroadcastMessage_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCMasterBroadcastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&users_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_id_) -
        reinterpret_cast<char*>(&users_per_second_)) + sizeof(msg_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCMasterBroadcastMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCMasterBroadcastMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 users_per_second = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_users_per_second(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool send_to_users = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_send_to_users(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool send_to_servers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_send_to_servers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 msg_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_msg_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes msg_data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_msg_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCMasterBroadcastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 users_per_second = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_users_per_second(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &users_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_to_users = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_send_to_users(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_to_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_to_servers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_send_to_servers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_to_servers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msg_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_msg_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCMasterBroadcastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 users_per_second = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->users_per_second(), output);
  }

  // optional bool send_to_users = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_to_users(), output);
  }

  // optional bool send_to_servers = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->send_to_servers(), output);
  }

  // optional uint32 msg_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id(), output);
  }

  // optional bytes msg_data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCMasterBroadcastMessage)
}

::google::protobuf::uint8* CMsgGCToGCMasterBroadcastMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 users_per_second = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->users_per_second(), target);
  }

  // optional bool send_to_users = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_to_users(), target);
  }

  // optional bool send_to_servers = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->send_to_servers(), target);
  }

  // optional uint32 msg_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msg_id(), target);
  }

  // optional bytes msg_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  return target;
}

size_t CMsgGCToGCMasterBroadcastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes msg_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional uint32 users_per_second = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->users_per_second());
    }

    // optional bool send_to_users = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool send_to_servers = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 msg_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterBroadcastMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterBroadcastMessage* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCMasterBroadcastMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCMasterBroadcastMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCMasterBroadcastMessage)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterBroadcastMessage::MergeFrom(const CMsgGCToGCMasterBroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      users_per_second_ = from.users_per_second_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_to_users_ = from.send_to_users_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_to_servers_ = from.send_to_servers_;
    }
    if (cached_has_bits & 0x00000010u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterBroadcastMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterBroadcastMessage::CopyFrom(const CMsgGCToGCMasterBroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCMasterBroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterBroadcastMessage::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterBroadcastMessage::Swap(CMsgGCToGCMasterBroadcastMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCMasterBroadcastMessage::InternalSwap(CMsgGCToGCMasterBroadcastMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_data_.Swap(&other->msg_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(users_per_second_, other->users_per_second_);
  swap(send_to_users_, other->send_to_users_);
  swap(send_to_servers_, other->send_to_servers_);
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata CMsgGCToGCMasterBroadcastMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCMasterSubscribeToCache::InitAsDefaultInstance() {
}
class CMsgGCToGCMasterSubscribeToCache::HasBitSetters {
 public:
  static void set_has_soid_type(CMsgGCToGCMasterSubscribeToCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_soid_id(CMsgGCToGCMasterSubscribeToCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCMasterSubscribeToCache::kSoidTypeFieldNumber;
const int CMsgGCToGCMasterSubscribeToCache::kSoidIdFieldNumber;
const int CMsgGCToGCMasterSubscribeToCache::kAccountIdsFieldNumber;
const int CMsgGCToGCMasterSubscribeToCache::kSteamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCMasterSubscribeToCache::CMsgGCToGCMasterSubscribeToCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCMasterSubscribeToCache)
}
CMsgGCToGCMasterSubscribeToCache::CMsgGCToGCMasterSubscribeToCache(const CMsgGCToGCMasterSubscribeToCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&soid_id_, &from.soid_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCMasterSubscribeToCache)
}

void CMsgGCToGCMasterSubscribeToCache::SharedCtor() {
  ::memset(&soid_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soid_type_) -
      reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
}

CMsgGCToGCMasterSubscribeToCache::~CMsgGCToGCMasterSubscribeToCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  SharedDtor();
}

void CMsgGCToGCMasterSubscribeToCache::SharedDtor() {
}

void CMsgGCToGCMasterSubscribeToCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCMasterSubscribeToCache& CMsgGCToGCMasterSubscribeToCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCMasterSubscribeToCache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCMasterSubscribeToCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soid_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soid_type_) -
        reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCMasterSubscribeToCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCMasterSubscribeToCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 soid_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_soid_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 soid_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_soid_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated uint32 account_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 steam_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 33) {
          do {
            msg->add_steam_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 33 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steam_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCMasterSubscribeToCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 soid_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_soid_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soid_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 soid_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_soid_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &soid_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steam_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33u, input, this->mutable_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCMasterSubscribeToCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->soid_type(), output);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->soid_id(), output);
  }

  // repeated uint32 account_ids = 3;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->account_ids(i), output);
  }

  // repeated fixed64 steam_ids = 4;
  for (int i = 0, n = this->steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->steam_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCMasterSubscribeToCache)
}

::google::protobuf::uint8* CMsgGCToGCMasterSubscribeToCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->soid_type(), target);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->soid_id(), target);
  }

  // repeated uint32 account_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->account_ids_, target);

  // repeated fixed64 steam_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(4, this->steam_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  return target;
}

size_t CMsgGCToGCMasterSubscribeToCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 soid_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 soid_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soid_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterSubscribeToCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterSubscribeToCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCMasterSubscribeToCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCMasterSubscribeToCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCMasterSubscribeToCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterSubscribeToCache::MergeFrom(const CMsgGCToGCMasterSubscribeToCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  steam_ids_.MergeFrom(from.steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soid_id_ = from.soid_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      soid_type_ = from.soid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterSubscribeToCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterSubscribeToCache::CopyFrom(const CMsgGCToGCMasterSubscribeToCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterSubscribeToCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterSubscribeToCache::Swap(CMsgGCToGCMasterSubscribeToCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCMasterSubscribeToCache::InternalSwap(CMsgGCToGCMasterSubscribeToCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  swap(soid_id_, other->soid_id_);
  swap(soid_type_, other->soid_type_);
}

::google::protobuf::Metadata CMsgGCToGCMasterSubscribeToCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCMasterSubscribeToCacheResponse::InitAsDefaultInstance() {
}
class CMsgGCToGCMasterSubscribeToCacheResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCMasterSubscribeToCacheResponse::CMsgGCToGCMasterSubscribeToCacheResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
}
CMsgGCToGCMasterSubscribeToCacheResponse::CMsgGCToGCMasterSubscribeToCacheResponse(const CMsgGCToGCMasterSubscribeToCacheResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
}

void CMsgGCToGCMasterSubscribeToCacheResponse::SharedCtor() {
}

CMsgGCToGCMasterSubscribeToCacheResponse::~CMsgGCToGCMasterSubscribeToCacheResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  SharedDtor();
}

void CMsgGCToGCMasterSubscribeToCacheResponse::SharedDtor() {
}

void CMsgGCToGCMasterSubscribeToCacheResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCMasterSubscribeToCacheResponse& CMsgGCToGCMasterSubscribeToCacheResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCMasterSubscribeToCacheResponse_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCMasterSubscribeToCacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCMasterSubscribeToCacheResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCMasterSubscribeToCacheResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCMasterSubscribeToCacheResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCMasterSubscribeToCacheResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
}

::google::protobuf::uint8* CMsgGCToGCMasterSubscribeToCacheResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  return target;
}

size_t CMsgGCToGCMasterSubscribeToCacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterSubscribeToCacheResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterSubscribeToCacheResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCMasterSubscribeToCacheResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterSubscribeToCacheResponse::MergeFrom(const CMsgGCToGCMasterSubscribeToCacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCMasterSubscribeToCacheResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterSubscribeToCacheResponse::CopyFrom(const CMsgGCToGCMasterSubscribeToCacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterSubscribeToCacheResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterSubscribeToCacheResponse::Swap(CMsgGCToGCMasterSubscribeToCacheResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCMasterSubscribeToCacheResponse::InternalSwap(CMsgGCToGCMasterSubscribeToCacheResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCToGCMasterSubscribeToCacheResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCMasterSubscribeToCacheAsync::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCToGCMasterSubscribeToCacheAsync_default_instance_._instance.get_mutable()->subscribe_msg_ = const_cast< ::proto::dota::CMsgGCToGCMasterSubscribeToCache*>(
      ::proto::dota::CMsgGCToGCMasterSubscribeToCache::internal_default_instance());
}
class CMsgGCToGCMasterSubscribeToCacheAsync::HasBitSetters {
 public:
  static const ::proto::dota::CMsgGCToGCMasterSubscribeToCache& subscribe_msg(const CMsgGCToGCMasterSubscribeToCacheAsync* msg);
  static void set_has_subscribe_msg(CMsgGCToGCMasterSubscribeToCacheAsync* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgGCToGCMasterSubscribeToCache&
CMsgGCToGCMasterSubscribeToCacheAsync::HasBitSetters::subscribe_msg(const CMsgGCToGCMasterSubscribeToCacheAsync* msg) {
  return *msg->subscribe_msg_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCMasterSubscribeToCacheAsync::kSubscribeMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCMasterSubscribeToCacheAsync::CMsgGCToGCMasterSubscribeToCacheAsync()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
}
CMsgGCToGCMasterSubscribeToCacheAsync::CMsgGCToGCMasterSubscribeToCacheAsync(const CMsgGCToGCMasterSubscribeToCacheAsync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscribe_msg()) {
    subscribe_msg_ = new ::proto::dota::CMsgGCToGCMasterSubscribeToCache(*from.subscribe_msg_);
  } else {
    subscribe_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
}

void CMsgGCToGCMasterSubscribeToCacheAsync::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCMasterSubscribeToCacheAsync_gcsdk_5fgcmessages_2eproto.base);
  subscribe_msg_ = nullptr;
}

CMsgGCToGCMasterSubscribeToCacheAsync::~CMsgGCToGCMasterSubscribeToCacheAsync() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  SharedDtor();
}

void CMsgGCToGCMasterSubscribeToCacheAsync::SharedDtor() {
  if (this != internal_default_instance()) delete subscribe_msg_;
}

void CMsgGCToGCMasterSubscribeToCacheAsync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCMasterSubscribeToCacheAsync& CMsgGCToGCMasterSubscribeToCacheAsync::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCMasterSubscribeToCacheAsync_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCMasterSubscribeToCacheAsync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(subscribe_msg_ != nullptr);
    subscribe_msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCMasterSubscribeToCacheAsync::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCMasterSubscribeToCacheAsync*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgGCToGCMasterSubscribeToCache::_InternalParse;
        object = msg->mutable_subscribe_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCMasterSubscribeToCacheAsync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribe_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCMasterSubscribeToCacheAsync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::subscribe_msg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
}

::google::protobuf::uint8* CMsgGCToGCMasterSubscribeToCacheAsync::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::subscribe_msg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  return target;
}

size_t CMsgGCToGCMasterSubscribeToCacheAsync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *subscribe_msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterSubscribeToCacheAsync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterSubscribeToCacheAsync* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCMasterSubscribeToCacheAsync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterSubscribeToCacheAsync::MergeFrom(const CMsgGCToGCMasterSubscribeToCacheAsync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscribe_msg()) {
    mutable_subscribe_msg()->::proto::dota::CMsgGCToGCMasterSubscribeToCache::MergeFrom(from.subscribe_msg());
  }
}

void CMsgGCToGCMasterSubscribeToCacheAsync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterSubscribeToCacheAsync::CopyFrom(const CMsgGCToGCMasterSubscribeToCacheAsync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCMasterSubscribeToCacheAsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterSubscribeToCacheAsync::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterSubscribeToCacheAsync::Swap(CMsgGCToGCMasterSubscribeToCacheAsync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCMasterSubscribeToCacheAsync::InternalSwap(CMsgGCToGCMasterSubscribeToCacheAsync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subscribe_msg_, other->subscribe_msg_);
}

::google::protobuf::Metadata CMsgGCToGCMasterSubscribeToCacheAsync::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCMasterUnsubscribeFromCache::InitAsDefaultInstance() {
}
class CMsgGCToGCMasterUnsubscribeFromCache::HasBitSetters {
 public:
  static void set_has_soid_type(CMsgGCToGCMasterUnsubscribeFromCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_soid_id(CMsgGCToGCMasterUnsubscribeFromCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCMasterUnsubscribeFromCache::kSoidTypeFieldNumber;
const int CMsgGCToGCMasterUnsubscribeFromCache::kSoidIdFieldNumber;
const int CMsgGCToGCMasterUnsubscribeFromCache::kAccountIdsFieldNumber;
const int CMsgGCToGCMasterUnsubscribeFromCache::kSteamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCMasterUnsubscribeFromCache::CMsgGCToGCMasterUnsubscribeFromCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
}
CMsgGCToGCMasterUnsubscribeFromCache::CMsgGCToGCMasterUnsubscribeFromCache(const CMsgGCToGCMasterUnsubscribeFromCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&soid_id_, &from.soid_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
}

void CMsgGCToGCMasterUnsubscribeFromCache::SharedCtor() {
  ::memset(&soid_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soid_type_) -
      reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
}

CMsgGCToGCMasterUnsubscribeFromCache::~CMsgGCToGCMasterUnsubscribeFromCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  SharedDtor();
}

void CMsgGCToGCMasterUnsubscribeFromCache::SharedDtor() {
}

void CMsgGCToGCMasterUnsubscribeFromCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCMasterUnsubscribeFromCache& CMsgGCToGCMasterUnsubscribeFromCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCMasterUnsubscribeFromCache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCMasterUnsubscribeFromCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soid_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soid_type_) -
        reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCMasterUnsubscribeFromCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCMasterUnsubscribeFromCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 soid_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_soid_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 soid_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_soid_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated uint32 account_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 steam_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 33) {
          do {
            msg->add_steam_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 33 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steam_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCMasterUnsubscribeFromCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 soid_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_soid_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soid_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 soid_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_soid_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &soid_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steam_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33u, input, this->mutable_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCMasterUnsubscribeFromCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->soid_type(), output);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->soid_id(), output);
  }

  // repeated uint32 account_ids = 3;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->account_ids(i), output);
  }

  // repeated fixed64 steam_ids = 4;
  for (int i = 0, n = this->steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->steam_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
}

::google::protobuf::uint8* CMsgGCToGCMasterUnsubscribeFromCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->soid_type(), target);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->soid_id(), target);
  }

  // repeated uint32 account_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->account_ids_, target);

  // repeated fixed64 steam_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(4, this->steam_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  return target;
}

size_t CMsgGCToGCMasterUnsubscribeFromCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 soid_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 soid_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soid_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterUnsubscribeFromCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterUnsubscribeFromCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCMasterUnsubscribeFromCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterUnsubscribeFromCache::MergeFrom(const CMsgGCToGCMasterUnsubscribeFromCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  steam_ids_.MergeFrom(from.steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soid_id_ = from.soid_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      soid_type_ = from.soid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterUnsubscribeFromCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterUnsubscribeFromCache::CopyFrom(const CMsgGCToGCMasterUnsubscribeFromCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCMasterUnsubscribeFromCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterUnsubscribeFromCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterUnsubscribeFromCache::Swap(CMsgGCToGCMasterUnsubscribeFromCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCMasterUnsubscribeFromCache::InternalSwap(CMsgGCToGCMasterUnsubscribeFromCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  swap(soid_id_, other->soid_id_);
  swap(soid_type_, other->soid_type_);
}

::google::protobuf::Metadata CMsgGCToGCMasterUnsubscribeFromCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCMasterDestroyCache::InitAsDefaultInstance() {
}
class CMsgGCToGCMasterDestroyCache::HasBitSetters {
 public:
  static void set_has_soid_type(CMsgGCToGCMasterDestroyCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_soid_id(CMsgGCToGCMasterDestroyCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCMasterDestroyCache::kSoidTypeFieldNumber;
const int CMsgGCToGCMasterDestroyCache::kSoidIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCMasterDestroyCache::CMsgGCToGCMasterDestroyCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCMasterDestroyCache)
}
CMsgGCToGCMasterDestroyCache::CMsgGCToGCMasterDestroyCache(const CMsgGCToGCMasterDestroyCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&soid_id_, &from.soid_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCMasterDestroyCache)
}

void CMsgGCToGCMasterDestroyCache::SharedCtor() {
  ::memset(&soid_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soid_type_) -
      reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
}

CMsgGCToGCMasterDestroyCache::~CMsgGCToGCMasterDestroyCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCMasterDestroyCache)
  SharedDtor();
}

void CMsgGCToGCMasterDestroyCache::SharedDtor() {
}

void CMsgGCToGCMasterDestroyCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCMasterDestroyCache& CMsgGCToGCMasterDestroyCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCMasterDestroyCache_gcsdk_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCMasterDestroyCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soid_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soid_type_) -
        reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCMasterDestroyCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCMasterDestroyCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 soid_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_soid_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 soid_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_soid_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCMasterDestroyCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 soid_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_soid_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soid_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 soid_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_soid_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &soid_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCMasterDestroyCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCMasterDestroyCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCMasterDestroyCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->soid_type(), output);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->soid_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCMasterDestroyCache)
}

::google::protobuf::uint8* CMsgGCToGCMasterDestroyCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->soid_type(), target);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->soid_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCMasterDestroyCache)
  return target;
}

size_t CMsgGCToGCMasterDestroyCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 soid_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 soid_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soid_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterDestroyCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterDestroyCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCMasterDestroyCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCMasterDestroyCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCMasterDestroyCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterDestroyCache::MergeFrom(const CMsgGCToGCMasterDestroyCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soid_id_ = from.soid_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      soid_type_ = from.soid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterDestroyCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterDestroyCache::CopyFrom(const CMsgGCToGCMasterDestroyCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCMasterDestroyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterDestroyCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterDestroyCache::Swap(CMsgGCToGCMasterDestroyCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCMasterDestroyCache::InternalSwap(CMsgGCToGCMasterDestroyCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(soid_id_, other->soid_id_);
  swap(soid_type_, other->soid_type_);
}

::google::protobuf::Metadata CMsgGCToGCMasterDestroyCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gcsdk_5fgcmessages_2eproto);
  return ::file_level_metadata_gcsdk_5fgcmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSHA1Digest* Arena::CreateMaybeMessage< ::proto::dota::CMsgSHA1Digest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSHA1Digest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOIDOwner* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOIDOwner >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOIDOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOSingleObject* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOSingleObject >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOSingleObject >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOMultipleObjects_SingleObject* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOMultipleObjects_SingleObject >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOMultipleObjects_SingleObject >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOMultipleObjects* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOMultipleObjects >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOMultipleObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheSubscribed_SubscribedType* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheSubscribed_SubscribedType >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheSubscribed_SubscribedType >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheSubscribed* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheSubscribed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheSubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheSubscribedUpToDate* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheSubscribedUpToDate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheSubscribedUpToDate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheUnsubscribed* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheUnsubscribed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheUnsubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheSubscriptionCheck* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheSubscriptionCheck >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheSubscriptionCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheSubscriptionRefresh* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheSubscriptionRefresh >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheSubscriptionRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheVersion* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheVersion >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCMultiplexMessage* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCMultiplexMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCMultiplexMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCSubGCStarting* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCSubGCStarting >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCSubGCStarting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgMasterAck_Process* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgMasterAck_Process >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgMasterAck_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgMasterAck* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgMasterAck >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgMasterAck >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgMasterAck_Response* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgMasterAck_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgMasterAck_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCUniverseStartup* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCUniverseStartup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCUniverseStartup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCUniverseStartupResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCUniverseStartupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCUniverseStartupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgMasterStartupComplete* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgMasterStartupComplete >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgMasterStartupComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgRouted* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgRouted >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgRouted >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCToGCMsgRoutedReply* Arena::CreateMaybeMessage< ::proto::dota::CGCToGCMsgRoutedReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCToGCMsgRoutedReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCUpdateSubGCSessionInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCUpdateSubGCSessionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCUpdateSubGCSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCRequestSubGCSessionInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCRequestSubGCSessionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCRequestSubGCSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCRequestSubGCSessionInfoResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCRequestSubGCSessionInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCRequestSubGCSessionInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSOCacheHaveVersion* Arena::CreateMaybeMessage< ::proto::dota::CMsgSOCacheHaveVersion >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSOCacheHaveVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientHello* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientHello >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientWelcome_Location* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientWelcome_Location >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientWelcome_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientWelcome* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientWelcome >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientWelcome >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgConnectionStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgConnectionStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgConnectionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCSOCacheSubscribe* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCSOCacheSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCSOCacheSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCSOCacheUnsubscribe* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCSOCacheUnsubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCSOCacheUnsubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCClientPing* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCClientPing >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCClientPing >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCForwardAccountDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCForwardAccountDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCForwardAccountDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCLoadSessionSOCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCLoadSessionSOCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCLoadSessionSOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCLoadSessionSOCacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCUpdateSessionStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCUpdateSessionStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCUpdateSessionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_PopulateItemDescriptions_Request* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_GetContributors_Request* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_GetContributors_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_GetContributors_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_GetContributors_Response* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_GetContributors_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_GetContributors_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_SetItemPaymentRules_Request* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_SetItemPaymentRules_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_SetItemPaymentRules_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CWorkshop_SetItemPaymentRules_Response* Arena::CreateMaybeMessage< ::proto::dota::CWorkshop_SetItemPaymentRules_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CWorkshop_SetItemPaymentRules_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CBroadcast_PostGameDataFrame_Request* Arena::CreateMaybeMessage< ::proto::dota::CBroadcast_PostGameDataFrame_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CBroadcast_PostGameDataFrame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSerializedSOCache_TypeCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgSerializedSOCache_TypeCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSerializedSOCache_TypeCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSerializedSOCache_Cache_Version* Arena::CreateMaybeMessage< ::proto::dota::CMsgSerializedSOCache_Cache_Version >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSerializedSOCache_Cache_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSerializedSOCache_Cache* Arena::CreateMaybeMessage< ::proto::dota::CMsgSerializedSOCache_Cache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSerializedSOCache_Cache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSerializedSOCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgSerializedSOCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSerializedSOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPollConvarRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPollConvarRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPollConvarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPollConvarResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPollConvarResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPollConvarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CGCMsgCompressedMsgToClient* Arena::CreateMaybeMessage< ::proto::dota::CGCMsgCompressedMsgToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCMsgCompressedMsgToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCMasterBroadcastMessage* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCMasterBroadcastMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCMasterBroadcastMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCMasterSubscribeToCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCMasterSubscribeToCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCMasterSubscribeToCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCMasterSubscribeToCacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCMasterSubscribeToCacheAsync >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCMasterUnsubscribeFromCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCMasterDestroyCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCMasterDestroyCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCMasterDestroyCache >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
