// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamworkssdk.proto

#include "steammessages_publishedfile.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
namespace proto {
namespace dota {
class CPublishedFile_Subscribe_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Subscribe_Request> _instance;
} _CPublishedFile_Subscribe_Request_default_instance_;
class CPublishedFile_Subscribe_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Subscribe_Response> _instance;
} _CPublishedFile_Subscribe_Response_default_instance_;
class CPublishedFile_Unsubscribe_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Unsubscribe_Request> _instance;
} _CPublishedFile_Unsubscribe_Request_default_instance_;
class CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Unsubscribe_Response> _instance;
} _CPublishedFile_Unsubscribe_Response_default_instance_;
class CPublishedFile_Publish_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Publish_Request> _instance;
} _CPublishedFile_Publish_Request_default_instance_;
class CPublishedFile_Publish_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Publish_Response> _instance;
} _CPublishedFile_Publish_Response_default_instance_;
class CPublishedFile_GetDetails_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetDetails_Request> _instance;
} _CPublishedFile_GetDetails_Request_default_instance_;
class PublishedFileDetails_TagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_Tag> _instance;
} _PublishedFileDetails_Tag_default_instance_;
class PublishedFileDetails_PreviewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_Preview> _instance;
} _PublishedFileDetails_Preview_default_instance_;
class PublishedFileDetails_ChildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_Child> _instance;
} _PublishedFileDetails_Child_default_instance_;
class PublishedFileDetails_KVTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_KVTag> _instance;
} _PublishedFileDetails_KVTag_default_instance_;
class PublishedFileDetails_VoteDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_VoteData> _instance;
} _PublishedFileDetails_VoteData_default_instance_;
class PublishedFileDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails> _instance;
} _PublishedFileDetails_default_instance_;
class CPublishedFile_GetDetails_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetDetails_Response> _instance;
} _CPublishedFile_GetDetails_Response_default_instance_;
class CPublishedFile_GetUserFiles_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Request> _instance;
} _CPublishedFile_GetUserFiles_Request_default_instance_;
class CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Response_App> _instance;
} _CPublishedFile_GetUserFiles_Response_App_default_instance_;
class CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Response> _instance;
} _CPublishedFile_GetUserFiles_Response_default_instance_;
class CPublishedFile_Update_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Update_Request> _instance;
} _CPublishedFile_Update_Request_default_instance_;
class CPublishedFile_Update_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Update_Response> _instance;
} _CPublishedFile_Update_Response_default_instance_;
class CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_RefreshVotingQueue_Request> _instance;
} _CPublishedFile_RefreshVotingQueue_Request_default_instance_;
class CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_RefreshVotingQueue_Response> _instance;
} _CPublishedFile_RefreshVotingQueue_Response_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCPublishedFile_Subscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Subscribe_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Subscribe_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Subscribe_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Subscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Subscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_Subscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Subscribe_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Subscribe_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Subscribe_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Subscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Subscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_Unsubscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Unsubscribe_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Unsubscribe_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Unsubscribe_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Unsubscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Unsubscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_Unsubscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Unsubscribe_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Unsubscribe_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Unsubscribe_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Unsubscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Unsubscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_Publish_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Publish_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Publish_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Publish_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Publish_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Publish_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_Publish_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Publish_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Publish_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Publish_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Publish_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Publish_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_GetDetails_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_GetDetails_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_GetDetails_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_GetDetails_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_GetDetails_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_GetDetails_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsPublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_PublishedFileDetails_Tag_default_instance_;
    new (ptr) ::proto::dota::PublishedFileDetails_Tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::PublishedFileDetails_Tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsPublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_PublishedFileDetails_Preview_default_instance_;
    new (ptr) ::proto::dota::PublishedFileDetails_Preview();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::PublishedFileDetails_Preview::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsPublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_PublishedFileDetails_Child_default_instance_;
    new (ptr) ::proto::dota::PublishedFileDetails_Child();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::PublishedFileDetails_Child::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsPublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_PublishedFileDetails_KVTag_default_instance_;
    new (ptr) ::proto::dota::PublishedFileDetails_KVTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::PublishedFileDetails_KVTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsPublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_PublishedFileDetails_VoteData_default_instance_;
    new (ptr) ::proto::dota::PublishedFileDetails_VoteData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::PublishedFileDetails_VoteData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsPublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_PublishedFileDetails_default_instance_;
    new (ptr) ::proto::dota::PublishedFileDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::PublishedFileDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {
      &scc_info_PublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,
      &scc_info_PublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,
      &scc_info_PublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,
      &scc_info_PublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,
      &scc_info_PublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,}};

static void InitDefaultsCPublishedFile_GetDetails_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_GetDetails_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_GetDetails_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_GetDetails_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPublishedFile_GetDetails_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPublishedFile_GetDetails_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {
      &scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,}};

static void InitDefaultsCPublishedFile_GetUserFiles_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.DefaultConstruct();
  *::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get_mutable() = ::std::string("lastupdated", 11);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get_mutable());
  {
    void* ptr = &::proto::dota::_CPublishedFile_GetUserFiles_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_GetUserFiles_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_GetUserFiles_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_GetUserFiles_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_GetUserFiles_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_GetUserFiles_Response_App_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_GetUserFiles_Response_App();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_GetUserFiles_Response_App::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_GetUserFiles_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_GetUserFiles_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_GetUserFiles_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_GetUserFiles_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CPublishedFile_GetUserFiles_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCPublishedFile_GetUserFiles_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {
      &scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,
      &scc_info_CPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base,}};

static void InitDefaultsCPublishedFile_Update_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Update_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Update_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Update_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Update_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Update_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_Update_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_Update_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_Update_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_Update_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_Update_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_Update_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_RefreshVotingQueue_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_RefreshVotingQueue_Request_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_RefreshVotingQueue_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_RefreshVotingQueue_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_RefreshVotingQueue_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_RefreshVotingQueue_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

static void InitDefaultsCPublishedFile_RefreshVotingQueue_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CPublishedFile_RefreshVotingQueue_Response_default_instance_;
    new (ptr) ::proto::dota::CPublishedFile_RefreshVotingQueue_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CPublishedFile_RefreshVotingQueue_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPublishedFile_RefreshVotingQueue_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPublishedFile_RefreshVotingQueue_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto}, {}};

void InitDefaults_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Subscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Subscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Unsubscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Unsubscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Publish_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Publish_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_GetDetails_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_GetDetails_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_GetUserFiles_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_GetUserFiles_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Update_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_Update_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_RefreshVotingQueue_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPublishedFile_RefreshVotingQueue_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[21];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Request, list_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Subscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Request, list_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Unsubscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, consumer_appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, cloudfilename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, preview_cloudfilename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, title_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, file_description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, file_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, consumer_shortcut_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, youtube_username_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, youtube_videoid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, visibility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, collection_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, game_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Request, url_),
  11,
  12,
  0,
  1,
  2,
  3,
  13,
  4,
  5,
  6,
  14,
  7,
  ~0u,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Response, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Publish_Response, redirect_uri_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, publishedfileids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, includetags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, includeadditionalpreviews_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, includechildren_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, includekvtags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, includevotes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Request, short_description_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Tag, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Tag, adminonly_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, previewid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, sortorder_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, size_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Preview, youtubevideoid_),
  3,
  4,
  0,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Child, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Child, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Child, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Child, sortorder_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_Child, file_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_KVTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_KVTag, key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_KVTag, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_VoteData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_VoteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_VoteData, score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_VoteData, votes_up_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails_VoteData, votes_down_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, creator_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, creator_appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, consumer_appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, consumer_shortcutid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, preview_file_size_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, file_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, preview_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, youtubevideoid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, hcontent_file_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, hcontent_preview_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, title_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, file_description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, short_description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, time_updated_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, visibility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, workshop_file_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, workshop_accepted_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, show_subscribe_all_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, num_comments_developer_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, num_comments_public_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, banned_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, ban_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, banner_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, can_be_deleted_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, incompatible_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, app_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, file_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, can_subscribe_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, favorited_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, followers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, lifetime_subscriptions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, lifetime_favorited_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, lifetime_followers_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, views_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, image_width_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, image_height_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, image_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, spoiler_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, shortcutname_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, num_children_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, num_reports_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, previews_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, children_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, kvtags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, vote_data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::PublishedFileDetails, time_subscribed_),
  14,
  13,
  16,
  15,
  17,
  18,
  0,
  19,
  20,
  1,
  2,
  3,
  4,
  21,
  22,
  5,
  6,
  7,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  31,
  33,
  30,
  8,
  32,
  36,
  37,
  9,
  34,
  38,
  35,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  10,
  39,
  48,
  11,
  49,
  50,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  12,
  51,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetDetails_Response, publishedfiledetails_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, page_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, numperpage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, sortmethod_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, totalonly_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, privacy_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, ids_only_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, requiredtags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Request, excludedtags_),
  1,
  5,
  6,
  0,
  2,
  4,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response_App, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response_App, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response_App, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response_App, private__),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response, total_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response, startindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response, publishedfiledetails_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_GetUserFiles_Response, apps_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, title_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, file_description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, visibility_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Request, preview_filename_),
  5,
  4,
  0,
  1,
  6,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_Update_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, matching_file_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, match_all_tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, excluded_tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Request, desired_queue_size_),
  0,
  1,
  ~0u,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CPublishedFile_RefreshVotingQueue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::dota::CPublishedFile_Subscribe_Request)},
  { 13, 18, sizeof(::proto::dota::CPublishedFile_Subscribe_Response)},
  { 18, 27, sizeof(::proto::dota::CPublishedFile_Unsubscribe_Request)},
  { 31, 36, sizeof(::proto::dota::CPublishedFile_Unsubscribe_Response)},
  { 36, 57, sizeof(::proto::dota::CPublishedFile_Publish_Request)},
  { 73, 80, sizeof(::proto::dota::CPublishedFile_Publish_Response)},
  { 82, 94, sizeof(::proto::dota::CPublishedFile_GetDetails_Request)},
  { 101, 108, sizeof(::proto::dota::PublishedFileDetails_Tag)},
  { 110, 121, sizeof(::proto::dota::PublishedFileDetails_Preview)},
  { 127, 135, sizeof(::proto::dota::PublishedFileDetails_Child)},
  { 138, 145, sizeof(::proto::dota::PublishedFileDetails_KVTag)},
  { 147, 155, sizeof(::proto::dota::PublishedFileDetails_VoteData)},
  { 158, 219, sizeof(::proto::dota::PublishedFileDetails)},
  { 275, 281, sizeof(::proto::dota::CPublishedFile_GetDetails_Response)},
  { 282, 296, sizeof(::proto::dota::CPublishedFile_GetUserFiles_Request)},
  { 305, 314, sizeof(::proto::dota::CPublishedFile_GetUserFiles_Response_App)},
  { 318, 327, sizeof(::proto::dota::CPublishedFile_GetUserFiles_Response)},
  { 331, 344, sizeof(::proto::dota::CPublishedFile_Update_Request)},
  { 352, 357, sizeof(::proto::dota::CPublishedFile_Update_Response)},
  { 357, 368, sizeof(::proto::dota::CPublishedFile_RefreshVotingQueue_Request)},
  { 374, 379, sizeof(::proto::dota::CPublishedFile_RefreshVotingQueue_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Subscribe_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Subscribe_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Unsubscribe_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Unsubscribe_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Publish_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Publish_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_GetDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_PublishedFileDetails_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_PublishedFileDetails_Preview_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_PublishedFileDetails_Child_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_PublishedFileDetails_KVTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_PublishedFileDetails_VoteData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_PublishedFileDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_GetDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_GetUserFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_GetUserFiles_Response_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_GetUserFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Update_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_Update_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_RefreshVotingQueue_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CPublishedFile_RefreshVotingQueue_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = {
  {}, AddDescriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, "steammessages_publishedfile.steamworkssdk.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto::offsets,
  file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, 21, file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, file_level_service_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto,
};

const char descriptor_table_protodef_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[] =
  "\n/steammessages_publishedfile.steamworks"
  "sdk.proto\022\nproto.dota\032.steammessages_uni"
  "fied_base.steamworkssdk.proto\"t\n CPublis"
  "hedFile_Subscribe_Request\022\027\n\017publishedfi"
  "leid\030\001 \001(\004\022\021\n\tlist_type\030\002 \001(\r\022\r\n\005appid\030\003"
  " \001(\005\022\025\n\rnotify_client\030\004 \001(\010\"#\n!CPublishe"
  "dFile_Subscribe_Response\"v\n\"CPublishedFi"
  "le_Unsubscribe_Request\022\027\n\017publishedfilei"
  "d\030\001 \001(\004\022\021\n\tlist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001("
  "\005\022\025\n\rnotify_client\030\004 \001(\010\"%\n#CPublishedFi"
  "le_Unsubscribe_Response\"\314\n\n\036CPublishedFi"
  "le_Publish_Request\022<\n\005appid\030\001 \001(\rB-\202\265\030)A"
  "pp Id this file is being published FROM."
  "\022C\n\016consumer_appid\030\002 \001(\rB+\202\265\030\'App Id thi"
  "s file is being published TO.\022K\n\rcloudfi"
  "lename\030\003 \001(\tB4\202\265\0300Name of the file to pu"
  "blish in the user\'s cloud.\022[\n\025preview_cl"
  "oudfilename\030\004 \001(\tB<\202\265\0308Name of the file "
  "to use as the published file\'s preview.\022"
  "5\n\005title\030\005 \001(\tB&\202\265\030\"Text title for the p"
  "ublished file.\022F\n\020file_description\030\006 \001(\t"
  "B,\202\265\030(Text description for the published"
  " file.\022L\n\tfile_type\030\007 \001(\rB9\202\265\0305(EWorksho"
  "pFileType) Type of Workshop file to publ"
  "ish.\022I\n\026consumer_shortcut_name\030\010 \001(\tB)\202\265"
  "\030%Shortcut name for the published file.\022"
  "I\n\020youtube_username\030\t \001(\tB/\202\265\030+(Optional"
  ") User\'s YouTube account username.\022\\\n\017yo"
  "utube_videoid\030\n \001(\tBC\202\265\030\?(Optional) Vide"
  "o Id of a YouTube video for this publish"
  "ed file.\022\201\001\n\nvisibility\030\013 \001(\rBm\202\265\030i(ERem"
  "oteStoragePublishedFileVisibility) Visib"
  "ility of the published file (private, fr"
  "iends, public, etc.)\022k\n\014redirect_uri\030\014 \001"
  "(\tBU\202\265\030Q(Optional) If supplied, the resu"
  "lting published file\'s Id is appended to"
  " the URI.\022D\n\004tags\030\r \003(\tB6\202\265\0302Array of te"
  "xt tags to apply to the published file.\022"
  "Y\n\017collection_type\030\016 \001(\tB@\202\265\030<(Optional)"
  " Type of collection the published file r"
  "epresents.\022M\n\tgame_type\030\017 \001(\tB:\202\265\0306(Opti"
  "onal) Type of game the published file re"
  "presents.\022[\n\003url\030\020 \001(\tBN\202\265\030J(Optional) I"
  "f this represents a game, this is the UR"
  "L to that game\'s page.\"P\n\037CPublishedFile"
  "_Publish_Response\022\027\n\017publishedfileid\030\001 \001"
  "(\004\022\024\n\014redirect_uri\030\002 \001(\t\"\204\005\n!CPublishedF"
  "ile_GetDetails_Request\022P\n\020publishedfilei"
  "ds\030\001 \003(\006B6\202\265\0302Set of published file Ids "
  "to retrieve details for.\022Q\n\013includetags\030"
  "\002 \001(\010B<\202\265\0308If true, return tag informati"
  "on in the returned details.\022c\n\031includead"
  "ditionalpreviews\030\003 \001(\010B@\202\265\030<If true, ret"
  "urn preview information in the returned "
  "details.\022N\n\017includechildren\030\004 \001(\010B5\202\265\0301I"
  "f true, return children in the returned "
  "details.\022R\n\rincludekvtags\030\005 \001(\010B;\202\265\0307If "
  "true, return key value tags in the retur"
  "ned details.\022L\n\014includevotes\030\006 \001(\010B6\202\265\0302"
  "If true, return vote data in the returne"
  "d details.\022c\n\021short_description\030\010 \001(\010BH\202"
  "\265\030DIf true, return a short description i"
  "nstead of the full description.\"\300\016\n\024Publ"
  "ishedFileDetails\022\016\n\006result\030\001 \001(\r\022\027\n\017publ"
  "ishedfileid\030\002 \001(\004\022\017\n\007creator\030\003 \001(\006\022\025\n\rcr"
  "eator_appid\030\004 \001(\r\022\026\n\016consumer_appid\030\005 \001("
  "\r\022\033\n\023consumer_shortcutid\030\006 \001(\r\022\020\n\010filena"
  "me\030\007 \001(\t\022\021\n\tfile_size\030\010 \001(\004\022\031\n\021preview_f"
  "ile_size\030\t \001(\004\022\020\n\010file_url\030\n \001(\t\022\023\n\013prev"
  "iew_url\030\013 \001(\t\022\026\n\016youtubevideoid\030\014 \001(\t\022\013\n"
  "\003url\030\r \001(\t\022\025\n\rhcontent_file\030\016 \001(\006\022\030\n\020hco"
  "ntent_preview\030\017 \001(\006\022\r\n\005title\030\020 \001(\t\022\030\n\020fi"
  "le_description\030\021 \001(\t\022\031\n\021short_descriptio"
  "n\030\022 \001(\t\022\024\n\014time_created\030\023 \001(\r\022\024\n\014time_up"
  "dated\030\024 \001(\r\022\022\n\nvisibility\030\025 \001(\r\022\r\n\005flags"
  "\030\026 \001(\r\022\025\n\rworkshop_file\030\027 \001(\010\022\031\n\021worksho"
  "p_accepted\030\030 \001(\010\022\032\n\022show_subscribe_all\030\031"
  " \001(\010\022\036\n\026num_comments_developer\030\032 \001(\005\022\033\n\023"
  "num_comments_public\030\033 \001(\005\022\016\n\006banned\030\034 \001("
  "\010\022\022\n\nban_reason\030\035 \001(\t\022\016\n\006banner\030\036 \001(\006\022\026\n"
  "\016can_be_deleted\030\037 \001(\010\022\024\n\014incompatible\030  "
  "\001(\010\022\020\n\010app_name\030! \001(\t\022\021\n\tfile_type\030\" \001(\r"
  "\022\025\n\rcan_subscribe\030# \001(\010\022\025\n\rsubscriptions"
  "\030$ \001(\r\022\021\n\tfavorited\030% \001(\r\022\021\n\tfollowers\030&"
  " \001(\r\022\036\n\026lifetime_subscriptions\030\' \001(\r\022\032\n\022"
  "lifetime_favorited\030( \001(\r\022\032\n\022lifetime_fol"
  "lowers\030) \001(\r\022\r\n\005views\030* \001(\r\022\023\n\013image_wid"
  "th\030+ \001(\r\022\024\n\014image_height\030, \001(\r\022\021\n\timage_"
  "url\030- \001(\t\022\023\n\013spoiler_tag\030. \001(\010\022\022\n\nshortc"
  "utid\030/ \001(\r\022\024\n\014shortcutname\0300 \001(\t\022\024\n\014num_"
  "children\0301 \001(\r\022\023\n\013num_reports\0302 \001(\r\022:\n\010p"
  "reviews\0303 \003(\0132(.proto.dota.PublishedFile"
  "Details.Preview\0222\n\004tags\0304 \003(\0132$.proto.do"
  "ta.PublishedFileDetails.Tag\0228\n\010children\030"
  "5 \003(\0132&.proto.dota.PublishedFileDetails."
  "Child\0226\n\006kvtags\0306 \003(\0132&.proto.dota.Publi"
  "shedFileDetails.KVTag\022<\n\tvote_data\0307 \001(\013"
  "2).proto.dota.PublishedFileDetails.VoteD"
  "ata\022r\n\017time_subscribed\0308 \001(\rBY\202\265\030UOnly v"
  "alid in PublishedFile.GetUserFiles and n"
  "ot normal PublishedFile.GetDetail calls\032"
  "%\n\003Tag\022\013\n\003tag\030\001 \001(\t\022\021\n\tadminonly\030\002 \001(\010\032t"
  "\n\007Preview\022\021\n\tpreviewid\030\001 \001(\004\022\021\n\tsortorde"
  "r\030\002 \001(\r\022\013\n\003url\030\003 \001(\t\022\014\n\004size\030\004 \001(\r\022\020\n\010fi"
  "lename\030\005 \001(\t\022\026\n\016youtubevideoid\030\006 \001(\t\032F\n\005"
  "Child\022\027\n\017publishedfileid\030\001 \001(\004\022\021\n\tsortor"
  "der\030\002 \001(\r\022\021\n\tfile_type\030\003 \001(\r\032#\n\005KVTag\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\?\n\010VoteData\022\r\n"
  "\005score\030\001 \001(\002\022\020\n\010votes_up\030\002 \001(\r\022\022\n\nvotes_"
  "down\030\003 \001(\r\"d\n\"CPublishedFile_GetDetails_"
  "Response\022>\n\024publishedfiledetails\030\001 \003(\0132 "
  ".proto.dota.PublishedFileDetails\"\273\006\n#CPu"
  "blishedFile_GetUserFiles_Request\022;\n\005appi"
  "d\030\001 \001(\rB,\202\265\030(App Id to retrieve publishe"
  "d files from.\022:\n\004page\030\003 \001(\r:\0011B)\202\265\030%(Opt"
  "ional) Starting page for results.\022P\n\nnum"
  "perpage\030\004 \001(\r:\0011B9\202\265\0305(Optional) The num"
  "ber of results, per page to return.\022Y\n\ns"
  "ortmethod\030\006 \001(\t:\013lastupdatedB8\202\265\0304(Optio"
  "nal) Sorting method to use on returned v"
  "alues.\022i\n\ttotalonly\030\007 \001(\010BV\202\265\030R(Optional"
  ") If true, only return the total number "
  "of files that satisfy this query.\022;\n\007pri"
  "vacy\030\t \001(\rB*\202\265\030&(optional) Filter by pri"
  "vacy settings.\022n\n\010ids_only\030\n \001(\010B\\\202\265\030X(O"
  "ptional) If true, only return the publis"
  "hed file ids of files that satisfy this "
  "query.\022h\n\014requiredtags\030\013 \003(\tBR\202\265\030N(Optio"
  "nal) Tags that must be present on a publ"
  "ished file to satisfy the query.\022l\n\014excl"
  "udedtags\030\014 \003(\tBV\202\265\030R(Optional) Tags that"
  " must NOT be present on a published file"
  " to satisfy the query.\"\226\002\n$CPublishedFil"
  "e_GetUserFiles_Response\022\r\n\005total\030\001 \001(\r\022\022"
  "\n\nstartindex\030\002 \001(\r\022>\n\024publishedfiledetai"
  "ls\030\003 \003(\0132 .proto.dota.PublishedFileDetai"
  "ls\022B\n\004apps\030\004 \003(\01324.proto.dota.CPublished"
  "File_GetUserFiles_Response.App\032G\n\003App\022\r\n"
  "\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\nshortcutid"
  "\030\003 \001(\r\022\017\n\007private\030\004 \001(\010\"\317\004\n\035CPublishedFi"
  "le_Update_Request\0229\n\005appid\030\001 \001(\rB*\202\265\030&Ap"
  "p Id this published file belongs to.\022L\n\017"
  "publishedfileid\030\002 \001(\006B3\202\265\030/Published fil"
  "e id of the file we\'d like update.\022:\n\005ti"
  "tle\030\003 \001(\tB+\202\265\030\'(Optional) Title of the p"
  "ublished file.\022K\n\020file_description\030\004 \001(\t"
  "B1\202\265\030-(Optional) Description of the publ"
  "ished file.\022D\n\nvisibility\030\005 \001(\rB0\202\265\030,(Op"
  "tional) Visibility of the published file"
  ".\022@\n\004tags\030\006 \003(\tB2\202\265\030.(Optional) Set of t"
  "ags for the published file.\022A\n\010filename\030"
  "\007 \001(\tB/\202\265\030+(Optional) Filename for the p"
  "ublished file.\022Q\n\020preview_filename\030\010 \001(\t"
  "B7\202\265\0303(Optional) Preview filename for th"
  "e published file.\" \n\036CPublishedFile_Upda"
  "te_Response\"\273\004\n)CPublishedFile_RefreshVo"
  "tingQueue_Request\022\r\n\005appid\030\001 \001(\r\022B\n\022matc"
  "hing_file_type\030\002 \001(\rB&\202\265\030\"EPublishedFile"
  "InfoMatchingFileType\022l\n\004tags\030\003 \003(\tB^\202\265\030Z"
  "Include files that have all the tags or "
  "any of the tags if match_all_tags is set"
  " to false.\022\225\001\n\016match_all_tags\030\004 \001(\010:\004tru"
  "eBw\202\265\030sIf true, then files must have all"
  " the tags specified.  If false, then mus"
  "t have at least one of the tags specifie"
  "d.\022I\n\rexcluded_tags\030\005 \003(\tB2\202\265\030.Exclude a"
  "ny files that have any of these tags.\022j\n"
  "\022desired_queue_size\030\006 \001(\rBN\202\265\030JDesired n"
  "umber of items in the voting queue.  May"
  " be clamped by the server\",\n*CPublishedF"
  "ile_RefreshVotingQueue_Response2\236\t\n\rPubl"
  "ishedFile\022\227\001\n\tSubscribe\022,.proto.dota.CPu"
  "blishedFile_Subscribe_Request\032-.proto.do"
  "ta.CPublishedFile_Subscribe_Response\"-\202\265"
  "\030)Subscribes the user to the published f"
  "ile\022\241\001\n\013Unsubscribe\022..proto.dota.CPublis"
  "hedFile_Unsubscribe_Request\032/.proto.dota"
  ".CPublishedFile_Unsubscribe_Response\"1\202\265"
  "\030-Unsubscribes the user from the publish"
  "ed file\022\226\001\n\007Publish\022*.proto.dota.CPublis"
  "hedFile_Publish_Request\032+.proto.dota.CPu"
  "blishedFile_Publish_Response\"2\202\265\030.Publis"
  "hes a clouded user file to the Workshop."
  "\022\246\001\n\nGetDetails\022-.proto.dota.CPublishedF"
  "ile_GetDetails_Request\032..proto.dota.CPub"
  "lishedFile_GetDetails_Response\"9\202\265\0305Retr"
  "ieves information about a set of publish"
  "ed files.\022\233\001\n\014GetUserFiles\022/.proto.dota."
  "CPublishedFile_GetUserFiles_Request\0320.pr"
  "oto.dota.CPublishedFile_GetUserFiles_Res"
  "ponse\"(\202\265\030$Retrieves files published by "
  "a user.\022\220\001\n\006Update\022).proto.dota.CPublish"
  "edFile_Update_Request\032*.proto.dota.CPubl"
  "ishedFile_Update_Response\"/\202\265\030+Updates i"
  "nformation about a published file.\022\256\001\n\022R"
  "efreshVotingQueue\0225.proto.dota.CPublishe"
  "dFile_RefreshVotingQueue_Request\0326.proto"
  ".dota.CPublishedFile_RefreshVotingQueue_"
  "Response\")\202\265\030%Refresh the voting queue f"
  "or the user\032+\202\265\030\'A service to access pub"
  "lished file data"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = {
  false, InitDefaults_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, 
  descriptor_table_protodef_steammessages_5fpublishedfile_2esteamworkssdk_2eproto,
  "steammessages_publishedfile.steamworkssdk.proto", &assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, 8016,
};

void AddDescriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamworkssdk_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = []() { AddDescriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto(); return true; }();
namespace proto {
namespace dota {

// ===================================================================

void CPublishedFile_Subscribe_Request::InitAsDefaultInstance() {
}
class CPublishedFile_Subscribe_Request::HasBitSetters {
 public:
  static void set_has_publishedfileid(CPublishedFile_Subscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_list_type(CPublishedFile_Subscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_appid(CPublishedFile_Subscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_notify_client(CPublishedFile_Subscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Subscribe_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Subscribe_Request::kListTypeFieldNumber;
const int CPublishedFile_Subscribe_Request::kAppidFieldNumber;
const int CPublishedFile_Subscribe_Request::kNotifyClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Subscribe_Request)
}
CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Subscribe_Request)
}

void CPublishedFile_Subscribe_Request::SharedCtor() {
  ::memset(&publishedfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notify_client_) -
      reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
}

CPublishedFile_Subscribe_Request::~CPublishedFile_Subscribe_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Subscribe_Request)
  SharedDtor();
}

void CPublishedFile_Subscribe_Request::SharedDtor() {
}

void CPublishedFile_Subscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Subscribe_Request& CPublishedFile_Subscribe_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Subscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Subscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Subscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_client_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Subscribe_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Subscribe_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_publishedfileid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 list_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_list_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 appid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool notify_client = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_notify_client(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Subscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Subscribe_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_publishedfileid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 list_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_list_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify_client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_notify_client(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Subscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Subscribe_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Subscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Subscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->list_type(), output);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notify_client(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Subscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_Subscribe_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Subscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notify_client(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Subscribe_Request)
  return target;
}

size_t CPublishedFile_Subscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Subscribe_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional int32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool notify_client = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Subscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Subscribe_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Subscribe_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Subscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Request::MergeFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Subscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Request::CopyFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Request::Swap(CPublishedFile_Subscribe_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Subscribe_Request::InternalSwap(CPublishedFile_Subscribe_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
  swap(list_type_, other->list_type_);
  swap(appid_, other->appid_);
  swap(notify_client_, other->notify_client_);
}

::google::protobuf::Metadata CPublishedFile_Subscribe_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Subscribe_Response::InitAsDefaultInstance() {
}
class CPublishedFile_Subscribe_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Subscribe_Response)
}
CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Subscribe_Response)
}

void CPublishedFile_Subscribe_Response::SharedCtor() {
}

CPublishedFile_Subscribe_Response::~CPublishedFile_Subscribe_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Subscribe_Response)
  SharedDtor();
}

void CPublishedFile_Subscribe_Response::SharedDtor() {
}

void CPublishedFile_Subscribe_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Subscribe_Response& CPublishedFile_Subscribe_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Subscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Subscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Subscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Subscribe_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Subscribe_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Subscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Subscribe_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Subscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Subscribe_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Subscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Subscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Subscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_Subscribe_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Subscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Subscribe_Response)
  return target;
}

size_t CPublishedFile_Subscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Subscribe_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Subscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Subscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Subscribe_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Subscribe_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Subscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Response::MergeFrom(const CPublishedFile_Subscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Subscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Subscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Subscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Response::CopyFrom(const CPublishedFile_Subscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Subscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Response::Swap(CPublishedFile_Subscribe_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Subscribe_Response::InternalSwap(CPublishedFile_Subscribe_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPublishedFile_Subscribe_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Unsubscribe_Request::InitAsDefaultInstance() {
}
class CPublishedFile_Unsubscribe_Request::HasBitSetters {
 public:
  static void set_has_publishedfileid(CPublishedFile_Unsubscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_list_type(CPublishedFile_Unsubscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_appid(CPublishedFile_Unsubscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_notify_client(CPublishedFile_Unsubscribe_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Unsubscribe_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kListTypeFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kAppidFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kNotifyClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Unsubscribe_Request)
}
CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Unsubscribe_Request)
}

void CPublishedFile_Unsubscribe_Request::SharedCtor() {
  ::memset(&publishedfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notify_client_) -
      reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
}

CPublishedFile_Unsubscribe_Request::~CPublishedFile_Unsubscribe_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Unsubscribe_Request)
  SharedDtor();
}

void CPublishedFile_Unsubscribe_Request::SharedDtor() {
}

void CPublishedFile_Unsubscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Unsubscribe_Request& CPublishedFile_Unsubscribe_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Unsubscribe_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Unsubscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_client_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Unsubscribe_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Unsubscribe_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_publishedfileid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 list_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_list_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 appid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool notify_client = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_notify_client(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Unsubscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_publishedfileid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 list_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_list_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify_client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_notify_client(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Unsubscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Unsubscribe_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Unsubscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->list_type(), output);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notify_client(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Unsubscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_Unsubscribe_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notify_client(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Unsubscribe_Request)
  return target;
}

size_t CPublishedFile_Unsubscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional int32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool notify_client = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Unsubscribe_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Unsubscribe_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Unsubscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Request::Swap(CPublishedFile_Unsubscribe_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Unsubscribe_Request::InternalSwap(CPublishedFile_Unsubscribe_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
  swap(list_type_, other->list_type_);
  swap(appid_, other->appid_);
  swap(notify_client_, other->notify_client_);
}

::google::protobuf::Metadata CPublishedFile_Unsubscribe_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Unsubscribe_Response::InitAsDefaultInstance() {
}
class CPublishedFile_Unsubscribe_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Unsubscribe_Response)
}
CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Unsubscribe_Response)
}

void CPublishedFile_Unsubscribe_Response::SharedCtor() {
}

CPublishedFile_Unsubscribe_Response::~CPublishedFile_Unsubscribe_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Unsubscribe_Response)
  SharedDtor();
}

void CPublishedFile_Unsubscribe_Response::SharedDtor() {
}

void CPublishedFile_Unsubscribe_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Unsubscribe_Response& CPublishedFile_Unsubscribe_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Unsubscribe_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Unsubscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Unsubscribe_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Unsubscribe_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Unsubscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Unsubscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Unsubscribe_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Unsubscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Unsubscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_Unsubscribe_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Unsubscribe_Response)
  return target;
}

size_t CPublishedFile_Unsubscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Unsubscribe_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Unsubscribe_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Unsubscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const CPublishedFile_Unsubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const CPublishedFile_Unsubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Unsubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Response::Swap(CPublishedFile_Unsubscribe_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Unsubscribe_Response::InternalSwap(CPublishedFile_Unsubscribe_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPublishedFile_Unsubscribe_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Publish_Request::InitAsDefaultInstance() {
}
class CPublishedFile_Publish_Request::HasBitSetters {
 public:
  static void set_has_appid(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_consumer_appid(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_cloudfilename(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_preview_cloudfilename(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_title(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_file_description(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_file_type(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_consumer_shortcut_name(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_youtube_username(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_youtube_videoid(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_visibility(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_redirect_uri(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_collection_type(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_game_type(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_url(CPublishedFile_Publish_Request* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Publish_Request::kAppidFieldNumber;
const int CPublishedFile_Publish_Request::kConsumerAppidFieldNumber;
const int CPublishedFile_Publish_Request::kCloudfilenameFieldNumber;
const int CPublishedFile_Publish_Request::kPreviewCloudfilenameFieldNumber;
const int CPublishedFile_Publish_Request::kTitleFieldNumber;
const int CPublishedFile_Publish_Request::kFileDescriptionFieldNumber;
const int CPublishedFile_Publish_Request::kFileTypeFieldNumber;
const int CPublishedFile_Publish_Request::kConsumerShortcutNameFieldNumber;
const int CPublishedFile_Publish_Request::kYoutubeUsernameFieldNumber;
const int CPublishedFile_Publish_Request::kYoutubeVideoidFieldNumber;
const int CPublishedFile_Publish_Request::kVisibilityFieldNumber;
const int CPublishedFile_Publish_Request::kRedirectUriFieldNumber;
const int CPublishedFile_Publish_Request::kTagsFieldNumber;
const int CPublishedFile_Publish_Request::kCollectionTypeFieldNumber;
const int CPublishedFile_Publish_Request::kGameTypeFieldNumber;
const int CPublishedFile_Publish_Request::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Publish_Request::CPublishedFile_Publish_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Publish_Request)
}
CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cloudfilename()) {
    cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloudfilename_);
  }
  preview_cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_cloudfilename()) {
    preview_cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_cloudfilename_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_description()) {
    file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
  }
  consumer_shortcut_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_consumer_shortcut_name()) {
    consumer_shortcut_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_shortcut_name_);
  }
  youtube_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtube_username()) {
    youtube_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_username_);
  }
  youtube_videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtube_videoid()) {
    youtube_videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_videoid_);
  }
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_uri()) {
    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  collection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_collection_type()) {
    collection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_type_);
  }
  game_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_type()) {
    game_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_type_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Publish_Request)
}

void CPublishedFile_Publish_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_Publish_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_shortcut_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
}

CPublishedFile_Publish_Request::~CPublishedFile_Publish_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Publish_Request)
  SharedDtor();
}

void CPublishedFile_Publish_Request::SharedDtor() {
  cloudfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_shortcut_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Publish_Request& CPublishedFile_Publish_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Publish_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Publish_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Publish_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cloudfilename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      preview_cloudfilename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      file_description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      consumer_shortcut_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      youtube_username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      youtube_videoid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      redirect_uri_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      collection_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      game_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Publish_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Publish_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this file is being published FROM."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 consumer_appid = 2 [(.proto.dota.description) = "App Id this file is being published TO."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_consumer_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string cloudfilename = 3 [(.proto.dota.description) = "Name of the file to publish in the user\'s cloud."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.cloudfilename");
        object = msg->mutable_cloudfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string preview_cloudfilename = 4 [(.proto.dota.description) = "Name of the file to use as the published file\'s preview."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.preview_cloudfilename");
        object = msg->mutable_preview_cloudfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string title = 5 [(.proto.dota.description) = "Text title for the published file."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string file_description = 6 [(.proto.dota.description) = "Text description for the published file."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.file_description");
        object = msg->mutable_file_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 file_type = 7 [(.proto.dota.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_file_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string consumer_shortcut_name = 8 [(.proto.dota.description) = "Shortcut name for the published file."];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.consumer_shortcut_name");
        object = msg->mutable_consumer_shortcut_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string youtube_username = 9 [(.proto.dota.description) = "(Optional) User\'s YouTube account username."];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.youtube_username");
        object = msg->mutable_youtube_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string youtube_videoid = 10 [(.proto.dota.description) = "(Optional) Video Id of a YouTube video for this published file."];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.youtube_videoid");
        object = msg->mutable_youtube_videoid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 visibility = 11 [(.proto.dota.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_visibility(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string redirect_uri = 12 [(.proto.dota.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.redirect_uri");
        object = msg->mutable_redirect_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string tags = 13 [(.proto.dota.description) = "Array of text tags to apply to the published file."];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // optional string collection_type = 14 [(.proto.dota.description) = "(Optional) Type of collection the published file represents."];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.collection_type");
        object = msg->mutable_collection_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string game_type = 15 [(.proto.dota.description) = "(Optional) Type of game the published file represents."];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.game_type");
        object = msg->mutable_game_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 16 [(.proto.dota.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Request.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Publish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Publish_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this file is being published FROM."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 consumer_appid = 2 [(.proto.dota.description) = "App Id this file is being published TO."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_consumer_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cloudfilename = 3 [(.proto.dota.description) = "Name of the file to publish in the user\'s cloud."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloudfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cloudfilename().data(), static_cast<int>(this->cloudfilename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.cloudfilename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preview_cloudfilename = 4 [(.proto.dota.description) = "Name of the file to use as the published file\'s preview."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_cloudfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_cloudfilename().data(), static_cast<int>(this->preview_cloudfilename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.preview_cloudfilename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5 [(.proto.dota.description) = "Text title for the published file."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_description = 6 [(.proto.dota.description) = "Text description for the published file."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), static_cast<int>(this->file_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.file_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_type = 7 [(.proto.dota.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_file_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string consumer_shortcut_name = 8 [(.proto.dota.description) = "Shortcut name for the published file."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_shortcut_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->consumer_shortcut_name().data(), static_cast<int>(this->consumer_shortcut_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.consumer_shortcut_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtube_username = 9 [(.proto.dota.description) = "(Optional) User\'s YouTube account username."];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_username().data(), static_cast<int>(this->youtube_username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.youtube_username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtube_videoid = 10 [(.proto.dota.description) = "(Optional) Video Id of a YouTube video for this published file."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_videoid().data(), static_cast<int>(this->youtube_videoid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.youtube_videoid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visibility = 11 [(.proto.dota.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_visibility(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_uri = 12 [(.proto.dota.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.redirect_uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 13 [(.proto.dota.description) = "Array of text tags to apply to the published file."];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string collection_type = 14 [(.proto.dota.description) = "(Optional) Type of collection the published file represents."];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collection_type().data(), static_cast<int>(this->collection_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.collection_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_type = 15 [(.proto.dota.description) = "(Optional) Type of game the published file represents."];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_type().data(), static_cast<int>(this->game_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.game_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 16 [(.proto.dota.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Request.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Publish_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Publish_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Publish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Publish_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this file is being published FROM."];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 consumer_appid = 2 [(.proto.dota.description) = "App Id this file is being published TO."];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consumer_appid(), output);
  }

  // optional string cloudfilename = 3 [(.proto.dota.description) = "Name of the file to publish in the user\'s cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudfilename().data(), static_cast<int>(this->cloudfilename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.cloudfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cloudfilename(), output);
  }

  // optional string preview_cloudfilename = 4 [(.proto.dota.description) = "Name of the file to use as the published file\'s preview."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_cloudfilename().data(), static_cast<int>(this->preview_cloudfilename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.preview_cloudfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preview_cloudfilename(), output);
  }

  // optional string title = 5 [(.proto.dota.description) = "Text title for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string file_description = 6 [(.proto.dota.description) = "Text description for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), static_cast<int>(this->file_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_description(), output);
  }

  // optional uint32 file_type = 7 [(.proto.dota.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->file_type(), output);
  }

  // optional string consumer_shortcut_name = 8 [(.proto.dota.description) = "Shortcut name for the published file."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumer_shortcut_name().data(), static_cast<int>(this->consumer_shortcut_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.consumer_shortcut_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->consumer_shortcut_name(), output);
  }

  // optional string youtube_username = 9 [(.proto.dota.description) = "(Optional) User\'s YouTube account username."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_username().data(), static_cast<int>(this->youtube_username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.youtube_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->youtube_username(), output);
  }

  // optional string youtube_videoid = 10 [(.proto.dota.description) = "(Optional) Video Id of a YouTube video for this published file."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_videoid().data(), static_cast<int>(this->youtube_videoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.youtube_videoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->youtube_videoid(), output);
  }

  // optional uint32 visibility = 11 [(.proto.dota.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->visibility(), output);
  }

  // optional string redirect_uri = 12 [(.proto.dota.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->redirect_uri(), output);
  }

  // repeated string tags = 13 [(.proto.dota.description) = "Array of text tags to apply to the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tags(i), output);
  }

  // optional string collection_type = 14 [(.proto.dota.description) = "(Optional) Type of collection the published file represents."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collection_type().data(), static_cast<int>(this->collection_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.collection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->collection_type(), output);
  }

  // optional string game_type = 15 [(.proto.dota.description) = "(Optional) Type of game the published file represents."];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), static_cast<int>(this->game_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.game_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->game_type(), output);
  }

  // optional string url = 16 [(.proto.dota.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Publish_Request)
}

::google::protobuf::uint8* CPublishedFile_Publish_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Publish_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this file is being published FROM."];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 consumer_appid = 2 [(.proto.dota.description) = "App Id this file is being published TO."];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consumer_appid(), target);
  }

  // optional string cloudfilename = 3 [(.proto.dota.description) = "Name of the file to publish in the user\'s cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudfilename().data(), static_cast<int>(this->cloudfilename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.cloudfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cloudfilename(), target);
  }

  // optional string preview_cloudfilename = 4 [(.proto.dota.description) = "Name of the file to use as the published file\'s preview."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_cloudfilename().data(), static_cast<int>(this->preview_cloudfilename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.preview_cloudfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preview_cloudfilename(), target);
  }

  // optional string title = 5 [(.proto.dota.description) = "Text title for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string file_description = 6 [(.proto.dota.description) = "Text description for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), static_cast<int>(this->file_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_description(), target);
  }

  // optional uint32 file_type = 7 [(.proto.dota.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->file_type(), target);
  }

  // optional string consumer_shortcut_name = 8 [(.proto.dota.description) = "Shortcut name for the published file."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumer_shortcut_name().data(), static_cast<int>(this->consumer_shortcut_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.consumer_shortcut_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->consumer_shortcut_name(), target);
  }

  // optional string youtube_username = 9 [(.proto.dota.description) = "(Optional) User\'s YouTube account username."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_username().data(), static_cast<int>(this->youtube_username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.youtube_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->youtube_username(), target);
  }

  // optional string youtube_videoid = 10 [(.proto.dota.description) = "(Optional) Video Id of a YouTube video for this published file."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_videoid().data(), static_cast<int>(this->youtube_videoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.youtube_videoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->youtube_videoid(), target);
  }

  // optional uint32 visibility = 11 [(.proto.dota.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->visibility(), target);
  }

  // optional string redirect_uri = 12 [(.proto.dota.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->redirect_uri(), target);
  }

  // repeated string tags = 13 [(.proto.dota.description) = "Array of text tags to apply to the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->tags(i), target);
  }

  // optional string collection_type = 14 [(.proto.dota.description) = "(Optional) Type of collection the published file represents."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collection_type().data(), static_cast<int>(this->collection_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.collection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->collection_type(), target);
  }

  // optional string game_type = 15 [(.proto.dota.description) = "(Optional) Type of game the published file represents."];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), static_cast<int>(this->game_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.game_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->game_type(), target);
  }

  // optional string url = 16 [(.proto.dota.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Request.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Publish_Request)
  return target;
}

size_t CPublishedFile_Publish_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Publish_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 13 [(.proto.dota.description) = "Array of text tags to apply to the published file."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cloudfilename = 3 [(.proto.dota.description) = "Name of the file to publish in the user\'s cloud."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloudfilename());
    }

    // optional string preview_cloudfilename = 4 [(.proto.dota.description) = "Name of the file to use as the published file\'s preview."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_cloudfilename());
    }

    // optional string title = 5 [(.proto.dota.description) = "Text title for the published file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 6 [(.proto.dota.description) = "Text description for the published file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string consumer_shortcut_name = 8 [(.proto.dota.description) = "Shortcut name for the published file."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consumer_shortcut_name());
    }

    // optional string youtube_username = 9 [(.proto.dota.description) = "(Optional) User\'s YouTube account username."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_username());
    }

    // optional string youtube_videoid = 10 [(.proto.dota.description) = "(Optional) Video Id of a YouTube video for this published file."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_videoid());
    }

    // optional string redirect_uri = 12 [(.proto.dota.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string collection_type = 14 [(.proto.dota.description) = "(Optional) Type of collection the published file represents."];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_type());
    }

    // optional string game_type = 15 [(.proto.dota.description) = "(Optional) Type of game the published file represents."];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

    // optional string url = 16 [(.proto.dota.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this file is being published FROM."];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 consumer_appid = 2 [(.proto.dota.description) = "App Id this file is being published TO."];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_appid());
    }

    // optional uint32 file_type = 7 [(.proto.dota.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional uint32 visibility = 11 [(.proto.dota.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Publish_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Publish_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Publish_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Publish_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Publish_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Request::MergeFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloudfilename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      preview_cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_cloudfilename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      consumer_shortcut_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_shortcut_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      youtube_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_username_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      youtube_videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_videoid_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      collection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_type_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      game_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_type_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00002000u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Publish_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Request::CopyFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Request::Swap(CPublishedFile_Publish_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Publish_Request::InternalSwap(CPublishedFile_Publish_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  cloudfilename_.Swap(&other->cloudfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preview_cloudfilename_.Swap(&other->preview_cloudfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_description_.Swap(&other->file_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consumer_shortcut_name_.Swap(&other->consumer_shortcut_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  youtube_username_.Swap(&other->youtube_username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  youtube_videoid_.Swap(&other->youtube_videoid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  redirect_uri_.Swap(&other->redirect_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_type_.Swap(&other->collection_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_type_.Swap(&other->game_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(consumer_appid_, other->consumer_appid_);
  swap(file_type_, other->file_type_);
  swap(visibility_, other->visibility_);
}

::google::protobuf::Metadata CPublishedFile_Publish_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Publish_Response::InitAsDefaultInstance() {
}
class CPublishedFile_Publish_Response::HasBitSetters {
 public:
  static void set_has_publishedfileid(CPublishedFile_Publish_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_redirect_uri(CPublishedFile_Publish_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Publish_Response::kPublishedfileidFieldNumber;
const int CPublishedFile_Publish_Response::kRedirectUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Publish_Response::CPublishedFile_Publish_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Publish_Response)
}
CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_uri()) {
    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Publish_Response)
}

void CPublishedFile_Publish_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_Publish_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
}

CPublishedFile_Publish_Response::~CPublishedFile_Publish_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Publish_Response)
  SharedDtor();
}

void CPublishedFile_Publish_Response::SharedDtor() {
  redirect_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Publish_Response& CPublishedFile_Publish_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Publish_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Publish_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Publish_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    redirect_uri_.ClearNonDefaultToEmptyNoArena();
  }
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Publish_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Publish_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_publishedfileid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string redirect_uri = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Publish_Response.redirect_uri");
        object = msg->mutable_redirect_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Publish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Publish_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_publishedfileid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Publish_Response.redirect_uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Publish_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Publish_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Publish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Publish_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional string redirect_uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Response.redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect_uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Publish_Response)
}

::google::protobuf::uint8* CPublishedFile_Publish_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Publish_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional string redirect_uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Publish_Response.redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect_uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Publish_Response)
  return target;
}

size_t CPublishedFile_Publish_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Publish_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string redirect_uri = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Publish_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Publish_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Publish_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Publish_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Publish_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Response::MergeFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Publish_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Response::CopyFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Response::Swap(CPublishedFile_Publish_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Publish_Response::InternalSwap(CPublishedFile_Publish_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  redirect_uri_.Swap(&other->redirect_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publishedfileid_, other->publishedfileid_);
}

::google::protobuf::Metadata CPublishedFile_Publish_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_GetDetails_Request::InitAsDefaultInstance() {
}
class CPublishedFile_GetDetails_Request::HasBitSetters {
 public:
  static void set_has_includetags(CPublishedFile_GetDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_includeadditionalpreviews(CPublishedFile_GetDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_includechildren(CPublishedFile_GetDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_includekvtags(CPublishedFile_GetDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_includevotes(CPublishedFile_GetDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_short_description(CPublishedFile_GetDetails_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetDetails_Request::kPublishedfileidsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludetagsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludeadditionalpreviewsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludechildrenFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludekvtagsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludevotesFieldNumber;
const int CPublishedFile_GetDetails_Request::kShortDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_GetDetails_Request)
}
CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&includetags_, &from.includetags_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_description_) -
    reinterpret_cast<char*>(&includetags_)) + sizeof(short_description_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_GetDetails_Request)
}

void CPublishedFile_GetDetails_Request::SharedCtor() {
  ::memset(&includetags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_description_) -
      reinterpret_cast<char*>(&includetags_)) + sizeof(short_description_));
}

CPublishedFile_GetDetails_Request::~CPublishedFile_GetDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_GetDetails_Request)
  SharedDtor();
}

void CPublishedFile_GetDetails_Request::SharedDtor() {
}

void CPublishedFile_GetDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_GetDetails_Request& CPublishedFile_GetDetails_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_GetDetails_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_GetDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_GetDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&includetags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&short_description_) -
        reinterpret_cast<char*>(&includetags_)) + sizeof(short_description_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_GetDetails_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_GetDetails_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 publishedfileids = 1 [(.proto.dota.description) = "Set of published file Ids to retrieve details for."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_publishedfileids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_publishedfileids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool includetags = 2 [(.proto.dota.description) = "If true, return tag information in the returned details."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_includetags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool includeadditionalpreviews = 3 [(.proto.dota.description) = "If true, return preview information in the returned details."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_includeadditionalpreviews(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool includechildren = 4 [(.proto.dota.description) = "If true, return children in the returned details."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_includechildren(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool includekvtags = 5 [(.proto.dota.description) = "If true, return key value tags in the returned details."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_includekvtags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool includevotes = 6 [(.proto.dota.description) = "If true, return vote data in the returned details."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_includevotes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool short_description = 8 [(.proto.dota.description) = "If true, return a short description instead of the full description."];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_short_description(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_GetDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_GetDetails_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 publishedfileids = 1 [(.proto.dota.description) = "Set of published file Ids to retrieve details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_publishedfileids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_publishedfileids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includetags = 2 [(.proto.dota.description) = "If true, return tag information in the returned details."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_includetags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includetags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includeadditionalpreviews = 3 [(.proto.dota.description) = "If true, return preview information in the returned details."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_includeadditionalpreviews(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeadditionalpreviews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includechildren = 4 [(.proto.dota.description) = "If true, return children in the returned details."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_includechildren(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includechildren_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includekvtags = 5 [(.proto.dota.description) = "If true, return key value tags in the returned details."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_includekvtags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includekvtags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includevotes = 6 [(.proto.dota.description) = "If true, return vote data in the returned details."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_includevotes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includevotes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool short_description = 8 [(.proto.dota.description) = "If true, return a short description instead of the full description."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_short_description(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &short_description_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_GetDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_GetDetails_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_GetDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_GetDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.proto.dota.description) = "Set of published file Ids to retrieve details for."];
  for (int i = 0, n = this->publishedfileids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->publishedfileids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool includetags = 2 [(.proto.dota.description) = "If true, return tag information in the returned details."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->includetags(), output);
  }

  // optional bool includeadditionalpreviews = 3 [(.proto.dota.description) = "If true, return preview information in the returned details."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->includeadditionalpreviews(), output);
  }

  // optional bool includechildren = 4 [(.proto.dota.description) = "If true, return children in the returned details."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->includechildren(), output);
  }

  // optional bool includekvtags = 5 [(.proto.dota.description) = "If true, return key value tags in the returned details."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->includekvtags(), output);
  }

  // optional bool includevotes = 6 [(.proto.dota.description) = "If true, return vote data in the returned details."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->includevotes(), output);
  }

  // optional bool short_description = 8 [(.proto.dota.description) = "If true, return a short description instead of the full description."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->short_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_GetDetails_Request)
}

::google::protobuf::uint8* CPublishedFile_GetDetails_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_GetDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.proto.dota.description) = "Set of published file Ids to retrieve details for."];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->publishedfileids_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool includetags = 2 [(.proto.dota.description) = "If true, return tag information in the returned details."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->includetags(), target);
  }

  // optional bool includeadditionalpreviews = 3 [(.proto.dota.description) = "If true, return preview information in the returned details."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->includeadditionalpreviews(), target);
  }

  // optional bool includechildren = 4 [(.proto.dota.description) = "If true, return children in the returned details."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->includechildren(), target);
  }

  // optional bool includekvtags = 5 [(.proto.dota.description) = "If true, return key value tags in the returned details."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->includekvtags(), target);
  }

  // optional bool includevotes = 6 [(.proto.dota.description) = "If true, return vote data in the returned details."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->includevotes(), target);
  }

  // optional bool short_description = 8 [(.proto.dota.description) = "If true, return a short description instead of the full description."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->short_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_GetDetails_Request)
  return target;
}

size_t CPublishedFile_GetDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_GetDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.proto.dota.description) = "Set of published file Ids to retrieve details for."];
  {
    unsigned int count = static_cast<unsigned int>(this->publishedfileids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->publishedfileids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool includetags = 2 [(.proto.dota.description) = "If true, return tag information in the returned details."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool includeadditionalpreviews = 3 [(.proto.dota.description) = "If true, return preview information in the returned details."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool includechildren = 4 [(.proto.dota.description) = "If true, return children in the returned details."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool includekvtags = 5 [(.proto.dota.description) = "If true, return key value tags in the returned details."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool includevotes = 6 [(.proto.dota.description) = "If true, return vote data in the returned details."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool short_description = 8 [(.proto.dota.description) = "If true, return a short description instead of the full description."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_GetDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_GetDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_GetDetails_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Request::MergeFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      includetags_ = from.includetags_;
    }
    if (cached_has_bits & 0x00000002u) {
      includeadditionalpreviews_ = from.includeadditionalpreviews_;
    }
    if (cached_has_bits & 0x00000004u) {
      includechildren_ = from.includechildren_;
    }
    if (cached_has_bits & 0x00000008u) {
      includekvtags_ = from.includekvtags_;
    }
    if (cached_has_bits & 0x00000010u) {
      includevotes_ = from.includevotes_;
    }
    if (cached_has_bits & 0x00000020u) {
      short_description_ = from.short_description_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Request::CopyFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Request::Swap(CPublishedFile_GetDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetDetails_Request::InternalSwap(CPublishedFile_GetDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  swap(includetags_, other->includetags_);
  swap(includeadditionalpreviews_, other->includeadditionalpreviews_);
  swap(includechildren_, other->includechildren_);
  swap(includekvtags_, other->includekvtags_);
  swap(includevotes_, other->includevotes_);
  swap(short_description_, other->short_description_);
}

::google::protobuf::Metadata CPublishedFile_GetDetails_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishedFileDetails_Tag::InitAsDefaultInstance() {
}
class PublishedFileDetails_Tag::HasBitSetters {
 public:
  static void set_has_tag(PublishedFileDetails_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_adminonly(PublishedFileDetails_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_Tag::kTagFieldNumber;
const int PublishedFileDetails_Tag::kAdminonlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_Tag::PublishedFileDetails_Tag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.PublishedFileDetails.Tag)
}
PublishedFileDetails_Tag::PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  adminonly_ = from.adminonly_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.PublishedFileDetails.Tag)
}

void PublishedFileDetails_Tag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adminonly_ = false;
}

PublishedFileDetails_Tag::~PublishedFileDetails_Tag() {
  // @@protoc_insertion_point(destructor:proto.dota.PublishedFileDetails.Tag)
  SharedDtor();
}

void PublishedFileDetails_Tag::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishedFileDetails_Tag& PublishedFileDetails_Tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishedFileDetails_Tag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void PublishedFileDetails_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.PublishedFileDetails.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmptyNoArena();
  }
  adminonly_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishedFileDetails_Tag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishedFileDetails_Tag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.Tag.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool adminonly = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_adminonly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishedFileDetails_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.PublishedFileDetails.Tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.Tag.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adminonly = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_adminonly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adminonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.PublishedFileDetails.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.PublishedFileDetails.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishedFileDetails_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.PublishedFileDetails.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Tag.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional bool adminonly = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->adminonly(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.PublishedFileDetails.Tag)
}

::google::protobuf::uint8* PublishedFileDetails_Tag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.PublishedFileDetails.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Tag.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional bool adminonly = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->adminonly(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.PublishedFileDetails.Tag)
  return target;
}

size_t PublishedFileDetails_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.PublishedFileDetails.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional bool adminonly = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Tag* source =
      ::google::protobuf::DynamicCastToGenerated<PublishedFileDetails_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.PublishedFileDetails.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.PublishedFileDetails.Tag)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Tag::MergeFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      adminonly_ = from.adminonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Tag::CopyFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Tag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Tag::Swap(PublishedFileDetails_Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_Tag::InternalSwap(PublishedFileDetails_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(adminonly_, other->adminonly_);
}

::google::protobuf::Metadata PublishedFileDetails_Tag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishedFileDetails_Preview::InitAsDefaultInstance() {
}
class PublishedFileDetails_Preview::HasBitSetters {
 public:
  static void set_has_previewid(PublishedFileDetails_Preview* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sortorder(PublishedFileDetails_Preview* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_url(PublishedFileDetails_Preview* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_size(PublishedFileDetails_Preview* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_filename(PublishedFileDetails_Preview* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_youtubevideoid(PublishedFileDetails_Preview* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_Preview::kPreviewidFieldNumber;
const int PublishedFileDetails_Preview::kSortorderFieldNumber;
const int PublishedFileDetails_Preview::kUrlFieldNumber;
const int PublishedFileDetails_Preview::kSizeFieldNumber;
const int PublishedFileDetails_Preview::kFilenameFieldNumber;
const int PublishedFileDetails_Preview::kYoutubevideoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_Preview::PublishedFileDetails_Preview()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.PublishedFileDetails.Preview)
}
PublishedFileDetails_Preview::PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtubevideoid()) {
    youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
  }
  ::memcpy(&previewid_, &from.previewid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&previewid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.PublishedFileDetails.Preview)
}

void PublishedFileDetails_Preview::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&previewid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&previewid_)) + sizeof(size_));
}

PublishedFileDetails_Preview::~PublishedFileDetails_Preview() {
  // @@protoc_insertion_point(destructor:proto.dota.PublishedFileDetails.Preview)
  SharedDtor();
}

void PublishedFileDetails_Preview::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Preview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishedFileDetails_Preview& PublishedFileDetails_Preview::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishedFileDetails_Preview_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void PublishedFileDetails_Preview::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.PublishedFileDetails.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      youtubevideoid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&previewid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&previewid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishedFileDetails_Preview::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishedFileDetails_Preview*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 previewid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_previewid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sortorder = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sortorder(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.Preview.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.Preview.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string youtubevideoid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.Preview.youtubevideoid");
        object = msg->mutable_youtubevideoid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishedFileDetails_Preview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.PublishedFileDetails.Preview)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 previewid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_previewid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previewid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sortorder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_sortorder(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.Preview.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.Preview.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtubevideoid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubevideoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubevideoid().data(), static_cast<int>(this->youtubevideoid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.Preview.youtubevideoid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.PublishedFileDetails.Preview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.PublishedFileDetails.Preview)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishedFileDetails_Preview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.PublishedFileDetails.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 previewid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->previewid(), output);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortorder(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Preview.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional string filename = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Preview.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename(), output);
  }

  // optional string youtubevideoid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), static_cast<int>(this->youtubevideoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Preview.youtubevideoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->youtubevideoid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.PublishedFileDetails.Preview)
}

::google::protobuf::uint8* PublishedFileDetails_Preview::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.PublishedFileDetails.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 previewid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->previewid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortorder(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Preview.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional string filename = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Preview.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename(), target);
  }

  // optional string youtubevideoid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), static_cast<int>(this->youtubevideoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.Preview.youtubevideoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->youtubevideoid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.PublishedFileDetails.Preview)
  return target;
}

size_t PublishedFileDetails_Preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.PublishedFileDetails.Preview)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string youtubevideoid = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubevideoid());
    }

    // optional uint64 previewid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previewid());
    }

    // optional uint32 sortorder = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortorder());
    }

    // optional uint32 size = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_Preview::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Preview* source =
      ::google::protobuf::DynamicCastToGenerated<PublishedFileDetails_Preview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.PublishedFileDetails.Preview)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.PublishedFileDetails.Preview)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Preview::MergeFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
    }
    if (cached_has_bits & 0x00000008u) {
      previewid_ = from.previewid_;
    }
    if (cached_has_bits & 0x00000010u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Preview::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Preview::CopyFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Preview::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Preview::Swap(PublishedFileDetails_Preview* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_Preview::InternalSwap(PublishedFileDetails_Preview* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  youtubevideoid_.Swap(&other->youtubevideoid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(previewid_, other->previewid_);
  swap(sortorder_, other->sortorder_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata PublishedFileDetails_Preview::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishedFileDetails_Child::InitAsDefaultInstance() {
}
class PublishedFileDetails_Child::HasBitSetters {
 public:
  static void set_has_publishedfileid(PublishedFileDetails_Child* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sortorder(PublishedFileDetails_Child* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_file_type(PublishedFileDetails_Child* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_Child::kPublishedfileidFieldNumber;
const int PublishedFileDetails_Child::kSortorderFieldNumber;
const int PublishedFileDetails_Child::kFileTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_Child::PublishedFileDetails_Child()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.PublishedFileDetails.Child)
}
PublishedFileDetails_Child::PublishedFileDetails_Child(const PublishedFileDetails_Child& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.PublishedFileDetails.Child)
}

void PublishedFileDetails_Child::SharedCtor() {
  ::memset(&publishedfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_type_) -
      reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
}

PublishedFileDetails_Child::~PublishedFileDetails_Child() {
  // @@protoc_insertion_point(destructor:proto.dota.PublishedFileDetails.Child)
  SharedDtor();
}

void PublishedFileDetails_Child::SharedDtor() {
}

void PublishedFileDetails_Child::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishedFileDetails_Child& PublishedFileDetails_Child::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishedFileDetails_Child_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void PublishedFileDetails_Child::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.PublishedFileDetails.Child)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_type_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishedFileDetails_Child::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishedFileDetails_Child*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_publishedfileid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sortorder = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sortorder(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_file_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishedFileDetails_Child::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.PublishedFileDetails.Child)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_publishedfileid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sortorder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_sortorder(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_file_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.PublishedFileDetails.Child)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.PublishedFileDetails.Child)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishedFileDetails_Child::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.PublishedFileDetails.Child)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortorder(), output);
  }

  // optional uint32 file_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.PublishedFileDetails.Child)
}

::google::protobuf::uint8* PublishedFileDetails_Child::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.PublishedFileDetails.Child)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortorder(), target);
  }

  // optional uint32 file_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.PublishedFileDetails.Child)
  return target;
}

size_t PublishedFileDetails_Child::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.PublishedFileDetails.Child)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 sortorder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortorder());
    }

    // optional uint32 file_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_Child::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Child* source =
      ::google::protobuf::DynamicCastToGenerated<PublishedFileDetails_Child>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.PublishedFileDetails.Child)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.PublishedFileDetails.Child)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Child::MergeFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Child::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Child::CopyFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Child::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Child::Swap(PublishedFileDetails_Child* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_Child::InternalSwap(PublishedFileDetails_Child* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
  swap(sortorder_, other->sortorder_);
  swap(file_type_, other->file_type_);
}

::google::protobuf::Metadata PublishedFileDetails_Child::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishedFileDetails_KVTag::InitAsDefaultInstance() {
}
class PublishedFileDetails_KVTag::HasBitSetters {
 public:
  static void set_has_key(PublishedFileDetails_KVTag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(PublishedFileDetails_KVTag* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_KVTag::kKeyFieldNumber;
const int PublishedFileDetails_KVTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_KVTag::PublishedFileDetails_KVTag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.PublishedFileDetails.KVTag)
}
PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.PublishedFileDetails.KVTag)
}

void PublishedFileDetails_KVTag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PublishedFileDetails_KVTag::~PublishedFileDetails_KVTag() {
  // @@protoc_insertion_point(destructor:proto.dota.PublishedFileDetails.KVTag)
  SharedDtor();
}

void PublishedFileDetails_KVTag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_KVTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishedFileDetails_KVTag& PublishedFileDetails_KVTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishedFileDetails_KVTag_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void PublishedFileDetails_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.PublishedFileDetails.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishedFileDetails_KVTag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishedFileDetails_KVTag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.KVTag.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.KVTag.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishedFileDetails_KVTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.PublishedFileDetails.KVTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.KVTag.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.KVTag.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.PublishedFileDetails.KVTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.PublishedFileDetails.KVTag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishedFileDetails_KVTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.PublishedFileDetails.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.KVTag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.KVTag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.PublishedFileDetails.KVTag)
}

::google::protobuf::uint8* PublishedFileDetails_KVTag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.PublishedFileDetails.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.KVTag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.KVTag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.PublishedFileDetails.KVTag)
  return target;
}

size_t PublishedFileDetails_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.PublishedFileDetails.KVTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_KVTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_KVTag* source =
      ::google::protobuf::DynamicCastToGenerated<PublishedFileDetails_KVTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.PublishedFileDetails.KVTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.PublishedFileDetails.KVTag)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_KVTag::MergeFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void PublishedFileDetails_KVTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_KVTag::CopyFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_KVTag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_KVTag::Swap(PublishedFileDetails_KVTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_KVTag::InternalSwap(PublishedFileDetails_KVTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PublishedFileDetails_KVTag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishedFileDetails_VoteData::InitAsDefaultInstance() {
}
class PublishedFileDetails_VoteData::HasBitSetters {
 public:
  static void set_has_score(PublishedFileDetails_VoteData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_votes_up(PublishedFileDetails_VoteData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_votes_down(PublishedFileDetails_VoteData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_VoteData::kScoreFieldNumber;
const int PublishedFileDetails_VoteData::kVotesUpFieldNumber;
const int PublishedFileDetails_VoteData::kVotesDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_VoteData::PublishedFileDetails_VoteData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.PublishedFileDetails.VoteData)
}
PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.PublishedFileDetails.VoteData)
}

void PublishedFileDetails_VoteData::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votes_down_) -
      reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
}

PublishedFileDetails_VoteData::~PublishedFileDetails_VoteData() {
  // @@protoc_insertion_point(destructor:proto.dota.PublishedFileDetails.VoteData)
  SharedDtor();
}

void PublishedFileDetails_VoteData::SharedDtor() {
}

void PublishedFileDetails_VoteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishedFileDetails_VoteData& PublishedFileDetails_VoteData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishedFileDetails_VoteData_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void PublishedFileDetails_VoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.PublishedFileDetails.VoteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votes_down_) -
        reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishedFileDetails_VoteData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishedFileDetails_VoteData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float score = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_score(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 votes_up = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_votes_up(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 votes_down = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_votes_down(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishedFileDetails_VoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.PublishedFileDetails.VoteData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 votes_up = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_votes_up(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 votes_down = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_votes_down(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.PublishedFileDetails.VoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.PublishedFileDetails.VoteData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishedFileDetails_VoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.PublishedFileDetails.VoteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // optional uint32 votes_up = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->votes_up(), output);
  }

  // optional uint32 votes_down = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->votes_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.PublishedFileDetails.VoteData)
}

::google::protobuf::uint8* PublishedFileDetails_VoteData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.PublishedFileDetails.VoteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // optional uint32 votes_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->votes_up(), target);
  }

  // optional uint32 votes_down = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->votes_down(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.PublishedFileDetails.VoteData)
  return target;
}

size_t PublishedFileDetails_VoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.PublishedFileDetails.VoteData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 votes_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes_up());
    }

    // optional uint32 votes_down = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes_down());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_VoteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_VoteData* source =
      ::google::protobuf::DynamicCastToGenerated<PublishedFileDetails_VoteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.PublishedFileDetails.VoteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.PublishedFileDetails.VoteData)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_VoteData::MergeFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      votes_up_ = from.votes_up_;
    }
    if (cached_has_bits & 0x00000004u) {
      votes_down_ = from.votes_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_VoteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_VoteData::CopyFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_VoteData::IsInitialized() const {
  return true;
}

void PublishedFileDetails_VoteData::Swap(PublishedFileDetails_VoteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_VoteData::InternalSwap(PublishedFileDetails_VoteData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(score_, other->score_);
  swap(votes_up_, other->votes_up_);
  swap(votes_down_, other->votes_down_);
}

::google::protobuf::Metadata PublishedFileDetails_VoteData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishedFileDetails::InitAsDefaultInstance() {
  ::proto::dota::_PublishedFileDetails_default_instance_._instance.get_mutable()->vote_data_ = const_cast< ::proto::dota::PublishedFileDetails_VoteData*>(
      ::proto::dota::PublishedFileDetails_VoteData::internal_default_instance());
}
class PublishedFileDetails::HasBitSetters {
 public:
  static void set_has_result(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_publishedfileid(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_creator(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_creator_appid(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_consumer_appid(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_consumer_shortcutid(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_filename(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_size(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_preview_file_size(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_file_url(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_preview_url(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_youtubevideoid(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_url(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_hcontent_file(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_hcontent_preview(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_title(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_file_description(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_short_description(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_time_created(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_time_updated(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_visibility(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_flags(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_workshop_file(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_workshop_accepted(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_show_subscribe_all(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_num_comments_developer(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_num_comments_public(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_banned(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_ban_reason(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_banner(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_can_be_deleted(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_incompatible(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_app_name(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_file_type(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_can_subscribe(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_subscriptions(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_favorited(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_followers(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_lifetime_subscriptions(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_lifetime_favorited(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_lifetime_followers(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_views(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_image_width(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_image_height(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_image_url(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_spoiler_tag(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_shortcutid(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_shortcutname(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_num_children(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_num_reports(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static const ::proto::dota::PublishedFileDetails_VoteData& vote_data(const PublishedFileDetails* msg);
  static void set_has_vote_data(PublishedFileDetails* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_time_subscribed(PublishedFileDetails* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
};

const ::proto::dota::PublishedFileDetails_VoteData&
PublishedFileDetails::HasBitSetters::vote_data(const PublishedFileDetails* msg) {
  return *msg->vote_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails::kResultFieldNumber;
const int PublishedFileDetails::kPublishedfileidFieldNumber;
const int PublishedFileDetails::kCreatorFieldNumber;
const int PublishedFileDetails::kCreatorAppidFieldNumber;
const int PublishedFileDetails::kConsumerAppidFieldNumber;
const int PublishedFileDetails::kConsumerShortcutidFieldNumber;
const int PublishedFileDetails::kFilenameFieldNumber;
const int PublishedFileDetails::kFileSizeFieldNumber;
const int PublishedFileDetails::kPreviewFileSizeFieldNumber;
const int PublishedFileDetails::kFileUrlFieldNumber;
const int PublishedFileDetails::kPreviewUrlFieldNumber;
const int PublishedFileDetails::kYoutubevideoidFieldNumber;
const int PublishedFileDetails::kUrlFieldNumber;
const int PublishedFileDetails::kHcontentFileFieldNumber;
const int PublishedFileDetails::kHcontentPreviewFieldNumber;
const int PublishedFileDetails::kTitleFieldNumber;
const int PublishedFileDetails::kFileDescriptionFieldNumber;
const int PublishedFileDetails::kShortDescriptionFieldNumber;
const int PublishedFileDetails::kTimeCreatedFieldNumber;
const int PublishedFileDetails::kTimeUpdatedFieldNumber;
const int PublishedFileDetails::kVisibilityFieldNumber;
const int PublishedFileDetails::kFlagsFieldNumber;
const int PublishedFileDetails::kWorkshopFileFieldNumber;
const int PublishedFileDetails::kWorkshopAcceptedFieldNumber;
const int PublishedFileDetails::kShowSubscribeAllFieldNumber;
const int PublishedFileDetails::kNumCommentsDeveloperFieldNumber;
const int PublishedFileDetails::kNumCommentsPublicFieldNumber;
const int PublishedFileDetails::kBannedFieldNumber;
const int PublishedFileDetails::kBanReasonFieldNumber;
const int PublishedFileDetails::kBannerFieldNumber;
const int PublishedFileDetails::kCanBeDeletedFieldNumber;
const int PublishedFileDetails::kIncompatibleFieldNumber;
const int PublishedFileDetails::kAppNameFieldNumber;
const int PublishedFileDetails::kFileTypeFieldNumber;
const int PublishedFileDetails::kCanSubscribeFieldNumber;
const int PublishedFileDetails::kSubscriptionsFieldNumber;
const int PublishedFileDetails::kFavoritedFieldNumber;
const int PublishedFileDetails::kFollowersFieldNumber;
const int PublishedFileDetails::kLifetimeSubscriptionsFieldNumber;
const int PublishedFileDetails::kLifetimeFavoritedFieldNumber;
const int PublishedFileDetails::kLifetimeFollowersFieldNumber;
const int PublishedFileDetails::kViewsFieldNumber;
const int PublishedFileDetails::kImageWidthFieldNumber;
const int PublishedFileDetails::kImageHeightFieldNumber;
const int PublishedFileDetails::kImageUrlFieldNumber;
const int PublishedFileDetails::kSpoilerTagFieldNumber;
const int PublishedFileDetails::kShortcutidFieldNumber;
const int PublishedFileDetails::kShortcutnameFieldNumber;
const int PublishedFileDetails::kNumChildrenFieldNumber;
const int PublishedFileDetails::kNumReportsFieldNumber;
const int PublishedFileDetails::kPreviewsFieldNumber;
const int PublishedFileDetails::kTagsFieldNumber;
const int PublishedFileDetails::kChildrenFieldNumber;
const int PublishedFileDetails::kKvtagsFieldNumber;
const int PublishedFileDetails::kVoteDataFieldNumber;
const int PublishedFileDetails::kTimeSubscribedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails::PublishedFileDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.PublishedFileDetails)
}
PublishedFileDetails::PublishedFileDetails(const PublishedFileDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      previews_(from.previews_),
      tags_(from.tags_),
      children_(from.children_),
      kvtags_(from.kvtags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_url()) {
    file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_url_);
  }
  preview_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_url()) {
    preview_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_url_);
  }
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtubevideoid()) {
    youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_description()) {
    file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
  }
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_description()) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  ban_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ban_reason()) {
    ban_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ban_reason_);
  }
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_url()) {
    image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
  }
  shortcutname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shortcutname()) {
    shortcutname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcutname_);
  }
  if (from.has_vote_data()) {
    vote_data_ = new ::proto::dota::PublishedFileDetails_VoteData(*from.vote_data_);
  } else {
    vote_data_ = nullptr;
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_subscribed_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(time_subscribed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.PublishedFileDetails)
}

void PublishedFileDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ban_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcutname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vote_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_subscribed_) -
      reinterpret_cast<char*>(&vote_data_)) + sizeof(time_subscribed_));
}

PublishedFileDetails::~PublishedFileDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.PublishedFileDetails)
  SharedDtor();
}

void PublishedFileDetails::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ban_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcutname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vote_data_;
}

void PublishedFileDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishedFileDetails& PublishedFileDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishedFileDetails_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void PublishedFileDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.PublishedFileDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previews_.Clear();
  tags_.Clear();
  children_.Clear();
  kvtags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      preview_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      youtubevideoid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      file_description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      short_description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ban_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      app_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      image_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      shortcutname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(vote_data_ != nullptr);
      vote_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creator_appid_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(creator_appid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&creator_)) + sizeof(time_created_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&time_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_comments_developer_) -
        reinterpret_cast<char*>(&time_updated_)) + sizeof(num_comments_developer_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&banner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spoiler_tag_) -
        reinterpret_cast<char*>(&banner_)) + sizeof(spoiler_tag_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&favorited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_height_) -
        reinterpret_cast<char*>(&favorited_)) + sizeof(image_height_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&shortcutid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_subscribed_) -
        reinterpret_cast<char*>(&shortcutid_)) + sizeof(time_subscribed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishedFileDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishedFileDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_publishedfileid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 creator = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_creator(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 creator_appid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_creator_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 consumer_appid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_consumer_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 consumer_shortcutid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_consumer_shortcutid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string filename = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 file_size = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 preview_file_size = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_preview_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string file_url = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.file_url");
        object = msg->mutable_file_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string preview_url = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.preview_url");
        object = msg->mutable_preview_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string youtubevideoid = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.youtubevideoid");
        object = msg->mutable_youtubevideoid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 hcontent_file = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_hcontent_file(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 hcontent_preview = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_hcontent_preview(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string title = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string file_description = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.file_description");
        object = msg->mutable_file_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string short_description = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.short_description");
        object = msg->mutable_short_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_created = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_updated = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_time_updated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 visibility = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_visibility(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool workshop_file = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_workshop_file(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool workshop_accepted = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_workshop_accepted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_subscribe_all = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_show_subscribe_all(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 num_comments_developer = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_num_comments_developer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 num_comments_public = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_num_comments_public(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool banned = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_banned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string ban_reason = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.ban_reason");
        object = msg->mutable_ban_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 banner = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_banner(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool can_be_deleted = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_can_be_deleted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool incompatible = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_incompatible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string app_name = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.app_name");
        object = msg->mutable_app_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 file_type = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool can_subscribe = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_can_subscribe(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 subscriptions = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_subscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 favorited = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_favorited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 followers = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_followers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lifetime_subscriptions = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_lifetime_subscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lifetime_favorited = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_lifetime_favorited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lifetime_followers = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_lifetime_followers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 views = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_views(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 image_width = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_image_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 image_height = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_image_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string image_url = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.image_url");
        object = msg->mutable_image_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool spoiler_tag = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_spoiler_tag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 shortcutid = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_shortcutid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string shortcutname = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.PublishedFileDetails.shortcutname");
        object = msg->mutable_shortcutname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 num_children = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_num_children(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_reports = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_num_reports(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.PublishedFileDetails.Preview previews = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::PublishedFileDetails_Preview::_InternalParse;
          object = msg->add_previews();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 922 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.PublishedFileDetails.Tag tags = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::PublishedFileDetails_Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 930 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.PublishedFileDetails.Child children = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::PublishedFileDetails_Child::_InternalParse;
          object = msg->add_children();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 938 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.PublishedFileDetails.KVTag kvtags = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::PublishedFileDetails_KVTag::_InternalParse;
          object = msg->add_kvtags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 946 && (ptr += 2));
        break;
      }
      // optional .proto.dota.PublishedFileDetails.VoteData vote_data = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::PublishedFileDetails_VoteData::_InternalParse;
        object = msg->mutable_vote_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 time_subscribed = 56 [(.proto.dota.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_time_subscribed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishedFileDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.PublishedFileDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_publishedfileid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 creator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creator_appid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_creator_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 consumer_appid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_consumer_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 consumer_shortcutid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_consumer_shortcutid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_shortcutid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 file_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 preview_file_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_preview_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preview_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_url().data(), static_cast<int>(this->file_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.file_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preview_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_url().data(), static_cast<int>(this->preview_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.preview_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtubevideoid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubevideoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubevideoid().data(), static_cast<int>(this->youtubevideoid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.youtubevideoid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hcontent_file = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {
          HasBitSetters::set_has_hcontent_file(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hcontent_preview = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_hcontent_preview(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_preview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_description = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), static_cast<int>(this->file_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.file_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string short_description = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_description().data(), static_cast<int>(this->short_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.short_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_updated = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_time_updated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visibility = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_visibility(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool workshop_file = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_workshop_file(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool workshop_accepted = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_workshop_accepted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_subscribe_all = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_show_subscribe_all(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_subscribe_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_comments_developer = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_num_comments_developer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_comments_developer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_comments_public = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_num_comments_public(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_comments_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool banned = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_banned(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ban_reason = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ban_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ban_reason().data(), static_cast<int>(this->ban_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.ban_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 banner = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {
          HasBitSetters::set_has_banner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &banner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_be_deleted = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_can_be_deleted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_be_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incompatible = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_incompatible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incompatible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_name = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (266 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), static_cast<int>(this->app_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.app_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_type = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_file_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_subscribe = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_can_subscribe(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_subscribe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subscriptions = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_subscriptions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorited = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          HasBitSetters::set_has_favorited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 followers = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_followers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lifetime_subscriptions = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          HasBitSetters::set_has_lifetime_subscriptions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_subscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lifetime_favorited = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_lifetime_favorited(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_favorited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lifetime_followers = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          HasBitSetters::set_has_lifetime_followers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_views(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_width = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_image_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_height = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_image_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image_url = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (362 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_url().data(), static_cast<int>(this->image_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.image_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spoiler_tag = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_spoiler_tag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spoiler_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shortcutid = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_shortcutid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcutid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shortcutname = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcutname().data(), static_cast<int>(this->shortcutname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.PublishedFileDetails.shortcutname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_children = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_num_children(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_reports = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_num_reports(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_reports_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.PublishedFileDetails.Preview previews = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_previews()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.PublishedFileDetails.Tag tags = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (418 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.PublishedFileDetails.Child children = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (426 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.PublishedFileDetails.KVTag kvtags = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (434 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_kvtags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PublishedFileDetails.VoteData vote_data = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (442 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_subscribed = 56 [(.proto.dota.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_time_subscribed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_subscribed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.PublishedFileDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.PublishedFileDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishedFileDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.PublishedFileDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional fixed64 creator = 3;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->creator(), output);
  }

  // optional uint32 creator_appid = 4;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creator_appid(), output);
  }

  // optional uint32 consumer_appid = 5;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consumer_appid(), output);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consumer_shortcutid(), output);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->file_size(), output);
  }

  // optional uint64 preview_file_size = 9;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->preview_file_size(), output);
  }

  // optional string file_url = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_url().data(), static_cast<int>(this->file_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.file_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->file_url(), output);
  }

  // optional string preview_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_url().data(), static_cast<int>(this->preview_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.preview_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->preview_url(), output);
  }

  // optional string youtubevideoid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), static_cast<int>(this->youtubevideoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.youtubevideoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->youtubevideoid(), output);
  }

  // optional string url = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->url(), output);
  }

  // optional fixed64 hcontent_file = 14;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->hcontent_file(), output);
  }

  // optional fixed64 hcontent_preview = 15;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->hcontent_preview(), output);
  }

  // optional string title = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->title(), output);
  }

  // optional string file_description = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), static_cast<int>(this->file_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->file_description(), output);
  }

  // optional string short_description = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->short_description(), output);
  }

  // optional uint32 time_created = 19;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_created(), output);
  }

  // optional uint32 time_updated = 20;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->time_updated(), output);
  }

  // optional uint32 visibility = 21;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->visibility(), output);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->flags(), output);
  }

  // optional bool workshop_file = 23;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->workshop_file(), output);
  }

  // optional bool workshop_accepted = 24;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->workshop_accepted(), output);
  }

  // optional bool show_subscribe_all = 25;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->show_subscribe_all(), output);
  }

  // optional int32 num_comments_developer = 26;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->num_comments_developer(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_comments_public = 27;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->num_comments_public(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool banned = 28;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->banned(), output);
  }

  // optional string ban_reason = 29;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), static_cast<int>(this->ban_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.ban_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->ban_reason(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 banner = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(30, this->banner(), output);
  }

  // optional bool can_be_deleted = 31;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->can_be_deleted(), output);
  }

  // optional bool incompatible = 32;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->incompatible(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->app_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 file_type = 34;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->file_type(), output);
  }

  // optional bool can_subscribe = 35;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->can_subscribe(), output);
  }

  // optional uint32 subscriptions = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->subscriptions(), output);
  }

  // optional uint32 favorited = 37;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->favorited(), output);
  }

  // optional uint32 followers = 38;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->followers(), output);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->lifetime_subscriptions(), output);
  }

  // optional uint32 lifetime_favorited = 40;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->lifetime_favorited(), output);
  }

  // optional uint32 lifetime_followers = 41;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->lifetime_followers(), output);
  }

  // optional uint32 views = 42;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->views(), output);
  }

  // optional uint32 image_width = 43;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->image_width(), output);
  }

  // optional uint32 image_height = 44;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->image_height(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_url = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), static_cast<int>(this->image_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->image_url(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool spoiler_tag = 46;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->spoiler_tag(), output);
  }

  // optional uint32 shortcutid = 47;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shortcutid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string shortcutname = 48;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcutname().data(), static_cast<int>(this->shortcutname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.shortcutname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->shortcutname(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_children = 49;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->num_children(), output);
  }

  // optional uint32 num_reports = 50;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->num_reports(), output);
  }

  // repeated .proto.dota.PublishedFileDetails.Preview previews = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previews_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51,
      this->previews(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.PublishedFileDetails.Tag tags = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52,
      this->tags(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.PublishedFileDetails.Child children = 53;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53,
      this->children(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.PublishedFileDetails.KVTag kvtags = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvtags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54,
      this->kvtags(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.PublishedFileDetails.VoteData vote_data = 55;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, HasBitSetters::vote_data(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_subscribed = 56 [(.proto.dota.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->time_subscribed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.PublishedFileDetails)
}

::google::protobuf::uint8* PublishedFileDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.PublishedFileDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional fixed64 creator = 3;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->creator(), target);
  }

  // optional uint32 creator_appid = 4;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creator_appid(), target);
  }

  // optional uint32 consumer_appid = 5;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consumer_appid(), target);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consumer_shortcutid(), target);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_size(), target);
  }

  // optional uint64 preview_file_size = 9;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->preview_file_size(), target);
  }

  // optional string file_url = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_url().data(), static_cast<int>(this->file_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.file_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->file_url(), target);
  }

  // optional string preview_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_url().data(), static_cast<int>(this->preview_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.preview_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->preview_url(), target);
  }

  // optional string youtubevideoid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), static_cast<int>(this->youtubevideoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.youtubevideoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->youtubevideoid(), target);
  }

  // optional string url = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->url(), target);
  }

  // optional fixed64 hcontent_file = 14;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->hcontent_file(), target);
  }

  // optional fixed64 hcontent_preview = 15;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->hcontent_preview(), target);
  }

  // optional string title = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->title(), target);
  }

  // optional string file_description = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), static_cast<int>(this->file_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->file_description(), target);
  }

  // optional string short_description = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->short_description(), target);
  }

  // optional uint32 time_created = 19;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_created(), target);
  }

  // optional uint32 time_updated = 20;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->time_updated(), target);
  }

  // optional uint32 visibility = 21;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->visibility(), target);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->flags(), target);
  }

  // optional bool workshop_file = 23;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->workshop_file(), target);
  }

  // optional bool workshop_accepted = 24;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->workshop_accepted(), target);
  }

  // optional bool show_subscribe_all = 25;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->show_subscribe_all(), target);
  }

  // optional int32 num_comments_developer = 26;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->num_comments_developer(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_comments_public = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->num_comments_public(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool banned = 28;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->banned(), target);
  }

  // optional string ban_reason = 29;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), static_cast<int>(this->ban_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.ban_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->ban_reason(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 banner = 30;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(30, this->banner(), target);
  }

  // optional bool can_be_deleted = 31;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->can_be_deleted(), target);
  }

  // optional bool incompatible = 32;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->incompatible(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->app_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 file_type = 34;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->file_type(), target);
  }

  // optional bool can_subscribe = 35;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->can_subscribe(), target);
  }

  // optional uint32 subscriptions = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->subscriptions(), target);
  }

  // optional uint32 favorited = 37;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->favorited(), target);
  }

  // optional uint32 followers = 38;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->followers(), target);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->lifetime_subscriptions(), target);
  }

  // optional uint32 lifetime_favorited = 40;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->lifetime_favorited(), target);
  }

  // optional uint32 lifetime_followers = 41;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->lifetime_followers(), target);
  }

  // optional uint32 views = 42;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->views(), target);
  }

  // optional uint32 image_width = 43;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->image_width(), target);
  }

  // optional uint32 image_height = 44;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->image_height(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_url = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), static_cast<int>(this->image_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->image_url(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool spoiler_tag = 46;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->spoiler_tag(), target);
  }

  // optional uint32 shortcutid = 47;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shortcutid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string shortcutname = 48;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcutname().data(), static_cast<int>(this->shortcutname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.PublishedFileDetails.shortcutname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->shortcutname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_children = 49;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->num_children(), target);
  }

  // optional uint32 num_reports = 50;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->num_reports(), target);
  }

  // repeated .proto.dota.PublishedFileDetails.Preview previews = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previews_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, this->previews(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.PublishedFileDetails.Tag tags = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        52, this->tags(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.PublishedFileDetails.Child children = 53;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        53, this->children(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.PublishedFileDetails.KVTag kvtags = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvtags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        54, this->kvtags(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.PublishedFileDetails.VoteData vote_data = 55;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        55, HasBitSetters::vote_data(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_subscribed = 56 [(.proto.dota.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->time_subscribed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.PublishedFileDetails)
  return target;
}

size_t PublishedFileDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.PublishedFileDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.PublishedFileDetails.Preview previews = 51;
  {
    unsigned int count = static_cast<unsigned int>(this->previews_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->previews(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.PublishedFileDetails.Tag tags = 52;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.PublishedFileDetails.Child children = 53;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.PublishedFileDetails.KVTag kvtags = 54;
  {
    unsigned int count = static_cast<unsigned int>(this->kvtags_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->kvtags(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string file_url = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_url());
    }

    // optional string preview_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_url());
    }

    // optional string youtubevideoid = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubevideoid());
    }

    // optional string url = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string short_description = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_description());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string ban_reason = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ban_reason());
    }

    // optional string app_name = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string image_url = 45;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url());
    }

    // optional string shortcutname = 48;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcutname());
    }

    // optional .proto.dota.PublishedFileDetails.VoteData vote_data = 55;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vote_data_);
    }

    // optional uint64 publishedfileid = 2;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 creator_appid = 4;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_appid());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 creator = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional uint32 consumer_appid = 5;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_appid());
    }

    // optional uint32 consumer_shortcutid = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_shortcutid());
    }

    // optional uint64 file_size = 8;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional uint64 preview_file_size = 9;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->preview_file_size());
    }

    // optional fixed64 hcontent_file = 14;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional fixed64 hcontent_preview = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 time_updated = 20;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

    // optional uint32 visibility = 21;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

    // optional uint32 flags = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bool workshop_file = 23;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool workshop_accepted = 24;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool show_subscribe_all = 25;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool banned = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional int32 num_comments_developer = 26;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_comments_developer());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 banner = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional int32 num_comments_public = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_comments_public());
    }

    // optional uint32 file_type = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional uint32 subscriptions = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscriptions());
    }

    // optional bool can_be_deleted = 31;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool incompatible = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool can_subscribe = 35;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool spoiler_tag = 46;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 favorited = 37;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorited());
    }

    // optional uint32 followers = 38;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->followers());
    }

    // optional uint32 lifetime_subscriptions = 39;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_subscriptions());
    }

    // optional uint32 lifetime_favorited = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_favorited());
    }

    // optional uint32 lifetime_followers = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_followers());
    }

    // optional uint32 views = 42;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 image_width = 43;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_width());
    }

    // optional uint32 image_height = 44;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_height());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 shortcutid = 47;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcutid());
    }

    // optional uint32 num_children = 49;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_children());
    }

    // optional uint32 num_reports = 50;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_reports());
    }

    // optional uint32 time_subscribed = 56 [(.proto.dota.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_subscribed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails* source =
      ::google::protobuf::DynamicCastToGenerated<PublishedFileDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.PublishedFileDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.PublishedFileDetails)
    MergeFrom(*source);
  }
}

void PublishedFileDetails::MergeFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  previews_.MergeFrom(from.previews_);
  tags_.MergeFrom(from.tags_);
  children_.MergeFrom(from.children_);
  kvtags_.MergeFrom(from.kvtags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      preview_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      ban_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ban_reason_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      shortcutname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcutname_);
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_vote_data()->::proto::dota::PublishedFileDetails_VoteData::MergeFrom(from.vote_data());
    }
    if (cached_has_bits & 0x00002000u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00004000u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00008000u) {
      creator_appid_ = from.creator_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00020000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00040000u) {
      consumer_shortcutid_ = from.consumer_shortcutid_;
    }
    if (cached_has_bits & 0x00080000u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      preview_file_size_ = from.preview_file_size_;
    }
    if (cached_has_bits & 0x00200000u) {
      hcontent_file_ = from.hcontent_file_;
    }
    if (cached_has_bits & 0x00400000u) {
      hcontent_preview_ = from.hcontent_preview_;
    }
    if (cached_has_bits & 0x00800000u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x02000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x04000000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x08000000u) {
      workshop_file_ = from.workshop_file_;
    }
    if (cached_has_bits & 0x10000000u) {
      workshop_accepted_ = from.workshop_accepted_;
    }
    if (cached_has_bits & 0x20000000u) {
      show_subscribe_all_ = from.show_subscribe_all_;
    }
    if (cached_has_bits & 0x40000000u) {
      banned_ = from.banned_;
    }
    if (cached_has_bits & 0x80000000u) {
      num_comments_developer_ = from.num_comments_developer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      banner_ = from.banner_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_comments_public_ = from.num_comments_public_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscriptions_ = from.subscriptions_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_be_deleted_ = from.can_be_deleted_;
    }
    if (cached_has_bits & 0x00000020u) {
      incompatible_ = from.incompatible_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_subscribe_ = from.can_subscribe_;
    }
    if (cached_has_bits & 0x00000080u) {
      spoiler_tag_ = from.spoiler_tag_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      favorited_ = from.favorited_;
    }
    if (cached_has_bits & 0x00000200u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00000400u) {
      lifetime_subscriptions_ = from.lifetime_subscriptions_;
    }
    if (cached_has_bits & 0x00000800u) {
      lifetime_favorited_ = from.lifetime_favorited_;
    }
    if (cached_has_bits & 0x00001000u) {
      lifetime_followers_ = from.lifetime_followers_;
    }
    if (cached_has_bits & 0x00002000u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00004000u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      image_height_ = from.image_height_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_children_ = from.num_children_;
    }
    if (cached_has_bits & 0x00040000u) {
      num_reports_ = from.num_reports_;
    }
    if (cached_has_bits & 0x00080000u) {
      time_subscribed_ = from.time_subscribed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PublishedFileDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails::CopyFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails::IsInitialized() const {
  return true;
}

void PublishedFileDetails::Swap(PublishedFileDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails::InternalSwap(PublishedFileDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  CastToBase(&previews_)->InternalSwap(CastToBase(&other->previews_));
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  CastToBase(&kvtags_)->InternalSwap(CastToBase(&other->kvtags_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_url_.Swap(&other->file_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preview_url_.Swap(&other->preview_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  youtubevideoid_.Swap(&other->youtubevideoid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_description_.Swap(&other->file_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  short_description_.Swap(&other->short_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ban_reason_.Swap(&other->ban_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_name_.Swap(&other->app_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_url_.Swap(&other->image_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shortcutname_.Swap(&other->shortcutname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vote_data_, other->vote_data_);
  swap(publishedfileid_, other->publishedfileid_);
  swap(result_, other->result_);
  swap(creator_appid_, other->creator_appid_);
  swap(creator_, other->creator_);
  swap(consumer_appid_, other->consumer_appid_);
  swap(consumer_shortcutid_, other->consumer_shortcutid_);
  swap(file_size_, other->file_size_);
  swap(preview_file_size_, other->preview_file_size_);
  swap(hcontent_file_, other->hcontent_file_);
  swap(hcontent_preview_, other->hcontent_preview_);
  swap(time_created_, other->time_created_);
  swap(time_updated_, other->time_updated_);
  swap(visibility_, other->visibility_);
  swap(flags_, other->flags_);
  swap(workshop_file_, other->workshop_file_);
  swap(workshop_accepted_, other->workshop_accepted_);
  swap(show_subscribe_all_, other->show_subscribe_all_);
  swap(banned_, other->banned_);
  swap(num_comments_developer_, other->num_comments_developer_);
  swap(banner_, other->banner_);
  swap(num_comments_public_, other->num_comments_public_);
  swap(file_type_, other->file_type_);
  swap(subscriptions_, other->subscriptions_);
  swap(can_be_deleted_, other->can_be_deleted_);
  swap(incompatible_, other->incompatible_);
  swap(can_subscribe_, other->can_subscribe_);
  swap(spoiler_tag_, other->spoiler_tag_);
  swap(favorited_, other->favorited_);
  swap(followers_, other->followers_);
  swap(lifetime_subscriptions_, other->lifetime_subscriptions_);
  swap(lifetime_favorited_, other->lifetime_favorited_);
  swap(lifetime_followers_, other->lifetime_followers_);
  swap(views_, other->views_);
  swap(image_width_, other->image_width_);
  swap(image_height_, other->image_height_);
  swap(shortcutid_, other->shortcutid_);
  swap(num_children_, other->num_children_);
  swap(num_reports_, other->num_reports_);
  swap(time_subscribed_, other->time_subscribed_);
}

::google::protobuf::Metadata PublishedFileDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_GetDetails_Response::InitAsDefaultInstance() {
}
class CPublishedFile_GetDetails_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetDetails_Response::kPublishedfiledetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_GetDetails_Response)
}
CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      publishedfiledetails_(from.publishedfiledetails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_GetDetails_Response)
}

void CPublishedFile_GetDetails_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_GetDetails_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
}

CPublishedFile_GetDetails_Response::~CPublishedFile_GetDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_GetDetails_Response)
  SharedDtor();
}

void CPublishedFile_GetDetails_Response::SharedDtor() {
}

void CPublishedFile_GetDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_GetDetails_Response& CPublishedFile_GetDetails_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_GetDetails_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_GetDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_GetDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_GetDetails_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_GetDetails_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::PublishedFileDetails::_InternalParse;
          object = msg->add_publishedfiledetails();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_GetDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_GetDetails_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_GetDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_GetDetails_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_GetDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_GetDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->publishedfiledetails_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->publishedfiledetails(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_GetDetails_Response)
}

::google::protobuf::uint8* CPublishedFile_GetDetails_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_GetDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->publishedfiledetails_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->publishedfiledetails(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_GetDetails_Response)
  return target;
}

size_t CPublishedFile_GetDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_GetDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->publishedfiledetails_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->publishedfiledetails(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_GetDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_GetDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_GetDetails_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Response::MergeFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Response::Swap(CPublishedFile_GetDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetDetails_Response::InternalSwap(CPublishedFile_GetDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&publishedfiledetails_)->InternalSwap(CastToBase(&other->publishedfiledetails_));
}

::google::protobuf::Metadata CPublishedFile_GetDetails_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_GetUserFiles_Request::InitAsDefaultInstance() {
}
class CPublishedFile_GetUserFiles_Request::HasBitSetters {
 public:
  static void set_has_appid(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_page(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_numperpage(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_sortmethod(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_totalonly(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_privacy(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_ids_only(CPublishedFile_GetUserFiles_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

::google::protobuf::internal::ExplicitlyConstructed<::std::string> CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Request::kAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kPageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kNumperpageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kSortmethodFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kTotalonlyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kPrivacyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kIdsOnlyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kRequiredtagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kExcludedtagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_GetUserFiles_Request)
}
CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      requiredtags_(from.requiredtags_),
      excludedtags_(from.excludedtags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sortmethod_.UnsafeSetDefault(&::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get());
  if (from.has_sortmethod()) {
    sortmethod_.AssignWithDefault(&::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get(), from.sortmethod_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numperpage_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(numperpage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_GetUserFiles_Request)
}

void CPublishedFile_GetUserFiles_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_GetUserFiles_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  sortmethod_.UnsafeSetDefault(&::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privacy_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(privacy_));
  page_ = 1u;
  numperpage_ = 1u;
}

CPublishedFile_GetUserFiles_Request::~CPublishedFile_GetUserFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_GetUserFiles_Request)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Request::SharedDtor() {
  sortmethod_.DestroyNoArena(&::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get());
}

void CPublishedFile_GetUserFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_GetUserFiles_Request& CPublishedFile_GetUserFiles_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_GetUserFiles_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_GetUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredtags_.Clear();
  excludedtags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sortmethod_.UnsafeMutablePointer()->assign(*&::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get());
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privacy_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(privacy_));
    page_ = 1u;
    numperpage_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_GetUserFiles_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_GetUserFiles_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App Id to retrieve published files from."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 page = 3 [default = 1, (.proto.dota.description) = "(Optional) Starting page for results."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 numperpage = 4 [default = 1, (.proto.dota.description) = "(Optional) The number of results, per page to return."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_numperpage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string sortmethod = 6 [default = "lastupdated", (.proto.dota.description) = "(Optional) Sorting method to use on returned values."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_GetUserFiles_Request.sortmethod");
        object = msg->mutable_sortmethod();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool totalonly = 7 [(.proto.dota.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_totalonly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 privacy = 9 [(.proto.dota.description) = "(optional) Filter by privacy settings."];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_privacy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool ids_only = 10 [(.proto.dota.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_ids_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string requiredtags = 11 [(.proto.dota.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_GetUserFiles_Request.requiredtags");
          object = msg->add_requiredtags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated string excludedtags = 12 [(.proto.dota.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_GetUserFiles_Request.excludedtags");
          object = msg->add_excludedtags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_GetUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App Id to retrieve published files from."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page = 3 [default = 1, (.proto.dota.description) = "(Optional) Starting page for results."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_page(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numperpage = 4 [default = 1, (.proto.dota.description) = "(Optional) The number of results, per page to return."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_numperpage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numperpage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sortmethod = 6 [default = "lastupdated", (.proto.dota.description) = "(Optional) Sorting method to use on returned values."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortmethod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortmethod().data(), static_cast<int>(this->sortmethod().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_GetUserFiles_Request.sortmethod");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool totalonly = 7 [(.proto.dota.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_totalonly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &totalonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 privacy = 9 [(.proto.dota.description) = "(optional) Filter by privacy settings."];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_privacy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ids_only = 10 [(.proto.dota.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_ids_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ids_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requiredtags = 11 [(.proto.dota.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requiredtags(this->requiredtags_size() - 1).data(),
            static_cast<int>(this->requiredtags(this->requiredtags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_GetUserFiles_Request.requiredtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string excludedtags = 12 [(.proto.dota.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excludedtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excludedtags(this->excludedtags_size() - 1).data(),
            static_cast<int>(this->excludedtags(this->excludedtags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_GetUserFiles_Request.excludedtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_GetUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_GetUserFiles_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_GetUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App Id to retrieve published files from."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 page = 3 [default = 1, (.proto.dota.description) = "(Optional) Starting page for results."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page(), output);
  }

  // optional uint32 numperpage = 4 [default = 1, (.proto.dota.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numperpage(), output);
  }

  // optional string sortmethod = 6 [default = "lastupdated", (.proto.dota.description) = "(Optional) Sorting method to use on returned values."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortmethod().data(), static_cast<int>(this->sortmethod().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Request.sortmethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sortmethod(), output);
  }

  // optional bool totalonly = 7 [(.proto.dota.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->totalonly(), output);
  }

  // optional uint32 privacy = 9 [(.proto.dota.description) = "(optional) Filter by privacy settings."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->privacy(), output);
  }

  // optional bool ids_only = 10 [(.proto.dota.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ids_only(), output);
  }

  // repeated string requiredtags = 11 [(.proto.dota.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), static_cast<int>(this->requiredtags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Request.requiredtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->requiredtags(i), output);
  }

  // repeated string excludedtags = 12 [(.proto.dota.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), static_cast<int>(this->excludedtags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Request.excludedtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->excludedtags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_GetUserFiles_Request)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App Id to retrieve published files from."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 page = 3 [default = 1, (.proto.dota.description) = "(Optional) Starting page for results."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page(), target);
  }

  // optional uint32 numperpage = 4 [default = 1, (.proto.dota.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numperpage(), target);
  }

  // optional string sortmethod = 6 [default = "lastupdated", (.proto.dota.description) = "(Optional) Sorting method to use on returned values."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortmethod().data(), static_cast<int>(this->sortmethod().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Request.sortmethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sortmethod(), target);
  }

  // optional bool totalonly = 7 [(.proto.dota.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->totalonly(), target);
  }

  // optional uint32 privacy = 9 [(.proto.dota.description) = "(optional) Filter by privacy settings."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->privacy(), target);
  }

  // optional bool ids_only = 10 [(.proto.dota.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ids_only(), target);
  }

  // repeated string requiredtags = 11 [(.proto.dota.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), static_cast<int>(this->requiredtags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Request.requiredtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->requiredtags(i), target);
  }

  // repeated string excludedtags = 12 [(.proto.dota.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), static_cast<int>(this->excludedtags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Request.excludedtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->excludedtags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_GetUserFiles_Request)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requiredtags = 11 [(.proto.dota.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requiredtags_size());
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredtags(i));
  }

  // repeated string excludedtags = 12 [(.proto.dota.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->excludedtags_size());
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excludedtags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sortmethod = 6 [default = "lastupdated", (.proto.dota.description) = "(Optional) Sorting method to use on returned values."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortmethod());
    }

    // optional uint32 appid = 1 [(.proto.dota.description) = "App Id to retrieve published files from."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool totalonly = 7 [(.proto.dota.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ids_only = 10 [(.proto.dota.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 privacy = 9 [(.proto.dota.description) = "(optional) Filter by privacy settings."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privacy());
    }

    // optional uint32 page = 3 [default = 1, (.proto.dota.description) = "(Optional) Starting page for results."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 numperpage = 4 [default = 1, (.proto.dota.description) = "(Optional) The number of results, per page to return."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numperpage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_GetUserFiles_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_GetUserFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_GetUserFiles_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sortmethod_.AssignWithDefault(&::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get(), from.sortmethod_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalonly_ = from.totalonly_;
    }
    if (cached_has_bits & 0x00000008u) {
      ids_only_ = from.ids_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      privacy_ = from.privacy_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000040u) {
      numperpage_ = from.numperpage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request::Swap(CPublishedFile_GetUserFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Request::InternalSwap(CPublishedFile_GetUserFiles_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requiredtags_.InternalSwap(CastToBase(&other->requiredtags_));
  excludedtags_.InternalSwap(CastToBase(&other->excludedtags_));
  sortmethod_.Swap(&other->sortmethod_, &::proto::dota::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_.get(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(totalonly_, other->totalonly_);
  swap(ids_only_, other->ids_only_);
  swap(privacy_, other->privacy_);
  swap(page_, other->page_);
  swap(numperpage_, other->numperpage_);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_GetUserFiles_Response_App::InitAsDefaultInstance() {
}
class CPublishedFile_GetUserFiles_Response_App::HasBitSetters {
 public:
  static void set_has_appid(CPublishedFile_GetUserFiles_Response_App* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CPublishedFile_GetUserFiles_Response_App* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_shortcutid(CPublishedFile_GetUserFiles_Response_App* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_private_(CPublishedFile_GetUserFiles_Response_App* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Response_App::kAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kNameFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kShortcutidFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_GetUserFiles_Response.App)
}
CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_)) + sizeof(private__));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_GetUserFiles_Response.App)
}

void CPublishedFile_GetUserFiles_Response_App::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&private__) -
      reinterpret_cast<char*>(&appid_)) + sizeof(private__));
}

CPublishedFile_GetUserFiles_Response_App::~CPublishedFile_GetUserFiles_Response_App() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Response_App::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Response_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response_App::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_GetUserFiles_Response_App_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_GetUserFiles_Response_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&private__) -
        reinterpret_cast<char*>(&appid_)) + sizeof(private__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_GetUserFiles_Response_App::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_GetUserFiles_Response_App*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_GetUserFiles_Response.App.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 shortcutid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_shortcutid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool private = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_private_(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_GetUserFiles_Response_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_GetUserFiles_Response.App.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shortcutid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_shortcutid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcutid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool private = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_private_(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_GetUserFiles_Response_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Response.App.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 shortcutid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shortcutid(), output);
  }

  // optional bool private = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->private_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_GetUserFiles_Response.App)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Response_App::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_GetUserFiles_Response.App.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 shortcutid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shortcutid(), target);
  }

  // optional bool private = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->private_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 shortcutid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcutid());
    }

    // optional bool private = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response_App* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_GetUserFiles_Response_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_GetUserFiles_Response.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_GetUserFiles_Response.App)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00000008u) {
      private__ = from.private__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response_App::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response_App::Swap(CPublishedFile_GetUserFiles_Response_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Response_App::InternalSwap(CPublishedFile_GetUserFiles_Response_App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
  swap(shortcutid_, other->shortcutid_);
  swap(private__, other->private__);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Response_App::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_GetUserFiles_Response::InitAsDefaultInstance() {
}
class CPublishedFile_GetUserFiles_Response::HasBitSetters {
 public:
  static void set_has_total(CPublishedFile_GetUserFiles_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_startindex(CPublishedFile_GetUserFiles_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Response::kTotalFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kStartindexFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kPublishedfiledetailsFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kAppsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_GetUserFiles_Response)
}
CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      publishedfiledetails_(from.publishedfiledetails_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_GetUserFiles_Response)
}

void CPublishedFile_GetUserFiles_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_GetUserFiles_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startindex_) -
      reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
}

CPublishedFile_GetUserFiles_Response::~CPublishedFile_GetUserFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_GetUserFiles_Response)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Response::SharedDtor() {
}

void CPublishedFile_GetUserFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_GetUserFiles_Response& CPublishedFile_GetUserFiles_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_GetUserFiles_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_GetUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startindex_) -
        reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_GetUserFiles_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_GetUserFiles_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 total = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 startindex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_startindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::PublishedFileDetails::_InternalParse;
          object = msg->add_publishedfiledetails();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CPublishedFile_GetUserFiles_Response.App apps = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CPublishedFile_GetUserFiles_Response_App::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_GetUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_total(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_startindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CPublishedFile_GetUserFiles_Response.App apps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_GetUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_GetUserFiles_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_GetUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // optional uint32 startindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startindex(), output);
  }

  // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->publishedfiledetails_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->publishedfiledetails(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->apps(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_GetUserFiles_Response)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // optional uint32 startindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startindex(), target);
  }

  // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->publishedfiledetails_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->publishedfiledetails(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->apps(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_GetUserFiles_Response)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.PublishedFileDetails publishedfiledetails = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->publishedfiledetails_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->publishedfiledetails(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CPublishedFile_GetUserFiles_Response.App apps = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // optional uint32 startindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_GetUserFiles_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_GetUserFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_GetUserFiles_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      startindex_ = from.startindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response::Swap(CPublishedFile_GetUserFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Response::InternalSwap(CPublishedFile_GetUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&publishedfiledetails_)->InternalSwap(CastToBase(&other->publishedfiledetails_));
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  swap(total_, other->total_);
  swap(startindex_, other->startindex_);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Update_Request::InitAsDefaultInstance() {
}
class CPublishedFile_Update_Request::HasBitSetters {
 public:
  static void set_has_appid(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_publishedfileid(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_title(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_description(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_visibility(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_filename(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_preview_filename(CPublishedFile_Update_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Update_Request::kAppidFieldNumber;
const int CPublishedFile_Update_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Update_Request::kTitleFieldNumber;
const int CPublishedFile_Update_Request::kFileDescriptionFieldNumber;
const int CPublishedFile_Update_Request::kVisibilityFieldNumber;
const int CPublishedFile_Update_Request::kTagsFieldNumber;
const int CPublishedFile_Update_Request::kFilenameFieldNumber;
const int CPublishedFile_Update_Request::kPreviewFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Update_Request::CPublishedFile_Update_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Update_Request)
}
CPublishedFile_Update_Request::CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_description()) {
    file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  preview_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_filename()) {
    preview_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_filename_);
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Update_Request)
}

void CPublishedFile_Update_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_Update_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publishedfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&publishedfileid_)) + sizeof(visibility_));
}

CPublishedFile_Update_Request::~CPublishedFile_Update_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Update_Request)
  SharedDtor();
}

void CPublishedFile_Update_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Update_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Update_Request& CPublishedFile_Update_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Update_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Update_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Update_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      preview_filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Update_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Update_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this published file belongs to."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 publishedfileid = 2 [(.proto.dota.description) = "Published file id of the file we\'d like update."];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_publishedfileid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string title = 3 [(.proto.dota.description) = "(Optional) Title of the published file."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Update_Request.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string file_description = 4 [(.proto.dota.description) = "(Optional) Description of the published file."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Update_Request.file_description");
        object = msg->mutable_file_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 visibility = 5 [(.proto.dota.description) = "(Optional) Visibility of the published file."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_visibility(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string tags = 6 [(.proto.dota.description) = "(Optional) Set of tags for the published file."];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Update_Request.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional string filename = 7 [(.proto.dota.description) = "(Optional) Filename for the published file."];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Update_Request.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string preview_filename = 8 [(.proto.dota.description) = "(Optional) Preview filename for the published file."];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_Update_Request.preview_filename");
        object = msg->mutable_preview_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Update_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Update_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this published file belongs to."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 publishedfileid = 2 [(.proto.dota.description) = "Published file id of the file we\'d like update."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_publishedfileid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3 [(.proto.dota.description) = "(Optional) Title of the published file."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Update_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_description = 4 [(.proto.dota.description) = "(Optional) Description of the published file."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), static_cast<int>(this->file_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Update_Request.file_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visibility = 5 [(.proto.dota.description) = "(Optional) Visibility of the published file."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_visibility(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 6 [(.proto.dota.description) = "(Optional) Set of tags for the published file."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Update_Request.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 7 [(.proto.dota.description) = "(Optional) Filename for the published file."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Update_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preview_filename = 8 [(.proto.dota.description) = "(Optional) Preview filename for the published file."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_filename().data(), static_cast<int>(this->preview_filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_Update_Request.preview_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Update_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Update_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Update_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Update_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this published file belongs to."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional fixed64 publishedfileid = 2 [(.proto.dota.description) = "Published file id of the file we\'d like update."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->publishedfileid(), output);
  }

  // optional string title = 3 [(.proto.dota.description) = "(Optional) Title of the published file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string file_description = 4 [(.proto.dota.description) = "(Optional) Description of the published file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), static_cast<int>(this->file_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_description(), output);
  }

  // optional uint32 visibility = 5 [(.proto.dota.description) = "(Optional) Visibility of the published file."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->visibility(), output);
  }

  // repeated string tags = 6 [(.proto.dota.description) = "(Optional) Set of tags for the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // optional string filename = 7 [(.proto.dota.description) = "(Optional) Filename for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional string preview_filename = 8 [(.proto.dota.description) = "(Optional) Preview filename for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_filename().data(), static_cast<int>(this->preview_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.preview_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->preview_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Update_Request)
}

::google::protobuf::uint8* CPublishedFile_Update_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Update_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this published file belongs to."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional fixed64 publishedfileid = 2 [(.proto.dota.description) = "Published file id of the file we\'d like update."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->publishedfileid(), target);
  }

  // optional string title = 3 [(.proto.dota.description) = "(Optional) Title of the published file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string file_description = 4 [(.proto.dota.description) = "(Optional) Description of the published file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), static_cast<int>(this->file_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_description(), target);
  }

  // optional uint32 visibility = 5 [(.proto.dota.description) = "(Optional) Visibility of the published file."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->visibility(), target);
  }

  // repeated string tags = 6 [(.proto.dota.description) = "(Optional) Set of tags for the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tags(i), target);
  }

  // optional string filename = 7 [(.proto.dota.description) = "(Optional) Filename for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional string preview_filename = 8 [(.proto.dota.description) = "(Optional) Preview filename for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_filename().data(), static_cast<int>(this->preview_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_Update_Request.preview_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->preview_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Update_Request)
  return target;
}

size_t CPublishedFile_Update_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Update_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 6 [(.proto.dota.description) = "(Optional) Set of tags for the published file."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string title = 3 [(.proto.dota.description) = "(Optional) Title of the published file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 4 [(.proto.dota.description) = "(Optional) Description of the published file."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string filename = 7 [(.proto.dota.description) = "(Optional) Filename for the published file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string preview_filename = 8 [(.proto.dota.description) = "(Optional) Preview filename for the published file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_filename());
    }

    // optional fixed64 publishedfileid = 2 [(.proto.dota.description) = "Published file id of the file we\'d like update."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1 [(.proto.dota.description) = "App Id this published file belongs to."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 visibility = 5 [(.proto.dota.description) = "(Optional) Visibility of the published file."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Update_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Update_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Update_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Update_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Update_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Request::MergeFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      preview_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_filename_);
    }
    if (cached_has_bits & 0x00000010u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Update_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Request::CopyFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Request::Swap(CPublishedFile_Update_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Update_Request::InternalSwap(CPublishedFile_Update_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_description_.Swap(&other->file_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preview_filename_.Swap(&other->preview_filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publishedfileid_, other->publishedfileid_);
  swap(appid_, other->appid_);
  swap(visibility_, other->visibility_);
}

::google::protobuf::Metadata CPublishedFile_Update_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_Update_Response::InitAsDefaultInstance() {
}
class CPublishedFile_Update_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Update_Response::CPublishedFile_Update_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_Update_Response)
}
CPublishedFile_Update_Response::CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_Update_Response)
}

void CPublishedFile_Update_Response::SharedCtor() {
}

CPublishedFile_Update_Response::~CPublishedFile_Update_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_Update_Response)
  SharedDtor();
}

void CPublishedFile_Update_Response::SharedDtor() {
}

void CPublishedFile_Update_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_Update_Response& CPublishedFile_Update_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_Update_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_Update_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_Update_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_Update_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_Update_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_Update_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_Update_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_Update_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_Update_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_Update_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_Update_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_Update_Response)
}

::google::protobuf::uint8* CPublishedFile_Update_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_Update_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_Update_Response)
  return target;
}

size_t CPublishedFile_Update_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_Update_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Update_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Update_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_Update_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_Update_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_Update_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Response::MergeFrom(const CPublishedFile_Update_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Update_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Response::CopyFrom(const CPublishedFile_Update_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Response::Swap(CPublishedFile_Update_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Update_Response::InternalSwap(CPublishedFile_Update_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPublishedFile_Update_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_RefreshVotingQueue_Request::InitAsDefaultInstance() {
}
class CPublishedFile_RefreshVotingQueue_Request::HasBitSetters {
 public:
  static void set_has_appid(CPublishedFile_RefreshVotingQueue_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_matching_file_type(CPublishedFile_RefreshVotingQueue_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_match_all_tags(CPublishedFile_RefreshVotingQueue_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_desired_queue_size(CPublishedFile_RefreshVotingQueue_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_RefreshVotingQueue_Request::kAppidFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kMatchingFileTypeFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kMatchAllTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kExcludedTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kDesiredQueueSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
}
CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      excluded_tags_(from.excluded_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_all_tags_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(match_all_tags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
}

void CPublishedFile_RefreshVotingQueue_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPublishedFile_RefreshVotingQueue_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desired_queue_size_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(desired_queue_size_));
  match_all_tags_ = true;
}

CPublishedFile_RefreshVotingQueue_Request::~CPublishedFile_RefreshVotingQueue_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  SharedDtor();
}

void CPublishedFile_RefreshVotingQueue_Request::SharedDtor() {
}

void CPublishedFile_RefreshVotingQueue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_RefreshVotingQueue_Request& CPublishedFile_RefreshVotingQueue_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_RefreshVotingQueue_Request_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_RefreshVotingQueue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  excluded_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desired_queue_size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(desired_queue_size_));
    match_all_tags_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_RefreshVotingQueue_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_RefreshVotingQueue_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 matching_file_type = 2 [(.proto.dota.description) = "EPublishedFileInfoMatchingFileType"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_matching_file_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string tags = 3 [(.proto.dota.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_RefreshVotingQueue_Request.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional bool match_all_tags = 4 [default = true, (.proto.dota.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_match_all_tags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string excluded_tags = 5 [(.proto.dota.description) = "Exclude any files that have any of these tags."];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
          object = msg->add_excluded_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional uint32 desired_queue_size = 6 [(.proto.dota.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_desired_queue_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_RefreshVotingQueue_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_file_type = 2 [(.proto.dota.description) = "EPublishedFileInfoMatchingFileType"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_matching_file_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3 [(.proto.dota.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_RefreshVotingQueue_Request.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_all_tags = 4 [default = true, (.proto.dota.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_match_all_tags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_all_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string excluded_tags = 5 [(.proto.dota.description) = "Exclude any files that have any of these tags."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_tags(this->excluded_tags_size() - 1).data(),
            static_cast<int>(this->excluded_tags(this->excluded_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 desired_queue_size = 6 [(.proto.dota.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_desired_queue_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desired_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_RefreshVotingQueue_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 matching_file_type = 2 [(.proto.dota.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matching_file_type(), output);
  }

  // repeated string tags = 3 [(.proto.dota.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_RefreshVotingQueue_Request.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // optional bool match_all_tags = 4 [default = true, (.proto.dota.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->match_all_tags(), output);
  }

  // repeated string excluded_tags = 5 [(.proto.dota.description) = "Exclude any files that have any of these tags."];
  for (int i = 0, n = this->excluded_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_tags(i).data(), static_cast<int>(this->excluded_tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->excluded_tags(i), output);
  }

  // optional uint32 desired_queue_size = 6 [(.proto.dota.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->desired_queue_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
}

::google::protobuf::uint8* CPublishedFile_RefreshVotingQueue_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 matching_file_type = 2 [(.proto.dota.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matching_file_type(), target);
  }

  // repeated string tags = 3 [(.proto.dota.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_RefreshVotingQueue_Request.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // optional bool match_all_tags = 4 [default = true, (.proto.dota.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->match_all_tags(), target);
  }

  // repeated string excluded_tags = 5 [(.proto.dota.description) = "Exclude any files that have any of these tags."];
  for (int i = 0, n = this->excluded_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_tags(i).data(), static_cast<int>(this->excluded_tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->excluded_tags(i), target);
  }

  // optional uint32 desired_queue_size = 6 [(.proto.dota.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->desired_queue_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3 [(.proto.dota.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string excluded_tags = 5 [(.proto.dota.description) = "Exclude any files that have any of these tags."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->excluded_tags_size());
  for (int i = 0, n = this->excluded_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 matching_file_type = 2 [(.proto.dota.description) = "EPublishedFileInfoMatchingFileType"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_file_type());
    }

    // optional uint32 desired_queue_size = 6 [(.proto.dota.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desired_queue_size());
    }

    // optional bool match_all_tags = 4 [default = true, (.proto.dota.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_RefreshVotingQueue_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  excluded_tags_.MergeFrom(from.excluded_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      matching_file_type_ = from.matching_file_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      desired_queue_size_ = from.desired_queue_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_all_tags_ = from.match_all_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Request::Swap(CPublishedFile_RefreshVotingQueue_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_RefreshVotingQueue_Request::InternalSwap(CPublishedFile_RefreshVotingQueue_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  excluded_tags_.InternalSwap(CastToBase(&other->excluded_tags_));
  swap(appid_, other->appid_);
  swap(matching_file_type_, other->matching_file_type_);
  swap(desired_queue_size_, other->desired_queue_size_);
  swap(match_all_tags_, other->match_all_tags_);
}

::google::protobuf::Metadata CPublishedFile_RefreshVotingQueue_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPublishedFile_RefreshVotingQueue_Response::InitAsDefaultInstance() {
}
class CPublishedFile_RefreshVotingQueue_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
}
CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
}

void CPublishedFile_RefreshVotingQueue_Response::SharedCtor() {
}

CPublishedFile_RefreshVotingQueue_Response::~CPublishedFile_RefreshVotingQueue_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  SharedDtor();
}

void CPublishedFile_RefreshVotingQueue_Response::SharedDtor() {
}

void CPublishedFile_RefreshVotingQueue_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPublishedFile_RefreshVotingQueue_Response& CPublishedFile_RefreshVotingQueue_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPublishedFile_RefreshVotingQueue_Response_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.base);
  return *internal_default_instance();
}


void CPublishedFile_RefreshVotingQueue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPublishedFile_RefreshVotingQueue_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPublishedFile_RefreshVotingQueue_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPublishedFile_RefreshVotingQueue_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPublishedFile_RefreshVotingQueue_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
}

::google::protobuf::uint8* CPublishedFile_RefreshVotingQueue_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPublishedFile_RefreshVotingQueue_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CPublishedFile_RefreshVotingQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Response::Swap(CPublishedFile_RefreshVotingQueue_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_RefreshVotingQueue_Response::InternalSwap(CPublishedFile_RefreshVotingQueue_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPublishedFile_RefreshVotingQueue_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return ::file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Subscribe_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Subscribe_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Subscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Subscribe_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Subscribe_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Subscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Unsubscribe_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Unsubscribe_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Unsubscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Unsubscribe_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Unsubscribe_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Unsubscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Publish_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Publish_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Publish_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Publish_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Publish_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Publish_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_GetDetails_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_GetDetails_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_GetDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::PublishedFileDetails_Tag* Arena::CreateMaybeMessage< ::proto::dota::PublishedFileDetails_Tag >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::PublishedFileDetails_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::PublishedFileDetails_Preview* Arena::CreateMaybeMessage< ::proto::dota::PublishedFileDetails_Preview >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::PublishedFileDetails_Preview >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::PublishedFileDetails_Child* Arena::CreateMaybeMessage< ::proto::dota::PublishedFileDetails_Child >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::PublishedFileDetails_Child >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::PublishedFileDetails_KVTag* Arena::CreateMaybeMessage< ::proto::dota::PublishedFileDetails_KVTag >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::PublishedFileDetails_KVTag >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::PublishedFileDetails_VoteData* Arena::CreateMaybeMessage< ::proto::dota::PublishedFileDetails_VoteData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::PublishedFileDetails_VoteData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::PublishedFileDetails* Arena::CreateMaybeMessage< ::proto::dota::PublishedFileDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::PublishedFileDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_GetDetails_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_GetDetails_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_GetDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_GetUserFiles_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_GetUserFiles_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_GetUserFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_GetUserFiles_Response_App* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_GetUserFiles_Response_App >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_GetUserFiles_Response_App >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_GetUserFiles_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_GetUserFiles_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_GetUserFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Update_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Update_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Update_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_Update_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_Update_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_Update_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_RefreshVotingQueue_Request* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_RefreshVotingQueue_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_RefreshVotingQueue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CPublishedFile_RefreshVotingQueue_Response* Arena::CreateMaybeMessage< ::proto::dota::CPublishedFile_RefreshVotingQueue_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CPublishedFile_RefreshVotingQueue_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
