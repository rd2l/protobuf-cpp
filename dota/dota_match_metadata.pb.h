// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#ifndef PROTOBUF_INCLUDED_dota_5fmatch_5fmetadata_2eproto
#define PROTOBUF_INCLUDED_dota_5fmatch_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_gcmessages.pb.h"
#include "dota_gcmessages_common_match_management.pb.h"
#include "dota_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fmatch_5fmetadata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fmatch_5fmetadata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dota_5fmatch_5fmetadata_2eproto();
namespace proto {
namespace dota {
class CDOTAMatchMetadata;
class CDOTAMatchMetadataDefaultTypeInternal;
extern CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
class CDOTAMatchMetadataFile;
class CDOTAMatchMetadataFileDefaultTypeInternal;
extern CDOTAMatchMetadataFileDefaultTypeInternal _CDOTAMatchMetadataFile_default_instance_;
class CDOTAMatchMetadata_Team;
class CDOTAMatchMetadata_TeamDefaultTypeInternal;
extern CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
class CDOTAMatchMetadata_Team_AutoStyleCriteria;
class CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
class CDOTAMatchMetadata_Team_EventData;
class CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
class CDOTAMatchMetadata_Team_InventorySnapshot;
class CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
class CDOTAMatchMetadata_Team_ItemPurchase;
class CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
class CDOTAMatchMetadata_Team_Player;
class CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
class CDOTAMatchMetadata_Team_PlayerKill;
class CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
class CDOTAMatchMetadata_Team_StrangeGemProgress;
class CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
class CDOTAMatchMetadata_Team_SubChallenge;
class CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
class CDOTAMatchMetadata_Team_VictoryPrediction;
class CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
class CDOTAMatchPrivateMetadata;
class CDOTAMatchPrivateMetadataDefaultTypeInternal;
extern CDOTAMatchPrivateMetadataDefaultTypeInternal _CDOTAMatchPrivateMetadata_default_instance_;
class CDOTAMatchPrivateMetadata_Team;
class CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Building;
class CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player;
class CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget;
class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget;
class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal;
extern CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_;
class CMsgDOTADPCMatch;
class CMsgDOTADPCMatchDefaultTypeInternal;
extern CMsgDOTADPCMatchDefaultTypeInternal _CMsgDOTADPCMatch_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CDOTAMatchMetadata* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadataFile* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadataFile>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_EventData>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_Player>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_PlayerKill>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_SubChallenge>(Arena*);
template<> ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Building>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Player>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(Arena*);
template<> ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* Arena::CreateMaybeMessage<::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(Arena*);
template<> ::proto::dota::CMsgDOTADPCMatch* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTADPCMatch>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

// ===================================================================

class CDOTAMatchMetadataFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadataFile) */ {
 public:
  CDOTAMatchMetadataFile();
  virtual ~CDOTAMatchMetadataFile();

  CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from);

  inline CDOTAMatchMetadataFile& operator=(const CDOTAMatchMetadataFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadataFile(CDOTAMatchMetadataFile&& from) noexcept
    : CDOTAMatchMetadataFile() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadataFile& operator=(CDOTAMatchMetadataFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadataFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadataFile* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadataFile*>(
               &_CDOTAMatchMetadataFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CDOTAMatchMetadataFile* other);
  friend void swap(CDOTAMatchMetadataFile& a, CDOTAMatchMetadataFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadataFile* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadataFile>(nullptr);
  }

  CDOTAMatchMetadataFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadataFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadataFile& from);
  void MergeFrom(const CDOTAMatchMetadataFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadataFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes private_metadata = 5;
  bool has_private_metadata() const;
  void clear_private_metadata();
  static const int kPrivateMetadataFieldNumber = 5;
  const ::std::string& private_metadata() const;
  void set_private_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_private_metadata(::std::string&& value);
  #endif
  void set_private_metadata(const char* value);
  void set_private_metadata(const void* value, size_t size);
  ::std::string* mutable_private_metadata();
  ::std::string* release_private_metadata();
  void set_allocated_private_metadata(::std::string* private_metadata);

  // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::proto::dota::CDOTAMatchMetadata& metadata() const;
  ::proto::dota::CDOTAMatchMetadata* release_metadata();
  ::proto::dota::CDOTAMatchMetadata* mutable_metadata();
  void set_allocated_metadata(::proto::dota::CDOTAMatchMetadata* metadata);

  // required uint64 match_id = 2;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadataFile)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_metadata_;
  ::proto::dota::CDOTAMatchMetadata* metadata_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::int32 version_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_PlayerKill final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.PlayerKill) */ {
 public:
  CDOTAMatchMetadata_Team_PlayerKill();
  virtual ~CDOTAMatchMetadata_Team_PlayerKill();

  CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from);

  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(const CDOTAMatchMetadata_Team_PlayerKill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_PlayerKill(CDOTAMatchMetadata_Team_PlayerKill&& from) noexcept
    : CDOTAMatchMetadata_Team_PlayerKill() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(CDOTAMatchMetadata_Team_PlayerKill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_PlayerKill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_PlayerKill* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_PlayerKill*>(
               &_CDOTAMatchMetadata_Team_PlayerKill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CDOTAMatchMetadata_Team_PlayerKill* other);
  friend void swap(CDOTAMatchMetadata_Team_PlayerKill& a, CDOTAMatchMetadata_Team_PlayerKill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_PlayerKill* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_PlayerKill>(nullptr);
  }

  CDOTAMatchMetadata_Team_PlayerKill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_PlayerKill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 victim_slot = 1;
  bool has_victim_slot() const;
  void clear_victim_slot();
  static const int kVictimSlotFieldNumber = 1;
  ::google::protobuf::uint32 victim_slot() const;
  void set_victim_slot(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 victim_slot_;
  ::google::protobuf::uint32 count_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_ItemPurchase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase) */ {
 public:
  CDOTAMatchMetadata_Team_ItemPurchase();
  virtual ~CDOTAMatchMetadata_Team_ItemPurchase();

  CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from);

  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_ItemPurchase(CDOTAMatchMetadata_Team_ItemPurchase&& from) noexcept
    : CDOTAMatchMetadata_Team_ItemPurchase() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(CDOTAMatchMetadata_Team_ItemPurchase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_ItemPurchase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_ItemPurchase* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_ItemPurchase*>(
               &_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CDOTAMatchMetadata_Team_ItemPurchase* other);
  friend void swap(CDOTAMatchMetadata_Team_ItemPurchase& a, CDOTAMatchMetadata_Team_ItemPurchase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_ItemPurchase* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ItemPurchase>(nullptr);
  }

  CDOTAMatchMetadata_Team_ItemPurchase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ItemPurchase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint32 item_id() const;
  void set_item_id(::google::protobuf::uint32 value);

  // optional int32 purchase_time = 2;
  bool has_purchase_time() const;
  void clear_purchase_time();
  static const int kPurchaseTimeFieldNumber = 2;
  ::google::protobuf::int32 purchase_time() const;
  void set_purchase_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::int32 purchase_time_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_InventorySnapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot) */ {
 public:
  CDOTAMatchMetadata_Team_InventorySnapshot();
  virtual ~CDOTAMatchMetadata_Team_InventorySnapshot();

  CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from);

  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_InventorySnapshot(CDOTAMatchMetadata_Team_InventorySnapshot&& from) noexcept
    : CDOTAMatchMetadata_Team_InventorySnapshot() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(CDOTAMatchMetadata_Team_InventorySnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_InventorySnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_InventorySnapshot* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_InventorySnapshot*>(
               &_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other);
  friend void swap(CDOTAMatchMetadata_Team_InventorySnapshot& a, CDOTAMatchMetadata_Team_InventorySnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_InventorySnapshot* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_InventorySnapshot>(nullptr);
  }

  CDOTAMatchMetadata_Team_InventorySnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_InventorySnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 item_id = 1;
  int item_id_size() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint32 item_id(int index) const;
  void set_item_id(int index, ::google::protobuf::uint32 value);
  void add_item_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_id();

  // optional int32 game_time = 2;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  ::google::protobuf::int32 game_time() const;
  void set_game_time(::google::protobuf::int32 value);

  // optional uint32 kills = 3;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 3;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 5;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 5;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 6;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_id_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 level_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_AutoStyleCriteria final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria) */ {
 public:
  CDOTAMatchMetadata_Team_AutoStyleCriteria();
  virtual ~CDOTAMatchMetadata_Team_AutoStyleCriteria();

  CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_AutoStyleCriteria(CDOTAMatchMetadata_Team_AutoStyleCriteria&& from) noexcept
    : CDOTAMatchMetadata_Team_AutoStyleCriteria() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(CDOTAMatchMetadata_Team_AutoStyleCriteria&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_AutoStyleCriteria& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_AutoStyleCriteria* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_AutoStyleCriteria*>(
               &_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other);
  friend void swap(CDOTAMatchMetadata_Team_AutoStyleCriteria& a, CDOTAMatchMetadata_Team_AutoStyleCriteria& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_AutoStyleCriteria>(nullptr);
  }

  CDOTAMatchMetadata_Team_AutoStyleCriteria* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_AutoStyleCriteria>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 name_token = 1;
  bool has_name_token() const;
  void clear_name_token();
  static const int kNameTokenFieldNumber = 1;
  ::google::protobuf::uint32 name_token() const;
  void set_name_token(::google::protobuf::uint32 value);

  // optional float value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 name_token_;
  float value_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_StrangeGemProgress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress) */ {
 public:
  CDOTAMatchMetadata_Team_StrangeGemProgress();
  virtual ~CDOTAMatchMetadata_Team_StrangeGemProgress();

  CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);

  inline CDOTAMatchMetadata_Team_StrangeGemProgress& operator=(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_StrangeGemProgress(CDOTAMatchMetadata_Team_StrangeGemProgress&& from) noexcept
    : CDOTAMatchMetadata_Team_StrangeGemProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_StrangeGemProgress& operator=(CDOTAMatchMetadata_Team_StrangeGemProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_StrangeGemProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_StrangeGemProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_StrangeGemProgress*>(
               &_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CDOTAMatchMetadata_Team_StrangeGemProgress* other);
  friend void swap(CDOTAMatchMetadata_Team_StrangeGemProgress& a, CDOTAMatchMetadata_Team_StrangeGemProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_StrangeGemProgress* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_StrangeGemProgress>(nullptr);
  }

  CDOTAMatchMetadata_Team_StrangeGemProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_StrangeGemProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 kill_eater_type = 1;
  bool has_kill_eater_type() const;
  void clear_kill_eater_type();
  static const int kKillEaterTypeFieldNumber = 1;
  ::google::protobuf::uint32 kill_eater_type() const;
  void set_kill_eater_type(::google::protobuf::uint32 value);

  // optional uint32 gem_item_def_index = 2;
  bool has_gem_item_def_index() const;
  void clear_gem_item_def_index();
  static const int kGemItemDefIndexFieldNumber = 2;
  ::google::protobuf::uint32 gem_item_def_index() const;
  void set_gem_item_def_index(::google::protobuf::uint32 value);

  // optional uint32 required_hero_id = 3;
  bool has_required_hero_id() const;
  void clear_required_hero_id();
  static const int kRequiredHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 required_hero_id() const;
  void set_required_hero_id(::google::protobuf::uint32 value);

  // optional uint32 starting_value = 4;
  bool has_starting_value() const;
  void clear_starting_value();
  static const int kStartingValueFieldNumber = 4;
  ::google::protobuf::uint32 starting_value() const;
  void set_starting_value(::google::protobuf::uint32 value);

  // optional uint32 ending_value = 5;
  bool has_ending_value() const;
  void clear_ending_value();
  static const int kEndingValueFieldNumber = 5;
  ::google::protobuf::uint32 ending_value() const;
  void set_ending_value(::google::protobuf::uint32 value);

  // optional uint32 owner_item_def_index = 6;
  bool has_owner_item_def_index() const;
  void clear_owner_item_def_index();
  static const int kOwnerItemDefIndexFieldNumber = 6;
  ::google::protobuf::uint32 owner_item_def_index() const;
  void set_owner_item_def_index(::google::protobuf::uint32 value);

  // optional uint64 owner_item_id = 7;
  bool has_owner_item_id() const;
  void clear_owner_item_id();
  static const int kOwnerItemIdFieldNumber = 7;
  ::google::protobuf::uint64 owner_item_id() const;
  void set_owner_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 kill_eater_type_;
  ::google::protobuf::uint32 gem_item_def_index_;
  ::google::protobuf::uint32 required_hero_id_;
  ::google::protobuf::uint32 starting_value_;
  ::google::protobuf::uint32 ending_value_;
  ::google::protobuf::uint32 owner_item_def_index_;
  ::google::protobuf::uint64 owner_item_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_VictoryPrediction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction) */ {
 public:
  CDOTAMatchMetadata_Team_VictoryPrediction();
  virtual ~CDOTAMatchMetadata_Team_VictoryPrediction();

  CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from);

  inline CDOTAMatchMetadata_Team_VictoryPrediction& operator=(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_VictoryPrediction(CDOTAMatchMetadata_Team_VictoryPrediction&& from) noexcept
    : CDOTAMatchMetadata_Team_VictoryPrediction() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_VictoryPrediction& operator=(CDOTAMatchMetadata_Team_VictoryPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_VictoryPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_VictoryPrediction* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_VictoryPrediction*>(
               &_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CDOTAMatchMetadata_Team_VictoryPrediction* other);
  friend void swap(CDOTAMatchMetadata_Team_VictoryPrediction& a, CDOTAMatchMetadata_Team_VictoryPrediction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_VictoryPrediction* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_VictoryPrediction>(nullptr);
  }

  CDOTAMatchMetadata_Team_VictoryPrediction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_VictoryPrediction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  void clear_item_def_index();
  static const int kItemDefIndexFieldNumber = 2;
  ::google::protobuf::uint32 item_def_index() const;
  void set_item_def_index(::google::protobuf::uint32 value);

  // optional uint32 starting_value = 3;
  bool has_starting_value() const;
  void clear_starting_value();
  static const int kStartingValueFieldNumber = 3;
  ::google::protobuf::uint32 starting_value() const;
  void set_starting_value(::google::protobuf::uint32 value);

  // optional bool is_victory = 4;
  bool has_is_victory() const;
  void clear_is_victory();
  static const int kIsVictoryFieldNumber = 4;
  bool is_victory() const;
  void set_is_victory(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 item_def_index_;
  ::google::protobuf::uint32 starting_value_;
  bool is_victory_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_SubChallenge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.SubChallenge) */ {
 public:
  CDOTAMatchMetadata_Team_SubChallenge();
  virtual ~CDOTAMatchMetadata_Team_SubChallenge();

  CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from);

  inline CDOTAMatchMetadata_Team_SubChallenge& operator=(const CDOTAMatchMetadata_Team_SubChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_SubChallenge(CDOTAMatchMetadata_Team_SubChallenge&& from) noexcept
    : CDOTAMatchMetadata_Team_SubChallenge() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_SubChallenge& operator=(CDOTAMatchMetadata_Team_SubChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_SubChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_SubChallenge* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_SubChallenge*>(
               &_CDOTAMatchMetadata_Team_SubChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CDOTAMatchMetadata_Team_SubChallenge* other);
  friend void swap(CDOTAMatchMetadata_Team_SubChallenge& a, CDOTAMatchMetadata_Team_SubChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_SubChallenge* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_SubChallenge>(nullptr);
  }

  CDOTAMatchMetadata_Team_SubChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_SubChallenge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  ::google::protobuf::uint32 slot_id() const;
  void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 start_value = 2;
  bool has_start_value() const;
  void clear_start_value();
  static const int kStartValueFieldNumber = 2;
  ::google::protobuf::uint32 start_value() const;
  void set_start_value(::google::protobuf::uint32 value);

  // optional uint32 end_value = 3;
  bool has_end_value() const;
  void clear_end_value();
  static const int kEndValueFieldNumber = 3;
  ::google::protobuf::uint32 end_value() const;
  void set_end_value(::google::protobuf::uint32 value);

  // optional bool completed = 4;
  bool has_completed() const;
  void clear_completed();
  static const int kCompletedFieldNumber = 4;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.SubChallenge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 start_value_;
  ::google::protobuf::uint32 end_value_;
  bool completed_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_EventData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.EventData) */ {
 public:
  CDOTAMatchMetadata_Team_EventData();
  virtual ~CDOTAMatchMetadata_Team_EventData();

  CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from);

  inline CDOTAMatchMetadata_Team_EventData& operator=(const CDOTAMatchMetadata_Team_EventData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_EventData(CDOTAMatchMetadata_Team_EventData&& from) noexcept
    : CDOTAMatchMetadata_Team_EventData() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_EventData& operator=(CDOTAMatchMetadata_Team_EventData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_EventData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_EventData* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_EventData*>(
               &_CDOTAMatchMetadata_Team_EventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CDOTAMatchMetadata_Team_EventData* other);
  friend void swap(CDOTAMatchMetadata_Team_EventData& a, CDOTAMatchMetadata_Team_EventData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_EventData* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_EventData>(nullptr);
  }

  CDOTAMatchMetadata_Team_EventData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_EventData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_EventData& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_EventData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_EventData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  int sub_challenges_with_progress_size() const;
  void clear_sub_challenges_with_progress();
  static const int kSubChallengesWithProgressFieldNumber = 10;
  ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge* mutable_sub_challenges_with_progress(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge >*
      mutable_sub_challenges_with_progress();
  const ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge& sub_challenges_with_progress(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge* add_sub_challenges_with_progress();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge >&
      sub_challenges_with_progress() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::uint32 event_id() const;
  void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 event_points = 2;
  bool has_event_points() const;
  void clear_event_points();
  static const int kEventPointsFieldNumber = 2;
  ::google::protobuf::uint32 event_points() const;
  void set_event_points(::google::protobuf::uint32 value);

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  void clear_challenge_instance_id();
  static const int kChallengeInstanceIdFieldNumber = 3;
  ::google::protobuf::uint32 challenge_instance_id() const;
  void set_challenge_instance_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_quest_id = 4;
  bool has_challenge_quest_id() const;
  void clear_challenge_quest_id();
  static const int kChallengeQuestIdFieldNumber = 4;
  ::google::protobuf::uint32 challenge_quest_id() const;
  void set_challenge_quest_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_quest_challenge_id = 5;
  bool has_challenge_quest_challenge_id() const;
  void clear_challenge_quest_challenge_id();
  static const int kChallengeQuestChallengeIdFieldNumber = 5;
  ::google::protobuf::uint32 challenge_quest_challenge_id() const;
  void set_challenge_quest_challenge_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_rank_completed = 7;
  bool has_challenge_rank_completed() const;
  void clear_challenge_rank_completed();
  static const int kChallengeRankCompletedFieldNumber = 7;
  ::google::protobuf::uint32 challenge_rank_completed() const;
  void set_challenge_rank_completed(::google::protobuf::uint32 value);

  // optional uint32 challenge_rank_previously_completed = 8;
  bool has_challenge_rank_previously_completed() const;
  void clear_challenge_rank_previously_completed();
  static const int kChallengeRankPreviouslyCompletedFieldNumber = 8;
  ::google::protobuf::uint32 challenge_rank_previously_completed() const;
  void set_challenge_rank_previously_completed(::google::protobuf::uint32 value);

  // optional bool challenge_completed = 6;
  bool has_challenge_completed() const;
  void clear_challenge_completed();
  static const int kChallengeCompletedFieldNumber = 6;
  bool challenge_completed() const;
  void set_challenge_completed(bool value);

  // optional bool event_owned = 9;
  bool has_event_owned() const;
  void clear_event_owned();
  static const int kEventOwnedFieldNumber = 9;
  bool event_owned() const;
  void set_event_owned(bool value);

  // optional bool cavern_challenge_active = 12;
  bool has_cavern_challenge_active() const;
  void clear_cavern_challenge_active();
  static const int kCavernChallengeActiveFieldNumber = 12;
  bool cavern_challenge_active() const;
  void set_cavern_challenge_active(bool value);

  // optional uint32 wager_winnings = 11;
  bool has_wager_winnings() const;
  void clear_wager_winnings();
  static const int kWagerWinningsFieldNumber = 11;
  ::google::protobuf::uint32 wager_winnings() const;
  void set_wager_winnings(::google::protobuf::uint32 value);

  // optional uint32 cavern_challenge_winnings = 13;
  bool has_cavern_challenge_winnings() const;
  void clear_cavern_challenge_winnings();
  static const int kCavernChallengeWinningsFieldNumber = 13;
  ::google::protobuf::uint32 cavern_challenge_winnings() const;
  void set_cavern_challenge_winnings(::google::protobuf::uint32 value);

  // optional uint32 amount_wagered = 14;
  bool has_amount_wagered() const;
  void clear_amount_wagered();
  static const int kAmountWageredFieldNumber = 14;
  ::google::protobuf::uint32 amount_wagered() const;
  void set_amount_wagered(::google::protobuf::uint32 value);

  // optional uint32 team_wager_amount = 15;
  bool has_team_wager_amount() const;
  void clear_team_wager_amount();
  static const int kTeamWagerAmountFieldNumber = 15;
  ::google::protobuf::uint32 team_wager_amount() const;
  void set_team_wager_amount(::google::protobuf::uint32 value);

  // optional uint32 periodic_point_adjustments = 16;
  bool has_periodic_point_adjustments() const;
  void clear_periodic_point_adjustments();
  static const int kPeriodicPointAdjustmentsFieldNumber = 16;
  ::google::protobuf::uint32 periodic_point_adjustments() const;
  void set_periodic_point_adjustments(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.EventData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge > sub_challenges_with_progress_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 event_points_;
  ::google::protobuf::uint32 challenge_instance_id_;
  ::google::protobuf::uint32 challenge_quest_id_;
  ::google::protobuf::uint32 challenge_quest_challenge_id_;
  ::google::protobuf::uint32 challenge_rank_completed_;
  ::google::protobuf::uint32 challenge_rank_previously_completed_;
  bool challenge_completed_;
  bool event_owned_;
  bool cavern_challenge_active_;
  ::google::protobuf::uint32 wager_winnings_;
  ::google::protobuf::uint32 cavern_challenge_winnings_;
  ::google::protobuf::uint32 amount_wagered_;
  ::google::protobuf::uint32 team_wager_amount_;
  ::google::protobuf::uint32 periodic_point_adjustments_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team.Player) */ {
 public:
  CDOTAMatchMetadata_Team_Player();
  virtual ~CDOTAMatchMetadata_Team_Player();

  CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from);

  inline CDOTAMatchMetadata_Team_Player& operator=(const CDOTAMatchMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team_Player(CDOTAMatchMetadata_Team_Player&& from) noexcept
    : CDOTAMatchMetadata_Team_Player() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_Player& operator=(CDOTAMatchMetadata_Team_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_Player*>(
               &_CDOTAMatchMetadata_Team_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CDOTAMatchMetadata_Team_Player* other);
  friend void swap(CDOTAMatchMetadata_Team_Player& a, CDOTAMatchMetadata_Team_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team_Player* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player>(nullptr);
  }

  CDOTAMatchMetadata_Team_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team_Player& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ability_upgrades = 2;
  int ability_upgrades_size() const;
  void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 2;
  ::google::protobuf::uint32 ability_upgrades(int index) const;
  void set_ability_upgrades(int index, ::google::protobuf::uint32 value);
  void add_ability_upgrades(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ability_upgrades() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ability_upgrades();

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  int equipped_econ_items_size() const;
  void clear_equipped_econ_items();
  static const int kEquippedEconItemsFieldNumber = 4;
  ::proto::dota::CSOEconItem* mutable_equipped_econ_items(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem >*
      mutable_equipped_econ_items();
  const ::proto::dota::CSOEconItem& equipped_econ_items(int index) const;
  ::proto::dota::CSOEconItem* add_equipped_econ_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem >&
      equipped_econ_items() const;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  int kills_size() const;
  void clear_kills();
  static const int kKillsFieldNumber = 5;
  ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* mutable_kills(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >*
      mutable_kills();
  const ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill& kills(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* add_kills();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >&
      kills() const;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 6;
  ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >*
      mutable_items();
  const ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase& items(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* add_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >&
      items() const;

  // repeated uint32 level_up_times = 22;
  int level_up_times_size() const;
  void clear_level_up_times();
  static const int kLevelUpTimesFieldNumber = 22;
  ::google::protobuf::uint32 level_up_times(int index) const;
  void set_level_up_times(int index, ::google::protobuf::uint32 value);
  void add_level_up_times(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level_up_times() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level_up_times();

  // repeated float graph_net_worth = 23;
  int graph_net_worth_size() const;
  void clear_graph_net_worth();
  static const int kGraphNetWorthFieldNumber = 23;
  float graph_net_worth(int index) const;
  void set_graph_net_worth(int index, float value);
  void add_graph_net_worth(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_net_worth() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  int inventory_snapshot_size() const;
  void clear_inventory_snapshot();
  static const int kInventorySnapshotFieldNumber = 24;
  ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* mutable_inventory_snapshot(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >*
      mutable_inventory_snapshot();
  const ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot& inventory_snapshot(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* add_inventory_snapshot();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >&
      inventory_snapshot() const;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  int auto_style_criteria_size() const;
  void clear_auto_style_criteria();
  static const int kAutoStyleCriteriaFieldNumber = 26;
  ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* mutable_auto_style_criteria(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
      mutable_auto_style_criteria();
  const ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria& auto_style_criteria(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* add_auto_style_criteria();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
      auto_style_criteria() const;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
  int event_data_size() const;
  void clear_event_data();
  static const int kEventDataFieldNumber = 29;
  ::proto::dota::CDOTAMatchMetadata_Team_EventData* mutable_event_data(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_EventData >*
      mutable_event_data();
  const ::proto::dota::CDOTAMatchMetadata_Team_EventData& event_data(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_EventData* add_event_data();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_EventData >&
      event_data() const;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  int strange_gem_progress_size() const;
  void clear_strange_gem_progress();
  static const int kStrangeGemProgressFieldNumber = 30;
  ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress* mutable_strange_gem_progress(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress >*
      mutable_strange_gem_progress();
  const ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress& strange_gem_progress(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress* add_strange_gem_progress();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress >&
      strange_gem_progress() const;

  // repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  int victory_prediction_size() const;
  void clear_victory_prediction();
  static const int kVictoryPredictionFieldNumber = 33;
  ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction* mutable_victory_prediction(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction >*
      mutable_victory_prediction();
  const ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction& victory_prediction(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction* add_victory_prediction();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction >&
      victory_prediction() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 3;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 3;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // optional uint32 avg_kills_x16 = 7;
  bool has_avg_kills_x16() const;
  void clear_avg_kills_x16();
  static const int kAvgKillsX16FieldNumber = 7;
  ::google::protobuf::uint32 avg_kills_x16() const;
  void set_avg_kills_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_deaths_x16 = 8;
  bool has_avg_deaths_x16() const;
  void clear_avg_deaths_x16();
  static const int kAvgDeathsX16FieldNumber = 8;
  ::google::protobuf::uint32 avg_deaths_x16() const;
  void set_avg_deaths_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_assists_x16 = 9;
  bool has_avg_assists_x16() const;
  void clear_avg_assists_x16();
  static const int kAvgAssistsX16FieldNumber = 9;
  ::google::protobuf::uint32 avg_assists_x16() const;
  void set_avg_assists_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_gpm_x16 = 10;
  bool has_avg_gpm_x16() const;
  void clear_avg_gpm_x16();
  static const int kAvgGpmX16FieldNumber = 10;
  ::google::protobuf::uint32 avg_gpm_x16() const;
  void set_avg_gpm_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_xpm_x16 = 11;
  bool has_avg_xpm_x16() const;
  void clear_avg_xpm_x16();
  static const int kAvgXpmX16FieldNumber = 11;
  ::google::protobuf::uint32 avg_xpm_x16() const;
  void set_avg_xpm_x16(::google::protobuf::uint32 value);

  // optional uint32 best_kills_x16 = 12;
  bool has_best_kills_x16() const;
  void clear_best_kills_x16();
  static const int kBestKillsX16FieldNumber = 12;
  ::google::protobuf::uint32 best_kills_x16() const;
  void set_best_kills_x16(::google::protobuf::uint32 value);

  // optional uint32 best_assists_x16 = 13;
  bool has_best_assists_x16() const;
  void clear_best_assists_x16();
  static const int kBestAssistsX16FieldNumber = 13;
  ::google::protobuf::uint32 best_assists_x16() const;
  void set_best_assists_x16(::google::protobuf::uint32 value);

  // optional uint32 best_gpm_x16 = 14;
  bool has_best_gpm_x16() const;
  void clear_best_gpm_x16();
  static const int kBestGpmX16FieldNumber = 14;
  ::google::protobuf::uint32 best_gpm_x16() const;
  void set_best_gpm_x16(::google::protobuf::uint32 value);

  // optional uint32 best_xpm_x16 = 15;
  bool has_best_xpm_x16() const;
  void clear_best_xpm_x16();
  static const int kBestXpmX16FieldNumber = 15;
  ::google::protobuf::uint32 best_xpm_x16() const;
  void set_best_xpm_x16(::google::protobuf::uint32 value);

  // optional uint32 win_streak = 16;
  bool has_win_streak() const;
  void clear_win_streak();
  static const int kWinStreakFieldNumber = 16;
  ::google::protobuf::uint32 win_streak() const;
  void set_win_streak(::google::protobuf::uint32 value);

  // optional uint32 best_win_streak = 17;
  bool has_best_win_streak() const;
  void clear_best_win_streak();
  static const int kBestWinStreakFieldNumber = 17;
  ::google::protobuf::uint32 best_win_streak() const;
  void set_best_win_streak(::google::protobuf::uint32 value);

  // optional float fight_score = 18;
  bool has_fight_score() const;
  void clear_fight_score();
  static const int kFightScoreFieldNumber = 18;
  float fight_score() const;
  void set_fight_score(float value);

  // optional float farm_score = 19;
  bool has_farm_score() const;
  void clear_farm_score();
  static const int kFarmScoreFieldNumber = 19;
  float farm_score() const;
  void set_farm_score(float value);

  // optional float support_score = 20;
  bool has_support_score() const;
  void clear_support_score();
  static const int kSupportScoreFieldNumber = 20;
  float support_score() const;
  void set_support_score(float value);

  // optional float push_score = 21;
  bool has_push_score() const;
  void clear_push_score();
  static const int kPushScoreFieldNumber = 21;
  float push_score() const;
  void set_push_score(float value);

  // optional bool avg_stats_calibrated = 25;
  bool has_avg_stats_calibrated() const;
  void clear_avg_stats_calibrated();
  static const int kAvgStatsCalibratedFieldNumber = 25;
  bool avg_stats_calibrated() const;
  void set_avg_stats_calibrated(bool value);

  // optional uint32 hero_xp = 31;
  bool has_hero_xp() const;
  void clear_hero_xp();
  static const int kHeroXpFieldNumber = 31;
  ::google::protobuf::uint32 hero_xp() const;
  void set_hero_xp(::google::protobuf::uint32 value);

  // optional uint32 camps_stacked = 32;
  bool has_camps_stacked() const;
  void clear_camps_stacked();
  static const int kCampsStackedFieldNumber = 32;
  ::google::protobuf::uint32 camps_stacked() const;
  void set_camps_stacked(::google::protobuf::uint32 value);

  // optional uint32 lane_selection_flags = 34;
  bool has_lane_selection_flags() const;
  void clear_lane_selection_flags();
  static const int kLaneSelectionFlagsFieldNumber = 34;
  ::google::protobuf::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team.Player)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ability_upgrades_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem > equipped_econ_items_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill > kills_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase > items_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_up_times_;
  ::google::protobuf::RepeatedField< float > graph_net_worth_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot > inventory_snapshot_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria > auto_style_criteria_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_EventData > event_data_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress > strange_gem_progress_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction > victory_prediction_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::uint32 avg_kills_x16_;
  ::google::protobuf::uint32 avg_deaths_x16_;
  ::google::protobuf::uint32 avg_assists_x16_;
  ::google::protobuf::uint32 avg_gpm_x16_;
  ::google::protobuf::uint32 avg_xpm_x16_;
  ::google::protobuf::uint32 best_kills_x16_;
  ::google::protobuf::uint32 best_assists_x16_;
  ::google::protobuf::uint32 best_gpm_x16_;
  ::google::protobuf::uint32 best_xpm_x16_;
  ::google::protobuf::uint32 win_streak_;
  ::google::protobuf::uint32 best_win_streak_;
  float fight_score_;
  float farm_score_;
  float support_score_;
  float push_score_;
  bool avg_stats_calibrated_;
  ::google::protobuf::uint32 hero_xp_;
  ::google::protobuf::uint32 camps_stacked_;
  ::google::protobuf::uint32 lane_selection_flags_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata.Team) */ {
 public:
  CDOTAMatchMetadata_Team();
  virtual ~CDOTAMatchMetadata_Team();

  CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from);

  inline CDOTAMatchMetadata_Team& operator=(const CDOTAMatchMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata_Team(CDOTAMatchMetadata_Team&& from) noexcept
    : CDOTAMatchMetadata_Team() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team& operator=(CDOTAMatchMetadata_Team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata_Team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata_Team* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team*>(
               &_CDOTAMatchMetadata_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CDOTAMatchMetadata_Team* other);
  friend void swap(CDOTAMatchMetadata_Team& a, CDOTAMatchMetadata_Team& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata_Team* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team>(nullptr);
  }

  CDOTAMatchMetadata_Team* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata_Team& from);
  void MergeFrom(const CDOTAMatchMetadata_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team_PlayerKill PlayerKill;
  typedef CDOTAMatchMetadata_Team_ItemPurchase ItemPurchase;
  typedef CDOTAMatchMetadata_Team_InventorySnapshot InventorySnapshot;
  typedef CDOTAMatchMetadata_Team_AutoStyleCriteria AutoStyleCriteria;
  typedef CDOTAMatchMetadata_Team_StrangeGemProgress StrangeGemProgress;
  typedef CDOTAMatchMetadata_Team_VictoryPrediction VictoryPrediction;
  typedef CDOTAMatchMetadata_Team_SubChallenge SubChallenge;
  typedef CDOTAMatchMetadata_Team_EventData EventData;
  typedef CDOTAMatchMetadata_Team_Player Player;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 2;
  ::proto::dota::CDOTAMatchMetadata_Team_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player >*
      mutable_players();
  const ::proto::dota::CDOTAMatchMetadata_Team_Player& players(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player >&
      players() const;

  // repeated float graph_experience = 3;
  int graph_experience_size() const;
  void clear_graph_experience();
  static const int kGraphExperienceFieldNumber = 3;
  float graph_experience(int index) const;
  void set_graph_experience(int index, float value);
  void add_graph_experience(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_experience() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_experience();

  // repeated float graph_gold_earned = 4;
  int graph_gold_earned_size() const;
  void clear_graph_gold_earned();
  static const int kGraphGoldEarnedFieldNumber = 4;
  float graph_gold_earned(int index) const;
  void set_graph_gold_earned(int index, float value);
  void add_graph_gold_earned(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_gold_earned() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_gold_earned();

  // repeated float graph_net_worth = 5;
  int graph_net_worth_size() const;
  void clear_graph_net_worth();
  static const int kGraphNetWorthFieldNumber = 5;
  float graph_net_worth(int index) const;
  void set_graph_net_worth(int index, float value);
  void add_graph_net_worth(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_net_worth() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated uint32 cm_bans = 8;
  int cm_bans_size() const;
  void clear_cm_bans();
  static const int kCmBansFieldNumber = 8;
  ::google::protobuf::uint32 cm_bans(int index) const;
  void set_cm_bans(int index, ::google::protobuf::uint32 value);
  void add_cm_bans(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cm_bans() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cm_bans();

  // repeated uint32 cm_picks = 9;
  int cm_picks_size() const;
  void clear_cm_picks();
  static const int kCmPicksFieldNumber = 9;
  ::google::protobuf::uint32 cm_picks(int index) const;
  void set_cm_picks(int index, ::google::protobuf::uint32 value);
  void add_cm_picks(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cm_picks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cm_picks();

  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  void clear_dota_team();
  static const int kDotaTeamFieldNumber = 1;
  ::google::protobuf::uint32 dota_team() const;
  void set_dota_team(::google::protobuf::uint32 value);

  // optional bool cm_first_pick = 6;
  bool has_cm_first_pick() const;
  void clear_cm_first_pick();
  static const int kCmFirstPickFieldNumber = 6;
  bool cm_first_pick() const;
  void set_cm_first_pick(bool value);

  // optional uint32 cm_captain_player_id = 7;
  bool has_cm_captain_player_id() const;
  void clear_cm_captain_player_id();
  static const int kCmCaptainPlayerIdFieldNumber = 7;
  ::google::protobuf::uint32 cm_captain_player_id() const;
  void set_cm_captain_player_id(::google::protobuf::uint32 value);

  // optional uint32 cm_penalty = 10;
  bool has_cm_penalty() const;
  void clear_cm_penalty();
  static const int kCmPenaltyFieldNumber = 10;
  ::google::protobuf::uint32 cm_penalty() const;
  void set_cm_penalty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata.Team)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player > players_;
  ::google::protobuf::RepeatedField< float > graph_experience_;
  ::google::protobuf::RepeatedField< float > graph_gold_earned_;
  ::google::protobuf::RepeatedField< float > graph_net_worth_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cm_bans_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cm_picks_;
  ::google::protobuf::uint32 dota_team_;
  bool cm_first_pick_;
  ::google::protobuf::uint32 cm_captain_player_id_;
  ::google::protobuf::uint32 cm_penalty_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchMetadata) */ {
 public:
  CDOTAMatchMetadata();
  virtual ~CDOTAMatchMetadata();

  CDOTAMatchMetadata(const CDOTAMatchMetadata& from);

  inline CDOTAMatchMetadata& operator=(const CDOTAMatchMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchMetadata(CDOTAMatchMetadata&& from) noexcept
    : CDOTAMatchMetadata() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata& operator=(CDOTAMatchMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchMetadata* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata*>(
               &_CDOTAMatchMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CDOTAMatchMetadata* other);
  friend void swap(CDOTAMatchMetadata& a, CDOTAMatchMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchMetadata* New() const final {
    return CreateMaybeMessage<CDOTAMatchMetadata>(nullptr);
  }

  CDOTAMatchMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchMetadata& from);
  void MergeFrom(const CDOTAMatchMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team Team;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 1;
  ::proto::dota::CDOTAMatchMetadata_Team* mutable_teams(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team >*
      mutable_teams();
  const ::proto::dota::CDOTAMatchMetadata_Team& teams(int index) const;
  ::proto::dota::CDOTAMatchMetadata_Team* add_teams();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team >&
      teams() const;

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  int item_rewards_size() const;
  void clear_item_rewards();
  static const int kItemRewardsFieldNumber = 2;
  ::proto::dota::CLobbyTimedRewardDetails* mutable_item_rewards(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
      mutable_item_rewards();
  const ::proto::dota::CLobbyTimedRewardDetails& item_rewards(int index) const;
  ::proto::dota::CLobbyTimedRewardDetails* add_item_rewards();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
      item_rewards() const;

  // repeated .proto.dota.CMsgMatchTips match_tips = 7;
  int match_tips_size() const;
  void clear_match_tips();
  static const int kMatchTipsFieldNumber = 7;
  ::proto::dota::CMsgMatchTips* mutable_match_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips >*
      mutable_match_tips();
  const ::proto::dota::CMsgMatchTips& match_tips(int index) const;
  ::proto::dota::CMsgMatchTips* add_match_tips();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips >&
      match_tips() const;

  // optional bytes event_game_custom_table = 5;
  bool has_event_game_custom_table() const;
  void clear_event_game_custom_table();
  static const int kEventGameCustomTableFieldNumber = 5;
  const ::std::string& event_game_custom_table() const;
  void set_event_game_custom_table(const ::std::string& value);
  #if LANG_CXX11
  void set_event_game_custom_table(::std::string&& value);
  #endif
  void set_event_game_custom_table(const char* value);
  void set_event_game_custom_table(const void* value, size_t size);
  ::std::string* mutable_event_game_custom_table();
  ::std::string* release_event_game_custom_table();
  void set_allocated_event_game_custom_table(::std::string* event_game_custom_table);

  // optional fixed64 lobby_id = 3;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 3;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional fixed64 report_until_time = 4;
  bool has_report_until_time() const;
  void clear_report_until_time();
  static const int kReportUntilTimeFieldNumber = 4;
  ::google::protobuf::uint64 report_until_time() const;
  void set_report_until_time(::google::protobuf::uint64 value);

  // optional uint32 primary_event_id = 6;
  bool has_primary_event_id() const;
  void clear_primary_event_id();
  static const int kPrimaryEventIdFieldNumber = 6;
  ::google::protobuf::uint32 primary_event_id() const;
  void set_primary_event_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team > teams_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails > item_rewards_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips > match_tips_;
  ::google::protobuf::internal::ArenaStringPtr event_game_custom_table_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint64 report_until_time_;
  ::google::protobuf::uint32 primary_event_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget();

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from);

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  bool has_damage() const;
  void clear_damage();
  static const int kDamageFieldNumber = 2;
  ::google::protobuf::uint32 damage() const;
  void set_damage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 damage_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility();

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from);

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget ByHeroTarget;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  int by_hero_targets_size() const;
  void clear_by_hero_targets();
  static const int kByHeroTargetsFieldNumber = 2;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* mutable_by_hero_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >*
      mutable_by_hero_targets();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& by_hero_targets(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* add_by_hero_targets();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >&
      by_hero_targets() const;

  // optional uint32 ability_id = 1;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 1;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional uint32 source_unit_index = 3;
  bool has_source_unit_index() const;
  void clear_source_unit_index();
  static const int kSourceUnitIndexFieldNumber = 3;
  ::google::protobuf::uint32 source_unit_index() const;
  void set_source_unit_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget > by_hero_targets_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::uint32 source_unit_index_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment();

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from);

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& operator=(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_CombatSegment() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& operator=(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& a, CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility DamageByAbility;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  int damage_by_ability_size() const;
  void clear_damage_by_ability();
  static const int kDamageByAbilityFieldNumber = 2;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* mutable_damage_by_ability(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >*
      mutable_damage_by_ability();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& damage_by_ability(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* add_damage_by_ability();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >&
      damage_by_ability() const;

  // optional int32 game_time = 1;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  ::google::protobuf::int32 game_time() const;
  void set_game_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility > damage_by_ability_;
  ::google::protobuf::int32 game_time_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget();

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from);

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& operator=(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& operator=(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& a, CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional float elapsed_duration = 2;
  bool has_elapsed_duration() const;
  void clear_elapsed_duration();
  static const int kElapsedDurationFieldNumber = 2;
  float elapsed_duration() const;
  void set_elapsed_duration(float value);

  // optional bool is_hidden = 3;
  bool has_is_hidden() const;
  void clear_is_hidden();
  static const int kIsHiddenFieldNumber = 3;
  bool is_hidden() const;
  void set_is_hidden(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  float elapsed_duration_;
  bool is_hidden_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord();

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from);

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& operator=(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player_BuffRecord() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& operator=(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& a, CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget ByHeroTarget;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  int by_hero_targets_size() const;
  void clear_by_hero_targets();
  static const int kByHeroTargetsFieldNumber = 2;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* mutable_by_hero_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >*
      mutable_by_hero_targets();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& by_hero_targets(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* add_by_hero_targets();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >&
      by_hero_targets() const;

  // optional string buff_modifier_name = 3;
  bool has_buff_modifier_name() const;
  void clear_buff_modifier_name();
  static const int kBuffModifierNameFieldNumber = 3;
  const ::std::string& buff_modifier_name() const;
  void set_buff_modifier_name(const ::std::string& value);
  #if LANG_CXX11
  void set_buff_modifier_name(::std::string&& value);
  #endif
  void set_buff_modifier_name(const char* value);
  void set_buff_modifier_name(const char* value, size_t size);
  ::std::string* mutable_buff_modifier_name();
  ::std::string* release_buff_modifier_name();
  void set_allocated_buff_modifier_name(::std::string* buff_modifier_name);

  // optional uint32 buff_ability_id = 1;
  bool has_buff_ability_id() const;
  void clear_buff_ability_id();
  static const int kBuffAbilityIdFieldNumber = 1;
  ::google::protobuf::uint32 buff_ability_id() const;
  void set_buff_ability_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget > by_hero_targets_;
  ::google::protobuf::internal::ArenaStringPtr buff_modifier_name_;
  ::google::protobuf::uint32 buff_ability_id_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Player) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Player();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player();

  CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from);

  inline CDOTAMatchPrivateMetadata_Team_Player& operator=(const CDOTAMatchPrivateMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Player(CDOTAMatchPrivateMetadata_Team_Player&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Player() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Player& operator=(CDOTAMatchPrivateMetadata_Team_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Player*>(
               &_CDOTAMatchPrivateMetadata_Team_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CDOTAMatchPrivateMetadata_Team_Player* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Player& a, CDOTAMatchPrivateMetadata_Team_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Player* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player_CombatSegment CombatSegment;
  typedef CDOTAMatchPrivateMetadata_Team_Player_BuffRecord BuffRecord;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  int combat_segments_size() const;
  void clear_combat_segments();
  static const int kCombatSegmentsFieldNumber = 4;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* mutable_combat_segments(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >*
      mutable_combat_segments();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& combat_segments(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* add_combat_segments();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >&
      combat_segments() const;

  // repeated string damage_unit_names = 5;
  int damage_unit_names_size() const;
  void clear_damage_unit_names();
  static const int kDamageUnitNamesFieldNumber = 5;
  const ::std::string& damage_unit_names(int index) const;
  ::std::string* mutable_damage_unit_names(int index);
  void set_damage_unit_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_damage_unit_names(int index, ::std::string&& value);
  #endif
  void set_damage_unit_names(int index, const char* value);
  void set_damage_unit_names(int index, const char* value, size_t size);
  ::std::string* add_damage_unit_names();
  void add_damage_unit_names(const ::std::string& value);
  #if LANG_CXX11
  void add_damage_unit_names(::std::string&& value);
  #endif
  void add_damage_unit_names(const char* value);
  void add_damage_unit_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& damage_unit_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_damage_unit_names();

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  int buff_records_size() const;
  void clear_buff_records();
  static const int kBuffRecordsFieldNumber = 6;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* mutable_buff_records(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >*
      mutable_buff_records();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& buff_records(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* add_buff_records();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >&
      buff_records() const;

  // repeated float graph_kills = 7;
  int graph_kills_size() const;
  void clear_graph_kills();
  static const int kGraphKillsFieldNumber = 7;
  float graph_kills(int index) const;
  void set_graph_kills(int index, float value);
  void add_graph_kills(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_kills() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_kills();

  // repeated float graph_deaths = 8;
  int graph_deaths_size() const;
  void clear_graph_deaths();
  static const int kGraphDeathsFieldNumber = 8;
  float graph_deaths(int index) const;
  void set_graph_deaths(int index, float value);
  void add_graph_deaths(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_deaths() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_deaths();

  // repeated float graph_assists = 9;
  int graph_assists_size() const;
  void clear_graph_assists();
  static const int kGraphAssistsFieldNumber = 9;
  float graph_assists(int index) const;
  void set_graph_assists(int index, float value);
  void add_graph_assists(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_assists() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_assists();

  // repeated float graph_lasthits = 10;
  int graph_lasthits_size() const;
  void clear_graph_lasthits();
  static const int kGraphLasthitsFieldNumber = 10;
  float graph_lasthits(int index) const;
  void set_graph_lasthits(int index, float value);
  void add_graph_lasthits(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_lasthits() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_lasthits();

  // repeated float graph_denies = 11;
  int graph_denies_size() const;
  void clear_graph_denies();
  static const int kGraphDeniesFieldNumber = 11;
  float graph_denies(int index) const;
  void set_graph_denies(int index, float value);
  void add_graph_denies(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_denies() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_denies();

  // optional bytes position_stream = 3;
  bool has_position_stream() const;
  void clear_position_stream();
  static const int kPositionStreamFieldNumber = 3;
  const ::std::string& position_stream() const;
  void set_position_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_position_stream(::std::string&& value);
  #endif
  void set_position_stream(const char* value);
  void set_position_stream(const void* value, size_t size);
  ::std::string* mutable_position_stream();
  ::std::string* release_position_stream();
  void set_allocated_position_stream(::std::string* position_stream);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 2;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 2;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment > combat_segments_;
  ::google::protobuf::RepeatedPtrField<::std::string> damage_unit_names_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord > buff_records_;
  ::google::protobuf::RepeatedField< float > graph_kills_;
  ::google::protobuf::RepeatedField< float > graph_deaths_;
  ::google::protobuf::RepeatedField< float > graph_assists_;
  ::google::protobuf::RepeatedField< float > graph_lasthits_;
  ::google::protobuf::RepeatedField< float > graph_denies_;
  ::google::protobuf::internal::ArenaStringPtr position_stream_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Building final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team.Building) */ {
 public:
  CDOTAMatchPrivateMetadata_Team_Building();
  virtual ~CDOTAMatchPrivateMetadata_Team_Building();

  CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from);

  inline CDOTAMatchPrivateMetadata_Team_Building& operator=(const CDOTAMatchPrivateMetadata_Team_Building& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team_Building(CDOTAMatchPrivateMetadata_Team_Building&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team_Building() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team_Building& operator=(CDOTAMatchPrivateMetadata_Team_Building&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team_Building& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team_Building* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team_Building*>(
               &_CDOTAMatchPrivateMetadata_Team_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CDOTAMatchPrivateMetadata_Team_Building* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team_Building& a, CDOTAMatchPrivateMetadata_Team_Building& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team_Building* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Building>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team_Building* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team_Building>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team_Building* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unit_name = 1;
  bool has_unit_name() const;
  void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  const ::std::string& unit_name() const;
  void set_unit_name(const ::std::string& value);
  #if LANG_CXX11
  void set_unit_name(::std::string&& value);
  #endif
  void set_unit_name(const char* value);
  void set_unit_name(const char* value, size_t size);
  ::std::string* mutable_unit_name();
  ::std::string* release_unit_name();
  void set_allocated_unit_name(::std::string* unit_name);

  // optional uint32 position_quant_x = 2;
  bool has_position_quant_x() const;
  void clear_position_quant_x();
  static const int kPositionQuantXFieldNumber = 2;
  ::google::protobuf::uint32 position_quant_x() const;
  void set_position_quant_x(::google::protobuf::uint32 value);

  // optional uint32 position_quant_y = 3;
  bool has_position_quant_y() const;
  void clear_position_quant_y();
  static const int kPositionQuantYFieldNumber = 3;
  ::google::protobuf::uint32 position_quant_y() const;
  void set_position_quant_y(::google::protobuf::uint32 value);

  // optional float death_time = 4;
  bool has_death_time() const;
  void clear_death_time();
  static const int kDeathTimeFieldNumber = 4;
  float death_time() const;
  void set_death_time(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unit_name_;
  ::google::protobuf::uint32 position_quant_x_;
  ::google::protobuf::uint32 position_quant_y_;
  float death_time_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata.Team) */ {
 public:
  CDOTAMatchPrivateMetadata_Team();
  virtual ~CDOTAMatchPrivateMetadata_Team();

  CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from);

  inline CDOTAMatchPrivateMetadata_Team& operator=(const CDOTAMatchPrivateMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata_Team(CDOTAMatchPrivateMetadata_Team&& from) noexcept
    : CDOTAMatchPrivateMetadata_Team() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata_Team& operator=(CDOTAMatchPrivateMetadata_Team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata_Team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata_Team* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata_Team*>(
               &_CDOTAMatchPrivateMetadata_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CDOTAMatchPrivateMetadata_Team* other);
  friend void swap(CDOTAMatchPrivateMetadata_Team& a, CDOTAMatchPrivateMetadata_Team& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata_Team* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team>(nullptr);
  }

  CDOTAMatchPrivateMetadata_Team* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata_Team>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata_Team* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player Player;
  typedef CDOTAMatchPrivateMetadata_Team_Building Building;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 2;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >*
      mutable_players();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player& players(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >&
      players() const;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  int buildings_size() const;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* mutable_buildings(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >*
      mutable_buildings();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building& buildings(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* add_buildings();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >&
      buildings() const;

  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  void clear_dota_team();
  static const int kDotaTeamFieldNumber = 1;
  ::google::protobuf::uint32 dota_team() const;
  void set_dota_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata.Team)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building > buildings_;
  ::google::protobuf::uint32 dota_team_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAMatchPrivateMetadata) */ {
 public:
  CDOTAMatchPrivateMetadata();
  virtual ~CDOTAMatchPrivateMetadata();

  CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from);

  inline CDOTAMatchPrivateMetadata& operator=(const CDOTAMatchPrivateMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAMatchPrivateMetadata(CDOTAMatchPrivateMetadata&& from) noexcept
    : CDOTAMatchPrivateMetadata() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchPrivateMetadata& operator=(CDOTAMatchPrivateMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAMatchPrivateMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAMatchPrivateMetadata* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchPrivateMetadata*>(
               &_CDOTAMatchPrivateMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CDOTAMatchPrivateMetadata* other);
  friend void swap(CDOTAMatchPrivateMetadata& a, CDOTAMatchPrivateMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAMatchPrivateMetadata* New() const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata>(nullptr);
  }

  CDOTAMatchPrivateMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAMatchPrivateMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAMatchPrivateMetadata& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchPrivateMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team Team;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 1;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team* mutable_teams(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team >*
      mutable_teams();
  const ::proto::dota::CDOTAMatchPrivateMetadata_Team& teams(int index) const;
  ::proto::dota::CDOTAMatchPrivateMetadata_Team* add_teams();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team >&
      teams() const;

  // repeated float graph_win_probability = 2;
  int graph_win_probability_size() const;
  void clear_graph_win_probability();
  static const int kGraphWinProbabilityFieldNumber = 2;
  float graph_win_probability(int index) const;
  void set_graph_win_probability(int index, float value);
  void add_graph_win_probability(float value);
  const ::google::protobuf::RepeatedField< float >&
      graph_win_probability() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_graph_win_probability();

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAMatchPrivateMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team > teams_;
  ::google::protobuf::RepeatedField< float > graph_win_probability_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCMatch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTADPCMatch) */ {
 public:
  CMsgDOTADPCMatch();
  virtual ~CMsgDOTADPCMatch();

  CMsgDOTADPCMatch(const CMsgDOTADPCMatch& from);

  inline CMsgDOTADPCMatch& operator=(const CMsgDOTADPCMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTADPCMatch(CMsgDOTADPCMatch&& from) noexcept
    : CMsgDOTADPCMatch() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCMatch& operator=(CMsgDOTADPCMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTADPCMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTADPCMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCMatch*>(
               &_CMsgDOTADPCMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CMsgDOTADPCMatch* other);
  friend void swap(CMsgDOTADPCMatch& a, CMsgDOTADPCMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCMatch* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCMatch>(nullptr);
  }

  CMsgDOTADPCMatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCMatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTADPCMatch& from);
  void MergeFrom(const CMsgDOTADPCMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTAMatch match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::proto::dota::CMsgDOTAMatch& match() const;
  ::proto::dota::CMsgDOTAMatch* release_match();
  ::proto::dota::CMsgDOTAMatch* mutable_match();
  void set_allocated_match(::proto::dota::CMsgDOTAMatch* match);

  // optional .proto.dota.CDOTAMatchMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::proto::dota::CDOTAMatchMetadata& metadata() const;
  ::proto::dota::CDOTAMatchMetadata* release_metadata();
  ::proto::dota::CDOTAMatchMetadata* mutable_metadata();
  void set_allocated_metadata(::proto::dota::CDOTAMatchMetadata* metadata);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTADPCMatch)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::dota::CMsgDOTAMatch* match_;
  ::proto::dota::CDOTAMatchMetadata* metadata_;
  friend struct ::TableStruct_dota_5fmatch_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDOTAMatchMetadataFile

// required int32 version = 1;
inline bool CDOTAMatchMetadataFile::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadataFile::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CDOTAMatchMetadataFile::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.version)
  return version_;
}
inline void CDOTAMatchMetadataFile::set_version(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadataFile.version)
}

// required uint64 match_id = 2;
inline bool CDOTAMatchMetadataFile::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadataFile::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CDOTAMatchMetadataFile::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.match_id)
  return match_id_;
}
inline void CDOTAMatchMetadataFile::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadataFile.match_id)
}

// optional .proto.dota.CDOTAMatchMetadata metadata = 3;
inline bool CDOTAMatchMetadataFile::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadataFile::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CDOTAMatchMetadata& CDOTAMatchMetadataFile::metadata() const {
  const ::proto::dota::CDOTAMatchMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CDOTAMatchMetadata*>(
      &::proto::dota::_CDOTAMatchMetadata_default_instance_);
}
inline ::proto::dota::CDOTAMatchMetadata* CDOTAMatchMetadataFile::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchMetadataFile.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::proto::dota::CDOTAMatchMetadata* CDOTAMatchMetadataFile::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadataFile.metadata)
  return metadata_;
}
inline void CDOTAMatchMetadataFile::set_allocated_metadata(::proto::dota::CDOTAMatchMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchMetadataFile.metadata)
}

// optional bytes private_metadata = 5;
inline bool CDOTAMatchMetadataFile::has_private_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadataFile::clear_private_metadata() {
  private_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAMatchMetadataFile::private_metadata() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.private_metadata)
  return private_metadata_.GetNoArena();
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
#if LANG_CXX11
inline void CDOTAMatchMetadataFile::set_private_metadata(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
#endif
inline void CDOTAMatchMetadataFile::set_private_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
inline ::std::string* CDOTAMatchMetadataFile::mutable_private_metadata() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadataFile.private_metadata)
  return private_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAMatchMetadataFile::release_private_metadata() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchMetadataFile.private_metadata)
  if (!has_private_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_metadata_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAMatchMetadataFile::set_allocated_private_metadata(::std::string* private_metadata) {
  if (private_metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_PlayerKill

// optional uint32 victim_slot = 1;
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_victim_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_victim_slot() {
  victim_slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_PlayerKill::victim_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
  return victim_slot_;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_victim_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  victim_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
}

// optional uint32 count = 2;
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_PlayerKill::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.count)
  return count_;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.count)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_ItemPurchase

// optional uint32 item_id = 1;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_item_id() {
  item_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_ItemPurchase::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.item_id)
  return item_id_;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_item_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.item_id)
}

// optional int32 purchase_time = 2;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_purchase_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_purchase_time() {
  purchase_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CDOTAMatchMetadata_Team_ItemPurchase::purchase_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
  return purchase_time_;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_purchase_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  purchase_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_InventorySnapshot

// repeated uint32 item_id = 1;
inline int CDOTAMatchMetadata_Team_InventorySnapshot::item_id_size() const {
  return item_id_.size();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::item_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return item_id_.Get(index);
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_item_id(int index, ::google::protobuf::uint32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::add_item_id(::google::protobuf::uint32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_InventorySnapshot::item_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_InventorySnapshot::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return &item_id_;
}

// optional int32 game_time = 2;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CDOTAMatchMetadata_Team_InventorySnapshot::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
  return game_time_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_game_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
}

// optional uint32 kills = 3;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.kills)
  return kills_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_kills(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.kills)
}

// optional uint32 deaths = 4;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_deaths() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
  return deaths_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_deaths(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
}

// optional uint32 assists = 5;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_assists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.assists)
  return assists_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_assists(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.assists)
}

// optional uint32 level = 6;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.level)
  return level_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.level)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_AutoStyleCriteria

// optional uint32 name_token = 1;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_name_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_name_token() {
  name_token_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_AutoStyleCriteria::name_token() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
  return name_token_;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_name_token(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  name_token_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
}

// optional float value = 2;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAMatchMetadata_Team_AutoStyleCriteria::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
  return value_;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_StrangeGemProgress

// optional uint32 kill_eater_type = 1;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_kill_eater_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_kill_eater_type() {
  kill_eater_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::kill_eater_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.kill_eater_type)
  return kill_eater_type_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_kill_eater_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  kill_eater_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.kill_eater_type)
}

// optional uint32 gem_item_def_index = 2;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_gem_item_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_gem_item_def_index() {
  gem_item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::gem_item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.gem_item_def_index)
  return gem_item_def_index_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_gem_item_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gem_item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.gem_item_def_index)
}

// optional uint32 required_hero_id = 3;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_required_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_required_hero_id() {
  required_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::required_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.required_hero_id)
  return required_hero_id_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_required_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  required_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.required_hero_id)
}

// optional uint32 starting_value = 4;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_starting_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_starting_value() {
  starting_value_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::starting_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.starting_value)
  return starting_value_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_starting_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  starting_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.starting_value)
}

// optional uint32 ending_value = 5;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_ending_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_ending_value() {
  ending_value_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::ending_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.ending_value)
  return ending_value_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_ending_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ending_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.ending_value)
}

// optional uint32 owner_item_def_index = 6;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_owner_item_def_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_owner_item_def_index() {
  owner_item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_def_index)
  return owner_item_def_index_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_owner_item_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  owner_item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_def_index)
}

// optional uint64 owner_item_id = 7;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_owner_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_owner_item_id() {
  owner_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_id)
  return owner_item_id_;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_owner_item_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  owner_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_id)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_VictoryPrediction

// optional uint64 item_id = 1;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CDOTAMatchMetadata_Team_VictoryPrediction::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.item_id)
  return item_id_;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_item_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.item_id)
}

// optional uint32 item_def_index = 2;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_VictoryPrediction::item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.item_def_index)
  return item_def_index_;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_item_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.item_def_index)
}

// optional uint32 starting_value = 3;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_starting_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_starting_value() {
  starting_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_VictoryPrediction::starting_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.starting_value)
  return starting_value_;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_starting_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  starting_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.starting_value)
}

// optional bool is_victory = 4;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_is_victory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_is_victory() {
  is_victory_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::is_victory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.is_victory)
  return is_victory_;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_is_victory(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_victory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction.is_victory)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_SubChallenge

// optional uint32 slot_id = 1;
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_SubChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.slot_id)
  return slot_id_;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_slot_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.slot_id)
}

// optional uint32 start_value = 2;
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_start_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_start_value() {
  start_value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_SubChallenge::start_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.start_value)
  return start_value_;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_start_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  start_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.start_value)
}

// optional uint32 end_value = 3;
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_end_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_end_value() {
  end_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_SubChallenge::end_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.end_value)
  return end_value_;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_end_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  end_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.end_value)
}

// optional bool completed = 4;
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_completed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.completed)
  return completed_;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_completed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.SubChallenge.completed)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_EventData

// optional uint32 event_id = 1;
inline bool CDOTAMatchMetadata_Team_EventData::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.event_id)
  return event_id_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.event_id)
}

// optional uint32 event_points = 2;
inline bool CDOTAMatchMetadata_Team_EventData::has_event_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_points() {
  event_points_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::event_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.event_points)
  return event_points_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.event_points)
}

// optional uint32 challenge_instance_id = 3;
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_instance_id() {
  challenge_instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_instance_id)
  return challenge_instance_id_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_instance_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_instance_id)
}

// optional uint32 challenge_quest_id = 4;
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_quest_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_quest_id() {
  challenge_quest_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::challenge_quest_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_quest_id)
  return challenge_quest_id_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_quest_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  challenge_quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_quest_id)
}

// optional uint32 challenge_quest_challenge_id = 5;
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_quest_challenge_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_quest_challenge_id() {
  challenge_quest_challenge_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::challenge_quest_challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_quest_challenge_id)
  return challenge_quest_challenge_id_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_quest_challenge_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  challenge_quest_challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_quest_challenge_id)
}

// optional bool challenge_completed = 6;
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_completed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_completed() {
  challenge_completed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CDOTAMatchMetadata_Team_EventData::challenge_completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_completed)
  return challenge_completed_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_completed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  challenge_completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_completed)
}

// optional uint32 challenge_rank_completed = 7;
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_rank_completed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_rank_completed() {
  challenge_rank_completed_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::challenge_rank_completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_rank_completed)
  return challenge_rank_completed_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_rank_completed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  challenge_rank_completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_rank_completed)
}

// optional uint32 challenge_rank_previously_completed = 8;
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_rank_previously_completed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_rank_previously_completed() {
  challenge_rank_previously_completed_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::challenge_rank_previously_completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_rank_previously_completed)
  return challenge_rank_previously_completed_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_rank_previously_completed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  challenge_rank_previously_completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.challenge_rank_previously_completed)
}

// optional bool event_owned = 9;
inline bool CDOTAMatchMetadata_Team_EventData::has_event_owned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_owned() {
  event_owned_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CDOTAMatchMetadata_Team_EventData::event_owned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.event_owned)
  return event_owned_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_owned(bool value) {
  _has_bits_[0] |= 0x00000100u;
  event_owned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.event_owned)
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
inline int CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress_size() const {
  return sub_challenges_with_progress_.size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_sub_challenges_with_progress() {
  sub_challenges_with_progress_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::mutable_sub_challenges_with_progress(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge >*
CDOTAMatchMetadata_Team_EventData::mutable_sub_challenges_with_progress() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return &sub_challenges_with_progress_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge& CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::add_sub_challenges_with_progress() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_SubChallenge >&
CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_;
}

// optional uint32 wager_winnings = 11;
inline bool CDOTAMatchMetadata_Team_EventData::has_wager_winnings() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_wager_winnings() {
  wager_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::wager_winnings() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.wager_winnings)
  return wager_winnings_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_wager_winnings(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  wager_winnings_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.wager_winnings)
}

// optional bool cavern_challenge_active = 12;
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_active() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_active() {
  cavern_challenge_active_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CDOTAMatchMetadata_Team_EventData::cavern_challenge_active() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.cavern_challenge_active)
  return cavern_challenge_active_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_active(bool value) {
  _has_bits_[0] |= 0x00000200u;
  cavern_challenge_active_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.cavern_challenge_active)
}

// optional uint32 cavern_challenge_winnings = 13;
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_winnings() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_winnings() {
  cavern_challenge_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::cavern_challenge_winnings() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.cavern_challenge_winnings)
  return cavern_challenge_winnings_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_winnings(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  cavern_challenge_winnings_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.cavern_challenge_winnings)
}

// optional uint32 amount_wagered = 14;
inline bool CDOTAMatchMetadata_Team_EventData::has_amount_wagered() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_amount_wagered() {
  amount_wagered_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::amount_wagered() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.amount_wagered)
  return amount_wagered_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_amount_wagered(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  amount_wagered_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.amount_wagered)
}

// optional uint32 team_wager_amount = 15;
inline bool CDOTAMatchMetadata_Team_EventData::has_team_wager_amount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_team_wager_amount() {
  team_wager_amount_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::team_wager_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.team_wager_amount)
  return team_wager_amount_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_team_wager_amount(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  team_wager_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.team_wager_amount)
}

// optional uint32 periodic_point_adjustments = 16;
inline bool CDOTAMatchMetadata_Team_EventData::has_periodic_point_adjustments() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTAMatchMetadata_Team_EventData::clear_periodic_point_adjustments() {
  periodic_point_adjustments_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_EventData::periodic_point_adjustments() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.EventData.periodic_point_adjustments)
  return periodic_point_adjustments_;
}
inline void CDOTAMatchMetadata_Team_EventData::set_periodic_point_adjustments(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  periodic_point_adjustments_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.EventData.periodic_point_adjustments)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchMetadata_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.account_id)
  return account_id_;
}
inline void CDOTAMatchMetadata_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.account_id)
}

// repeated uint32 ability_upgrades = 2;
inline int CDOTAMatchMetadata_Team_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_ability_upgrades(int index, ::google::protobuf::uint32 value) {
  ability_upgrades_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline void CDOTAMatchMetadata_Team_Player::add_ability_upgrades(::google::protobuf::uint32 value) {
  ability_upgrades_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return ability_upgrades_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return &ability_upgrades_;
}

// optional uint32 player_slot = 3;
inline bool CDOTAMatchMetadata_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.player_slot)
  return player_slot_;
}
inline void CDOTAMatchMetadata_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.player_slot)
}

// repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
inline int CDOTAMatchMetadata_Team_Player::equipped_econ_items_size() const {
  return equipped_econ_items_.size();
}
inline ::proto::dota::CSOEconItem* CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem >*
CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return &equipped_econ_items_;
}
inline const ::proto::dota::CSOEconItem& CDOTAMatchMetadata_Team_Player::equipped_econ_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Get(index);
}
inline ::proto::dota::CSOEconItem* CDOTAMatchMetadata_Team_Player::add_equipped_econ_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem >&
CDOTAMatchMetadata_Team_Player::equipped_econ_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
inline int CDOTAMatchMetadata_Team_Player::kills_size() const {
  return kills_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_kills() {
  kills_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >*
CDOTAMatchMetadata_Team_Player::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return &kills_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::add_kills() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >&
CDOTAMatchMetadata_Team_Player::kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
inline int CDOTAMatchMetadata_Team_Player::items_size() const {
  return items_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_items() {
  items_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >*
CDOTAMatchMetadata_Team_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return &items_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >&
CDOTAMatchMetadata_Team_Player::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_;
}

// optional uint32 avg_kills_x16 = 7;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_kills_x16() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_kills_x16() {
  avg_kills_x16_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_kills_x16)
  return avg_kills_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_kills_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  avg_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 8;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_deaths_x16() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_deaths_x16() {
  avg_deaths_x16_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
  return avg_deaths_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_deaths_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  avg_deaths_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 9;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_assists_x16() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_assists_x16() {
  avg_assists_x16_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_assists_x16)
  return avg_assists_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_assists_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  avg_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 10;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_gpm_x16() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_gpm_x16() {
  avg_gpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
  return avg_gpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_gpm_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  avg_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 11;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_xpm_x16() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_xpm_x16() {
  avg_xpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
  return avg_xpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_xpm_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  avg_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 12;
inline bool CDOTAMatchMetadata_Team_Player::has_best_kills_x16() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_kills_x16() {
  best_kills_x16_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_kills_x16)
  return best_kills_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_kills_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  best_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_kills_x16)
}

// optional uint32 best_assists_x16 = 13;
inline bool CDOTAMatchMetadata_Team_Player::has_best_assists_x16() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_assists_x16() {
  best_assists_x16_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_assists_x16)
  return best_assists_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_assists_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  best_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 14;
inline bool CDOTAMatchMetadata_Team_Player::has_best_gpm_x16() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_gpm_x16() {
  best_gpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_gpm_x16)
  return best_gpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_gpm_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  best_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 15;
inline bool CDOTAMatchMetadata_Team_Player::has_best_xpm_x16() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_xpm_x16() {
  best_xpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_xpm_x16)
  return best_xpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_xpm_x16(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  best_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_xpm_x16)
}

// optional uint32 win_streak = 16;
inline bool CDOTAMatchMetadata_Team_Player::has_win_streak() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_win_streak() {
  win_streak_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::win_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.win_streak)
  return win_streak_;
}
inline void CDOTAMatchMetadata_Team_Player::set_win_streak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  win_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.win_streak)
}

// optional uint32 best_win_streak = 17;
inline bool CDOTAMatchMetadata_Team_Player::has_best_win_streak() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_win_streak() {
  best_win_streak_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_win_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_win_streak)
  return best_win_streak_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_win_streak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  best_win_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_win_streak)
}

// optional float fight_score = 18;
inline bool CDOTAMatchMetadata_Team_Player::has_fight_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_fight_score() {
  fight_score_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CDOTAMatchMetadata_Team_Player::fight_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.fight_score)
  return fight_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_fight_score(float value) {
  _has_bits_[0] |= 0x00002000u;
  fight_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.fight_score)
}

// optional float farm_score = 19;
inline bool CDOTAMatchMetadata_Team_Player::has_farm_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_farm_score() {
  farm_score_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CDOTAMatchMetadata_Team_Player::farm_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.farm_score)
  return farm_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_farm_score(float value) {
  _has_bits_[0] |= 0x00004000u;
  farm_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.farm_score)
}

// optional float support_score = 20;
inline bool CDOTAMatchMetadata_Team_Player::has_support_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_support_score() {
  support_score_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CDOTAMatchMetadata_Team_Player::support_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.support_score)
  return support_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_support_score(float value) {
  _has_bits_[0] |= 0x00008000u;
  support_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.support_score)
}

// optional float push_score = 21;
inline bool CDOTAMatchMetadata_Team_Player::has_push_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_push_score() {
  push_score_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CDOTAMatchMetadata_Team_Player::push_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.push_score)
  return push_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_push_score(float value) {
  _has_bits_[0] |= 0x00010000u;
  push_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.push_score)
}

// repeated uint32 level_up_times = 22;
inline int CDOTAMatchMetadata_Team_Player::level_up_times_size() const {
  return level_up_times_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_level_up_times() {
  level_up_times_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::level_up_times(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
  return level_up_times_.Get(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_level_up_times(int index, ::google::protobuf::uint32 value) {
  level_up_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline void CDOTAMatchMetadata_Team_Player::add_level_up_times(::google::protobuf::uint32 value) {
  level_up_times_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_Player::level_up_times() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
  return level_up_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_level_up_times() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
  return &level_up_times_;
}

// repeated float graph_net_worth = 23;
inline int CDOTAMatchMetadata_Team_Player::graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team_Player::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return graph_net_worth_.Get(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team_Player::add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return graph_net_worth_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return &graph_net_worth_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
inline int CDOTAMatchMetadata_Team_Player::inventory_snapshot_size() const {
  return inventory_snapshot_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_inventory_snapshot() {
  inventory_snapshot_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >*
CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return &inventory_snapshot_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::inventory_snapshot(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::add_inventory_snapshot() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >&
CDOTAMatchMetadata_Team_Player::inventory_snapshot() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_;
}

// optional bool avg_stats_calibrated = 25;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_stats_calibrated() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_stats_calibrated() {
  avg_stats_calibrated_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CDOTAMatchMetadata_Team_Player::avg_stats_calibrated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
  return avg_stats_calibrated_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_stats_calibrated(bool value) {
  _has_bits_[0] |= 0x00020000u;
  avg_stats_calibrated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
inline int CDOTAMatchMetadata_Team_Player::auto_style_criteria_size() const {
  return auto_style_criteria_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_auto_style_criteria() {
  auto_style_criteria_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return &auto_style_criteria_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::auto_style_criteria(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::add_auto_style_criteria() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
CDOTAMatchMetadata_Team_Player::auto_style_criteria() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.EventData event_data = 29;
inline int CDOTAMatchMetadata_Team_Player::event_data_size() const {
  return event_data_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_event_data() {
  event_data_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::mutable_event_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_EventData >*
CDOTAMatchMetadata_Team_Player::mutable_event_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.event_data)
  return &event_data_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_EventData& CDOTAMatchMetadata_Team_Player::event_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::add_event_data() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_EventData >&
CDOTAMatchMetadata_Team_Player::event_data() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
inline int CDOTAMatchMetadata_Team_Player::strange_gem_progress_size() const {
  return strange_gem_progress_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_strange_gem_progress() {
  strange_gem_progress_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::mutable_strange_gem_progress(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress >*
CDOTAMatchMetadata_Team_Player::mutable_strange_gem_progress() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return &strange_gem_progress_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress& CDOTAMatchMetadata_Team_Player::strange_gem_progress(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::add_strange_gem_progress() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_StrangeGemProgress >&
CDOTAMatchMetadata_Team_Player::strange_gem_progress() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_;
}

// optional uint32 hero_xp = 31;
inline bool CDOTAMatchMetadata_Team_Player::has_hero_xp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_hero_xp() {
  hero_xp_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::hero_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.hero_xp)
  return hero_xp_;
}
inline void CDOTAMatchMetadata_Team_Player::set_hero_xp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  hero_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.hero_xp)
}

// optional uint32 camps_stacked = 32;
inline bool CDOTAMatchMetadata_Team_Player::has_camps_stacked() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_camps_stacked() {
  camps_stacked_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::camps_stacked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.camps_stacked)
  return camps_stacked_;
}
inline void CDOTAMatchMetadata_Team_Player::set_camps_stacked(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  camps_stacked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.camps_stacked)
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
inline int CDOTAMatchMetadata_Team_Player::victory_prediction_size() const {
  return victory_prediction_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_victory_prediction() {
  victory_prediction_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::mutable_victory_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction >*
CDOTAMatchMetadata_Team_Player::mutable_victory_prediction() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.victory_prediction)
  return &victory_prediction_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction& CDOTAMatchMetadata_Team_Player::victory_prediction(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::add_victory_prediction() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_VictoryPrediction >&
CDOTAMatchMetadata_Team_Player::victory_prediction() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_;
}

// optional uint32 lane_selection_flags = 34;
inline bool CDOTAMatchMetadata_Team_Player::has_lane_selection_flags() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.lane_selection_flags)
  return lane_selection_flags_;
}
inline void CDOTAMatchMetadata_Team_Player::set_lane_selection_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  lane_selection_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.lane_selection_flags)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchMetadata_Team::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.dota_team)
  return dota_team_;
}
inline void CDOTAMatchMetadata_Team::set_dota_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.dota_team)
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
inline int CDOTAMatchMetadata_Team::players_size() const {
  return players_.size();
}
inline void CDOTAMatchMetadata_Team::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player >*
CDOTAMatchMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.players)
  return &players_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player >&
CDOTAMatchMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_;
}

// repeated float graph_experience = 3;
inline int CDOTAMatchMetadata_Team::graph_experience_size() const {
  return graph_experience_.size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_experience() {
  graph_experience_.Clear();
}
inline float CDOTAMatchMetadata_Team::graph_experience(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
  return graph_experience_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_experience(int index, float value) {
  graph_experience_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
}
inline void CDOTAMatchMetadata_Team::add_graph_experience(float value) {
  graph_experience_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_experience() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
  return graph_experience_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_experience() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
  return &graph_experience_;
}

// repeated float graph_gold_earned = 4;
inline int CDOTAMatchMetadata_Team::graph_gold_earned_size() const {
  return graph_gold_earned_.size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_gold_earned() {
  graph_gold_earned_.Clear();
}
inline float CDOTAMatchMetadata_Team::graph_gold_earned(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
  return graph_gold_earned_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_gold_earned(int index, float value) {
  graph_gold_earned_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline void CDOTAMatchMetadata_Team::add_graph_gold_earned(float value) {
  graph_gold_earned_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_gold_earned() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
  return graph_gold_earned_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_gold_earned() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
  return &graph_gold_earned_;
}

// repeated float graph_net_worth = 5;
inline int CDOTAMatchMetadata_Team::graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
  return graph_net_worth_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team::add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
  return graph_net_worth_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
  return &graph_net_worth_;
}

// optional bool cm_first_pick = 6;
inline bool CDOTAMatchMetadata_Team::has_cm_first_pick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team::clear_cm_first_pick() {
  cm_first_pick_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAMatchMetadata_Team::cm_first_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_first_pick)
  return cm_first_pick_;
}
inline void CDOTAMatchMetadata_Team::set_cm_first_pick(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cm_first_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_first_pick)
}

// optional uint32 cm_captain_player_id = 7;
inline bool CDOTAMatchMetadata_Team::has_cm_captain_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team::clear_cm_captain_player_id() {
  cm_captain_player_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_captain_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_captain_player_id)
  return cm_captain_player_id_;
}
inline void CDOTAMatchMetadata_Team::set_cm_captain_player_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cm_captain_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_captain_player_id)
}

// repeated uint32 cm_bans = 8;
inline int CDOTAMatchMetadata_Team::cm_bans_size() const {
  return cm_bans_.size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_bans() {
  cm_bans_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
  return cm_bans_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_bans(int index, ::google::protobuf::uint32 value) {
  cm_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
}
inline void CDOTAMatchMetadata_Team::add_cm_bans(::google::protobuf::uint32 value) {
  cm_bans_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team::cm_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
  return cm_bans_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
  return &cm_bans_;
}

// repeated uint32 cm_picks = 9;
inline int CDOTAMatchMetadata_Team::cm_picks_size() const {
  return cm_picks_.size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_picks() {
  cm_picks_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_picks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
  return cm_picks_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_picks(int index, ::google::protobuf::uint32 value) {
  cm_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
}
inline void CDOTAMatchMetadata_Team::add_cm_picks(::google::protobuf::uint32 value) {
  cm_picks_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team::cm_picks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
  return cm_picks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_picks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
  return &cm_picks_;
}

// optional uint32 cm_penalty = 10;
inline bool CDOTAMatchMetadata_Team::has_cm_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team::clear_cm_penalty() {
  cm_penalty_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_penalty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_penalty)
  return cm_penalty_;
}
inline void CDOTAMatchMetadata_Team::set_cm_penalty(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  cm_penalty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_penalty)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata

// repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
inline int CDOTAMatchMetadata::teams_size() const {
  return teams_.size();
}
inline void CDOTAMatchMetadata::clear_teams() {
  teams_.Clear();
}
inline ::proto::dota::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.teams)
  return teams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team >*
CDOTAMatchMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.teams)
  return &teams_;
}
inline const ::proto::dota::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.teams)
  return teams_.Get(index);
}
inline ::proto::dota::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team >&
CDOTAMatchMetadata::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.teams)
  return teams_;
}

// repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
inline int CDOTAMatchMetadata::item_rewards_size() const {
  return item_rewards_.size();
}
inline ::proto::dota::CLobbyTimedRewardDetails* CDOTAMatchMetadata::mutable_item_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
CDOTAMatchMetadata::mutable_item_rewards() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.item_rewards)
  return &item_rewards_;
}
inline const ::proto::dota::CLobbyTimedRewardDetails& CDOTAMatchMetadata::item_rewards(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Get(index);
}
inline ::proto::dota::CLobbyTimedRewardDetails* CDOTAMatchMetadata::add_item_rewards() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
CDOTAMatchMetadata::item_rewards() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_;
}

// optional fixed64 lobby_id = 3;
inline bool CDOTAMatchMetadata::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CDOTAMatchMetadata::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.lobby_id)
  return lobby_id_;
}
inline void CDOTAMatchMetadata::set_lobby_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.lobby_id)
}

// optional fixed64 report_until_time = 4;
inline bool CDOTAMatchMetadata::has_report_until_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata::clear_report_until_time() {
  report_until_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CDOTAMatchMetadata::report_until_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.report_until_time)
  return report_until_time_;
}
inline void CDOTAMatchMetadata::set_report_until_time(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  report_until_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.report_until_time)
}

// optional bytes event_game_custom_table = 5;
inline bool CDOTAMatchMetadata::has_event_game_custom_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata::clear_event_game_custom_table() {
  event_game_custom_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAMatchMetadata::event_game_custom_table() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
  return event_game_custom_table_.GetNoArena();
}
inline void CDOTAMatchMetadata::set_event_game_custom_table(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
#if LANG_CXX11
inline void CDOTAMatchMetadata::set_event_game_custom_table(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
#endif
inline void CDOTAMatchMetadata::set_event_game_custom_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
inline void CDOTAMatchMetadata::set_event_game_custom_table(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
inline ::std::string* CDOTAMatchMetadata::mutable_event_game_custom_table() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
  return event_game_custom_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAMatchMetadata::release_event_game_custom_table() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
  if (!has_event_game_custom_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_game_custom_table_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAMatchMetadata::set_allocated_event_game_custom_table(::std::string* event_game_custom_table) {
  if (event_game_custom_table != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_game_custom_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_game_custom_table);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}

// optional uint32 primary_event_id = 6;
inline bool CDOTAMatchMetadata::has_primary_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata::clear_primary_event_id() {
  primary_event_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata::primary_event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.primary_event_id)
  return primary_event_id_;
}
inline void CDOTAMatchMetadata::set_primary_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  primary_event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.primary_event_id)
}

// repeated .proto.dota.CMsgMatchTips match_tips = 7;
inline int CDOTAMatchMetadata::match_tips_size() const {
  return match_tips_.size();
}
inline ::proto::dota::CMsgMatchTips* CDOTAMatchMetadata::mutable_match_tips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.match_tips)
  return match_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips >*
CDOTAMatchMetadata::mutable_match_tips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.match_tips)
  return &match_tips_;
}
inline const ::proto::dota::CMsgMatchTips& CDOTAMatchMetadata::match_tips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.match_tips)
  return match_tips_.Get(index);
}
inline ::proto::dota::CMsgMatchTips* CDOTAMatchMetadata::add_match_tips() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.match_tips)
  return match_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgMatchTips >&
CDOTAMatchMetadata::match_tips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.match_tips)
  return match_tips_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget

// optional uint32 hero_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.hero_id)
  return hero_id_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.hero_id)
}

// optional uint32 damage = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::clear_damage() {
  damage_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.damage)
  return damage_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::set_damage(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget.damage)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility

// optional uint32 source_unit_index = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::has_source_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::clear_source_unit_index() {
  source_unit_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::source_unit_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.source_unit_index)
  return source_unit_index_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::set_source_unit_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  source_unit_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.source_unit_index)
}

// optional uint32 ability_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::clear_ability_id() {
  ability_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ability_id)
  return ability_id_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::set_ability_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ability_id)
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::by_hero_targets_size() const {
  return by_hero_targets_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::clear_by_hero_targets() {
  by_hero_targets_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::mutable_by_hero_targets(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return by_hero_targets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >*
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::mutable_by_hero_targets() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return &by_hero_targets_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::by_hero_targets(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return by_hero_targets_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::add_by_hero_targets() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return by_hero_targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >&
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::by_hero_targets() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets)
  return by_hero_targets_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_CombatSegment

// optional int32 game_time = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.game_time)
  return game_time_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::set_game_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.game_time)
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::damage_by_ability_size() const {
  return damage_by_ability_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::clear_damage_by_ability() {
  damage_by_ability_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::mutable_damage_by_ability(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return damage_by_ability_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >*
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::mutable_damage_by_ability() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return &damage_by_ability_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::damage_by_ability(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return damage_by_ability_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::add_damage_by_ability() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return damage_by_ability_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >&
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::damage_by_ability() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability)
  return damage_by_ability_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget

// optional uint32 hero_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.hero_id)
  return hero_id_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.hero_id)
}

// optional float elapsed_duration = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::has_elapsed_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::clear_elapsed_duration() {
  elapsed_duration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::elapsed_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.elapsed_duration)
  return elapsed_duration_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::set_elapsed_duration(float value) {
  _has_bits_[0] |= 0x00000002u;
  elapsed_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.elapsed_duration)
}

// optional bool is_hidden = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::has_is_hidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::clear_is_hidden() {
  is_hidden_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::is_hidden() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.is_hidden)
  return is_hidden_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::set_is_hidden(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_hidden_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget.is_hidden)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player_BuffRecord

// optional uint32 buff_ability_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::has_buff_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::clear_buff_ability_id() {
  buff_ability_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::buff_ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_ability_id)
  return buff_ability_id_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_ability_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  buff_ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_ability_id)
}

// optional string buff_modifier_name = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::has_buff_modifier_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::clear_buff_modifier_name() {
  buff_modifier_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::buff_modifier_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
  return buff_modifier_name_.GetNoArena();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
#if LANG_CXX11
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
#endif
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_buff_modifier_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buff_modifier_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::mutable_buff_modifier_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
  return buff_modifier_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::release_buff_modifier_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
  if (!has_buff_modifier_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buff_modifier_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::set_allocated_buff_modifier_name(::std::string* buff_modifier_name) {
  if (buff_modifier_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buff_modifier_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buff_modifier_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name)
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
inline int CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::by_hero_targets_size() const {
  return by_hero_targets_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::clear_by_hero_targets() {
  by_hero_targets_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::mutable_by_hero_targets(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return by_hero_targets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >*
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::mutable_by_hero_targets() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return &by_hero_targets_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::by_hero_targets(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return by_hero_targets_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::add_by_hero_targets() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return by_hero_targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >&
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::by_hero_targets() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets)
  return by_hero_targets_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.account_id)
  return account_id_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.player_slot)
  return player_slot_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.player_slot)
}

// optional bytes position_stream = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_position_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_position_stream() {
  position_stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAMatchPrivateMetadata_Team_Player::position_stream() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return position_stream_.GetNoArena();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  position_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
#if LANG_CXX11
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  position_stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
#endif
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  position_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  position_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player::mutable_position_stream() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return position_stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player::release_position_stream() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  if (!has_position_stream()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return position_stream_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_allocated_position_stream(::std::string* position_stream) {
  if (position_stream != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position_stream);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
inline int CDOTAMatchPrivateMetadata_Team_Player::combat_segments_size() const {
  return combat_segments_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_combat_segments() {
  combat_segments_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* CDOTAMatchPrivateMetadata_Team_Player::mutable_combat_segments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return combat_segments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_combat_segments() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return &combat_segments_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& CDOTAMatchPrivateMetadata_Team_Player::combat_segments(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return combat_segments_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* CDOTAMatchPrivateMetadata_Team_Player::add_combat_segments() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return combat_segments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >&
CDOTAMatchPrivateMetadata_Team_Player::combat_segments() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.combat_segments)
  return combat_segments_;
}

// repeated string damage_unit_names = 5;
inline int CDOTAMatchPrivateMetadata_Team_Player::damage_unit_names_size() const {
  return damage_unit_names_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_damage_unit_names() {
  damage_unit_names_.Clear();
}
inline const ::std::string& CDOTAMatchPrivateMetadata_Team_Player::damage_unit_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return damage_unit_names_.Get(index);
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player::mutable_damage_unit_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return damage_unit_names_.Mutable(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  damage_unit_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  damage_unit_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  damage_unit_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_damage_unit_names(int index, const char* value, size_t size) {
  damage_unit_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return damage_unit_names_.Add();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(const ::std::string& value) {
  damage_unit_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
#if LANG_CXX11
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(::std::string&& value) {
  damage_unit_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
#endif
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  damage_unit_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_damage_unit_names(const char* value, size_t size) {
  damage_unit_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CDOTAMatchPrivateMetadata_Team_Player::damage_unit_names() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return damage_unit_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CDOTAMatchPrivateMetadata_Team_Player::mutable_damage_unit_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names)
  return &damage_unit_names_;
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
inline int CDOTAMatchPrivateMetadata_Team_Player::buff_records_size() const {
  return buff_records_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_buff_records() {
  buff_records_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* CDOTAMatchPrivateMetadata_Team_Player::mutable_buff_records(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return buff_records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_buff_records() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return &buff_records_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& CDOTAMatchPrivateMetadata_Team_Player::buff_records(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return buff_records_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* CDOTAMatchPrivateMetadata_Team_Player::add_buff_records() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return buff_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >&
CDOTAMatchPrivateMetadata_Team_Player::buff_records() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.buff_records)
  return buff_records_;
}

// repeated float graph_kills = 7;
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_kills_size() const {
  return graph_kills_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_kills() {
  graph_kills_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
  return graph_kills_.Get(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_kills(int index, float value) {
  graph_kills_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_kills(float value) {
  graph_kills_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
  return graph_kills_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_kills)
  return &graph_kills_;
}

// repeated float graph_deaths = 8;
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_deaths_size() const {
  return graph_deaths_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_deaths() {
  graph_deaths_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_deaths(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
  return graph_deaths_.Get(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_deaths(int index, float value) {
  graph_deaths_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_deaths(float value) {
  graph_deaths_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_deaths() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
  return graph_deaths_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_deaths() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_deaths)
  return &graph_deaths_;
}

// repeated float graph_assists = 9;
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_assists_size() const {
  return graph_assists_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_assists() {
  graph_assists_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_assists(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
  return graph_assists_.Get(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_assists(int index, float value) {
  graph_assists_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_assists(float value) {
  graph_assists_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_assists() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
  return graph_assists_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_assists() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_assists)
  return &graph_assists_;
}

// repeated float graph_lasthits = 10;
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_lasthits_size() const {
  return graph_lasthits_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_lasthits() {
  graph_lasthits_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_lasthits(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
  return graph_lasthits_.Get(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_lasthits(int index, float value) {
  graph_lasthits_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_lasthits(float value) {
  graph_lasthits_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_lasthits() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
  return graph_lasthits_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_lasthits() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_lasthits)
  return &graph_lasthits_;
}

// repeated float graph_denies = 11;
inline int CDOTAMatchPrivateMetadata_Team_Player::graph_denies_size() const {
  return graph_denies_.size();
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_graph_denies() {
  graph_denies_.Clear();
}
inline float CDOTAMatchPrivateMetadata_Team_Player::graph_denies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
  return graph_denies_.Get(index);
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_graph_denies(int index, float value) {
  graph_denies_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::add_graph_denies(float value) {
  graph_denies_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchPrivateMetadata_Team_Player::graph_denies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
  return graph_denies_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchPrivateMetadata_Team_Player::mutable_graph_denies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.graph_denies)
  return &graph_denies_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Building

// optional string unit_name = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_unit_name() {
  unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAMatchPrivateMetadata_Team_Building::unit_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return unit_name_.GetNoArena();
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
#if LANG_CXX11
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
#endif
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Building::mutable_unit_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return unit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Building::release_unit_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  if (!has_unit_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unit_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}

// optional uint32 position_quant_x = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_x() {
  position_quant_x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
  return position_quant_x_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_x(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  position_quant_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
}

// optional uint32 position_quant_y = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_y() {
  position_quant_y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
  return position_quant_y_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_y(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  position_quant_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
}

// optional float death_time = 4;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_death_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_death_time() {
  death_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CDOTAMatchPrivateMetadata_Team_Building::death_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.death_time)
  return death_time_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_death_time(float value) {
  _has_bits_[0] |= 0x00000008u;
  death_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.death_time)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchPrivateMetadata_Team::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.dota_team)
  return dota_team_;
}
inline void CDOTAMatchPrivateMetadata_Team::set_dota_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.dota_team)
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
inline int CDOTAMatchPrivateMetadata_Team::players_size() const {
  return players_.size();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >*
CDOTAMatchPrivateMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return &players_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >&
CDOTAMatchPrivateMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_;
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
inline int CDOTAMatchPrivateMetadata_Team::buildings_size() const {
  return buildings_.size();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_buildings() {
  buildings_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >*
CDOTAMatchPrivateMetadata_Team::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return &buildings_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team::buildings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::add_buildings() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >&
CDOTAMatchPrivateMetadata_Team::buildings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
inline int CDOTAMatchPrivateMetadata::teams_size() const {
  return teams_.size();
}
inline void CDOTAMatchPrivateMetadata::clear_teams() {
  teams_.Clear();
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team >*
CDOTAMatchPrivateMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return &teams_;
}
inline const ::proto::dota::CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_.Get(index);
}
inline ::proto::dota::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team >&
CDOTAMatchPrivateMetadata::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_;
}

// repeated float graph_win_probability = 2;
inline int CDOTAMatchPrivateMetadata::graph_win_probability_size() const {
  return graph_win_probability_.size();
}
inline void CDOTAMatchPrivateMetadata::clear_graph_win_probability() {
  graph_win_probability_.Clear();
}
inline float CDOTAMatchPrivateMetadata::graph_win_probability(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.graph_win_probability)
  return graph_win_probability_.Get(index);
}
inline void CDOTAMatchPrivateMetadata::set_graph_win_probability(int index, float value) {
  graph_win_probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.graph_win_probability)
}
inline void CDOTAMatchPrivateMetadata::add_graph_win_probability(float value) {
  graph_win_probability_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.graph_win_probability)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchPrivateMetadata::graph_win_probability() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.graph_win_probability)
  return graph_win_probability_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchPrivateMetadata::mutable_graph_win_probability() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.graph_win_probability)
  return &graph_win_probability_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCMatch

// optional .proto.dota.CMsgDOTAMatch match = 1;
inline bool CMsgDOTADPCMatch::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::dota::CMsgDOTAMatch& CMsgDOTADPCMatch::match() const {
  const ::proto::dota::CMsgDOTAMatch* p = match_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTADPCMatch.match)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAMatch*>(
      &::proto::dota::_CMsgDOTAMatch_default_instance_);
}
inline ::proto::dota::CMsgDOTAMatch* CMsgDOTADPCMatch::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTADPCMatch.match)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTAMatch* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAMatch* CMsgDOTADPCMatch::mutable_match() {
  _has_bits_[0] |= 0x00000001u;
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAMatch>(GetArenaNoVirtual());
    match_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTADPCMatch.match)
  return match_;
}
inline void CMsgDOTADPCMatch::set_allocated_match(::proto::dota::CMsgDOTAMatch* match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(match_);
  }
  if (match) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTADPCMatch.match)
}

// optional .proto.dota.CDOTAMatchMetadata metadata = 2;
inline bool CMsgDOTADPCMatch::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTADPCMatch::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CDOTAMatchMetadata& CMsgDOTADPCMatch::metadata() const {
  const ::proto::dota::CDOTAMatchMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTADPCMatch.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CDOTAMatchMetadata*>(
      &::proto::dota::_CDOTAMatchMetadata_default_instance_);
}
inline ::proto::dota::CDOTAMatchMetadata* CMsgDOTADPCMatch::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTADPCMatch.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::proto::dota::CDOTAMatchMetadata* CMsgDOTADPCMatch::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CDOTAMatchMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTADPCMatch.metadata)
  return metadata_;
}
inline void CMsgDOTADPCMatch::set_allocated_metadata(::proto::dota::CDOTAMatchMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTADPCMatch.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dota_5fmatch_5fmetadata_2eproto
