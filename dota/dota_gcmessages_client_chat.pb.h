// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#ifndef PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fchat_2eproto
#define PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dota_5fgcmessages_5fclient_5fchat_2eproto();
namespace proto {
namespace dota {
class CMsgClientToGCPrivateChatDemote;
class CMsgClientToGCPrivateChatDemoteDefaultTypeInternal;
extern CMsgClientToGCPrivateChatDemoteDefaultTypeInternal _CMsgClientToGCPrivateChatDemote_default_instance_;
class CMsgClientToGCPrivateChatInfoRequest;
class CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal;
extern CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal _CMsgClientToGCPrivateChatInfoRequest_default_instance_;
class CMsgClientToGCPrivateChatInvite;
class CMsgClientToGCPrivateChatInviteDefaultTypeInternal;
extern CMsgClientToGCPrivateChatInviteDefaultTypeInternal _CMsgClientToGCPrivateChatInvite_default_instance_;
class CMsgClientToGCPrivateChatKick;
class CMsgClientToGCPrivateChatKickDefaultTypeInternal;
extern CMsgClientToGCPrivateChatKickDefaultTypeInternal _CMsgClientToGCPrivateChatKick_default_instance_;
class CMsgClientToGCPrivateChatPromote;
class CMsgClientToGCPrivateChatPromoteDefaultTypeInternal;
extern CMsgClientToGCPrivateChatPromoteDefaultTypeInternal _CMsgClientToGCPrivateChatPromote_default_instance_;
class CMsgDOTAChatChannelFullUpdate;
class CMsgDOTAChatChannelFullUpdateDefaultTypeInternal;
extern CMsgDOTAChatChannelFullUpdateDefaultTypeInternal _CMsgDOTAChatChannelFullUpdate_default_instance_;
class CMsgDOTAChatChannelMemberUpdate;
class CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal;
extern CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal _CMsgDOTAChatChannelMemberUpdate_default_instance_;
class CMsgDOTAChatChannelMemberUpdate_JoinedMember;
class CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal;
extern CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal _CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_;
class CMsgDOTAChatGetMemberCount;
class CMsgDOTAChatGetMemberCountDefaultTypeInternal;
extern CMsgDOTAChatGetMemberCountDefaultTypeInternal _CMsgDOTAChatGetMemberCount_default_instance_;
class CMsgDOTAChatGetMemberCountResponse;
class CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal;
extern CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal _CMsgDOTAChatGetMemberCountResponse_default_instance_;
class CMsgDOTAChatGetUserList;
class CMsgDOTAChatGetUserListDefaultTypeInternal;
extern CMsgDOTAChatGetUserListDefaultTypeInternal _CMsgDOTAChatGetUserList_default_instance_;
class CMsgDOTAChatGetUserListResponse;
class CMsgDOTAChatGetUserListResponseDefaultTypeInternal;
extern CMsgDOTAChatGetUserListResponseDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_default_instance_;
class CMsgDOTAChatGetUserListResponse_Member;
class CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal;
extern CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_Member_default_instance_;
class CMsgDOTAChatMember;
class CMsgDOTAChatMemberDefaultTypeInternal;
extern CMsgDOTAChatMemberDefaultTypeInternal _CMsgDOTAChatMember_default_instance_;
class CMsgDOTAChatMessage;
class CMsgDOTAChatMessageDefaultTypeInternal;
extern CMsgDOTAChatMessageDefaultTypeInternal _CMsgDOTAChatMessage_default_instance_;
class CMsgDOTAChatMessage_DiceRoll;
class CMsgDOTAChatMessage_DiceRollDefaultTypeInternal;
extern CMsgDOTAChatMessage_DiceRollDefaultTypeInternal _CMsgDOTAChatMessage_DiceRoll_default_instance_;
class CMsgDOTAChatMessage_TriviaAnswered;
class CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal;
extern CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal _CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
class CMsgDOTAChatRegionsEnabled;
class CMsgDOTAChatRegionsEnabledDefaultTypeInternal;
extern CMsgDOTAChatRegionsEnabledDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_default_instance_;
class CMsgDOTAChatRegionsEnabled_Region;
class CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal;
extern CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_Region_default_instance_;
class CMsgDOTAClientIgnoredUser;
class CMsgDOTAClientIgnoredUserDefaultTypeInternal;
extern CMsgDOTAClientIgnoredUserDefaultTypeInternal _CMsgDOTAClientIgnoredUser_default_instance_;
class CMsgDOTAJoinChatChannel;
class CMsgDOTAJoinChatChannelDefaultTypeInternal;
extern CMsgDOTAJoinChatChannelDefaultTypeInternal _CMsgDOTAJoinChatChannel_default_instance_;
class CMsgDOTAJoinChatChannelResponse;
class CMsgDOTAJoinChatChannelResponseDefaultTypeInternal;
extern CMsgDOTAJoinChatChannelResponseDefaultTypeInternal _CMsgDOTAJoinChatChannelResponse_default_instance_;
class CMsgDOTALeaveChatChannel;
class CMsgDOTALeaveChatChannelDefaultTypeInternal;
extern CMsgDOTALeaveChatChannelDefaultTypeInternal _CMsgDOTALeaveChatChannel_default_instance_;
class CMsgDOTAOtherJoinedChatChannel;
class CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal;
extern CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal _CMsgDOTAOtherJoinedChatChannel_default_instance_;
class CMsgDOTAOtherLeftChatChannel;
class CMsgDOTAOtherLeftChatChannelDefaultTypeInternal;
extern CMsgDOTAOtherLeftChatChannelDefaultTypeInternal _CMsgDOTAOtherLeftChatChannel_default_instance_;
class CMsgDOTARequestChatChannelList;
class CMsgDOTARequestChatChannelListDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListDefaultTypeInternal _CMsgDOTARequestChatChannelList_default_instance_;
class CMsgDOTARequestChatChannelListResponse;
class CMsgDOTARequestChatChannelListResponseDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListResponseDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_default_instance_;
class CMsgDOTARequestChatChannelListResponse_ChatChannel;
class CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
class CMsgGCChatReportPublicSpam;
class CMsgGCChatReportPublicSpamDefaultTypeInternal;
extern CMsgGCChatReportPublicSpamDefaultTypeInternal _CMsgGCChatReportPublicSpam_default_instance_;
class CMsgGCToClientPrivateChatInfoResponse;
class CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal;
extern CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal _CMsgGCToClientPrivateChatInfoResponse_default_instance_;
class CMsgGCToClientPrivateChatInfoResponse_Member;
class CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal;
extern CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal _CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_;
class CMsgGCToClientPrivateChatResponse;
class CMsgGCToClientPrivateChatResponseDefaultTypeInternal;
extern CMsgGCToClientPrivateChatResponseDefaultTypeInternal _CMsgGCToClientPrivateChatResponse_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CMsgClientToGCPrivateChatDemote* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCPrivateChatDemote>(Arena*);
template<> ::proto::dota::CMsgClientToGCPrivateChatInfoRequest* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCPrivateChatInfoRequest>(Arena*);
template<> ::proto::dota::CMsgClientToGCPrivateChatInvite* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCPrivateChatInvite>(Arena*);
template<> ::proto::dota::CMsgClientToGCPrivateChatKick* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCPrivateChatKick>(Arena*);
template<> ::proto::dota::CMsgClientToGCPrivateChatPromote* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCPrivateChatPromote>(Arena*);
template<> ::proto::dota::CMsgDOTAChatChannelFullUpdate* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatChannelFullUpdate>(Arena*);
template<> ::proto::dota::CMsgDOTAChatChannelMemberUpdate* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatChannelMemberUpdate>(Arena*);
template<> ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember>(Arena*);
template<> ::proto::dota::CMsgDOTAChatGetMemberCount* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatGetMemberCount>(Arena*);
template<> ::proto::dota::CMsgDOTAChatGetMemberCountResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatGetMemberCountResponse>(Arena*);
template<> ::proto::dota::CMsgDOTAChatGetUserList* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatGetUserList>(Arena*);
template<> ::proto::dota::CMsgDOTAChatGetUserListResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatGetUserListResponse>(Arena*);
template<> ::proto::dota::CMsgDOTAChatGetUserListResponse_Member* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatGetUserListResponse_Member>(Arena*);
template<> ::proto::dota::CMsgDOTAChatMember* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatMember>(Arena*);
template<> ::proto::dota::CMsgDOTAChatMessage* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatMessage>(Arena*);
template<> ::proto::dota::CMsgDOTAChatMessage_DiceRoll* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatMessage_DiceRoll>(Arena*);
template<> ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatMessage_TriviaAnswered>(Arena*);
template<> ::proto::dota::CMsgDOTAChatRegionsEnabled* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatRegionsEnabled>(Arena*);
template<> ::proto::dota::CMsgDOTAChatRegionsEnabled_Region* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAChatRegionsEnabled_Region>(Arena*);
template<> ::proto::dota::CMsgDOTAClientIgnoredUser* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAClientIgnoredUser>(Arena*);
template<> ::proto::dota::CMsgDOTAJoinChatChannel* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAJoinChatChannel>(Arena*);
template<> ::proto::dota::CMsgDOTAJoinChatChannelResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAJoinChatChannelResponse>(Arena*);
template<> ::proto::dota::CMsgDOTALeaveChatChannel* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTALeaveChatChannel>(Arena*);
template<> ::proto::dota::CMsgDOTAOtherJoinedChatChannel* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAOtherJoinedChatChannel>(Arena*);
template<> ::proto::dota::CMsgDOTAOtherLeftChatChannel* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTAOtherLeftChatChannel>(Arena*);
template<> ::proto::dota::CMsgDOTARequestChatChannelList* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARequestChatChannelList>(Arena*);
template<> ::proto::dota::CMsgDOTARequestChatChannelListResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARequestChatChannelListResponse>(Arena*);
template<> ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel>(Arena*);
template<> ::proto::dota::CMsgGCChatReportPublicSpam* Arena::CreateMaybeMessage<::proto::dota::CMsgGCChatReportPublicSpam>(Arena*);
template<> ::proto::dota::CMsgGCToClientPrivateChatInfoResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientPrivateChatInfoResponse>(Arena*);
template<> ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member>(Arena*);
template<> ::proto::dota::CMsgGCToClientPrivateChatResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientPrivateChatResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

enum CMsgGCToClientPrivateChatResponse_Result {
  CMsgGCToClientPrivateChatResponse_Result_SUCCESS = 0,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_LOCK = 1,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_SQL_TRANSACTION = 2,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_SDO_LOAD = 3,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_PERMISSION = 4,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_MEMBER = 5,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NOT_A_MEMBER = 7,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_REMAINING_ADMINS = 8,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_ROOM = 9,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_RATE_LIMITED = 10,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_CHANNEL_NAME = 11,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_USER = 12,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_ERROR = 13,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CANNOT_KICK_ADMIN = 14,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN = 15
};
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value);
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse_Result_Result_MIN = CMsgGCToClientPrivateChatResponse_Result_SUCCESS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse_Result_Result_MAX = CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN;
const int CMsgGCToClientPrivateChatResponse_Result_Result_ARRAYSIZE = CMsgGCToClientPrivateChatResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor();
inline const ::std::string& CMsgGCToClientPrivateChatResponse_Result_Name(CMsgGCToClientPrivateChatResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGCToClientPrivateChatResponse_Result_descriptor(), value);
}
inline bool CMsgGCToClientPrivateChatResponse_Result_Parse(
    const ::std::string& name, CMsgGCToClientPrivateChatResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGCToClientPrivateChatResponse_Result>(
    CMsgGCToClientPrivateChatResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAJoinChatChannelResponse_Result {
  CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS = 0,
  CMsgDOTAJoinChatChannelResponse_Result_INVALID_CHANNEL_TYPE = 1,
  CMsgDOTAJoinChatChannelResponse_Result_ACCOUNT_NOT_FOUND = 2,
  CMsgDOTAJoinChatChannelResponse_Result_ACH_FAILED = 3,
  CMsgDOTAJoinChatChannelResponse_Result_USER_IN_TOO_MANY_CHANNELS = 4,
  CMsgDOTAJoinChatChannelResponse_Result_RATE_LIMIT_EXCEEDED = 5,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL = 6,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL_OVERFLOWED = 7,
  CMsgDOTAJoinChatChannelResponse_Result_FAILED_TO_ADD_USER = 8,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_TYPE_DISABLED = 9,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_FAILED = 10,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_NO_PERMISSION = 11,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_LOCK_FAILED = 12,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED = 13,
  CMsgDOTAJoinChatChannelResponse_Result_USER_NOT_ALLOWED = 14
};
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value);
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse_Result_Result_MIN = CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse_Result_Result_MAX = CMsgDOTAJoinChatChannelResponse_Result_USER_NOT_ALLOWED;
const int CMsgDOTAJoinChatChannelResponse_Result_Result_ARRAYSIZE = CMsgDOTAJoinChatChannelResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAJoinChatChannelResponse_Result_Name(CMsgDOTAJoinChatChannelResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAJoinChatChannelResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAJoinChatChannelResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAJoinChatChannelResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAJoinChatChannelResponse_Result>(
    CMsgDOTAJoinChatChannelResponse_Result_descriptor(), name, value);
}
// ===================================================================

class CMsgClientToGCPrivateChatInvite final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCPrivateChatInvite) */ {
 public:
  CMsgClientToGCPrivateChatInvite();
  virtual ~CMsgClientToGCPrivateChatInvite();

  CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from);

  inline CMsgClientToGCPrivateChatInvite& operator=(const CMsgClientToGCPrivateChatInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCPrivateChatInvite(CMsgClientToGCPrivateChatInvite&& from) noexcept
    : CMsgClientToGCPrivateChatInvite() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatInvite& operator=(CMsgClientToGCPrivateChatInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCPrivateChatInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCPrivateChatInvite* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatInvite*>(
               &_CMsgClientToGCPrivateChatInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgClientToGCPrivateChatInvite* other);
  friend void swap(CMsgClientToGCPrivateChatInvite& a, CMsgClientToGCPrivateChatInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCPrivateChatInvite* New() const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatInvite>(nullptr);
  }

  CMsgClientToGCPrivateChatInvite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatInvite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCPrivateChatInvite& from);
  void MergeFrom(const CMsgClientToGCPrivateChatInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 invited_account_id = 2;
  bool has_invited_account_id() const;
  void clear_invited_account_id();
  static const int kInvitedAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 invited_account_id() const;
  void set_invited_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCPrivateChatInvite)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  ::google::protobuf::uint32 invited_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatKick final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCPrivateChatKick) */ {
 public:
  CMsgClientToGCPrivateChatKick();
  virtual ~CMsgClientToGCPrivateChatKick();

  CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from);

  inline CMsgClientToGCPrivateChatKick& operator=(const CMsgClientToGCPrivateChatKick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCPrivateChatKick(CMsgClientToGCPrivateChatKick&& from) noexcept
    : CMsgClientToGCPrivateChatKick() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatKick& operator=(CMsgClientToGCPrivateChatKick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCPrivateChatKick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCPrivateChatKick* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatKick*>(
               &_CMsgClientToGCPrivateChatKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgClientToGCPrivateChatKick* other);
  friend void swap(CMsgClientToGCPrivateChatKick& a, CMsgClientToGCPrivateChatKick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCPrivateChatKick* New() const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatKick>(nullptr);
  }

  CMsgClientToGCPrivateChatKick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatKick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCPrivateChatKick& from);
  void MergeFrom(const CMsgClientToGCPrivateChatKick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatKick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 kick_account_id = 2;
  bool has_kick_account_id() const;
  void clear_kick_account_id();
  static const int kKickAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 kick_account_id() const;
  void set_kick_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCPrivateChatKick)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  ::google::protobuf::uint32 kick_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatPromote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCPrivateChatPromote) */ {
 public:
  CMsgClientToGCPrivateChatPromote();
  virtual ~CMsgClientToGCPrivateChatPromote();

  CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from);

  inline CMsgClientToGCPrivateChatPromote& operator=(const CMsgClientToGCPrivateChatPromote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCPrivateChatPromote(CMsgClientToGCPrivateChatPromote&& from) noexcept
    : CMsgClientToGCPrivateChatPromote() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatPromote& operator=(CMsgClientToGCPrivateChatPromote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCPrivateChatPromote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCPrivateChatPromote* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatPromote*>(
               &_CMsgClientToGCPrivateChatPromote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgClientToGCPrivateChatPromote* other);
  friend void swap(CMsgClientToGCPrivateChatPromote& a, CMsgClientToGCPrivateChatPromote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCPrivateChatPromote* New() const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatPromote>(nullptr);
  }

  CMsgClientToGCPrivateChatPromote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatPromote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCPrivateChatPromote& from);
  void MergeFrom(const CMsgClientToGCPrivateChatPromote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatPromote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 promote_account_id = 2;
  bool has_promote_account_id() const;
  void clear_promote_account_id();
  static const int kPromoteAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 promote_account_id() const;
  void set_promote_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCPrivateChatPromote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  ::google::protobuf::uint32 promote_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatDemote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCPrivateChatDemote) */ {
 public:
  CMsgClientToGCPrivateChatDemote();
  virtual ~CMsgClientToGCPrivateChatDemote();

  CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from);

  inline CMsgClientToGCPrivateChatDemote& operator=(const CMsgClientToGCPrivateChatDemote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCPrivateChatDemote(CMsgClientToGCPrivateChatDemote&& from) noexcept
    : CMsgClientToGCPrivateChatDemote() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatDemote& operator=(CMsgClientToGCPrivateChatDemote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCPrivateChatDemote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCPrivateChatDemote* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatDemote*>(
               &_CMsgClientToGCPrivateChatDemote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgClientToGCPrivateChatDemote* other);
  friend void swap(CMsgClientToGCPrivateChatDemote& a, CMsgClientToGCPrivateChatDemote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCPrivateChatDemote* New() const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatDemote>(nullptr);
  }

  CMsgClientToGCPrivateChatDemote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatDemote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCPrivateChatDemote& from);
  void MergeFrom(const CMsgClientToGCPrivateChatDemote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatDemote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 demote_account_id = 2;
  bool has_demote_account_id() const;
  void clear_demote_account_id();
  static const int kDemoteAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 demote_account_id() const;
  void set_demote_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCPrivateChatDemote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  ::google::protobuf::uint32 demote_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientPrivateChatResponse) */ {
 public:
  CMsgGCToClientPrivateChatResponse();
  virtual ~CMsgGCToClientPrivateChatResponse();

  CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from);

  inline CMsgGCToClientPrivateChatResponse& operator=(const CMsgGCToClientPrivateChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientPrivateChatResponse(CMsgGCToClientPrivateChatResponse&& from) noexcept
    : CMsgGCToClientPrivateChatResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientPrivateChatResponse& operator=(CMsgGCToClientPrivateChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientPrivateChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientPrivateChatResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientPrivateChatResponse*>(
               &_CMsgGCToClientPrivateChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgGCToClientPrivateChatResponse* other);
  friend void swap(CMsgGCToClientPrivateChatResponse& a, CMsgGCToClientPrivateChatResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientPrivateChatResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatResponse>(nullptr);
  }

  CMsgGCToClientPrivateChatResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientPrivateChatResponse& from);
  void MergeFrom(const CMsgGCToClientPrivateChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientPrivateChatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToClientPrivateChatResponse_Result Result;
  static const Result SUCCESS =
    CMsgGCToClientPrivateChatResponse_Result_SUCCESS;
  static const Result FAILURE_CREATION_LOCK =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_LOCK;
  static const Result FAILURE_SQL_TRANSACTION =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_SQL_TRANSACTION;
  static const Result FAILURE_SDO_LOAD =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_SDO_LOAD;
  static const Result FAILURE_NO_PERMISSION =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_PERMISSION;
  static const Result FAILURE_ALREADY_MEMBER =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_MEMBER;
  static const Result FAILURE_NOT_A_MEMBER =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NOT_A_MEMBER;
  static const Result FAILURE_NO_REMAINING_ADMINS =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_REMAINING_ADMINS;
  static const Result FAILURE_NO_ROOM =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_ROOM;
  static const Result FAILURE_CREATION_RATE_LIMITED =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_RATE_LIMITED;
  static const Result FAILURE_UNKNOWN_CHANNEL_NAME =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_CHANNEL_NAME;
  static const Result FAILURE_UNKNOWN_USER =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_USER;
  static const Result FAILURE_UNKNOWN_ERROR =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_ERROR;
  static const Result FAILURE_CANNOT_KICK_ADMIN =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_CANNOT_KICK_ADMIN;
  static const Result FAILURE_ALREADY_ADMIN =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN;
  static inline bool Result_IsValid(int value) {
    return CMsgGCToClientPrivateChatResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgGCToClientPrivateChatResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgGCToClientPrivateChatResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgGCToClientPrivateChatResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgGCToClientPrivateChatResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgGCToClientPrivateChatResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgGCToClientPrivateChatResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional string username = 3;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::proto::dota::CMsgGCToClientPrivateChatResponse_Result result() const;
  void set_result(::proto::dota::CMsgGCToClientPrivateChatResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientPrivateChatResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCPrivateChatInfoRequest) */ {
 public:
  CMsgClientToGCPrivateChatInfoRequest();
  virtual ~CMsgClientToGCPrivateChatInfoRequest();

  CMsgClientToGCPrivateChatInfoRequest(const CMsgClientToGCPrivateChatInfoRequest& from);

  inline CMsgClientToGCPrivateChatInfoRequest& operator=(const CMsgClientToGCPrivateChatInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCPrivateChatInfoRequest(CMsgClientToGCPrivateChatInfoRequest&& from) noexcept
    : CMsgClientToGCPrivateChatInfoRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatInfoRequest& operator=(CMsgClientToGCPrivateChatInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCPrivateChatInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCPrivateChatInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatInfoRequest*>(
               &_CMsgClientToGCPrivateChatInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgClientToGCPrivateChatInfoRequest* other);
  friend void swap(CMsgClientToGCPrivateChatInfoRequest& a, CMsgClientToGCPrivateChatInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCPrivateChatInfoRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatInfoRequest>(nullptr);
  }

  CMsgClientToGCPrivateChatInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCPrivateChatInfoRequest& from);
  void MergeFrom(const CMsgClientToGCPrivateChatInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatInfoResponse_Member final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member) */ {
 public:
  CMsgGCToClientPrivateChatInfoResponse_Member();
  virtual ~CMsgGCToClientPrivateChatInfoResponse_Member();

  CMsgGCToClientPrivateChatInfoResponse_Member(const CMsgGCToClientPrivateChatInfoResponse_Member& from);

  inline CMsgGCToClientPrivateChatInfoResponse_Member& operator=(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientPrivateChatInfoResponse_Member(CMsgGCToClientPrivateChatInfoResponse_Member&& from) noexcept
    : CMsgGCToClientPrivateChatInfoResponse_Member() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientPrivateChatInfoResponse_Member& operator=(CMsgGCToClientPrivateChatInfoResponse_Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientPrivateChatInfoResponse_Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientPrivateChatInfoResponse_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientPrivateChatInfoResponse_Member*>(
               &_CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgGCToClientPrivateChatInfoResponse_Member* other);
  friend void swap(CMsgGCToClientPrivateChatInfoResponse_Member& a, CMsgGCToClientPrivateChatInfoResponse_Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientPrivateChatInfoResponse_Member* New() const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatInfoResponse_Member>(nullptr);
  }

  CMsgGCToClientPrivateChatInfoResponse_Member* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatInfoResponse_Member>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from);
  void MergeFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientPrivateChatInfoResponse_Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientPrivateChatInfoResponse) */ {
 public:
  CMsgGCToClientPrivateChatInfoResponse();
  virtual ~CMsgGCToClientPrivateChatInfoResponse();

  CMsgGCToClientPrivateChatInfoResponse(const CMsgGCToClientPrivateChatInfoResponse& from);

  inline CMsgGCToClientPrivateChatInfoResponse& operator=(const CMsgGCToClientPrivateChatInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientPrivateChatInfoResponse(CMsgGCToClientPrivateChatInfoResponse&& from) noexcept
    : CMsgGCToClientPrivateChatInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientPrivateChatInfoResponse& operator=(CMsgGCToClientPrivateChatInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientPrivateChatInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientPrivateChatInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientPrivateChatInfoResponse*>(
               &_CMsgGCToClientPrivateChatInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CMsgGCToClientPrivateChatInfoResponse* other);
  friend void swap(CMsgGCToClientPrivateChatInfoResponse& a, CMsgGCToClientPrivateChatInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientPrivateChatInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatInfoResponse>(nullptr);
  }

  CMsgGCToClientPrivateChatInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientPrivateChatInfoResponse& from);
  void MergeFrom(const CMsgGCToClientPrivateChatInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientPrivateChatInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToClientPrivateChatInfoResponse_Member Member;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >*
      mutable_members();
  const ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member& members(int index) const;
  ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >&
      members() const;

  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  const ::std::string& private_chat_channel_name() const;
  void set_private_chat_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_private_chat_channel_name(::std::string&& value);
  #endif
  void set_private_chat_channel_name(const char* value);
  void set_private_chat_channel_name(const char* value, size_t size);
  ::std::string* mutable_private_chat_channel_name();
  ::std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 creator = 3;
  bool has_creator() const;
  void clear_creator();
  static const int kCreatorFieldNumber = 3;
  ::google::protobuf::uint32 creator() const;
  void set_creator(::google::protobuf::uint32 value);

  // optional uint32 creation_date = 4;
  bool has_creation_date() const;
  void clear_creation_date();
  static const int kCreationDateFieldNumber = 4;
  ::google::protobuf::uint32 creation_date() const;
  void set_creation_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member > members_;
  ::google::protobuf::internal::ArenaStringPtr private_chat_channel_name_;
  ::google::protobuf::uint32 creator_;
  ::google::protobuf::uint32 creation_date_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAJoinChatChannel) */ {
 public:
  CMsgDOTAJoinChatChannel();
  virtual ~CMsgDOTAJoinChatChannel();

  CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from);

  inline CMsgDOTAJoinChatChannel& operator=(const CMsgDOTAJoinChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAJoinChatChannel(CMsgDOTAJoinChatChannel&& from) noexcept
    : CMsgDOTAJoinChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinChatChannel& operator=(CMsgDOTAJoinChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAJoinChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAJoinChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinChatChannel*>(
               &_CMsgDOTAJoinChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CMsgDOTAJoinChatChannel* other);
  friend void swap(CMsgDOTAJoinChatChannel& a, CMsgDOTAJoinChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAJoinChatChannel* New() const final {
    return CreateMaybeMessage<CMsgDOTAJoinChatChannel>(nullptr);
  }

  CMsgDOTAJoinChatChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAJoinChatChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAJoinChatChannel& from);
  void MergeFrom(const CMsgDOTAJoinChatChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAJoinChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 2;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 4;
  ::proto::dota::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::proto::dota::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAJoinChatChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  int channel_type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALeaveChatChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTALeaveChatChannel) */ {
 public:
  CMsgDOTALeaveChatChannel();
  virtual ~CMsgDOTALeaveChatChannel();

  CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from);

  inline CMsgDOTALeaveChatChannel& operator=(const CMsgDOTALeaveChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeaveChatChannel(CMsgDOTALeaveChatChannel&& from) noexcept
    : CMsgDOTALeaveChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaveChatChannel& operator=(CMsgDOTALeaveChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTALeaveChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeaveChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveChatChannel*>(
               &_CMsgDOTALeaveChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CMsgDOTALeaveChatChannel* other);
  friend void swap(CMsgDOTALeaveChatChannel& a, CMsgDOTALeaveChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaveChatChannel* New() const final {
    return CreateMaybeMessage<CMsgDOTALeaveChatChannel>(nullptr);
  }

  CMsgDOTALeaveChatChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTALeaveChatChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTALeaveChatChannel& from);
  void MergeFrom(const CMsgDOTALeaveChatChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALeaveChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTALeaveChatChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCChatReportPublicSpam final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCChatReportPublicSpam) */ {
 public:
  CMsgGCChatReportPublicSpam();
  virtual ~CMsgGCChatReportPublicSpam();

  CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from);

  inline CMsgGCChatReportPublicSpam& operator=(const CMsgGCChatReportPublicSpam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCChatReportPublicSpam(CMsgGCChatReportPublicSpam&& from) noexcept
    : CMsgGCChatReportPublicSpam() {
    *this = ::std::move(from);
  }

  inline CMsgGCChatReportPublicSpam& operator=(CMsgGCChatReportPublicSpam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCChatReportPublicSpam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCChatReportPublicSpam* internal_default_instance() {
    return reinterpret_cast<const CMsgGCChatReportPublicSpam*>(
               &_CMsgGCChatReportPublicSpam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CMsgGCChatReportPublicSpam* other);
  friend void swap(CMsgGCChatReportPublicSpam& a, CMsgGCChatReportPublicSpam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCChatReportPublicSpam* New() const final {
    return CreateMaybeMessage<CMsgGCChatReportPublicSpam>(nullptr);
  }

  CMsgGCChatReportPublicSpam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCChatReportPublicSpam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCChatReportPublicSpam& from);
  void MergeFrom(const CMsgGCChatReportPublicSpam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCChatReportPublicSpam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 2;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 2;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCChatReportPublicSpam)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint32 channel_user_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAClientIgnoredUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAClientIgnoredUser) */ {
 public:
  CMsgDOTAClientIgnoredUser();
  virtual ~CMsgDOTAClientIgnoredUser();

  CMsgDOTAClientIgnoredUser(const CMsgDOTAClientIgnoredUser& from);

  inline CMsgDOTAClientIgnoredUser& operator=(const CMsgDOTAClientIgnoredUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAClientIgnoredUser(CMsgDOTAClientIgnoredUser&& from) noexcept
    : CMsgDOTAClientIgnoredUser() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAClientIgnoredUser& operator=(CMsgDOTAClientIgnoredUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAClientIgnoredUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAClientIgnoredUser* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAClientIgnoredUser*>(
               &_CMsgDOTAClientIgnoredUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CMsgDOTAClientIgnoredUser* other);
  friend void swap(CMsgDOTAClientIgnoredUser& a, CMsgDOTAClientIgnoredUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAClientIgnoredUser* New() const final {
    return CreateMaybeMessage<CMsgDOTAClientIgnoredUser>(nullptr);
  }

  CMsgDOTAClientIgnoredUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAClientIgnoredUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAClientIgnoredUser& from);
  void MergeFrom(const CMsgDOTAClientIgnoredUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAClientIgnoredUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ignored_account_id = 1;
  bool has_ignored_account_id() const;
  void clear_ignored_account_id();
  static const int kIgnoredAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 ignored_account_id() const;
  void set_ignored_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAClientIgnoredUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 ignored_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_DiceRoll final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatMessage.DiceRoll) */ {
 public:
  CMsgDOTAChatMessage_DiceRoll();
  virtual ~CMsgDOTAChatMessage_DiceRoll();

  CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from);

  inline CMsgDOTAChatMessage_DiceRoll& operator=(const CMsgDOTAChatMessage_DiceRoll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatMessage_DiceRoll(CMsgDOTAChatMessage_DiceRoll&& from) noexcept
    : CMsgDOTAChatMessage_DiceRoll() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage_DiceRoll& operator=(CMsgDOTAChatMessage_DiceRoll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatMessage_DiceRoll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatMessage_DiceRoll* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage_DiceRoll*>(
               &_CMsgDOTAChatMessage_DiceRoll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CMsgDOTAChatMessage_DiceRoll* other);
  friend void swap(CMsgDOTAChatMessage_DiceRoll& a, CMsgDOTAChatMessage_DiceRoll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatMessage_DiceRoll* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_DiceRoll>(nullptr);
  }

  CMsgDOTAChatMessage_DiceRoll* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_DiceRoll>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from);
  void MergeFrom(const CMsgDOTAChatMessage_DiceRoll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage_DiceRoll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roll_min = 1;
  bool has_roll_min() const;
  void clear_roll_min();
  static const int kRollMinFieldNumber = 1;
  ::google::protobuf::int32 roll_min() const;
  void set_roll_min(::google::protobuf::int32 value);

  // optional int32 roll_max = 2;
  bool has_roll_max() const;
  void clear_roll_max();
  static const int kRollMaxFieldNumber = 2;
  ::google::protobuf::int32 roll_max() const;
  void set_roll_max(::google::protobuf::int32 value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatMessage.DiceRoll)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 roll_min_;
  ::google::protobuf::int32 roll_max_;
  ::google::protobuf::int32 result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_TriviaAnswered final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatMessage.TriviaAnswered) */ {
 public:
  CMsgDOTAChatMessage_TriviaAnswered();
  virtual ~CMsgDOTAChatMessage_TriviaAnswered();

  CMsgDOTAChatMessage_TriviaAnswered(const CMsgDOTAChatMessage_TriviaAnswered& from);

  inline CMsgDOTAChatMessage_TriviaAnswered& operator=(const CMsgDOTAChatMessage_TriviaAnswered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatMessage_TriviaAnswered(CMsgDOTAChatMessage_TriviaAnswered&& from) noexcept
    : CMsgDOTAChatMessage_TriviaAnswered() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage_TriviaAnswered& operator=(CMsgDOTAChatMessage_TriviaAnswered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatMessage_TriviaAnswered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatMessage_TriviaAnswered* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage_TriviaAnswered*>(
               &_CMsgDOTAChatMessage_TriviaAnswered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CMsgDOTAChatMessage_TriviaAnswered* other);
  friend void swap(CMsgDOTAChatMessage_TriviaAnswered& a, CMsgDOTAChatMessage_TriviaAnswered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatMessage_TriviaAnswered* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_TriviaAnswered>(nullptr);
  }

  CMsgDOTAChatMessage_TriviaAnswered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_TriviaAnswered>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatMessage_TriviaAnswered& from);
  void MergeFrom(const CMsgDOTAChatMessage_TriviaAnswered& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage_TriviaAnswered* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 question_id = 1;
  bool has_question_id() const;
  void clear_question_id();
  static const int kQuestionIdFieldNumber = 1;
  ::google::protobuf::uint32 question_id() const;
  void set_question_id(::google::protobuf::uint32 value);

  // optional uint32 answer_index = 2;
  bool has_answer_index() const;
  void clear_answer_index();
  static const int kAnswerIndexFieldNumber = 2;
  ::google::protobuf::uint32 answer_index() const;
  void set_answer_index(::google::protobuf::uint32 value);

  // optional uint32 party_questions_correct = 3;
  bool has_party_questions_correct() const;
  void clear_party_questions_correct();
  static const int kPartyQuestionsCorrectFieldNumber = 3;
  ::google::protobuf::uint32 party_questions_correct() const;
  void set_party_questions_correct(::google::protobuf::uint32 value);

  // optional uint32 party_questions_viewed = 4;
  bool has_party_questions_viewed() const;
  void clear_party_questions_viewed();
  static const int kPartyQuestionsViewedFieldNumber = 4;
  ::google::protobuf::uint32 party_questions_viewed() const;
  void set_party_questions_viewed(::google::protobuf::uint32 value);

  // optional uint32 party_trivia_points = 5;
  bool has_party_trivia_points() const;
  void clear_party_trivia_points();
  static const int kPartyTriviaPointsFieldNumber = 5;
  ::google::protobuf::uint32 party_trivia_points() const;
  void set_party_trivia_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 question_id_;
  ::google::protobuf::uint32 answer_index_;
  ::google::protobuf::uint32 party_questions_correct_;
  ::google::protobuf::uint32 party_questions_viewed_;
  ::google::protobuf::uint32 party_trivia_points_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatMessage) */ {
 public:
  CMsgDOTAChatMessage();
  virtual ~CMsgDOTAChatMessage();

  CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from);

  inline CMsgDOTAChatMessage& operator=(const CMsgDOTAChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatMessage(CMsgDOTAChatMessage&& from) noexcept
    : CMsgDOTAChatMessage() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage& operator=(CMsgDOTAChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage*>(
               &_CMsgDOTAChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CMsgDOTAChatMessage* other);
  friend void swap(CMsgDOTAChatMessage& a, CMsgDOTAChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatMessage* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage>(nullptr);
  }

  CMsgDOTAChatMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatMessage& from);
  void MergeFrom(const CMsgDOTAChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatMessage_DiceRoll DiceRoll;
  typedef CMsgDOTAChatMessage_TriviaAnswered TriviaAnswered;

  // accessors -------------------------------------------------------

  // optional string persona_name = 3;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 3;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional string text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string suggest_invite_name = 7;
  bool has_suggest_invite_name() const;
  void clear_suggest_invite_name();
  static const int kSuggestInviteNameFieldNumber = 7;
  const ::std::string& suggest_invite_name() const;
  void set_suggest_invite_name(const ::std::string& value);
  #if LANG_CXX11
  void set_suggest_invite_name(::std::string&& value);
  #endif
  void set_suggest_invite_name(const char* value);
  void set_suggest_invite_name(const char* value, size_t size);
  ::std::string* mutable_suggest_invite_name();
  ::std::string* release_suggest_invite_name();
  void set_allocated_suggest_invite_name(::std::string* suggest_invite_name);

  // optional string share_lobby_passkey = 21;
  bool has_share_lobby_passkey() const;
  void clear_share_lobby_passkey();
  static const int kShareLobbyPasskeyFieldNumber = 21;
  const ::std::string& share_lobby_passkey() const;
  void set_share_lobby_passkey(const ::std::string& value);
  #if LANG_CXX11
  void set_share_lobby_passkey(::std::string&& value);
  #endif
  void set_share_lobby_passkey(const char* value);
  void set_share_lobby_passkey(const char* value, size_t size);
  ::std::string* mutable_share_lobby_passkey();
  ::std::string* release_share_lobby_passkey();
  void set_allocated_share_lobby_passkey(::std::string* share_lobby_passkey);

  // optional string suggest_pick_hero_role = 27;
  bool has_suggest_pick_hero_role() const;
  void clear_suggest_pick_hero_role();
  static const int kSuggestPickHeroRoleFieldNumber = 27;
  const ::std::string& suggest_pick_hero_role() const;
  void set_suggest_pick_hero_role(const ::std::string& value);
  #if LANG_CXX11
  void set_suggest_pick_hero_role(::std::string&& value);
  #endif
  void set_suggest_pick_hero_role(const char* value);
  void set_suggest_pick_hero_role(const char* value, size_t size);
  ::std::string* mutable_suggest_pick_hero_role();
  ::std::string* release_suggest_pick_hero_role();
  void set_allocated_suggest_pick_hero_role(::std::string* suggest_pick_hero_role);

  // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  bool has_dice_roll() const;
  void clear_dice_roll();
  static const int kDiceRollFieldNumber = 17;
  const ::proto::dota::CMsgDOTAChatMessage_DiceRoll& dice_roll() const;
  ::proto::dota::CMsgDOTAChatMessage_DiceRoll* release_dice_roll();
  ::proto::dota::CMsgDOTAChatMessage_DiceRoll* mutable_dice_roll();
  void set_allocated_dice_roll(::proto::dota::CMsgDOTAChatMessage_DiceRoll* dice_roll);

  // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  bool has_trivia_answer() const;
  void clear_trivia_answer();
  static const int kTriviaAnswerFieldNumber = 32;
  const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered& trivia_answer() const;
  ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* release_trivia_answer();
  ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* mutable_trivia_answer();
  void set_allocated_trivia_answer(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer);

  // optional uint64 channel_id = 2;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 suggest_invite_account_id = 6;
  bool has_suggest_invite_account_id() const;
  void clear_suggest_invite_account_id();
  static const int kSuggestInviteAccountIdFieldNumber = 6;
  ::google::protobuf::uint32 suggest_invite_account_id() const;
  void set_suggest_invite_account_id(::google::protobuf::uint32 value);

  // optional uint32 fantasy_draft_owner_account_id = 8;
  bool has_fantasy_draft_owner_account_id() const;
  void clear_fantasy_draft_owner_account_id();
  static const int kFantasyDraftOwnerAccountIdFieldNumber = 8;
  ::google::protobuf::uint32 fantasy_draft_owner_account_id() const;
  void set_fantasy_draft_owner_account_id(::google::protobuf::uint32 value);

  // optional uint32 fantasy_draft_player_account_id = 9;
  bool has_fantasy_draft_player_account_id() const;
  void clear_fantasy_draft_player_account_id();
  static const int kFantasyDraftPlayerAccountIdFieldNumber = 9;
  ::google::protobuf::uint32 fantasy_draft_player_account_id() const;
  void set_fantasy_draft_player_account_id(::google::protobuf::uint32 value);

  // optional uint32 event_id = 10;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 10;
  ::google::protobuf::uint32 event_id() const;
  void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 event_points = 12;
  bool has_event_points() const;
  void clear_event_points();
  static const int kEventPointsFieldNumber = 12;
  ::google::protobuf::uint32 event_points() const;
  void set_event_points(::google::protobuf::uint32 value);

  // optional uint32 share_profile_account_id = 15;
  bool has_share_profile_account_id() const;
  void clear_share_profile_account_id();
  static const int kShareProfileAccountIdFieldNumber = 15;
  ::google::protobuf::uint32 share_profile_account_id() const;
  void set_share_profile_account_id(::google::protobuf::uint32 value);

  // optional uint32 channel_user_id = 16;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 16;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // optional bool suggest_invite_to_lobby = 11;
  bool has_suggest_invite_to_lobby() const;
  void clear_suggest_invite_to_lobby();
  static const int kSuggestInviteToLobbyFieldNumber = 11;
  bool suggest_invite_to_lobby() const;
  void set_suggest_invite_to_lobby(bool value);

  // optional bool coin_flip = 13;
  bool has_coin_flip() const;
  void clear_coin_flip();
  static const int kCoinFlipFieldNumber = 13;
  bool coin_flip() const;
  void set_coin_flip(bool value);

  // optional bool legacy_battle_cup_victory = 24;
  bool has_legacy_battle_cup_victory() const;
  void clear_legacy_battle_cup_victory();
  static const int kLegacyBattleCupVictoryFieldNumber = 24;
  bool legacy_battle_cup_victory() const;
  void set_legacy_battle_cup_victory(bool value);

  // optional uint64 share_party_id = 18;
  bool has_share_party_id() const;
  void clear_share_party_id();
  static const int kSharePartyIdFieldNumber = 18;
  ::google::protobuf::uint64 share_party_id() const;
  void set_share_party_id(::google::protobuf::uint64 value);

  // optional uint64 share_lobby_id = 19;
  bool has_share_lobby_id() const;
  void clear_share_lobby_id();
  static const int kShareLobbyIdFieldNumber = 19;
  ::google::protobuf::uint64 share_lobby_id() const;
  void set_share_lobby_id(::google::protobuf::uint64 value);

  // optional uint64 share_lobby_custom_game_id = 20;
  bool has_share_lobby_custom_game_id() const;
  void clear_share_lobby_custom_game_id();
  static const int kShareLobbyCustomGameIdFieldNumber = 20;
  ::google::protobuf::uint64 share_lobby_custom_game_id() const;
  void set_share_lobby_custom_game_id(::google::protobuf::uint64 value);

  // optional uint32 private_chat_channel_id = 22;
  bool has_private_chat_channel_id() const;
  void clear_private_chat_channel_id();
  static const int kPrivateChatChannelIdFieldNumber = 22;
  ::google::protobuf::uint32 private_chat_channel_id() const;
  void set_private_chat_channel_id(::google::protobuf::uint32 value);

  // optional uint32 status = 23;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 23;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 badge_level = 25;
  bool has_badge_level() const;
  void clear_badge_level();
  static const int kBadgeLevelFieldNumber = 25;
  ::google::protobuf::uint32 badge_level() const;
  void set_badge_level(::google::protobuf::uint32 value);

  // optional uint32 suggest_pick_hero_id = 26;
  bool has_suggest_pick_hero_id() const;
  void clear_suggest_pick_hero_id();
  static const int kSuggestPickHeroIdFieldNumber = 26;
  ::google::protobuf::uint32 suggest_pick_hero_id() const;
  void set_suggest_pick_hero_id(::google::protobuf::uint32 value);

  // optional uint32 battle_cup_streak = 29;
  bool has_battle_cup_streak() const;
  void clear_battle_cup_streak();
  static const int kBattleCupStreakFieldNumber = 29;
  ::google::protobuf::uint32 battle_cup_streak() const;
  void set_battle_cup_streak(::google::protobuf::uint32 value);

  // optional uint32 suggest_ban_hero_id = 30;
  bool has_suggest_ban_hero_id() const;
  void clear_suggest_ban_hero_id();
  static const int kSuggestBanHeroIdFieldNumber = 30;
  ::google::protobuf::uint32 suggest_ban_hero_id() const;
  void set_suggest_ban_hero_id(::google::protobuf::uint32 value);

  // optional uint32 requested_ability_id = 33;
  bool has_requested_ability_id() const;
  void clear_requested_ability_id();
  static const int kRequestedAbilityIdFieldNumber = 33;
  ::google::protobuf::uint32 requested_ability_id() const;
  void set_requested_ability_id(::google::protobuf::uint32 value);

  // optional uint32 chat_flags = 34;
  bool has_chat_flags() const;
  void clear_chat_flags();
  static const int kChatFlagsFieldNumber = 34;
  ::google::protobuf::uint32 chat_flags() const;
  void set_chat_flags(::google::protobuf::uint32 value);

  // optional int32 player_id = 14 [default = -1];
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 14;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr suggest_invite_name_;
  ::google::protobuf::internal::ArenaStringPtr share_lobby_passkey_;
  ::google::protobuf::internal::ArenaStringPtr suggest_pick_hero_role_;
  ::proto::dota::CMsgDOTAChatMessage_DiceRoll* dice_roll_;
  ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 suggest_invite_account_id_;
  ::google::protobuf::uint32 fantasy_draft_owner_account_id_;
  ::google::protobuf::uint32 fantasy_draft_player_account_id_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 event_points_;
  ::google::protobuf::uint32 share_profile_account_id_;
  ::google::protobuf::uint32 channel_user_id_;
  bool suggest_invite_to_lobby_;
  bool coin_flip_;
  bool legacy_battle_cup_victory_;
  ::google::protobuf::uint64 share_party_id_;
  ::google::protobuf::uint64 share_lobby_id_;
  ::google::protobuf::uint64 share_lobby_custom_game_id_;
  ::google::protobuf::uint32 private_chat_channel_id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 badge_level_;
  ::google::protobuf::uint32 suggest_pick_hero_id_;
  ::google::protobuf::uint32 battle_cup_streak_;
  ::google::protobuf::uint32 suggest_ban_hero_id_;
  ::google::protobuf::uint32 requested_ability_id_;
  ::google::protobuf::uint32 chat_flags_;
  ::google::protobuf::int32 player_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatMember) */ {
 public:
  CMsgDOTAChatMember();
  virtual ~CMsgDOTAChatMember();

  CMsgDOTAChatMember(const CMsgDOTAChatMember& from);

  inline CMsgDOTAChatMember& operator=(const CMsgDOTAChatMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatMember(CMsgDOTAChatMember&& from) noexcept
    : CMsgDOTAChatMember() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMember& operator=(CMsgDOTAChatMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMember*>(
               &_CMsgDOTAChatMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CMsgDOTAChatMember* other);
  friend void swap(CMsgDOTAChatMember& a, CMsgDOTAChatMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatMember* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatMember>(nullptr);
  }

  CMsgDOTAChatMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatMember& from);
  void MergeFrom(const CMsgDOTAChatMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 2;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAJoinChatChannelResponse) */ {
 public:
  CMsgDOTAJoinChatChannelResponse();
  virtual ~CMsgDOTAJoinChatChannelResponse();

  CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from);

  inline CMsgDOTAJoinChatChannelResponse& operator=(const CMsgDOTAJoinChatChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAJoinChatChannelResponse(CMsgDOTAJoinChatChannelResponse&& from) noexcept
    : CMsgDOTAJoinChatChannelResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinChatChannelResponse& operator=(CMsgDOTAJoinChatChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAJoinChatChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAJoinChatChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinChatChannelResponse*>(
               &_CMsgDOTAJoinChatChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CMsgDOTAJoinChatChannelResponse* other);
  friend void swap(CMsgDOTAJoinChatChannelResponse& a, CMsgDOTAJoinChatChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAJoinChatChannelResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAJoinChatChannelResponse>(nullptr);
  }

  CMsgDOTAJoinChatChannelResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAJoinChatChannelResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAJoinChatChannelResponse& from);
  void MergeFrom(const CMsgDOTAJoinChatChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAJoinChatChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAJoinChatChannelResponse_Result Result;
  static const Result JOIN_SUCCESS =
    CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS;
  static const Result INVALID_CHANNEL_TYPE =
    CMsgDOTAJoinChatChannelResponse_Result_INVALID_CHANNEL_TYPE;
  static const Result ACCOUNT_NOT_FOUND =
    CMsgDOTAJoinChatChannelResponse_Result_ACCOUNT_NOT_FOUND;
  static const Result ACH_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_ACH_FAILED;
  static const Result USER_IN_TOO_MANY_CHANNELS =
    CMsgDOTAJoinChatChannelResponse_Result_USER_IN_TOO_MANY_CHANNELS;
  static const Result RATE_LIMIT_EXCEEDED =
    CMsgDOTAJoinChatChannelResponse_Result_RATE_LIMIT_EXCEEDED;
  static const Result CHANNEL_FULL =
    CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL;
  static const Result CHANNEL_FULL_OVERFLOWED =
    CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL_OVERFLOWED;
  static const Result FAILED_TO_ADD_USER =
    CMsgDOTAJoinChatChannelResponse_Result_FAILED_TO_ADD_USER;
  static const Result CHANNEL_TYPE_DISABLED =
    CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_TYPE_DISABLED;
  static const Result PRIVATE_CHAT_CREATE_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_FAILED;
  static const Result PRIVATE_CHAT_NO_PERMISSION =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_NO_PERMISSION;
  static const Result PRIVATE_CHAT_CREATE_LOCK_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_LOCK_FAILED;
  static const Result PRIVATE_CHAT_KICKED =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED;
  static const Result USER_NOT_ALLOWED =
    CMsgDOTAJoinChatChannelResponse_Result_USER_NOT_ALLOWED;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAJoinChatChannelResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAJoinChatChannelResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAJoinChatChannelResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAJoinChatChannelResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAJoinChatChannelResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAJoinChatChannelResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAJoinChatChannelResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 5;
  ::proto::dota::CMsgDOTAChatMember* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >*
      mutable_members();
  const ::proto::dota::CMsgDOTAChatMember& members(int index) const;
  ::proto::dota::CMsgDOTAChatMember* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >&
      members() const;

  // optional string channel_name = 2;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional string welcome_message = 10;
  bool has_welcome_message() const;
  void clear_welcome_message();
  static const int kWelcomeMessageFieldNumber = 10;
  const ::std::string& welcome_message() const;
  void set_welcome_message(const ::std::string& value);
  #if LANG_CXX11
  void set_welcome_message(::std::string&& value);
  #endif
  void set_welcome_message(const char* value);
  void set_welcome_message(const char* value, size_t size);
  ::std::string* mutable_welcome_message();
  ::std::string* release_welcome_message();
  void set_allocated_welcome_message(::std::string* welcome_message);

  // optional uint32 response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  ::google::protobuf::uint32 response() const;
  void set_response(::google::protobuf::uint32 value);

  // optional uint32 max_members = 4;
  bool has_max_members() const;
  void clear_max_members();
  static const int kMaxMembersFieldNumber = 4;
  ::google::protobuf::uint32 max_members() const;
  void set_max_members(::google::protobuf::uint32 value);

  // optional fixed64 channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 6;
  ::proto::dota::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::proto::dota::DOTAChatChannelType_t value);

  // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 7;
  ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTAJoinChatChannelResponse_Result value);

  // optional bool gc_initiated_join = 8;
  bool has_gc_initiated_join() const;
  void clear_gc_initiated_join();
  static const int kGcInitiatedJoinFieldNumber = 8;
  bool gc_initiated_join() const;
  void set_gc_initiated_join(bool value);

  // optional uint32 channel_user_id = 9;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 9;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAJoinChatChannelResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember > members_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::internal::ArenaStringPtr welcome_message_;
  ::google::protobuf::uint32 response_;
  ::google::protobuf::uint32 max_members_;
  ::google::protobuf::uint64 channel_id_;
  int channel_type_;
  int result_;
  bool gc_initiated_join_;
  ::google::protobuf::uint32 channel_user_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelFullUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatChannelFullUpdate) */ {
 public:
  CMsgDOTAChatChannelFullUpdate();
  virtual ~CMsgDOTAChatChannelFullUpdate();

  CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from);

  inline CMsgDOTAChatChannelFullUpdate& operator=(const CMsgDOTAChatChannelFullUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatChannelFullUpdate(CMsgDOTAChatChannelFullUpdate&& from) noexcept
    : CMsgDOTAChatChannelFullUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatChannelFullUpdate& operator=(CMsgDOTAChatChannelFullUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatChannelFullUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatChannelFullUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatChannelFullUpdate*>(
               &_CMsgDOTAChatChannelFullUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CMsgDOTAChatChannelFullUpdate* other);
  friend void swap(CMsgDOTAChatChannelFullUpdate& a, CMsgDOTAChatChannelFullUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatChannelFullUpdate* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatChannelFullUpdate>(nullptr);
  }

  CMsgDOTAChatChannelFullUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatChannelFullUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatChannelFullUpdate& from);
  void MergeFrom(const CMsgDOTAChatChannelFullUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatChannelFullUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  ::proto::dota::CMsgDOTAChatMember* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >*
      mutable_members();
  const ::proto::dota::CMsgDOTAChatMember& members(int index) const;
  ::proto::dota::CMsgDOTAChatMember* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >&
      members() const;

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatChannelFullUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember > members_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAOtherJoinedChatChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAOtherJoinedChatChannel) */ {
 public:
  CMsgDOTAOtherJoinedChatChannel();
  virtual ~CMsgDOTAOtherJoinedChatChannel();

  CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from);

  inline CMsgDOTAOtherJoinedChatChannel& operator=(const CMsgDOTAOtherJoinedChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAOtherJoinedChatChannel(CMsgDOTAOtherJoinedChatChannel&& from) noexcept
    : CMsgDOTAOtherJoinedChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAOtherJoinedChatChannel& operator=(CMsgDOTAOtherJoinedChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAOtherJoinedChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAOtherJoinedChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAOtherJoinedChatChannel*>(
               &_CMsgDOTAOtherJoinedChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CMsgDOTAOtherJoinedChatChannel* other);
  friend void swap(CMsgDOTAOtherJoinedChatChannel& a, CMsgDOTAOtherJoinedChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAOtherJoinedChatChannel* New() const final {
    return CreateMaybeMessage<CMsgDOTAOtherJoinedChatChannel>(nullptr);
  }

  CMsgDOTAOtherJoinedChatChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAOtherJoinedChatChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  void MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAOtherJoinedChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 2;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional fixed64 steam_id = 3;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 4;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 4;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAOtherJoinedChatChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAOtherLeftChatChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAOtherLeftChatChannel) */ {
 public:
  CMsgDOTAOtherLeftChatChannel();
  virtual ~CMsgDOTAOtherLeftChatChannel();

  CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from);

  inline CMsgDOTAOtherLeftChatChannel& operator=(const CMsgDOTAOtherLeftChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAOtherLeftChatChannel(CMsgDOTAOtherLeftChatChannel&& from) noexcept
    : CMsgDOTAOtherLeftChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAOtherLeftChatChannel& operator=(CMsgDOTAOtherLeftChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAOtherLeftChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAOtherLeftChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAOtherLeftChatChannel*>(
               &_CMsgDOTAOtherLeftChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CMsgDOTAOtherLeftChatChannel* other);
  friend void swap(CMsgDOTAOtherLeftChatChannel& a, CMsgDOTAOtherLeftChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAOtherLeftChatChannel* New() const final {
    return CreateMaybeMessage<CMsgDOTAOtherLeftChatChannel>(nullptr);
  }

  CMsgDOTAOtherLeftChatChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAOtherLeftChatChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAOtherLeftChatChannel& from);
  void MergeFrom(const CMsgDOTAOtherLeftChatChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAOtherLeftChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAOtherLeftChatChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelMemberUpdate_JoinedMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember) */ {
 public:
  CMsgDOTAChatChannelMemberUpdate_JoinedMember();
  virtual ~CMsgDOTAChatChannelMemberUpdate_JoinedMember();

  CMsgDOTAChatChannelMemberUpdate_JoinedMember(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from);

  inline CMsgDOTAChatChannelMemberUpdate_JoinedMember& operator=(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatChannelMemberUpdate_JoinedMember(CMsgDOTAChatChannelMemberUpdate_JoinedMember&& from) noexcept
    : CMsgDOTAChatChannelMemberUpdate_JoinedMember() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatChannelMemberUpdate_JoinedMember& operator=(CMsgDOTAChatChannelMemberUpdate_JoinedMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatChannelMemberUpdate_JoinedMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatChannelMemberUpdate_JoinedMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatChannelMemberUpdate_JoinedMember*>(
               &_CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other);
  friend void swap(CMsgDOTAChatChannelMemberUpdate_JoinedMember& a, CMsgDOTAChatChannelMemberUpdate_JoinedMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatChannelMemberUpdate_JoinedMember* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatChannelMemberUpdate_JoinedMember>(nullptr);
  }

  CMsgDOTAChatChannelMemberUpdate_JoinedMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatChannelMemberUpdate_JoinedMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from);
  void MergeFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 2;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelMemberUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatChannelMemberUpdate) */ {
 public:
  CMsgDOTAChatChannelMemberUpdate();
  virtual ~CMsgDOTAChatChannelMemberUpdate();

  CMsgDOTAChatChannelMemberUpdate(const CMsgDOTAChatChannelMemberUpdate& from);

  inline CMsgDOTAChatChannelMemberUpdate& operator=(const CMsgDOTAChatChannelMemberUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatChannelMemberUpdate(CMsgDOTAChatChannelMemberUpdate&& from) noexcept
    : CMsgDOTAChatChannelMemberUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatChannelMemberUpdate& operator=(CMsgDOTAChatChannelMemberUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatChannelMemberUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatChannelMemberUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatChannelMemberUpdate*>(
               &_CMsgDOTAChatChannelMemberUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CMsgDOTAChatChannelMemberUpdate* other);
  friend void swap(CMsgDOTAChatChannelMemberUpdate& a, CMsgDOTAChatChannelMemberUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatChannelMemberUpdate* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatChannelMemberUpdate>(nullptr);
  }

  CMsgDOTAChatChannelMemberUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatChannelMemberUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatChannelMemberUpdate& from);
  void MergeFrom(const CMsgDOTAChatChannelMemberUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatChannelMemberUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatChannelMemberUpdate_JoinedMember JoinedMember;

  // accessors -------------------------------------------------------

  // repeated fixed64 left_steam_ids = 2;
  int left_steam_ids_size() const;
  void clear_left_steam_ids();
  static const int kLeftSteamIdsFieldNumber = 2;
  ::google::protobuf::uint64 left_steam_ids(int index) const;
  void set_left_steam_ids(int index, ::google::protobuf::uint64 value);
  void add_left_steam_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      left_steam_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_left_steam_ids();

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  int joined_members_size() const;
  void clear_joined_members();
  static const int kJoinedMembersFieldNumber = 3;
  ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* mutable_joined_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >*
      mutable_joined_members();
  const ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember& joined_members(int index) const;
  ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* add_joined_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >&
      joined_members() const;

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatChannelMemberUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > left_steam_ids_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember > joined_members_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARequestChatChannelList) */ {
 public:
  CMsgDOTARequestChatChannelList();
  virtual ~CMsgDOTARequestChatChannelList();

  CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from);

  inline CMsgDOTARequestChatChannelList& operator=(const CMsgDOTARequestChatChannelList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestChatChannelList(CMsgDOTARequestChatChannelList&& from) noexcept
    : CMsgDOTARequestChatChannelList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelList& operator=(CMsgDOTARequestChatChannelList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARequestChatChannelList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestChatChannelList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelList*>(
               &_CMsgDOTARequestChatChannelList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CMsgDOTARequestChatChannelList* other);
  friend void swap(CMsgDOTARequestChatChannelList& a, CMsgDOTARequestChatChannelList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestChatChannelList* New() const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelList>(nullptr);
  }

  CMsgDOTARequestChatChannelList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARequestChatChannelList& from);
  void MergeFrom(const CMsgDOTARequestChatChannelList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARequestChatChannelList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARequestChatChannelList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse_ChatChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel) */ {
 public:
  CMsgDOTARequestChatChannelListResponse_ChatChannel();
  virtual ~CMsgDOTARequestChatChannelListResponse_ChatChannel();

  CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestChatChannelListResponse_ChatChannel(CMsgDOTARequestChatChannelListResponse_ChatChannel&& from) noexcept
    : CMsgDOTARequestChatChannelListResponse_ChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(CMsgDOTARequestChatChannelListResponse_ChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARequestChatChannelListResponse_ChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestChatChannelListResponse_ChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelListResponse_ChatChannel*>(
               &_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other);
  friend void swap(CMsgDOTARequestChatChannelListResponse_ChatChannel& a, CMsgDOTARequestChatChannelListResponse_ChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel* New() const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelListResponse_ChatChannel>(nullptr);
  }

  CMsgDOTARequestChatChannelListResponse_ChatChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelListResponse_ChatChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  void MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional uint32 num_members = 2;
  bool has_num_members() const;
  void clear_num_members();
  static const int kNumMembersFieldNumber = 2;
  ::google::protobuf::uint32 num_members() const;
  void set_num_members(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 3;
  ::proto::dota::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::proto::dota::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::uint32 num_members_;
  int channel_type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTARequestChatChannelListResponse) */ {
 public:
  CMsgDOTARequestChatChannelListResponse();
  virtual ~CMsgDOTARequestChatChannelListResponse();

  CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from);

  inline CMsgDOTARequestChatChannelListResponse& operator=(const CMsgDOTARequestChatChannelListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestChatChannelListResponse(CMsgDOTARequestChatChannelListResponse&& from) noexcept
    : CMsgDOTARequestChatChannelListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelListResponse& operator=(CMsgDOTARequestChatChannelListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTARequestChatChannelListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestChatChannelListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelListResponse*>(
               &_CMsgDOTARequestChatChannelListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CMsgDOTARequestChatChannelListResponse* other);
  friend void swap(CMsgDOTARequestChatChannelListResponse& a, CMsgDOTARequestChatChannelListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestChatChannelListResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelListResponse>(nullptr);
  }

  CMsgDOTARequestChatChannelListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse& from);
  void MergeFrom(const CMsgDOTARequestChatChannelListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARequestChatChannelListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestChatChannelListResponse_ChatChannel ChatChannel;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
      mutable_channels();
  const ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel& channels(int index) const;
  ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTARequestChatChannelListResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel > channels_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatGetUserList) */ {
 public:
  CMsgDOTAChatGetUserList();
  virtual ~CMsgDOTAChatGetUserList();

  CMsgDOTAChatGetUserList(const CMsgDOTAChatGetUserList& from);

  inline CMsgDOTAChatGetUserList& operator=(const CMsgDOTAChatGetUserList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatGetUserList(CMsgDOTAChatGetUserList&& from) noexcept
    : CMsgDOTAChatGetUserList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetUserList& operator=(CMsgDOTAChatGetUserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatGetUserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatGetUserList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetUserList*>(
               &_CMsgDOTAChatGetUserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CMsgDOTAChatGetUserList* other);
  friend void swap(CMsgDOTAChatGetUserList& a, CMsgDOTAChatGetUserList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatGetUserList* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserList>(nullptr);
  }

  CMsgDOTAChatGetUserList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatGetUserList& from);
  void MergeFrom(const CMsgDOTAChatGetUserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetUserList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatGetUserList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserListResponse_Member final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatGetUserListResponse.Member) */ {
 public:
  CMsgDOTAChatGetUserListResponse_Member();
  virtual ~CMsgDOTAChatGetUserListResponse_Member();

  CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from);

  inline CMsgDOTAChatGetUserListResponse_Member& operator=(const CMsgDOTAChatGetUserListResponse_Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatGetUserListResponse_Member(CMsgDOTAChatGetUserListResponse_Member&& from) noexcept
    : CMsgDOTAChatGetUserListResponse_Member() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetUserListResponse_Member& operator=(CMsgDOTAChatGetUserListResponse_Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatGetUserListResponse_Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatGetUserListResponse_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetUserListResponse_Member*>(
               &_CMsgDOTAChatGetUserListResponse_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CMsgDOTAChatGetUserListResponse_Member* other);
  friend void swap(CMsgDOTAChatGetUserListResponse_Member& a, CMsgDOTAChatGetUserListResponse_Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatGetUserListResponse_Member* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserListResponse_Member>(nullptr);
  }

  CMsgDOTAChatGetUserListResponse_Member* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserListResponse_Member>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from);
  void MergeFrom(const CMsgDOTAChatGetUserListResponse_Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetUserListResponse_Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 2;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_user_id() const;
  void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatGetUserListResponse) */ {
 public:
  CMsgDOTAChatGetUserListResponse();
  virtual ~CMsgDOTAChatGetUserListResponse();

  CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from);

  inline CMsgDOTAChatGetUserListResponse& operator=(const CMsgDOTAChatGetUserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatGetUserListResponse(CMsgDOTAChatGetUserListResponse&& from) noexcept
    : CMsgDOTAChatGetUserListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetUserListResponse& operator=(CMsgDOTAChatGetUserListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatGetUserListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatGetUserListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetUserListResponse*>(
               &_CMsgDOTAChatGetUserListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CMsgDOTAChatGetUserListResponse* other);
  friend void swap(CMsgDOTAChatGetUserListResponse& a, CMsgDOTAChatGetUserListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatGetUserListResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserListResponse>(nullptr);
  }

  CMsgDOTAChatGetUserListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatGetUserListResponse& from);
  void MergeFrom(const CMsgDOTAChatGetUserListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetUserListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatGetUserListResponse_Member Member;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  ::proto::dota::CMsgDOTAChatGetUserListResponse_Member* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >*
      mutable_members();
  const ::proto::dota::CMsgDOTAChatGetUserListResponse_Member& members(int index) const;
  ::proto::dota::CMsgDOTAChatGetUserListResponse_Member* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >&
      members() const;

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatGetUserListResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member > members_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetMemberCount final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatGetMemberCount) */ {
 public:
  CMsgDOTAChatGetMemberCount();
  virtual ~CMsgDOTAChatGetMemberCount();

  CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from);

  inline CMsgDOTAChatGetMemberCount& operator=(const CMsgDOTAChatGetMemberCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatGetMemberCount(CMsgDOTAChatGetMemberCount&& from) noexcept
    : CMsgDOTAChatGetMemberCount() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetMemberCount& operator=(CMsgDOTAChatGetMemberCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatGetMemberCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatGetMemberCount* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetMemberCount*>(
               &_CMsgDOTAChatGetMemberCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CMsgDOTAChatGetMemberCount* other);
  friend void swap(CMsgDOTAChatGetMemberCount& a, CMsgDOTAChatGetMemberCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatGetMemberCount* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatGetMemberCount>(nullptr);
  }

  CMsgDOTAChatGetMemberCount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetMemberCount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatGetMemberCount& from);
  void MergeFrom(const CMsgDOTAChatGetMemberCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetMemberCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  ::proto::dota::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::proto::dota::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatGetMemberCount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  int channel_type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetMemberCountResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatGetMemberCountResponse) */ {
 public:
  CMsgDOTAChatGetMemberCountResponse();
  virtual ~CMsgDOTAChatGetMemberCountResponse();

  CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from);

  inline CMsgDOTAChatGetMemberCountResponse& operator=(const CMsgDOTAChatGetMemberCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatGetMemberCountResponse(CMsgDOTAChatGetMemberCountResponse&& from) noexcept
    : CMsgDOTAChatGetMemberCountResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetMemberCountResponse& operator=(CMsgDOTAChatGetMemberCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatGetMemberCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatGetMemberCountResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetMemberCountResponse*>(
               &_CMsgDOTAChatGetMemberCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CMsgDOTAChatGetMemberCountResponse* other);
  friend void swap(CMsgDOTAChatGetMemberCountResponse& a, CMsgDOTAChatGetMemberCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatGetMemberCountResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatGetMemberCountResponse>(nullptr);
  }

  CMsgDOTAChatGetMemberCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetMemberCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from);
  void MergeFrom(const CMsgDOTAChatGetMemberCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetMemberCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  ::proto::dota::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::proto::dota::DOTAChatChannelType_t value);

  // optional uint32 member_count = 3;
  bool has_member_count() const;
  void clear_member_count();
  static const int kMemberCountFieldNumber = 3;
  ::google::protobuf::uint32 member_count() const;
  void set_member_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatGetMemberCountResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  int channel_type_;
  ::google::protobuf::uint32 member_count_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatRegionsEnabled_Region final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatRegionsEnabled.Region) */ {
 public:
  CMsgDOTAChatRegionsEnabled_Region();
  virtual ~CMsgDOTAChatRegionsEnabled_Region();

  CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from);

  inline CMsgDOTAChatRegionsEnabled_Region& operator=(const CMsgDOTAChatRegionsEnabled_Region& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatRegionsEnabled_Region(CMsgDOTAChatRegionsEnabled_Region&& from) noexcept
    : CMsgDOTAChatRegionsEnabled_Region() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatRegionsEnabled_Region& operator=(CMsgDOTAChatRegionsEnabled_Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatRegionsEnabled_Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatRegionsEnabled_Region* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatRegionsEnabled_Region*>(
               &_CMsgDOTAChatRegionsEnabled_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CMsgDOTAChatRegionsEnabled_Region* other);
  friend void swap(CMsgDOTAChatRegionsEnabled_Region& a, CMsgDOTAChatRegionsEnabled_Region& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatRegionsEnabled_Region* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatRegionsEnabled_Region>(nullptr);
  }

  CMsgDOTAChatRegionsEnabled_Region* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatRegionsEnabled_Region>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from);
  void MergeFrom(const CMsgDOTAChatRegionsEnabled_Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatRegionsEnabled_Region* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_latitude = 1;
  bool has_min_latitude() const;
  void clear_min_latitude();
  static const int kMinLatitudeFieldNumber = 1;
  float min_latitude() const;
  void set_min_latitude(float value);

  // optional float max_latitude = 2;
  bool has_max_latitude() const;
  void clear_max_latitude();
  static const int kMaxLatitudeFieldNumber = 2;
  float max_latitude() const;
  void set_max_latitude(float value);

  // optional float min_longitude = 3;
  bool has_min_longitude() const;
  void clear_min_longitude();
  static const int kMinLongitudeFieldNumber = 3;
  float min_longitude() const;
  void set_min_longitude(float value);

  // optional float max_longitude = 4;
  bool has_max_longitude() const;
  void clear_max_longitude();
  static const int kMaxLongitudeFieldNumber = 4;
  float max_longitude() const;
  void set_max_longitude(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float min_latitude_;
  float max_latitude_;
  float min_longitude_;
  float max_longitude_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatRegionsEnabled final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChatRegionsEnabled) */ {
 public:
  CMsgDOTAChatRegionsEnabled();
  virtual ~CMsgDOTAChatRegionsEnabled();

  CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from);

  inline CMsgDOTAChatRegionsEnabled& operator=(const CMsgDOTAChatRegionsEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatRegionsEnabled(CMsgDOTAChatRegionsEnabled&& from) noexcept
    : CMsgDOTAChatRegionsEnabled() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatRegionsEnabled& operator=(CMsgDOTAChatRegionsEnabled&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTAChatRegionsEnabled& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatRegionsEnabled* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatRegionsEnabled*>(
               &_CMsgDOTAChatRegionsEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CMsgDOTAChatRegionsEnabled* other);
  friend void swap(CMsgDOTAChatRegionsEnabled& a, CMsgDOTAChatRegionsEnabled& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatRegionsEnabled* New() const final {
    return CreateMaybeMessage<CMsgDOTAChatRegionsEnabled>(nullptr);
  }

  CMsgDOTAChatRegionsEnabled* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAChatRegionsEnabled>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTAChatRegionsEnabled& from);
  void MergeFrom(const CMsgDOTAChatRegionsEnabled& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatRegionsEnabled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatRegionsEnabled_Region Region;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  int enabled_regions_size() const;
  void clear_enabled_regions();
  static const int kEnabledRegionsFieldNumber = 2;
  ::proto::dota::CMsgDOTAChatRegionsEnabled_Region* mutable_enabled_regions(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >*
      mutable_enabled_regions();
  const ::proto::dota::CMsgDOTAChatRegionsEnabled_Region& enabled_regions(int index) const;
  ::proto::dota::CMsgDOTAChatRegionsEnabled_Region* add_enabled_regions();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >&
      enabled_regions() const;

  // optional bool enable_all_regions = 1;
  bool has_enable_all_regions() const;
  void clear_enable_all_regions();
  static const int kEnableAllRegionsFieldNumber = 1;
  bool enable_all_regions() const;
  void set_enable_all_regions(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChatRegionsEnabled)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region > enabled_regions_;
  bool enable_all_regions_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientToGCPrivateChatInvite

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatInvite::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatInvite::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgClientToGCPrivateChatInvite::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
#endif
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatInvite::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCPrivateChatInvite::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCPrivateChatInvite::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}

// optional uint32 invited_account_id = 2;
inline bool CMsgClientToGCPrivateChatInvite::has_invited_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatInvite::clear_invited_account_id() {
  invited_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatInvite::invited_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatInvite.invited_account_id)
  return invited_account_id_;
}
inline void CMsgClientToGCPrivateChatInvite::set_invited_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  invited_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatInvite.invited_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatKick

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatKick::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatKick::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgClientToGCPrivateChatKick::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
#endif
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatKick::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCPrivateChatKick::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCPrivateChatKick::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}

// optional uint32 kick_account_id = 2;
inline bool CMsgClientToGCPrivateChatKick::has_kick_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatKick::clear_kick_account_id() {
  kick_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatKick::kick_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatKick.kick_account_id)
  return kick_account_id_;
}
inline void CMsgClientToGCPrivateChatKick::set_kick_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kick_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatKick.kick_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatPromote

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatPromote::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatPromote::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgClientToGCPrivateChatPromote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
#endif
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatPromote::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCPrivateChatPromote::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCPrivateChatPromote::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}

// optional uint32 promote_account_id = 2;
inline bool CMsgClientToGCPrivateChatPromote::has_promote_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatPromote::clear_promote_account_id() {
  promote_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatPromote::promote_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatPromote.promote_account_id)
  return promote_account_id_;
}
inline void CMsgClientToGCPrivateChatPromote::set_promote_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  promote_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatPromote.promote_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatDemote

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatDemote::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatDemote::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgClientToGCPrivateChatDemote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
#endif
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatDemote::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCPrivateChatDemote::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCPrivateChatDemote::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}

// optional uint32 demote_account_id = 2;
inline bool CMsgClientToGCPrivateChatDemote::has_demote_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatDemote::clear_demote_account_id() {
  demote_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatDemote::demote_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatDemote.demote_account_id)
  return demote_account_id_;
}
inline void CMsgClientToGCPrivateChatDemote::set_demote_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  demote_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatDemote.demote_account_id)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatResponse

// optional string private_chat_channel_name = 1;
inline bool CMsgGCToClientPrivateChatResponse::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientPrivateChatResponse::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgGCToClientPrivateChatResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
#endif
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToClientPrivateChatResponse::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}

// optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
inline bool CMsgGCToClientPrivateChatResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientPrivateChatResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::dota::CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatResponse.result)
  return static_cast< ::proto::dota::CMsgGCToClientPrivateChatResponse_Result >(result_);
}
inline void CMsgGCToClientPrivateChatResponse::set_result(::proto::dota::CMsgGCToClientPrivateChatResponse_Result value) {
  assert(::proto::dota::CMsgGCToClientPrivateChatResponse_Result_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatResponse.result)
}

// optional string username = 3;
inline bool CMsgGCToClientPrivateChatResponse::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientPrivateChatResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgGCToClientPrivateChatResponse::username() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatResponse.username)
  return username_.GetNoArena();
}
inline void CMsgGCToClientPrivateChatResponse::set_username(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
#if LANG_CXX11
inline void CMsgGCToClientPrivateChatResponse::set_username(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
#endif
inline void CMsgGCToClientPrivateChatResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
inline void CMsgGCToClientPrivateChatResponse::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatResponse.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::release_username() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatResponse.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToClientPrivateChatResponse::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatInfoRequest

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatInfoRequest::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatInfoRequest::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgClientToGCPrivateChatInfoRequest::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
#endif
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatInfoRequest::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCPrivateChatInfoRequest::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatInfoResponse_Member

// optional uint32 account_id = 1;
inline bool CMsgGCToClientPrivateChatInfoResponse_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse_Member::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.account_id)
  return account_id_;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.account_id)
}

// optional string name = 2;
inline bool CMsgGCToClientPrivateChatInfoResponse_Member::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgGCToClientPrivateChatInfoResponse_Member::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
  return name_.GetNoArena();
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
#if LANG_CXX11
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
#endif
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse_Member::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse_Member::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}

// optional uint32 status = 3;
inline bool CMsgGCToClientPrivateChatInfoResponse_Member::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.status)
  return status_;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.status)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatInfoResponse

// optional string private_chat_channel_name = 1;
inline bool CMsgGCToClientPrivateChatInfoResponse::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgGCToClientPrivateChatInfoResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
#if LANG_CXX11
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
#endif
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse::mutable_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  if (!has_private_chat_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_chat_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}

// repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
inline int CMsgGCToClientPrivateChatInfoResponse::members_size() const {
  return members_.size();
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >*
CMsgGCToClientPrivateChatInfoResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return &members_;
}
inline const ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member& CMsgGCToClientPrivateChatInfoResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Get(index);
}
inline ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >&
CMsgGCToClientPrivateChatInfoResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_;
}

// optional uint32 creator = 3;
inline bool CMsgGCToClientPrivateChatInfoResponse::has_creator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_creator() {
  creator_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse::creator() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creator)
  return creator_;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_creator(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  creator_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creator)
}

// optional uint32 creation_date = 4;
inline bool CMsgGCToClientPrivateChatInfoResponse::has_creation_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_creation_date() {
  creation_date_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse::creation_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creation_date)
  return creation_date_;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_creation_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creation_date)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannel

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinChatChannel::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAJoinChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTAJoinChatChannel::set_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
#endif
inline void CMsgDOTAJoinChatChannel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
inline ::std::string* CMsgDOTAJoinChatChannel::mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAJoinChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAJoinChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAJoinChatChannel::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::DOTAChatChannelType_t CMsgDOTAJoinChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannel.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAJoinChatChannel::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveChatChannel

// optional uint64 channel_id = 1;
inline bool CMsgDOTALeaveChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveChatChannel::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTALeaveChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALeaveChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTALeaveChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALeaveChatChannel.channel_id)
}

// -------------------------------------------------------------------

// CMsgGCChatReportPublicSpam

// optional uint64 channel_id = 1;
inline bool CMsgGCChatReportPublicSpam::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCChatReportPublicSpam::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgGCChatReportPublicSpam::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCChatReportPublicSpam.channel_id)
  return channel_id_;
}
inline void CMsgGCChatReportPublicSpam::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCChatReportPublicSpam.channel_id)
}

// optional uint32 channel_user_id = 2;
inline bool CMsgGCChatReportPublicSpam::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCChatReportPublicSpam::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgGCChatReportPublicSpam::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCChatReportPublicSpam.channel_user_id)
  return channel_user_id_;
}
inline void CMsgGCChatReportPublicSpam::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCChatReportPublicSpam.channel_user_id)
}

// -------------------------------------------------------------------

// CMsgDOTAClientIgnoredUser

// optional uint32 ignored_account_id = 1;
inline bool CMsgDOTAClientIgnoredUser::has_ignored_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAClientIgnoredUser::clear_ignored_account_id() {
  ignored_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAClientIgnoredUser::ignored_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAClientIgnoredUser.ignored_account_id)
  return ignored_account_id_;
}
inline void CMsgDOTAClientIgnoredUser::set_ignored_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ignored_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAClientIgnoredUser.ignored_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_DiceRoll

// optional int32 roll_min = 1;
inline bool CMsgDOTAChatMessage_DiceRoll::has_roll_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_roll_min() {
  roll_min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::roll_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_min)
  return roll_min_;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_roll_min(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  roll_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_min)
}

// optional int32 roll_max = 2;
inline bool CMsgDOTAChatMessage_DiceRoll::has_roll_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_roll_max() {
  roll_max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::roll_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_max)
  return roll_max_;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_roll_max(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  roll_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_max)
}

// optional int32 result = 3;
inline bool CMsgDOTAChatMessage_DiceRoll::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.DiceRoll.result)
  return result_;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_result(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.DiceRoll.result)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_TriviaAnswered

// optional uint32 question_id = 1;
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_question_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_question_id() {
  question_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::question_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.question_id)
  return question_id_;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_question_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  question_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.question_id)
}

// optional uint32 answer_index = 2;
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_answer_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_answer_index() {
  answer_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::answer_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.answer_index)
  return answer_index_;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_answer_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  answer_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.answer_index)
}

// optional uint32 party_questions_correct = 3;
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_party_questions_correct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_party_questions_correct() {
  party_questions_correct_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::party_questions_correct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
  return party_questions_correct_;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_party_questions_correct(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  party_questions_correct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
}

// optional uint32 party_questions_viewed = 4;
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_party_questions_viewed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_party_questions_viewed() {
  party_questions_viewed_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::party_questions_viewed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
  return party_questions_viewed_;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_party_questions_viewed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  party_questions_viewed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
}

// optional uint32 party_trivia_points = 5;
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_party_trivia_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_party_trivia_points() {
  party_trivia_points_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::party_trivia_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
  return party_trivia_points_;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_party_trivia_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  party_trivia_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage

// optional uint32 account_id = 1;
inline bool CMsgDOTAChatMessage::has_account_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAChatMessage::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.account_id)
  return account_id_;
}
inline void CMsgDOTAChatMessage::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.account_id)
}

// optional uint64 channel_id = 2;
inline bool CMsgDOTAChatMessage::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAChatMessage::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatMessage::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.channel_id)
}

// optional string persona_name = 3;
inline bool CMsgDOTAChatMessage::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMessage::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAChatMessage::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_persona_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_persona_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.persona_name)
}
#endif
inline void CMsgDOTAChatMessage::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.persona_name)
}
inline void CMsgDOTAChatMessage::set_persona_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.persona_name)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.persona_name)
  if (!has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.persona_name)
}

// optional string text = 4;
inline bool CMsgDOTAChatMessage::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTAChatMessage::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.text)
  return text_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_text(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.text)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_text(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.text)
}
#endif
inline void CMsgDOTAChatMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.text)
}
inline void CMsgDOTAChatMessage::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.text)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.text)
}

// optional uint32 timestamp = 5;
inline bool CMsgDOTAChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAChatMessage::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.timestamp)
  return timestamp_;
}
inline void CMsgDOTAChatMessage::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.timestamp)
}

// optional uint32 suggest_invite_account_id = 6;
inline bool CMsgDOTAChatMessage::has_suggest_invite_account_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_account_id() {
  suggest_invite_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_invite_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_invite_account_id)
  return suggest_invite_account_id_;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  suggest_invite_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_invite_account_id)
}

// optional string suggest_invite_name = 7;
inline bool CMsgDOTAChatMessage::has_suggest_invite_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_name() {
  suggest_invite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgDOTAChatMessage::suggest_invite_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_suggest_invite_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  suggest_invite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
#endif
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_suggest_invite_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_suggest_invite_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
  if (!has_suggest_invite_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return suggest_invite_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_invite_name(::std::string* suggest_invite_name) {
  if (suggest_invite_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  suggest_invite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest_invite_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}

// optional uint32 fantasy_draft_owner_account_id = 8;
inline bool CMsgDOTAChatMessage::has_fantasy_draft_owner_account_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAChatMessage::clear_fantasy_draft_owner_account_id() {
  fantasy_draft_owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::fantasy_draft_owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
  return fantasy_draft_owner_account_id_;
}
inline void CMsgDOTAChatMessage::set_fantasy_draft_owner_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  fantasy_draft_owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
}

// optional uint32 fantasy_draft_player_account_id = 9;
inline bool CMsgDOTAChatMessage::has_fantasy_draft_player_account_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_fantasy_draft_player_account_id() {
  fantasy_draft_player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::fantasy_draft_player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.fantasy_draft_player_account_id)
  return fantasy_draft_player_account_id_;
}
inline void CMsgDOTAChatMessage::set_fantasy_draft_player_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  fantasy_draft_player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.fantasy_draft_player_account_id)
}

// optional uint32 event_id = 10;
inline bool CMsgDOTAChatMessage::has_event_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.event_id)
  return event_id_;
}
inline void CMsgDOTAChatMessage::set_event_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.event_id)
}

// optional bool suggest_invite_to_lobby = 11;
inline bool CMsgDOTAChatMessage::has_suggest_invite_to_lobby() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_to_lobby() {
  suggest_invite_to_lobby_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgDOTAChatMessage::suggest_invite_to_lobby() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_invite_to_lobby)
  return suggest_invite_to_lobby_;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_to_lobby(bool value) {
  _has_bits_[0] |= 0x00020000u;
  suggest_invite_to_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_invite_to_lobby)
}

// optional uint32 event_points = 12;
inline bool CMsgDOTAChatMessage::has_event_points() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_event_points() {
  event_points_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::event_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.event_points)
  return event_points_;
}
inline void CMsgDOTAChatMessage::set_event_points(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  event_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.event_points)
}

// optional bool coin_flip = 13;
inline bool CMsgDOTAChatMessage::has_coin_flip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_coin_flip() {
  coin_flip_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgDOTAChatMessage::coin_flip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.coin_flip)
  return coin_flip_;
}
inline void CMsgDOTAChatMessage::set_coin_flip(bool value) {
  _has_bits_[0] |= 0x00040000u;
  coin_flip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.coin_flip)
}

// optional int32 player_id = 14 [default = -1];
inline bool CMsgDOTAChatMessage::has_player_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_player_id() {
  player_id_ = -1;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.player_id)
  return player_id_;
}
inline void CMsgDOTAChatMessage::set_player_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.player_id)
}

// optional uint32 share_profile_account_id = 15;
inline bool CMsgDOTAChatMessage::has_share_profile_account_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_share_profile_account_id() {
  share_profile_account_id_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::share_profile_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_profile_account_id)
  return share_profile_account_id_;
}
inline void CMsgDOTAChatMessage::set_share_profile_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  share_profile_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_profile_account_id)
}

// optional uint32 channel_user_id = 16;
inline bool CMsgDOTAChatMessage::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatMessage::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.channel_user_id)
}

// optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
inline bool CMsgDOTAChatMessage::has_dice_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAChatMessage::clear_dice_roll() {
  if (dice_roll_ != nullptr) dice_roll_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::proto::dota::CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage::dice_roll() const {
  const ::proto::dota::CMsgDOTAChatMessage_DiceRoll* p = dice_roll_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.dice_roll)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAChatMessage_DiceRoll*>(
      &::proto::dota::_CMsgDOTAChatMessage_DiceRoll_default_instance_);
}
inline ::proto::dota::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::release_dice_roll() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.dice_roll)
  _has_bits_[0] &= ~0x00000020u;
  ::proto::dota::CMsgDOTAChatMessage_DiceRoll* temp = dice_roll_;
  dice_roll_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::mutable_dice_roll() {
  _has_bits_[0] |= 0x00000020u;
  if (dice_roll_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAChatMessage_DiceRoll>(GetArenaNoVirtual());
    dice_roll_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.dice_roll)
  return dice_roll_;
}
inline void CMsgDOTAChatMessage::set_allocated_dice_roll(::proto::dota::CMsgDOTAChatMessage_DiceRoll* dice_roll) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dice_roll_;
  }
  if (dice_roll) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dice_roll = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dice_roll, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dice_roll_ = dice_roll;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.dice_roll)
}

// optional uint64 share_party_id = 18;
inline bool CMsgDOTAChatMessage::has_share_party_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_share_party_id() {
  share_party_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::share_party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_party_id)
  return share_party_id_;
}
inline void CMsgDOTAChatMessage::set_share_party_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00100000u;
  share_party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_party_id)
}

// optional uint64 share_lobby_id = 19;
inline bool CMsgDOTAChatMessage::has_share_lobby_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_share_lobby_id() {
  share_lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::share_lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_lobby_id)
  return share_lobby_id_;
}
inline void CMsgDOTAChatMessage::set_share_lobby_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  share_lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_lobby_id)
}

// optional uint64 share_lobby_custom_game_id = 20;
inline bool CMsgDOTAChatMessage::has_share_lobby_custom_game_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_share_lobby_custom_game_id() {
  share_lobby_custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::share_lobby_custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_lobby_custom_game_id)
  return share_lobby_custom_game_id_;
}
inline void CMsgDOTAChatMessage::set_share_lobby_custom_game_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  share_lobby_custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_lobby_custom_game_id)
}

// optional string share_lobby_passkey = 21;
inline bool CMsgDOTAChatMessage::has_share_lobby_passkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatMessage::clear_share_lobby_passkey() {
  share_lobby_passkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CMsgDOTAChatMessage::share_lobby_passkey() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
  return share_lobby_passkey_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  share_lobby_passkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  share_lobby_passkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
#endif
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  share_lobby_passkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  share_lobby_passkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_share_lobby_passkey() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
  return share_lobby_passkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_share_lobby_passkey() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
  if (!has_share_lobby_passkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return share_lobby_passkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_share_lobby_passkey(::std::string* share_lobby_passkey) {
  if (share_lobby_passkey != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  share_lobby_passkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_lobby_passkey);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}

// optional uint32 private_chat_channel_id = 22;
inline bool CMsgDOTAChatMessage::has_private_chat_channel_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_private_chat_channel_id() {
  private_chat_channel_id_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::private_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.private_chat_channel_id)
  return private_chat_channel_id_;
}
inline void CMsgDOTAChatMessage::set_private_chat_channel_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  private_chat_channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.private_chat_channel_id)
}

// optional uint32 status = 23;
inline bool CMsgDOTAChatMessage::has_status() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.status)
  return status_;
}
inline void CMsgDOTAChatMessage::set_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.status)
}

// optional bool legacy_battle_cup_victory = 24;
inline bool CMsgDOTAChatMessage::has_legacy_battle_cup_victory() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_legacy_battle_cup_victory() {
  legacy_battle_cup_victory_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CMsgDOTAChatMessage::legacy_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.legacy_battle_cup_victory)
  return legacy_battle_cup_victory_;
}
inline void CMsgDOTAChatMessage::set_legacy_battle_cup_victory(bool value) {
  _has_bits_[0] |= 0x00080000u;
  legacy_battle_cup_victory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.legacy_battle_cup_victory)
}

// optional uint32 battle_cup_streak = 29;
inline bool CMsgDOTAChatMessage::has_battle_cup_streak() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_battle_cup_streak() {
  battle_cup_streak_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::battle_cup_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.battle_cup_streak)
  return battle_cup_streak_;
}
inline void CMsgDOTAChatMessage::set_battle_cup_streak(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  battle_cup_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.battle_cup_streak)
}

// optional uint32 badge_level = 25;
inline bool CMsgDOTAChatMessage::has_badge_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_badge_level() {
  badge_level_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::badge_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.badge_level)
  return badge_level_;
}
inline void CMsgDOTAChatMessage::set_badge_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  badge_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.badge_level)
}

// optional uint32 suggest_pick_hero_id = 26;
inline bool CMsgDOTAChatMessage::has_suggest_pick_hero_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_suggest_pick_hero_id() {
  suggest_pick_hero_id_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_pick_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_id)
  return suggest_pick_hero_id_;
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  suggest_pick_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_id)
}

// optional string suggest_pick_hero_role = 27;
inline bool CMsgDOTAChatMessage::has_suggest_pick_hero_role() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAChatMessage::clear_suggest_pick_hero_role() {
  suggest_pick_hero_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CMsgDOTAChatMessage::suggest_pick_hero_role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
  return suggest_pick_hero_role_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  suggest_pick_hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  suggest_pick_hero_role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
#endif
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  suggest_pick_hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  suggest_pick_hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_suggest_pick_hero_role() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
  return suggest_pick_hero_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_suggest_pick_hero_role() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
  if (!has_suggest_pick_hero_role()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return suggest_pick_hero_role_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_pick_hero_role(::std::string* suggest_pick_hero_role) {
  if (suggest_pick_hero_role != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  suggest_pick_hero_role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest_pick_hero_role);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}

// optional uint32 suggest_ban_hero_id = 30;
inline bool CMsgDOTAChatMessage::has_suggest_ban_hero_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_suggest_ban_hero_id() {
  suggest_ban_hero_id_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_ban_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_ban_hero_id)
  return suggest_ban_hero_id_;
}
inline void CMsgDOTAChatMessage::set_suggest_ban_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  suggest_ban_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_ban_hero_id)
}

// optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
inline bool CMsgDOTAChatMessage::has_trivia_answer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAChatMessage::clear_trivia_answer() {
  if (trivia_answer_ != nullptr) trivia_answer_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered& CMsgDOTAChatMessage::trivia_answer() const {
  const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* p = trivia_answer_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.trivia_answer)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered*>(
      &::proto::dota::_CMsgDOTAChatMessage_TriviaAnswered_default_instance_);
}
inline ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::release_trivia_answer() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.trivia_answer)
  _has_bits_[0] &= ~0x00000040u;
  ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* temp = trivia_answer_;
  trivia_answer_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::mutable_trivia_answer() {
  _has_bits_[0] |= 0x00000040u;
  if (trivia_answer_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAChatMessage_TriviaAnswered>(GetArenaNoVirtual());
    trivia_answer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.trivia_answer)
  return trivia_answer_;
}
inline void CMsgDOTAChatMessage::set_allocated_trivia_answer(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trivia_answer_;
  }
  if (trivia_answer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trivia_answer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trivia_answer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  trivia_answer_ = trivia_answer;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.trivia_answer)
}

// optional uint32 requested_ability_id = 33;
inline bool CMsgDOTAChatMessage::has_requested_ability_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_requested_ability_id() {
  requested_ability_id_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::requested_ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.requested_ability_id)
  return requested_ability_id_;
}
inline void CMsgDOTAChatMessage::set_requested_ability_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  requested_ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.requested_ability_id)
}

// optional uint32 chat_flags = 34;
inline bool CMsgDOTAChatMessage::has_chat_flags() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAChatMessage::clear_chat_flags() {
  chat_flags_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::chat_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.chat_flags)
  return chat_flags_;
}
inline void CMsgDOTAChatMessage::set_chat_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  chat_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.chat_flags)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMember

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMember::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatMember::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMember::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAChatMember::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAChatMember::set_persona_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatMember::set_persona_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMember.persona_name)
}
#endif
inline void CMsgDOTAChatMember::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMember.persona_name)
}
inline void CMsgDOTAChatMember::set_persona_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMember.persona_name)
}
inline ::std::string* CMsgDOTAChatMember::mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMember.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMember::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMember.persona_name)
  if (!has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMember.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatMember::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMember::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatMember::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatMember::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatMember::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatMember::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.status)
  return status_;
}
inline void CMsgDOTAChatMember::set_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.status)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannelResponse

// optional uint32 response = 1;
inline bool CMsgDOTAJoinChatChannelResponse::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_response() {
  response_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.response)
  return response_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_response(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.response)
}

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAJoinChatChannelResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
#endif
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}

// optional fixed64 channel_id = 3;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgDOTAJoinChatChannelResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_id)
  return channel_id_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_id)
}

// optional uint32 max_members = 4;
inline bool CMsgDOTAJoinChatChannelResponse::has_max_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_max_members() {
  max_members_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::max_members() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.max_members)
  return max_members_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_max_members(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.max_members)
}

// repeated .proto.dota.CMsgDOTAChatMember members = 5;
inline int CMsgDOTAJoinChatChannelResponse::members_size() const {
  return members_.size();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >*
CMsgDOTAJoinChatChannelResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return &members_;
}
inline const ::proto::dota::CMsgDOTAChatMember& CMsgDOTAJoinChatChannelResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_.Get(index);
}
inline ::proto::dota::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >&
CMsgDOTAJoinChatChannelResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_;
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::dota::DOTAChatChannelType_t CMsgDOTAJoinChatChannelResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_type)
}

// optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
inline bool CMsgDOTAJoinChatChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result >(result_);
}
inline void CMsgDOTAJoinChatChannelResponse::set_result(::proto::dota::CMsgDOTAJoinChatChannelResponse_Result value) {
  assert(::proto::dota::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.result)
}

// optional bool gc_initiated_join = 8;
inline bool CMsgDOTAJoinChatChannelResponse::has_gc_initiated_join() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_gc_initiated_join() {
  gc_initiated_join_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTAJoinChatChannelResponse::gc_initiated_join() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
  return gc_initiated_join_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_gc_initiated_join(bool value) {
  _has_bits_[0] |= 0x00000080u;
  gc_initiated_join_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
}

// optional uint32 channel_user_id = 9;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_user_id)
}

// optional string welcome_message = 10;
inline bool CMsgDOTAJoinChatChannelResponse::has_welcome_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_welcome_message() {
  welcome_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTAJoinChatChannelResponse::welcome_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
  return welcome_message_.GetNoArena();
}
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  welcome_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
#if LANG_CXX11
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  welcome_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
#endif
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  welcome_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  welcome_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::mutable_welcome_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
  return welcome_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::release_welcome_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
  if (!has_welcome_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return welcome_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_welcome_message(::std::string* welcome_message) {
  if (welcome_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  welcome_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), welcome_message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelFullUpdate

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatChannelFullUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelFullUpdate::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelFullUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelFullUpdate.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatChannelFullUpdate::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelFullUpdate.channel_id)
}

// repeated .proto.dota.CMsgDOTAChatMember members = 2;
inline int CMsgDOTAChatChannelFullUpdate::members_size() const {
  return members_.size();
}
inline void CMsgDOTAChatChannelFullUpdate::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >*
CMsgDOTAChatChannelFullUpdate::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return &members_;
}
inline const ::proto::dota::CMsgDOTAChatMember& CMsgDOTAChatChannelFullUpdate::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_.Get(index);
}
inline ::proto::dota::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >&
CMsgDOTAChatChannelFullUpdate::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_;
}

// -------------------------------------------------------------------

// CMsgDOTAOtherJoinedChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAOtherJoinedChatChannel::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAOtherJoinedChatChannel::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
#endif
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline ::std::string* CMsgDOTAOtherJoinedChatChannel::mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAOtherJoinedChatChannel::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
  if (!has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAOtherJoinedChatChannel::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}

// optional fixed64 steam_id = 3;
inline bool CMsgDOTAOtherJoinedChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.steam_id)
  return steam_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.steam_id)
}

// optional uint32 channel_user_id = 4;
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAOtherJoinedChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_user_id)
}

// optional uint32 status = 5;
inline bool CMsgDOTAOtherJoinedChatChannel::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTAOtherJoinedChatChannel::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.status)
  return status_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.status)
}

// -------------------------------------------------------------------

// CMsgDOTAOtherLeftChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_id)
}

// optional fixed64 steam_id = 2;
inline bool CMsgDOTAOtherLeftChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherLeftChatChannel.steam_id)
  return steam_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherLeftChatChannel.steam_id)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAOtherLeftChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_user_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelMemberUpdate_JoinedMember

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate_JoinedMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAChatChannelMemberUpdate_JoinedMember::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
#endif
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
inline ::std::string* CMsgDOTAChatChannelMemberUpdate_JoinedMember::mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatChannelMemberUpdate_JoinedMember::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  if (!has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatChannelMemberUpdate_JoinedMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatChannelMemberUpdate_JoinedMember::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.status)
  return status_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.status)
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelMemberUpdate

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatChannelMemberUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatChannelMemberUpdate::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.channel_id)
}

// repeated fixed64 left_steam_ids = 2;
inline int CMsgDOTAChatChannelMemberUpdate::left_steam_ids_size() const {
  return left_steam_ids_.size();
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_left_steam_ids() {
  left_steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate::left_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return left_steam_ids_.Get(index);
}
inline void CMsgDOTAChatChannelMemberUpdate::set_left_steam_ids(int index, ::google::protobuf::uint64 value) {
  left_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
}
inline void CMsgDOTAChatChannelMemberUpdate::add_left_steam_ids(::google::protobuf::uint64 value) {
  left_steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAChatChannelMemberUpdate::left_steam_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return left_steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAChatChannelMemberUpdate::mutable_left_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return &left_steam_ids_;
}

// repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
inline int CMsgDOTAChatChannelMemberUpdate::joined_members_size() const {
  return joined_members_.size();
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_joined_members() {
  joined_members_.Clear();
}
inline ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate::mutable_joined_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >*
CMsgDOTAChatChannelMemberUpdate::mutable_joined_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return &joined_members_;
}
inline const ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember& CMsgDOTAChatChannelMemberUpdate::joined_members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Get(index);
}
inline ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate::add_joined_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >&
CMsgDOTAChatChannelMemberUpdate::joined_members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_;
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelList

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse_ChatChannel

// optional string channel_name = 1;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
#endif
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline ::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}

// optional uint32 num_members = 2;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_num_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_num_members() {
  num_members_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTARequestChatChannelListResponse_ChatChannel::num_members() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
  return num_members_;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_num_members(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_members_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::dota::DOTAChatChannelType_t CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse

// repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
inline int CMsgDOTARequestChatChannelListResponse::channels_size() const {
  return channels_.size();
}
inline void CMsgDOTARequestChatChannelListResponse::clear_channels() {
  channels_.Clear();
}
inline ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
CMsgDOTARequestChatChannelListResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return &channels_;
}
inline const ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Get(index);
}
inline ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::add_channels() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
CMsgDOTARequestChatChannelListResponse::channels() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserList

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatGetUserList::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetUserList::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatGetUserList::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserList.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatGetUserList::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserList.channel_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserListResponse_Member

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatGetUserListResponse_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAChatGetUserListResponse_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
#endif
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
inline ::std::string* CMsgDOTAChatGetUserListResponse_Member::mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatGetUserListResponse_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
  if (!has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_channel_user_id() {
  channel_user_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatGetUserListResponse_Member::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_channel_user_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatGetUserListResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.status)
  return status_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_status(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.status)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserListResponse

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatGetUserListResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgDOTAChatGetUserListResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatGetUserListResponse::set_channel_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.channel_id)
}

// repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
inline int CMsgDOTAChatGetUserListResponse::members_size() const {
  return members_.size();
}
inline void CMsgDOTAChatGetUserListResponse::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >*
CMsgDOTAChatGetUserListResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return &members_;
}
inline const ::proto::dota::CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_.Get(index);
}
inline ::proto::dota::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >&
CMsgDOTAChatGetUserListResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetMemberCount

// optional string channel_name = 1;
inline bool CMsgDOTAChatGetMemberCount::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetMemberCount::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAChatGetMemberCount::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTAChatGetMemberCount::set_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatGetMemberCount::set_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
#endif
inline void CMsgDOTAChatGetMemberCount::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
inline void CMsgDOTAChatGetMemberCount::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
inline ::std::string* CMsgDOTAChatGetMemberCount::mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatGetMemberCount::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatGetMemberCount::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAChatGetMemberCount::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatGetMemberCount::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::DOTAChatChannelType_t CMsgDOTAChatGetMemberCount::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCount.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAChatGetMemberCount::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCount.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetMemberCountResponse

// optional string channel_name = 1;
inline bool CMsgDOTAChatGetMemberCountResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTAChatGetMemberCountResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
#endif
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
inline ::std::string* CMsgDOTAChatGetMemberCountResponse::mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatGetMemberCountResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatGetMemberCountResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAChatGetMemberCountResponse::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::DOTAChatChannelType_t CMsgDOTAChatGetMemberCountResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_type)
}

// optional uint32 member_count = 3;
inline bool CMsgDOTAChatGetMemberCountResponse::has_member_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_member_count() {
  member_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTAChatGetMemberCountResponse::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCountResponse.member_count)
  return member_count_;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_member_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCountResponse.member_count)
}

// -------------------------------------------------------------------

// CMsgDOTAChatRegionsEnabled_Region

// optional float min_latitude = 1;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_min_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_min_latitude() {
  min_latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::min_latitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_latitude)
  return min_latitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_min_latitude(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_latitude)
}

// optional float max_latitude = 2;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_max_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_max_latitude() {
  max_latitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::max_latitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_latitude)
  return max_latitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_max_latitude(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_latitude)
}

// optional float min_longitude = 3;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_min_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_min_longitude() {
  min_longitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::min_longitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_longitude)
  return min_longitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_min_longitude(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_longitude)
}

// optional float max_longitude = 4;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_max_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_max_longitude() {
  max_longitude_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::max_longitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_longitude)
  return max_longitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_max_longitude(float value) {
  _has_bits_[0] |= 0x00000008u;
  max_longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_longitude)
}

// -------------------------------------------------------------------

// CMsgDOTAChatRegionsEnabled

// optional bool enable_all_regions = 1;
inline bool CMsgDOTAChatRegionsEnabled::has_enable_all_regions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled::clear_enable_all_regions() {
  enable_all_regions_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTAChatRegionsEnabled::enable_all_regions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.enable_all_regions)
  return enable_all_regions_;
}
inline void CMsgDOTAChatRegionsEnabled::set_enable_all_regions(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_all_regions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.enable_all_regions)
}

// repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
inline int CMsgDOTAChatRegionsEnabled::enabled_regions_size() const {
  return enabled_regions_.size();
}
inline void CMsgDOTAChatRegionsEnabled::clear_enabled_regions() {
  enabled_regions_.Clear();
}
inline ::proto::dota::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::mutable_enabled_regions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >*
CMsgDOTAChatRegionsEnabled::mutable_enabled_regions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return &enabled_regions_;
}
inline const ::proto::dota::CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled::enabled_regions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Get(index);
}
inline ::proto::dota::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::add_enabled_regions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >&
CMsgDOTAChatRegionsEnabled::enabled_regions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CMsgGCToClientPrivateChatResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgGCToClientPrivateChatResponse_Result>() {
  return ::proto::dota::CMsgGCToClientPrivateChatResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result>() {
  return ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fchat_2eproto
